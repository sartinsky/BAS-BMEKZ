&НаСервере
Перем мБухИтоги;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2021";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	
	
	СтруктураДанныхБаланс	= Новый Структура;
	СтруктураДанныхСлужебныеДанные 		= Новый Структура;
	
	мСтруктураМногострочныхРазделов = Новый Структура;

	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "09/07/2021";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Баланс";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи                                       = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
КонецПроцедуры


// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	//Если ИмяРаздела = "Раздел1" 
	// ИЛИ ИмяРаздела = "Раздел2" 
	// ИЛИ ИмяРаздела = "Раздел3" 
	// ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	//ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	//Иначе
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	//КонецЕсли; 

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ЗаполнитьТаблицуСтрок();
			
		КонецЕсли;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтраниц Тогда
		Элементы.ДопСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = НСтр("ru='Баланс';uk='Баланс'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СлужебныеДанные";
	СтрокаУровня1.Представление            = НСтр("ru='Служебные данные';uk='Службові дані'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Баланс";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "СлужебныеДанные";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	Элементы.УдалитьСтраницу.Доступность    = Ложь;
	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	Элементы.ДобавитьСтроку.Доступность     = Ложь;
	Элементы.УдалитьСтроку.Доступность      = Ложь;
					
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Доступность   = Истина;
		Элементы.УдалитьСтраницу.Доступность    = Истина;
		Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Доступность    = Ложь;
			Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	//Если ИмяТекРаздела = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
						
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	// Многостраничные разделы.
	
	//Если НаимРаздела = "Раздел2" Тогда
	Если Ложь Тогда
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
			
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = Ложь;
			
		КонецЕсли;
					
	// Многострочные и обычные разделы.
	//
	ИначеЕсли НаимРаздела = "Баланс" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // СохранитьДанныеРаздела()

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	   ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	// Многостраничные разделы.
	//
	//Если ИмяТекРаздела = "Раздел2" Тогда 
	Если Ложь Тогда  
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		КонецЕсли;
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
	    
	    ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	    
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
	    КонецЦикла;
						
	// Многострочные и обычные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Баланс" 
		ИЛИ ИмяТекРаздела = "СлужебныеДанные"Тогда
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
		
		КонецЦикла;
		
	КонецЕсли;	
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);

	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	Если ИмяТекРаздела = "Баланс" Тогда
		 ПоказатьСтрокиОтчета();
	КонецЕсли;
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "Баланс" Тогда
		ЗаполнитьДатуПодписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()


&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипДанныхПоказателя = "О" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
			ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
			ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
			ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
			
			ФорматируемаяОбласть.Формат = "ЧО=0;" + "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияВСкобках(Форма);

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	ЗаполнитьПоказательНаСервере("ДатаБаланса",   "на " + Формат(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг';Л = uk_UA") + " р.",  Форма, "Баланс");	
	
	// Период в списке кодов в форме баланса
	ДатаНачалаПериодаОтчетаСлед = НачалоМесяца(ДобавитьМесяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,1));
	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаГод",    Формат(ДатаНачалаПериодаОтчетаСлед, "ДФ = 'гггг'"),  Форма, "Баланс");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаМесяц",  Формат(ДатаНачалаПериодаОтчетаСлед, "ДФ = 'ММ'"),  Форма, "Баланс");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаЧисло",  Формат(ДатаНачалаПериодаОтчетаСлед, "ДФ = 'дд'"),  Форма, "Баланс");	
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	Организация 				= Форма.СтруктураРеквизитовФормы.Организация;	
	

	
	
	ЗаполнитьПоказательНаСервере("ОргНазв", Организация.НаименованиеПолное, Форма, "Баланс");

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодКАТОТТГ");
	СписокПоказателей.Добавить("","КодКОАТУУ");
	СписокПоказателей.Добавить("","КодОПФГ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","Территория");
	СписокПоказателей.Добавить("","ОПФГ");
	СписокПоказателей.Добавить("","ВЭД");
	СписокПоказателей.Добавить("","ЮридическийАдрес");
	СписокПоказателей.Добавить("","Телефон");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");


	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	
	КодЕДРПОУ         = Сведения.КодПоЕДРПОУ;
	КодКОАТУУ         = Сведения.КодКАТОТТГ;
	КодКОАТУУ         = ?(ЗначениеЗаполнено(КодКОАТУУ),КодКОАТУУ,Сведения.КодКОАТУУ);
	КодОПФГ    		  = Сведения.КодОПФГ;
	КодКВЕД    		  = Сведения.КодКВЕД;
	Территория    	  = Сведения.Территория;
	ОПФГ    		  = Сведения.ОПФГ;
	ВЭД    			  = Сведения.ВЭД;
	ЮридическийАдрес  = Сведения.ЮридическийАдрес;
	Телефон  	      = Сведения.Телефон;	
	ФИОДиректора      = СведенияДатаПодписи.ФИОРук;
	ФИОГлавБуха       = СведенияДатаПодписи.ФИОБух;
	НалоговаяИнспекция    = Сведения.НалоговаяИнспекция;
	
	ЗаполнитьПоказательНаСервере("ОргБухгалтер", ФИОГлавБуха, Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("ОргДиректор", ФИОДиректора, Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("ОргКодЕДРПОУ", КодЕДРПОУ, Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("ОргКодКОАТУУ", КодКОАТУУ, Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("ОргКодОПФГ", КодОПФГ, Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("ОргКодКВЕД", КодКВЕД, Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("ОргТерритория", Территория, Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("ОргОПФГ", ОПФГ, Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("ОргВЭД", ВЭД, Форма, "Баланс");
	
	ОргПочтАдрес = ЮридическийАдрес + ", " + Телефон;
	
	ЗаполнитьПоказательНаСервере("ОргПочтАдрес", ОргПочтАдрес, Форма, "Баланс");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Если РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК"  Тогда
			ТаблЧисленностиССЧ = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(Организация, Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета); 
			ЗаполнитьПоказательНаСервере("ССЧ", ТаблЧисленностиССЧ.ЧисленностьРаботников, Форма, "Баланс");
			// ИНАГРО ++	
		ИначеЕсли РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП"  Тогда
			ТаблЧисленностиССЧ = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛ", Организация); 
			//ТаблЧисленностиССЧ = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(Организация, Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета); 
			ЗаполнитьПоказательНаСервере("ССЧ", ТаблЧисленностиССЧ[0].Средняя, Форма, "Баланс");
			// ИНАГРО --
		Иначе	
			ПараметрыСредняяЧисленность = КадровыйУчет.СтруктураПераметровСредняяЧисленность();
			ПараметрыСредняяЧисленность.Вставить("ВидПериода", "КВАРТАЛСНАЧАЛАГОДА") ;
			ПараметрыСредняяЧисленность.Вставить("НачалоПериода", Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
			ПараметрыСредняяЧисленность.Вставить("КонецПериода", Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			ПараметрыСредняяЧисленность.Вставить("ВидСредней", "ССЧ") ;
			
			ТаблЧисленностиССЧ = КадровыйУчет.ПолучитьСреднююЧисленность(Организация, ПараметрыСредняяЧисленность); 
			ЗаполнитьПоказательНаСервере("ССЧ", ТаблЧисленностиССЧ[0].Средняя, Форма, "Баланс");
		КонецЕсли;
	КонецЕсли;	
	ЗаполнитьПоказательНаСервере("ЗаполненоПоПСБУ", "V", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("ЗаполненоПоМСФО", "", Форма, "Баланс");
	
	// выгрузка в XML
	Если ЗначениеЗаполнено(НалоговаяИнспекция) Тогда
		ЗаполнитьПоказательНаСервере("C_RAJ", НалоговаяИнспекция.КодАдмРайона, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_REG", НалоговаяИнспекция.Родитель.Код, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI_ORIG", НалоговаяИнспекция.Код, 		Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI", НалоговаяИнспекция.Код, 			Форма, "СлужебныеДанные");
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("TIN",  КодЕДРПОУ, Форма, "СлужебныеДанные");
	
	ЗаполнитьПоказательНаСервере("C_DOC_TYPE", 0, Форма, "СлужебныеДанные"); //номер исправленного доекумента. Для первого подающегося документа  = 0
	ЗаполнитьПоказательНаСервере("C_DOC_CNT",  1, Форма, "СлужебныеДанные");;
	ЗаполнитьПоказательНаСервере("C_DOC_STAN", 1, Форма, "СлужебныеДанные");	
	
	НомерКвартала = Месяц(КонецКвартала(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета))/3;
	
	ЗаполнитьПоказательНаСервере("PERIOD_YEAR",   Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),  Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("PERIOD_MONTH",  НомерКвартала * 3,  Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("PERIOD_TYPE",   НомерКвартала + 1,  Форма, "СлужебныеДанные");
	
	Форма.Модифицированность = Истина;

КонецПроцедуры



&НаКлиентеНаСервереБезКонтекста
Функция ОставитьТолькоЦифры(Знач Текст);
	
	Сч = 1;
	Пока Сч <= СтрДлина(Текст) Цикл
	    Если Найти("01234567890", Сред(Текст, Сч, 1)) = 0 Тогда
			Текст = Лев(Текст, Сч-1) + Сред(Текст, Сч + 1);
		Иначе
			Сч = Сч + 1
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Текст;
	
КонецФункции




&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "О" 
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;


	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
    Перем ЕстьДуплекс;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	//ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	//ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ТаблицаСтрок") Тогда
		ТаблицаСтрок =  СписокСохранения.ТаблицаСтрок;
		Если ТипЗнч(ТаблицаСтрок) = Тип("ТаблицаЗначений") Тогда
			ЗначениеВРеквизитФормы(ТаблицаСтрок, "мТаблицаСтрок");
		Иначе
			ЗаполнитьТаблицуСтрок();
		КонецЕсли;
	Иначе	
		ЗаполнитьТаблицуСтрок();
	КонецЕсли;	
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			Если ПоказателиОтчета.Свойство(Префикс + Раздел.ИмяСтраницы) Тогда
			    ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "Баланс";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	СписокСохранения.Вставить("ТаблицаСтрок", ДанныеФормыВЗначение(мТаблицаСтрок, Тип("ТаблицаЗначений")));
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	#Если НаКлиенте Тогда
	//		Форма.ИзменитьЦветЯчеекНаКлиенте();
	//	#Иначе
	//		Форма.ИзменитьЦветЯчеекНаСервере();
	//	#КонецЕсли
	//КонецЕсли;
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

	//КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	//
	//Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
	//	
	//	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	Иначе	
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
	//	КонецЕсли;
	//
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
	//	
	//Иначе	
	//	
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
	//	
	//	Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
	//			
	//КонецЕсли;
		
КонецПроцедуры // ИзменитьЦветЯчеек()





// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	////Если (ИмяПоказателя = "Сумма30Раздел1")
	//// Или (ИмяПоказателя = "Сумма40Раздел1")
	//// Или (ИмяПоказателя = "Сумма50Раздел1")
	//// Или (ИмяПоказателя = "Сумма60Раздел1") Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСведенияОбОрганизации(Форма);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		ЗаполнитьЗначенияВСкобках(Форма);
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	

	// Нематериальные активы
	П10003 =  ПолучитьПоказательНаСервере("П10013", Форма, "Баланс") 
	      	- ПолучитьПоказательНаСервере("П10023", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П10003", П10003, Форма, "Баланс");
															
															
	П10004 = ПолучитьПоказательНаСервере("П10014", Форма, "Баланс") 
		   - ПолучитьПоказательНаСервере("П10024", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П10004", П10004, Форма, "Баланс");
								   
	// основные средства							   
	П10103 = ПолучитьПоказательНаСервере("П10113", Форма, "Баланс") 
	       - ПолучитьПоказательНаСервере("П10123", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П10103", П10103, Форма, "Баланс"); 																
															
	П10104 = ПолучитьПоказательНаСервере("П10114", Форма, "Баланс") 
	       - ПолучитьПоказательНаСервере("П10124", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П10104", П10104, Форма, "Баланс"); 																
															
								   
	// всего по разделу I							   
	П10953 = ПолучитьПоказательНаСервере("П10003", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10053", Форма, "Баланс") 
									+ ПолучитьПоказательНаСервере("П10103", Форма, "Баланс") 
									+ ПолучитьПоказательНаСервере("П10153", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10203", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10303", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10353", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10403", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10453", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10503", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10603", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10653", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10903", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П10953", П10953, Форма, "Баланс"); 																
								   
	П10954 = ПолучитьПоказательНаСервере("П10004", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10054", Форма, "Баланс") 
									+ ПолучитьПоказательНаСервере("П10104", Форма, "Баланс") 
									+ ПолучитьПоказательНаСервере("П10154", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10204", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10304", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10354", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10404", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10454", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10504", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10604", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10654", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П10904", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П10954", П10954, Форма, "Баланс");
									
	// всего по разделу II								
	П11953 = ПолучитьПоказательНаСервере("П11003", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11103", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11153", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11203", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11253", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11303", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11353", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11403", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11453", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11553", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11603", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11653", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11703", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11803", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11903", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П11953", П11953, Форма, "Баланс");
									
	П11954 = ПолучитьПоказательНаСервере("П11004", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11104", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11154", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11204", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11254", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11304", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11354", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11404", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11454", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11554", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11604", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11654", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11704", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11804", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11904", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П11954", П11954, Форма, "Баланс");
									
	П13003 = ПолучитьПоказательНаСервере("П10953", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11953", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П12003", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П13003", П13003, Форма, "Баланс");

	П13004 = ПолучитьПоказательНаСервере("П10954", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П11954", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П12004", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П13004", П13004, Форма, "Баланс");
									
									
									
	///////////////////////////////
	// пассив
	
	П14953 = ПолучитьПоказательНаСервере("П14003", Форма, "Баланс")
	                                + ПолучитьПоказательНаСервере("П14013", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П14053", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П14103", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П14153", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П14203", Форма, "Баланс")
									- ПолучитьПоказательНаСервере("П14253", Форма, "Баланс")
									- ПолучитьПоказательНаСервере("П14303", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П14353", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П14953", П14953, Форма, "Баланс");
									
    П14954 =  ПолучитьПоказательНаСервере("П14004", Форма, "Баланс")
   									+ ПолучитьПоказательНаСервере("П14014", Форма, "Баланс")				
									+ ПолучитьПоказательНаСервере("П14054", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П14104", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П14154", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П14204", Форма, "Баланс")
									- ПолучитьПоказательНаСервере("П14254", Форма, "Баланс")
									- ПолучитьПоказательНаСервере("П14304", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П14354", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П14954", П14954, Форма, "Баланс");
									
									
	П15953 = ПолучитьПоказательНаСервере("П15003", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15053", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15103", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15153", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15203", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15253", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15303", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15353", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15403", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15453", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П15953", П15953, Форма, "Баланс");
									
									
	П15954 = ПолучитьПоказательНаСервере("П15004", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15054", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15104", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15154", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15204", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15254", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15304", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15354", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15404", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15454", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П15954", П15954, Форма, "Баланс");
									
									
	П16953 = ПолучитьПоказательНаСервере("П16003", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16053", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16103", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16153", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16203", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16253", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16303", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16353", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16403", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16453", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16503", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16603", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16653", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16703", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16903", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П16953", П16953, Форма, "Баланс");
									
									
	П16954 = ПолучитьПоказательНаСервере("П16004", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16054", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16104", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16154", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16204", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16254", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16304", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16354", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16404", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16454", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16504", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16604", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16654", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16704", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16904", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П16954", П16954, Форма, "Баланс");
									
									
	П19003 = ПолучитьПоказательНаСервере("П14953", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15953", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16953", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П17003", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П18003", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П19003", П19003, Форма, "Баланс");
									
									
	П19004 = ПолучитьПоказательНаСервере("П14954", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П15954", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П16954", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П17004", Форма, "Баланс")
									+ ПолучитьПоказательНаСервере("П18004", Форма, "Баланс");
	ЗаполнитьПоказательНаСервере("П19004", П19004, Форма, "Баланс");
									
									
	Если НЕ Форма.СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда	
	
	   Если ПолучитьПоказательНаСервере("П13003", Форма, "Баланс") <> ПолучитьПоказательНаСервере("П19003", Форма, "Баланс") Тогда
		   Сообщить (НСтр("ru='             $$$ ВНИМАНИЕ $$$';uk='             $$$ УВАГА $$$'"),);
		   Сообщить (НСтр("ru='Не совпадают суммы актива и пассива(на начало периода), проверьте оборотно-сальдовую ведомость';uk='Не збігаються суми активу і пасиву(на початок періоду), перевірте оборотно-сальдову відомість'"),);
		   Сообщить (НСтр("ru='АКТИВ  = ';uk='АКТИВ  = '")  + ПолучитьПоказательНаСервере("П13003", Форма, "Баланс"));
		   Сообщить (НСтр("ru='ПАССИВ = ';uk='ПАСИВ = '") + ПолучитьПоказательНаСервере("П19003", Форма, "Баланс"));
	   КонецЕсли;
	   
	   Если ПолучитьПоказательНаСервере("П13004", Форма, "Баланс") <> ПолучитьПоказательНаСервере("П19004", Форма, "Баланс") Тогда
		   Сообщить (НСтр("ru='             $$$ ВНИМАНИЕ $$$';uk='             $$$ УВАГА $$$'"),);
		   Сообщить (НСтр("ru='Не совпадают суммы актива и пассива(на конец периода), проверьте оборотно-сальдовую ведомость';uk='Не збігаються суми активу і пасиву(на кінець періоду), перевірте оборотно-сальдову відомість'"),);
		   Сообщить (НСтр("ru='АКТИВ  = ';uk='АКТИВ  = '")  + ПолучитьПоказательНаСервере("П13004", Форма, "Баланс"));
		   Сообщить (НСтр("ru='ПАССИВ = ';uk='ПАСИВ = '") + ПолучитьПоказательНаСервере("П19004", Форма, "Баланс"));
	   КонецЕсли;
	
	КонецЕсли;		
	
КонецПроцедуры // Расчет()


&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект), НСтр("ru='Удалить текущую страницу?';uk='Видалити поточну сторінку?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
    
    КопияТекущиеДанные = ТекущиеДанные;
    
    ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
    
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
    Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
        ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
        СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
    КонецЕсли;
    
    УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
    
    ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
    
    НомерСтраницы = 1;
    
    Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
        
        СтраницаРаздела.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
        СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
        
        НомерСтраницы = НомерСтраницы + 1;
        
    КонецЦикла;
    
    Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
        Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
        		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ВставитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		ВставитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
		
КонецПроцедуры // ДобавитьСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1(Внимание! Данная операция необратима)';uk='Вилучити вибраний рядок?%1(Увага! Дана операція необоротна)'"), Символы.ПС), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    #Если ВебКлиент Тогда
        УдалитьДополнительнуюСтрокуНаСервере();
    #Иначе
        УдалитьДополнительнуюСтрокуНаКлиенте();
    #КонецЕсли

КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаКлиенте()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
			
		ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ТекТабличноеПоле = Форма.ТабличныйДокумент;

		ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
		#Если НаКлиенте Тогда
			ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		#Иначе
			ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		#КонецЕсли

		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.';uk='Не обрано багаторядковий розділ, у який необхідно додати рядок.'");

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	ИмяПервойКолонки = КолонкиГруппы[0];
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойКолонки + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") > 0 Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;

	Если СпециальноеДобавление Тогда
		
	Иначе
				
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого ИмяКолонки ИЗ КолонкиГруппы Цикл
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрок + НомерПервойСтроки;
					Иначе
						ОбластьЯчейки.Текст = КолСтрок + НомерПервойСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		
		//ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
		ИмяТекущейОбласти = ИмяПервойКолонки + "_" + КолСтрокСтр1;

		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Форма.Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

// Удаляет строку многострочного раздела формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	#Если НаКлиенте Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
   	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	ИмяПервойКолонки = КолонкиГруппы[0];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		
		//ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для Каждого КолонкаИмя ИЗ КолонкиГруппы Цикл
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								НовыйПорядковыйНомер = НСтр - 1 + НомерПервойСтроки - 1;
								
								Если ОбластьСдвинутойЯчейки.СодержитЗначение = Истина Тогда
									ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер;
								Иначе
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 + НомерПервойСтроки - 1;
			
			Для Каждого КолонкаТаблицыИмя ИЗ КолонкиГруппы Цикл
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	//ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	ИмяТекущейОбласти = ИмяПервойКолонки + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
		
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли

КонецПроцедуры // УдалитьДополнительнуюСтроку()
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	
	Если Лев(ИмяЯчейки, 1) = "_" Тогда
		
		ИмяЯчейкиБезСкобок = Сред(ИмяЯчейки, 2);
		ТекЗначениеБезСкобок = ТабличныйДокумент.Области[ИмяЯчейкиБезСкобок].Значение;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводЧислаВСкобкахЗавершение",ЭтаФорма, Новый Структура("ИмяЯчейки", ИмяЯчейкиБезСкобок));
		ПоказатьВводЧисла(ОписаниеОповещения, ТекЗначениеБезСкобок, НСтр("ru='Значение в скобках';uk='Значення в дужках'"), 15, 2);
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли  ИмяЯчейки = "ЗаполненоПоПСБУ"
		И НаименованиеТекЛиста = "Баланс" Тогда
		
		ТабличныйДокумент.Области.ЗаполненоПоПСБУ.Значение	  = "V";
		ТабличныйДокумент.Области.ЗаполненоПоМСФО.Значение  = "";
		ЗаполнитьПоказательНаСервере("ЗаполненоПоПСБУ", "V", ЭтаФорма, "Баланс");
		ЗаполнитьПоказательНаСервере("ЗаполненоПоМСФО", "", ЭтаФорма, "Баланс");
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли ИмяЯчейки = "ЗаполненоПоМСФО"
		И НаименованиеТекЛиста = "Баланс" Тогда
		
		ТабличныйДокумент.Области.ЗаполненоПоМСФО.Значение	  = "V";
		ТабличныйДокумент.Области.ЗаполненоПоПСБУ.Значение  = "";
		ЗаполнитьПоказательНаСервере("ЗаполненоПоМСФО", "V", ЭтаФорма, "Баланс");
		ЗаполнитьПоказательНаСервере("ЗаполненоПоПСБУ", "", ЭтаФорма, "Баланс");
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;		
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если    ИмяРаздела = "Баланс" Тогда
		
		ИмяОбласти = Область.Имя;
		
		Если Сред(Область.Имя,1,1)<> "_" Тогда 
			РасчетНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	Модифицированность = Истина;
		
КонецПроцедуры // ДатаПодписиПриИзменении()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	СпозиционироватьсяНаОсновнуюСтраницу();
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхБаланс.Очистить();
	
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	ЗаполнитьЗначенияВСкобках(ЭтаФорма);
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции // НайтиСвойстваПоказателя()

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ВвестиПоказатель()

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
КонецПроцедуры

// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПоказатьБланк()

// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПечататьСразу()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ПечатьНаСервере()
//
&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()
	
// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаСервере()

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура СпозиционироватьсяНаОсновнуюСтраницу()

	Элементы.РазделыОтчета.ТекущаяСтрока = РазделыОтчета.ПолучитьЭлементы()[0].ПолучитьИдентификатор();		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)

	СпозиционироватьсяНаОсновнуюСтраницу();
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		ПоказатьПредупреждение(,НСтр("ru='
|Дополнительные строки, в которых отсуствует информация, были скрыты! Для настройки дополнительных строк нажмите на кнопку ""Настроить отображение дополнительных строк"".
|';uk='
|Додаткові рядки, в яких відсутній інформація, були приховані! Для налаштування додаткових рядків натисніть на кнопку ""Налаштувати відображення додаткових рядків"".
|'"));
					   
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С) Экспорт
	
	ОчиститьНаСервере();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)
	

    ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;
	
	Если ТаблицаРасшифровки = Неопределено Тогда
		ТаблицаРасшифровки = Новый ТаблицаЗначений;
		ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого");
		ТаблицаРасшифровки.Колонки.Добавить("Сумма");
		ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела");
		ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	КонецЕсли;
	
	ТаблицаРасшифровки.Очистить();
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

	
	// Инициализация
   ПС = ПланыСчетов["Хозрасчетный"];
   Счет10      = ПС.ОсновныеСредства;
   Попытка
	   Счет10_0    = ПС.ИнвестиционнаяНедвижимость;
   Исключение КонецПопытки;
   Счет11      = ПС.ДругиеНеоборотныеМатериальныеАктивыГруппа;
   Счет12      = ПС.НематериальныеАктивы;
   Счет13      = ПС.ИзносАмортизацияНеоборотныхАктивов;             
   Счет13_3    = ПС.НакопленнаяАмортизацияНематериальныхАктивов;
   Счет13_4    = ПС.НакопленнаяАмортизацияДолгосрочныхБиологическихАктивов;
   Попытка
	  Счет13_5    = ПС.ИзносИнвестиционнйНедвижимости;
   Исключение КонецПопытки;
   Счет14      = ПС.ДолгосрочныеФинансовыеИнвестиции;
   Счет14_1    = ПС.ИнвестицииСвязаннымСторонамПоМетодуУчетаУчастияВКапитале;
   Счет15      = ПС.КапитальныеИнвестиции;
   Счет16      = ПС.ДолгосрочныеБиологическиеАктивы;
   Счет17      = ПС.ОтсроченныеНалоговыеАктивы;
   Счет18      = ПС.ДолгосрочнаяДебиторскаяЗадолженностьИПрочиеНеоборотныеАктивы;
   Счет18_4    = ПС.ПрочиеНеоборотныеАктивы;
   Счет19      = ПС.Гудвил;
   Счет20      = ПС.ПроизводственныеЗапасы;
   Счет21      = ПС.ТекущиеБиологическиеАктивы;
   Счет22      = ПС.МалоценныеИБыстроизнашивающиесяПредметы;
   Счет23      = ПС.Производство;
   Счет24      = ПС.БракВПроизводстве;
   Счет25      = ПС.Полуфабрикаты;
   Счет26      = ПС.ГотоваяПродукция;
   Счет27      = ПС.ПродукцияСельскохозяйственногоПроизводства;
   Счет28      = ПС.Товары;
   Счет28_5    = ПС.ТорговаяНаценка;
   Попытка 
   	 Счет28_6    = ПС.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи;
   Исключение КонецПопытки;
   Счет30      = ПС.Касса;
   Счет31      = ПС.СчетаВБанках;
   Счет33      = ПС.ПрочиеДенежныеСредства;
   Счет33_1    = ПС.ДенежныеДокументыВНациональнойВалюте;
   Счет33_2    = ПС.ДенежныеДокументыВИностраннойВалюте;
   Счет34      = ПС.КраткосрочныеВекселяПолученные;
   Счет35      = ПС.ТекущиеФинансовыеИнвестиции;
   Счет35_1    = ПС.ЭквивалентыДенежныхСредств;
   Счет35_2    = ПС.ПрочиеТекущиеФинансовыеИнвестиции;
   Счет36      = ПС.РасчетыСПокупателямиИЗаказчиками;
   Счет37      = ПС.РасчетыСРазнымиДебиторами;
   Счет37_1    = ПС.РасчетыПоВыданнымАвансам;
   Счет37_3    = ПС.РасчетыПоНачисленнымДоходам;
   Счет38_1    = ПС.ПоЗадолженностиЗаТоварыУслугиРаботы;
   Счет38_2    = ПС.ПоЗадолженностиЗаРасчетыСБюджетом;
   Счет38_3    = ПС.ПоЗадолженностиЗаРасчетыПоВыданнымАвансам;
   Счет38_4    = ПС.ПоЗадолженностиЗаРасчетыПоНачисленнымДоходам;
   Счет38_5    = ПС.ПоЗадолженностиЗаВнутренниеРасчеты;
   Счет38_6    = ПС.ПоПрочейДебиторскойЗадолженности;
   Счет39      = ПС.ЗатратыБудущихПериодов;
   //Счет40      = ПС.УставныйКапитал;
   //Счет41      = ПС.ПаевойКапитал;
   Попытка
	  Счет40   = ПС.ЗарегистрированныйПаевойКапитал;
	  Счет40_4 = ПС.ВзносыВНезарегистрированныйУставнойКапитал;
	  Счет41   = ПС.ДооценкаАктивов;
   Исключение 
	  Счет40    = ПС.ПустаяСсылка(); 
	  Счет40_4  = ПС.ПустаяСсылка();
	  Счет41    = ПС.ПустаяСсылка();
   КонецПопытки;	
   Счет42      = ПС.ДополнительныйКапитал;
   Счет42_1    = ПС.ЭмиссионныйДоход;
   //Счет42_3    = ПС.ДооценкаАктивов;
   Попытка
	  Счет42_3    = ПС.НакопленныеКурсовыеРазницыВКапитале;
   Исключение 
	  Счет42_3    = ПС.ПустаяСсылка(); 
   КонецПопытки;	
   Счет43      = ПС.РезервныйКапитал;
   Счет44      = ПС.НераспределеннаяПрибыльНепокрытыеУбытки;
   Счет45      = ПС.ИзъятыйКапитал;
   Счет46      = ПС.НеоплаченныйКапитал;
   Счет47_1    = ПС.ОбеспечениеВыплатОтпусков;
   Счет47_2    = ПС.ДополнительноеПенсионноеОбеспечение;
   Счет47_3    = ПС.ОбеспечениеГарантийныхОбязательств;
   Счет47_4    = ПС.ОбеспечениеПрочихЗатратИПлатежей;
   Счет47_5    = ПС.ОбеспечениеИнвестиционнаяДеятельность;
   Счет47_6    = ПС.ОбеспечениеФинансоваяДеятельность;
   Попытка
   	Счет47_7    = ПС.ОбеспечениеМатериальногоПоощерения;
   Исключение КонецПопытки;		
   Счет47_8    = ПС.ОбеспечениеВосстановленияЗемельныхУчастков;
   Счет48      = ПС.ЦелевоеФинансированиеИЦелевыеПоступления;
   Счет48_3    = ПС.ГуманитарнаяПомощь;
   Счет49      = ПС.СтраховыеРезервы;
   Попытка
	   Счет49_1    = ПС.ТехническиеРезервы;
	   Счет49_2    = ПС.РезервыПоСтрахованиюЖизни;
	   Счет49_3    = ПС.ДоляПерестраховщиковВТехническихРезервах;
	   Счет49_4    = ПС.ДоляПерестраховщиковВРезервахПоСтрахованиюЖизни;
   Исключение  КонецПопытки;
   Счет50      = ПС.ДолгосрочныеЗаймы;
   Счет50_1    = ПС.ДолгосрочныеКредитыБанковВНациональнойВалюте;
   Счет50_2    = ПС.ДолгосрочныеКредитыБанковВИностраннойВалюте;
   Счет50_3    = ПС.ОтсроченныеДолгосрочныеКредитыБанковВНациональнойВалюте;
   Счет50_4    = ПС.ОтсроченныеДолгосрочныеКредитыБанковВИностраннойВалюте;
   Счет50_5    = ПС.ПрочиеДолгосрочныеЗаймыВНациональнойВалюте;
   Счет50_6    = ПС.ПрочиеДолгосрочныеЗаймыВИностраннойВалюте;
   Счет51      = ПС.ДолгосрочныеВекселяВыданные;
   Счет52      = ПС.ДолгосрочныеОбязательстваПоОблигациям;
   Счет53      = ПС.ДолгосрочныеОбязательстваПоАренде;
   Счет54      = ПС.ОтсроченныеНалоговыеОбязательства;
   Счет55      = ПС.ПрочиеДолгосрочныеОбязательства;
   Счет60      = ПС.КраткосрочныеЗаймы;
   Счет60_5    = ПС.ПросроченныеЗаймыВНациональнойВалюте;
   Счет60_6    = ПС.ПросроченныеЗаймыВИностраннойВалюте;
   Счет61      = ПС.ТекущаяЗадолженностьПоДолгосрочнымОбязательствам;
   Счет62      = ПС.КраткосрочныеВекселяВыданные;
   Счет63      = ПС.РасчетыСПоставщикамиИПодрядчиками;
   Счет64_1    = ПС.РасчетыПоНалогам;
   Счет64_13   = ПС.РасчетыПоНалогуНаПрибыль;
   Счет64_15   = ПС.РасчетыПоДругимНалогам;
   Счет64_2    = ПС.РасчетыПоОбязательнымПлатежам;
   Счет64_3    = ПС.НалоговыеОбязательстваВсего;
   Счет64_4    = ПС.НалоговыйКредитВсего;
   Если НЕ ПС.НайтиПоКоду(645) = ПС.ПустаяССылка() Тогда
	   Счет64_5 = ПС.НайтиПоКоду(645);
   Иначе
	   Счет64_5 = Неопределено;
   КонецЕсли;
   Счет65      = ПС.РасчетыПоСтрахованию;
   Счет66      = ПС.РасчетыПоОплатеТруда;
   Счет67      = ПС.РасчетыСУчастниками;
   Счет68      = ПС.РасчетыПоДругимОперациям;
   Попытка
	   Счет68_0    = ПС.РасчетыПоНеоборотнымАктивамИГруппамВыбытияУдерживаемымиДляПродажи;
   Исключение КонецПопытки;
   Счет68_1    = ПС.РасчетыПоАвансамПолученным;
   Счет68_2    = ПС.ВнутренниеРасчеты;
   Счет68_3    = ПС.ВнутрихозяйственныеРасчеты;
   Счет68_4    = ПС.РасчетыПоНачисленнымПроцентам;
   Счет69      = ПС.ДоходыБудущихПериодов;
   Счет79      = ПС.ФинансовыеРезультаты;

	// Бухгалтерский итоги по счетам
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
	        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
	        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт";
	// Бухгалтерские итоги по счетам, без аналитики
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, , , , , , "Организация", СтруктураРеквизитовФормы.Организация);
	
	// Бухгалтерские итоги по аналитике контрагенты и договоры, документ расчетов
	мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
	ИтогиРС = "НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт, КонечныйРазвернутыйОстатокДт, КонечныйРазвернутыйОстатокКт";
    МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
 	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет, Субконто1,Субконто2,Субконто3", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, , "36,63,68,64,65,37", , , , "Организация", СтруктураРеквизитовФормы.Организация);
	
    //строка 1000
	//   авторасчет
	
	//строка 1001 нематериальные активы, первоначальная стоимость
	П10013 = СНД(Счет12);
	Попытка
		УстановитьЗначениеПоказателя("П10013", П10013);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10013", "Показник ""Нематеріальні активи:первiсна вартiсть"", графа ""На початок звітного періоду""","+","!СНД", П10013,Счет12);
	Исключение
	КонецПопытки;
	
	П10014 = СКД(Счет12);
	
	Попытка
		УстановитьЗначениеПоказателя("П10014", П10014);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10014", "Показник ""Нематеріальні активи:первiсна вартiсть"", графа ""На кінець звітного періоду""","+","!СКД", П10014,Счет12);
	Исключение
	КонецПопытки;

	//строка 1002 нематериальные активы: накопленная амортизация
	П10023 = СНК(Счет13_3);
	
	Попытка
		УстановитьЗначениеПоказателя("П10023",  П10023);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10023", "Показник ""Нематеріальні активи: накопичена амортизація"", графа ""На початок звітного періоду""",	"+", "!СНК",П10023, Счет13_3);
	Исключение
	КонецПопытки;

	
	П10024 = СКК(Счет13_3);
	
	Попытка
		УстановитьЗначениеПоказателя("П10024",  П10024);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10024", "Показник ""Нематеріальні активи: накопичена амортизація"", графа ""На кінець звітного періоду""",	"+","!СКК",П10024, Счет13_3);
	Исключение
	КонецПопытки;
	
	// строка 1005 незавершенное строительство
	П10053 = СНД(Счет15);
	
	Попытка
		УстановитьЗначениеПоказателя("П10053", П10053);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10053", "Показник ""Незавершені капітальні інвестиції"", графа ""На початок звітного періоду""",	"+", "!СНД",П10053, Счет15);
	Исключение
	КонецПопытки;

	П10054 = СКД(Счет15);
	
	Попытка
		УстановитьЗначениеПоказателя("П10054", П10054);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10054", "Показник ""Незавершені капітальні інвестиції"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10054, Счет15);
	Исключение
	КонецПопытки;

	// строка 1010
	//  авторасчет
	
	// строка 1011 основные средства:начальная стоимость 
	П10113_10 = СНД(Счет10);
	П10113_11 = СНД(Счет11);
	Попытка
		П10113_100 = СНД(Счет10_0);
	Исключение
		П10113_100 = 0;
	КонецПопытки;
	
	П10113 = П10113_10 + П10113_11 - П10113_100;
	Попытка
		УстановитьЗначениеПоказателя("П10113", П10113);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10113", "Показник ""Основні засоби:первiсна вартiсть"", графа ""На початок звітного періоду""",	"+", "!СНД",П10113_10,Счет10);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10113", "",	"+", "!СНД",П10113_11,Счет11);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10113", "",	"-", "!СНД",П10113_100,Счет10_0);
	Исключение
	КонецПопытки;

	П10114_10 = СКД(Счет10);
	П10114_11 = СКД(Счет11);
	Попытка
		П10114_100 = СКД(Счет10_0);
	Исключение
		П10114_100 = 0;
	КонецПопытки;
	
	П10114 = П10114_10 + П10114_11 - П10114_100;
	
	Попытка
		УстановитьЗначениеПоказателя("П10114", П10114);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10114", "Показник ""Основні засоби:первiсна вартiсть"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10114_10,Счет10);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10114", "",	"+", "!СКД",П10114_11,Счет11);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10114", "",	"-", "!СКД",П10114_100,Счет10_0);
	Исключение
	КонецПопытки;
	
	//строка 032 основные средства: износ
	П10123_13  = СНК(Счет13);
	П10123_133 = СНК(Счет13_3);
	П10123_134 = СНК(Счет13_4);
	П10123_135 = СНК(Счет13_5);
	
	П10123 = П10123_13 - П10123_133 - П10123_134 - П10123_135;
	УстановитьЗначениеПоказателя("П10123",  П10123);
	
	Попытка
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"_П10123", "Показник ""Основні засоби: знос"", графа ""На початок звітного періоду""",	"+", "!СНК", П10123_13,Счет13);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"_П10123", "",	"-", "!СНК",П10123_133,Счет13_3);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"_П10123", "",	"-", "!СНК",П10123_134,Счет13_4);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"_П10123", "",	"-", "!СНК",П10123_135,Счет13_5);
	Исключение
	КонецПопытки;

	П10124_13 = СКК(Счет13);
	П10124_133 = СКК(Счет13_3);
	П10124_134 = СКК(Счет13_4);
	П10124_135 = СКК(Счет13_5);
	
	П10124 = П10124_13 - П10124_133 - П10124_134 - П10124_135;
	УстановитьЗначениеПоказателя("П10124",  П10124);
	
	_ДобавитьСтрокуРасшифровки(ЭтаФорма,"_П10124", "Показник ""Основні засоби: знос"", графа ""На кінець звітного періоду""",	"+", "!СКК",П10124_13,Счет13);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма,"_П10124", "",	"-", "!СКК",П10124_133, Счет13_3);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма,"_П10124", "",	"-", "!СКК",П10124_134, Счет13_4);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма,"_П10124", "",	"-", "!СКК",П10124_135, Счет13_5);
	
	// строка 1015
	//   т.к. ее расшифровка - доп. строки, то данная строка не авторасчитываемая, равна разнице строк 1016  1017
	//   будет заполнена ниже
	
	// строка 1016 начальная стоимость инвестиционной недвижимости 
	Попытка
		П10163 = СНД(Счет10_0);
    Исключение КонецПопытки;
	
	Попытка
		УстановитьЗначениеПоказателя("П10163", П10163);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10163", "Показник ""Первісна вартість інвестиційної нерухомості"", графа ""На початок звітного періоду""",	"+", "!СНД",П10163,Счет10_0);
	Исключение КонецПопытки;
	
	Попытка
		П10164 = СКД(Счет10_0);
	Исключение КонецПопытки;
	
	Попытка
		УстановитьЗначениеПоказателя("П10164", П10164);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10164", "Показник ""Первісна вартість інвестиційної нерухомості"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10164,Счет10_0);
	Исключение КонецПопытки;

	// строка 1017 износ инвестиционной недвижимости 
	Попытка
		П10173 = СНК(Счет13_5);
		УстановитьЗначениеПоказателя("П10173", П10173);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10173", "Показник ""Знос інвестиційної нерухомості"", графа ""На початок звітного періоду""",	"+", "!СНК",П10173, Счет13_5);
	Исключение КонецПопытки;
	
	Попытка
		П10174 = СКК(Счет13_5);
		УстановитьЗначениеПоказателя("П10174", П10174);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10174", "Показник ""Знос інвестиційної нерухомості"", графа ""На кінець звітного періоду""",	"+","!СКК",П10174, Счет13_5);
	Исключение КонецПопытки;
	
	// строка 1015
    Попытка
		УстановитьЗначениеПоказателя("П10153", П10163 - П10173);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10153", "Показник ""Інвестиційна нерухомість"", графа ""На початок звітного періоду""",	"+", "!СНД",П10163, Счет10_0);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10153","", "-", "!СНК",П10173, Счет13_5);
		
		УстановитьЗначениеПоказателя("П10154", П10164 - П10174);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10154", "Показник ""Інвестиційна нерухомість"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10164, Счет10_0);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10154", "", "-", "!СКК",П10174, Счет13_5);
    Исключение КонецПопытки;
	
	// строка 1020
	//   т.к. ее расшифровка - доп. строки, то данная строка не авторасчитываемая, равна разнице строк 1021  1022
	//   будет заполнена ниже
	
	// строка 1021
	П10213 = СНД(Счет16);
	Попытка
		УстановитьЗначениеПоказателя("П10213", П10213);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10213", "Показник ""Довгострокові біологічні активи:первiсна вартiсть"", графа ""На початок звітного періоду""","+","!СНД", П10213,Счет16);
	Исключение
	КонецПопытки;
	
	П10214 = СКД(Счет16);
	Попытка
		УстановитьЗначениеПоказателя("П10214", П10214);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10214", "Показник ""Довгострокові біологічні активи:первiсна вартiсть"", графа ""На кінець звітного періоду""","+","!СКД", П10214,Счет16);
	Исключение
	КонецПопытки;
	
	//строка 1022
	П10223 = СНК(Счет13_4);
	Попытка
		УстановитьЗначениеПоказателя("П10223", П10223);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10223", "Показник ""Довгострокові біологічні активи:знос"", графа ""На початок звітного періоду""",	"+", "!СНК",П10223, Счет13_4);
	Исключение
	КонецПопытки;
	
	П10224 = СКК(Счет13_4);
	Попытка
		УстановитьЗначениеПоказателя("П10224", П10224);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10224", "Показник ""Довгострокові біологічні активи:знос"", графа ""На кінець звітного періоду""",	"+","!СКК",П10224, Счет13_4);
	Исключение
	КонецПопытки;

	//строка 1020
	Попытка
		УстановитьЗначениеПоказателя("П10203", П10213 - П10223);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10203", "Показник ""Довгострокові біологічні активи"", графа ""На початок звітного періоду""","+","!СНД", П10213,Счет16);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10203", "",	"-", "!СНК",П10223, Счет13_4);
	Исключение
	КонецПопытки;
	
	Попытка
		УстановитьЗначениеПоказателя("П10204", П10214 - П10224);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10204", "Показник ""Довгострокові біологічні активи"", графа ""На кінець звітного періоду""","+","!СКД", П10214,Счет16);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10204", "",	"-","!СКК",П10224, Счет13_4);
	Исключение
	КонецПопытки;
	
	//строка 1030 Долгосрочные финансовые инвестиции, учет которых ведется методом участия 
	//в капитале других предприятий
	П10303 = СНД(Счет14_1);
	Попытка
		УстановитьЗначениеПоказателя("П10303", П10303);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10303", "Показник ""Довгостроковi фiнансовi інвестиції: які обліковуються за методом участі в капіталі інших підприємств"", графа ""На початок звітного періоду""",	"+", "!СНД",П10303, Счет14_1);
	Исключение
	КонецПопытки;

	П10304 = СКД(Счет14_1);
	Попытка
		УстановитьЗначениеПоказателя("П10304", П10304);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10304", "Показник ""Довгостроковi фiнансовi інвестиції: які обліковуються за методом участі в капіталі інших підприємств"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10304, Счет14_1);
	Исключение
	КонецПопытки;

	//строка 1035 Долгосрочные финансовые инвестиции: другие
	П10353_14 = СНД(Счет14);
	П10353 = П10353_14 - П10303;
	
	Попытка
		УстановитьЗначениеПоказателя("П10353", П10353);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10353", "Показник ""Довгостроковi фiнансовi інвестиції: інші фінансові інвестиції"", графа ""На початок звітного періоду""",	"+", "!СНД",П10353_14, Счет14);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10353", "",	"-", "!СНД",П10303, Счет14_1);
	Исключение
	КонецПопытки;

    П10354_14 = СКД(Счет14);
   	П10354 = П10354_14 - П10304;
	
	Попытка
		УстановитьЗначениеПоказателя("П10354", П10354);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10354", "Показник ""Довгостроковi фiнансовi інвестиції: інші фінансові інвестиції"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10354_14, Счет14);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10354", "","-", "!СКД",П10304, Счет14_1);
	Исключение
	КонецПопытки;

	// строка 1040 долгосрочная дебиторская задолженность 
 	П10403_1 = СНД(Счет18);
	П10403_4 = СНД(Счет18_4);

	П10403 = П10403_1 - П10403_4;
	Попытка
		УстановитьЗначениеПоказателя("П10403", П10403);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10403", "Показник ""Довгострокова дебіторська заборгованість"", графа ""На початок звітного періоду""",	"+", "!СНД",П10403_1,Счет18);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10403", "",	"-", "!СНД",П10403_4,Счет18_4);
	Исключение
	КонецПопытки;
	
  	П10404_1 = СКД(Счет18);
	П10404_4 = СКД(Счет18_4);

	П10404 = П10404_1 - П10404_4;
	Попытка
		УстановитьЗначениеПоказателя("П10404", П10404);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10404", "Показник ""Довгострокова дебіторська заборгованість"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10404_1,Счет18);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10404", "",	"-", "!СКД",П10404_4,Счет18_4);
	Исключение
	КонецПопытки;

	// строка 1045 Отсроченные налоговые активы
	П10453 = СНД(Счет17);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10453", "Показник ""Відстрочені податкові активи"", графа ""На початок звітного періоду""",	"+", "!СНД",П10453, Счет17);
	УстановитьЗначениеПоказателя("П10453", П10453);
	
	П10454 = СКД(Счет17);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10454", "Показник ""Відстрочені податкові активи"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10454, Счет17);
	УстановитьЗначениеПоказателя("П10454", П10454);
	
  	//строка 1050 гудвилл
	П10503 =  СНД(Счет19);
	Попытка
		УстановитьЗначениеПоказателя("П10503", П10503);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10503", "Показник ""Гудвіл"", графа ""На початок звітного періоду""",	"+", "!СНД",П10503, Счет19);
	Исключение
	КонецПопытки;
	
	П10504 = СКД(Счет19); 
	Попытка
		УстановитьЗначениеПоказателя("П10504", П10504);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10504", "Показник ""Гудвіл"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10504, Счет19);
	Исключение
	КонецПопытки;

	// строка 1090 Другие необоротные активы
	П10903 = СНД(Счет18_4);
	Попытка
		УстановитьЗначениеПоказателя("П10903", П10903);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10903", "Показник ""Iншi необоротнi активи"", графа ""На початок звітного періоду""",	"+", "!СНД",П10903, Счет18_4);
	Исключение
	КонецПопытки;

	П10904 = СКД(Счет18_4);
	Попытка
		УстановитьЗначениеПоказателя("П10904", П10904);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10904", "Показник ""Iншi необоротнi активи"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10904, Счет18_4);
	Исключение
	КонецПопытки;

	// строка 1000 
	//   т.к. ее расшифровка - доп. строки, то данная строка не авторасчитываемая, равна сумме строк 1102...1104
	//   будет заполнена ниже
	
	//строка 1101 производственные запасы
	П11013_20 = СНД(Счет20);
	П11013_22 = СНД(Счет22);
	П11013 = П11013_20 + П11013_22;
	Попытка
		УстановитьЗначениеПоказателя("П11013", П11013);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11013", "Показник ""Запаси: виробничi запаси"", графа ""На початок звітного періоду""",	"+", "!СНД",П11013_20, Счет20);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11013", "",	"+", "!СНД",П11013_22, Счет22);
	Исключение
	КонецПопытки;

 	П11014_20 = СКД(Счет20);
	П11014_22 = СКД(Счет22);
	П11014 = П11014_20 + П11014_22;
	Попытка
		УстановитьЗначениеПоказателя("П11014", П11014);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11014", "Показник ""Запаси: виробничi запаси"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11014_20, Счет20);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11014", "",	"+", "!СКД",П11014_22, Счет22);
	Исключение
	КонецПопытки;

	
	// строка 1102 Запаси: Незавершенное производство
	П11023_23 = СНД(Счет23);
    П11023_25 = СНД(Счет25);
	П11023 = П11023_23 + П11023_25;
	Попытка
		УстановитьЗначениеПоказателя("П11023", П11023);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11023", "Показник ""Запаси: Незавершене виробництво"", графа ""На початок звітного періоду""",	"+", "!СНД",П11023_23, Счет23);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11023", "",	"+", "!СНД",П11023_25, Счет25);
	Исключение
	КонецПопытки;

	П11024_23 = СКД(Счет23);
    П11024_25 = СКД(Счет25);
	П11024 = П11024_23 + П11024_25;
	Попытка
		УстановитьЗначениеПоказателя("П11024", П11024);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11024", "Показник ""Запаси: Незавершене виробництво"", графа ""На кінець звітного періоду""",	"+", "!СКД", П11024_23, Счет23);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11024", "",	"+", "!СКД",П11024_25, Счет25);
	Исключение
	КонецПопытки;

	//строка 1103: готовая продукция
	П11033_26 = СНД(Счет26);
	П11033_27 = СНД(Счет27);
    П11033 = П11033_26 + П11033_27;
	Попытка
		УстановитьЗначениеПоказателя("П11033", П11033);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11033", "Показник ""Запаси: готова продукція"", графа ""На початок звітного періоду""",	"+", "!СНД", П11033_26, Счет26);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11033", "",	"+", "!СНД",П11033_27, Счет27);
	Исключение
	КонецПопытки;

	
	П11034_26 = СКД(Счет26);
	П11034_27 = СКД(Счет27);
    П11034 = П11034_26 + П11034_27;
	
	Попытка
		УстановитьЗначениеПоказателя("П11034", П11034);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11034", "Показник ""Запаси: готова продукція"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11034_26, Счет26);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11034", "",	"+", "!СКД",П11034_27, Счет27);
	Исключение
	КонецПопытки;
	
	// строка 1104 товары
	П11043_28  = СНД(Счет28);
	П11043_286 = СНД(Счет28_6);
	П11043     = П11043_28 - П11043_286;
		
	УстановитьЗначениеПоказателя("П11043", П11043);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11043", "Показник ""Запаси: товари"", графа ""На початок звітного періоду""",	"+", "!СНД",П11043_28, Счет28);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11043", "",	"-", "!СНД",П11043_286, Счет28_6);

	П11044_28  = СКД(Счет28);
	П11044_286 = СКД(Счет28_6);
	П11044     = П11044_28 - П11044_286;
	
	Попытка
		УстановитьЗначениеПоказателя("П11044", П11044);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11044", "Показник ""Запаси: товари"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11044_28, Счет28);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11044", "",	"-", "!СКД",П11044_286, Счет28_6);
	Исключение
	КонецПопытки;
	
	// строка 1100 Запасы
	Попытка
		УстановитьЗначениеПоказателя("П11003", П11013 + П11023 + П11033 + П11043);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11003", "Показник ""Запаси"", графа ""На початок звітного періоду""",	"+", "!СНД",П11013_20, Счет20);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11003", "",	"+", "!СНД",П11013_22, Счет22);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11003", "",	"+", "!СНД",П11023_23, Счет23);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11003", "",	"+", "!СНД",П11023_25, Счет25);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11003", "",	"+", "!СНД",П11033_26, Счет26);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11003", "",	"+", "!СНД",П11033_27, Счет27);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11003", "",	"+", "!СНД",П11043_28, Счет28);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11003", "",	"-", "!СНД",П11043_286,Счет28_6);
	Исключение
	КонецПопытки;

	Попытка
		УстановитьЗначениеПоказателя("П11004", П11014 + П11024 + П11034 + П11044);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11004", "Показник ""Запаси"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11014_20, Счет20);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11004", "",	"+", "!СКД",П11014_22, Счет22);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11004", "",	"+", "!СКД",П11024_23, Счет23);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11004", "",	"+", "!СКД",П11024_25, Счет25);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11004", "",	"+", "!СКД",П11034_26, Счет26);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11004", "",	"+", "!СКД",П11034_27, Счет27);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11004", "",	"+", "!СКД",П11044_28, Счет28);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11004", "",	"-", "!СКД",П11044_286,Счет28_6);
	Исключение
	КонецПопытки;
	
	// строка 1100: животные на выращивании
	П11103 = СНД(Счет21);
	Попытка
		УстановитьЗначениеПоказателя("П11103", П11103);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11103", "Показник ""Поточні біологічні активи"", графа ""На початок звітного періоду""",	"+", "!СНД",П11103, Счет21);
	Исключение
	КонецПопытки;

	П11104 = СКД(Счет21);
	Попытка
		УстановитьЗначениеПоказателя("П11104", П11104);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11104", "Показник ""Поточні біологічні активи"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11104, Счет21);
	Исключение
	КонецПопытки;

	// строка 150 векселя полученные
	П11203 = СНД(Счет34);
	Попытка
		УстановитьЗначениеПоказателя("П11203", П11203);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11203", "Показник ""Векселі одержані"", графа ""На початок звітного періодуу""",	"+", "!СНД",П11203, Счет34);
	Исключение
	КонецПопытки;

	П11204 = СКД(Счет34);
	Попытка
		УстановитьЗначениеПоказателя("П11204", П11204);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11204", "Показник ""Векселі одержані"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11204, Счет34);
	Исключение
	КонецПопытки;

	//строка 1125 Дебиторская задолженность за товары,первичная стоимость 
	// Развернутые итоги по счету 36 - резерв
	П11253_36  = 0;
	П11253_381 = СНК(Счет38_1);
	
	П11254_36  = 0;
	П11254_381 = СКК(Счет38_1);

	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет36);
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П11253_36 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		П11254_36 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
	КонецЕсли;
	
	Попытка
		УстановитьЗначениеПоказателя("П11253", П11253_36 - П11253_381);
		УстановитьЗначениеПоказателя("П11254", П11254_36 - П11254_381);
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11253", "Показник ""Дебіторська заборгованість за товари, роботи, послуги: первісна вартість"", графа ""На початок звітного періоду""",	"+", "!СНДРС",П11253_36,  Счет36);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11253", "",	"-", "!СНК",  П11253_381, Счет38_1);
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11254", "Показник ""Дебіторська заборгованість за товари, роботи, послуги: первісна вартість"", графа ""На кінець звітного періоду""",	"+", "!СКДРС",П11254_36,  Счет36);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11254", "",	"-", "!СКК",  П11254_381, Счет38_1);
	Исключение
	КонецПопытки;

	
	// строка 1130 Дебиторская задолженность по выданным авансам
	П11303_371 = СНД(Счет37_1);
    П11303_383 = СНК(Счет38_3);
	
	П11303 = П11303_371 - П11303_383;
	Попытка
		УстановитьЗначениеПоказателя("П11303", П11303);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11303", "Показник ""Дебіторська заборгованість за виданими авансами"", графа ""На початок звітного періоду""",	"+", "!СНД",П11303_371, Счет37_1);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11303", "",	"-", "!СНД",П11303_383, Счет38_3);
	Исключение
	КонецПопытки;
	
	П11304_371 = СКД(Счет37_1);
	П11304_383 = СКК(Счет38_3);
	П11304 = П11304_371 - П11304_383;
	Попытка
		УстановитьЗначениеПоказателя("П11304", П11304);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11304", "Показник ""Дебіторська заборгованість за виданими авансами"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11304_371, Счет37_1);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11304", "",	"-", "!СКК",П11304_383, Счет38_3);
	Исключение
	КонецПопытки;
	
	// строка 1135 Дебиторская задолженность по расчетам с бюджетом 
	С11353 = "Показник ""Дебіторська заборгованість за розрахунками з бюджетом"", графа ""На початок звітного періоду""";
	С11354 = "Показник ""Дебіторська заборгованість за розрахунками з бюджетом"", графа ""На кінець звітного періоду""";
	П11353 = 0; П11354 = 0; 
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет64_1);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет64_15) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет64_15)) Тогда
			Продолжить;
		КонецЕсли;	
		П11353_ = СНД(мСчета.Ссылка);
		П11353  = П11353 + П11353_;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11353", С11353,"+", "!СНД",П11353_,мСчета.Ссылка );
		
		П11354_ = СКД(мСчета.Ссылка);
		П11354  = П11354 + П11354_;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11354", С11354,"+", "!СКД",П11354_,мСчета.Ссылка);
		
		С11353 = "";
		С11354 = "";
	КонецЦикла;
	
	// по прочим налогам задолженность - развернутая
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет64_15);
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П11353_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		П11353  = П11353 + П11353_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11353", "","+","!СНДРС",П11353_, Счет64_15);
		
		П11354_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
		П11354  = П11354 + П11354_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11354", "","+","!СКДРС",П11354_, Счет64_15);
	КонецЕсли;	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет64_2);
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П11353_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		П11353  = П11353 + П11353_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11353", "","+","!СНДРС",П11353_, Счет64_2);
		
		П11354_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
		П11354  = П11354 + П11354_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11354", "","+","!СКДРС",П11354_, Счет64_2);
	КонецЕсли;	
	
	// минус резерв 
	П11353_ = СНК(Счет38_2);
	П11354_ = СКК(Счет38_2);
	
	П11353  = П11353 - П11353_;
	П11354  = П11354 - П11354_;
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11353", "", "-","!СНК",П11353_, Счет38_2);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11354", "",	"-","!СКК",П11354_, Счет38_2);

	УстановитьЗначениеПоказателя("П11353", П11353);
    УстановитьЗначениеПоказателя("П11354", П11354);
	
	// строка 1136
	П11363 = СНД(Счет64_13);
	Попытка
		УстановитьЗначениеПоказателя("П11363", П11363);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11363", "Показник ""Дебіторська заборгованість за розрахунками з бюджетом у т.ч. з податку на прибуток"", графа ""На початок звітного періоду""", "+", "!СНД",П11363, Счет64_13);
	Исключение КонецПопытки;
		
	П11364 = СКД(Счет64_13);
	Попытка
		УстановитьЗначениеПоказателя("П11364", П11364);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11364", "Показник ""Дебіторська заборгованість за розрахунками з бюджетом у т.ч. з податку на прибуток"", графа ""На кінець звітного періоду""","+", "!СКД",П11364, Счет64_13);
	Исключение КонецПопытки;
	
	//строка 1140 Дебиторская задолженность из начисленных доходов
	П11403_373 = СНД(Счет37_3);
    П11403_384 = СНК(Счет38_4);

	П11403 = П11403_373 - П11403_384;
	Попытка
		УстановитьЗначениеПоказателя("П11403", П11403);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11403", "Показник ""Дебіторська заборгованість із нарахованих доходів"", графа ""На початок звітного періоду""",	"+", "!СНД",П11403_373, Счет37_3);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11403", "", "-", "!СНК",П11403_384, Счет38_4);
	Исключение
	КонецПопытки;
	
	П11404_373 = СКД(Счет37_3);
    П11404_384 = СКК(Счет38_4);

	П11404 = П11404_373 - П11404_384;
	Попытка
		УстановитьЗначениеПоказателя("П11404", П11404);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11404", "Показник ""Дебіторська заборгованість із нарахованих доходів"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11404_373, Счет37_3);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11404", "", "-", "!СКК",П11404_384, Счет38_4);
	Исключение
	КонецПопытки;

   	// строка 1145 Дебиторская задолженность из внутренних расчетов
	П11453_682 = СНД(Счет68_2); 
	П11453_683 = СНД(Счет68_3);
	П11453_385 = СНК(Счет38_5);
	П11453 = П11453_682 + П11453_683 - П11453_385;
	
	Попытка
		УстановитьЗначениеПоказателя("П11453", П11453);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11453", "Показник ""Дебіторська заборгованість із внутрішніх розрахунків"", графа ""На початок звітного періоду""",	"+", "!СНД",П11453_682,Счет68_2);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11453", "","+", "!СНД",П11453_683, Счет68_3);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11453", "","-", "!СНК",П11453_385, Счет38_5);
	Исключение
	КонецПопытки;
		
	П11454_682 = СКД(Счет68_2); 
	П11454_683 = СКД(Счет68_3);
	П11454_385 = СКК(Счет38_5);
	П11454 = П11454_682 + П11454_683 - П11454_385;
	
	Попытка
		УстановитьЗначениеПоказателя("П11454", П11454);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11454", "Показник ""Дебіторська заборгованість із внутрішніх розрахунків"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11454_682,Счет68_2);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11454", "","+", "!СКД",П11454_683, Счет68_3);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11454", "","-", "!СКК",П11454_385, Счет38_5);
	Исключение
	КонецПопытки;

	// строка 1155 Прочая текущая дебиторская задолженность
	мСчетаЗадолженность = Новый Массив;
   	мСчетаЗадолженность.Добавить(Счет37); 
	мСчетаЗадолженность.Добавить(Счет68); 
	С11553 = "Показник ""Інша поточна дебіторська заборгованість"", графа ""На початок звітного періоду""";
	С11554 = "Показник ""Інша поточна дебіторська заборгованість"", графа ""На кінець звітного періоду""";
	П11553 = 0; П11554 = 0; П11553_ = 0; П11554_ = 0;
	Для каждого Счет Из мСчетаЗадолженность Цикл
		мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет);      
		Пока мСчета.Следующий() Цикл
			// Счета исключения
			Если (мСчета.Ссылка = Счет68_1) ИЛИ (мСчета.Ссылка = Счет68_2) ИЛИ (мСчета.Ссылка = Счет68_3) ИЛИ 
				 (мСчета.Ссылка.ПринадлежитЭлементу(Счет68_1)) ИЛИ  (мСчета.Ссылка.ПринадлежитЭлементу(Счет68_2)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет68_3)) ИЛИ  
				 (мСчета.Ссылка = Счет37_1) ИЛИ (мСчета.Ссылка = Счет37_3) ИЛИ 
				 (мСчета.Ссылка.ПринадлежитЭлементу(Счет37_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет37_3)) Тогда
				Продолжить;
			КонецЕсли;
			Если мСчета.Вид = ВидСчета.АктивноПассивный Тогда
				ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", мСчета.Ссылка);
				Если НЕ ВыборкаПоСчету = Неопределено Тогда
					П11553_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
					П11553  = П11553 + П11553_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11553", С11553,"+","!СНДРС",П11553_, мСчета.Ссылка);
					П11554_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
					П11554  = П11554 + П11554_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11554", С11554,"+","!СКДРС",П11554_, мСчета.Ссылка);
				КонецЕсли;	
			Иначе 
				// учтем такую ситуацию: на чисто активном (чисто пассивном) счете может быть отрицательные сальдо
				// пример: на счете 6431 (если "первое событие" - по оплате) сальдо после отгрузки - отрицательное
				// не будем учитывать такие ситуации развернуто по субконто. Только итоговое сальдо по счету
				П11553_ = СНД(мСчета.Ссылка);
				Если П11553_ = 0 И СНК(мСчета.Ссылка) < 0 Тогда
					П11553_ = - СНК(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11553", С11553,"-", "!СНК",-П11553_,мСчета.Ссылка );	
				ИначеЕсли П11553_ < 0 Тогда
					П11553_ = 0;	
				Иначе
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11553", С11553,"+", "!СНД",П11553_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				КонецЕсли;
				П11553  = П11553 + П11553_;
				
				П11554_ = СКД(мСчета.Ссылка);
				Если П11554_ = 0 И СКК(мСчета.Ссылка) < 0 Тогда
					П11554_ = - СКК(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11554", С11554,"-", "!СКК",-П11554_,мСчета.Ссылка );	
				ИначеЕсли П11554_ < 0 Тогда
					П11554_ = 0;	
				Иначе				
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11554", С11554,"+", "!СКД",П11554_,мСчета.Ссылка);
				КонецЕсли;
				П11554  = П11554 + П11554_;
			КонецЕсли;
			//С11553 = ""; С11554 = "";
			П11553_ = 0; П11554_ = 0;
		КонецЦикла;
	КонецЦикла;
	мСчетаЗадолженность = Новый Массив;
   	мСчетаЗадолженность.Добавить(Счет63); 
	//мСчетаЗадолженность.Добавить(Счет65); 
	Субсчета65 = ПланыСчетов.Хозрасчетный.Выбрать(Счет65);
	Пока Субсчета65.Следующий() Цикл
		мСчетаЗадолженность.Добавить(Субсчета65.Ссылка); 
	КонецЦикла;
	Для каждого Счет Из мСчетаЗадолженность Цикл
		Если Счет.Вид = ВидСчета.АктивноПассивный Тогда
			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет.Ссылка);
			Если НЕ ВыборкаПоСчету = Неопределено Тогда
				П11553_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
				П11553  = П11553 + П11553_;
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11553", С11553,"+","!СНДРС",П11553_, Счет.Ссылка);
				П11554_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
				П11554  = П11554 + П11554_;
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11554", С11554,"+","!СКДРС",П11554_, Счет.Ссылка);
			КонецЕсли;	
		Иначе
				П11553_ = СНД(Счет.Ссылка);
				П11553  = П11553 + П11553_;
				_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11553", С11553,"+", "!СНД",П11553_,Счет.Ссылка );
				П11554_ = СКД(Счет.Ссылка);
				П11554  = П11554 + П11554_;
				_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11554", С11554,"+", "!СКД",П11554_,Счет.Ссылка);
		КонецЕсли;	
		П11553_ = 0; П11554_ = 0;
		С11553 = ""; С11554 = "";
	КонецЦикла;
	
	П11553_386 = СНК(Счет38_6);
	П11554_386 = СКК(Счет38_6);
	
	П11553 = П11553 - П11553_386;
	П11554 = П11554 - П11554_386;
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11553", "",   "-", "!СНК",П11553_386, Счет38_6);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11554", "",   "-", "!СКК",П11554_386, Счет38_6);
		
	УстановитьЗначениеПоказателя("П11553", П11553);
	УстановитьЗначениеПоказателя("П11554", П11554);

  	// строка 1160 Текущие финансовые инвестиции
	П11603 = СНД(Счет35_2);
	
	Попытка
		УстановитьЗначениеПоказателя("П11603", П11603);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11603", "Показник ""Поточні фінансові інвестиції"", графа ""На початок звітного періоду""",	"+","!СНД",П11603,Счет35_2);
	Исключение
	КонецПопытки;

	П11604 = СКД(Счет35_2);
	
	Попытка
		УстановитьЗначениеПоказателя("П11604", П11604);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11604", "Показник ""Поточні фінансові інвестиції"", графа ""На кінець звітного періоду""",	"+","!СКД",П11604,Счет35_2);
	Исключение
	КонецПопытки;

	// строка 1165: денежные средства и эквиваленты
	// строка 1166: наличка
	// строка 1167: денежные средства на счетах в банке
	С11653 = "Показник ""Грошові кошти та їх еквіваленти"", графа ""На початок звітного періоду""";
	С11654 = "Показник ""Грошові кошти та їх еквіваленти"", графа ""На кінець звітного періоду""";
	С11663 = "Показник ""Готівка"", графа ""На початок звітного періоду""";
	С11664 = "Показник ""Готівка"", графа ""На кінець звітного періоду""";
	С11673 = "Показник ""Рахунки в банках"", графа ""На початок звітного періоду""";
	С11674 = "Показник ""Рахунки в банках"", графа ""На кінець звітного періоду""";
	СчетаДенежные = Новый Массив;
   	СчетаДенежные.Добавить(Счет30);       
   	СчетаДенежные.Добавить(Счет31);         
   	СчетаДенежные.Добавить(Счет33);     
   	СчетаДенежные.Добавить(Счет35_1);      
	П11653 = 0; П11654 = 0; П11663 = 0; П11664 = 0;
	П11673 = 0; П11674 = 0;
	Для каждого Счет Из СчетаДенежные Цикл
		мСчета = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(Счет);
		Пока мСчета.Следующий() Цикл
			
			// Если счет является родителем, мы его не берем
			мСчетаПоИерархии = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(мСчета.Ссылка);
			Если мСчетаПОИерархии.Следующий() Тогда
				Продолжить;                          
			КонецЕсли;	
			
			// Счета исключения
			Если (мСчета.Ссылка = Счет33_1) ИЛИ  (мСчета.Ссылка = Счет33_2) ИЛИ 
				 (мСчета.Ссылка.ПринадлежитЭлементу(Счет33_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет33_2)) ИЛИ 
				 (мСчета.Вид = ВидСчета.Пассивный) Тогда
				Продолжить;
			КонецЕсли;	
			
			П11653_ = СНД(мСчета.Ссылка);
			П11653  = П11653 + П11653_;
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11653", С11653,"+", "!СНД",П11653_,мСчета.Ссылка );
			П11654_ = СКД(мСчета.Ссылка);
			П11654  = П11654 + П11654_;
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11654", С11654,"+", "!СКД",П11654_,мСчета.Ссылка);
			С11653 = "";
			С11654 = "";
			Если Счет = Счет30 Тогда
				// Заполняем строку 1166 (деньги в кассе)
				П11663  = П11663 + П11653_;
				_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11663", С11663,"+", "!СНД",П11653_,мСчета.Ссылка );
				П11664  = П11664 + П11654_;
				_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11664", С11664,"+", "!СКД",П11654_,мСчета.Ссылка);
				С11663 = "";
				С11664 = "";
			КонецЕсли;	
		
			Если Счет = Счет31 Тогда
				// Заполняем строку 1167 (Счета в банках)
				П11673  = П11673 + П11653_;
				_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11673", С11673,"+", "!СНД",П11653_,мСчета.Ссылка );
				П11674  = П11674 + П11654_;
				_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11674", С11674,"+", "!СКД",П11654_,мСчета.Ссылка);
				С11673 = "";
				С11674 = "";
			КонецЕсли;	
		
		КонецЦикла;	
	КонецЦикла;

	УстановитьЗначениеПоказателя("П11653", П11653);
	УстановитьЗначениеПоказателя("П11654", П11654);
	
	УстановитьЗначениеПоказателя("П11663", П11663);
	УстановитьЗначениеПоказателя("П11664", П11664);
	
	УстановитьЗначениеПоказателя("П11673", П11673);
	УстановитьЗначениеПоказателя("П11674", П11674);
	
	// строка 1170 Затраты будущих периодов
	П11703 = СНД(Счет39);
	
	Попытка
		УстановитьЗначениеПоказателя("П11703", П11703);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11703", "Показник ""Витрати майбутніх періодів"", графа ""На початок звітного періоду""",	"+", "!СНД",П11703, Счет39);
	Исключение
	КонецПопытки;

	П11704 = СКД(Счет39);
	
	Попытка
		УстановитьЗначениеПоказателя("П11704", П11704);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11704", "Показник ""Витрати майбутніх періодів"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11704, Счет39);
	Исключение
	КонецПопытки;

    // строка 1190: другие оборотные активы
	П11903 = СНД(Счет24) + СНД(Счет33_1) + СНД(Счет33_2);
	П11904 = СКД(Счет24) + СКД(Счет33_1) + СКД(Счет33_2);
	Попытка
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11903", "Показник ""Інші оборотні активи"", графа ""На початок звітного періоду""",	"+", "!СНД",СНД(Счет24),Счет24);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11903", "",	"+", "!СНД", СНД(Счет33_1), Счет33_1);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11903", "",	"+", "!СНД", СНД(Счет33_2), Счет33_2);
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11904", "Показник ""Інші оборотні активи"", графа ""На кінець звітного періоду""",	"+", "!СКД",СКД(Счет24),Счет24);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11904", "",	"+", "!СКД", СКД(Счет33_1), Счет33_1);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11904", "",	"+", "!СКД", СКД(Счет33_2), Счет33_2);
    Исключение
	КонецПопытки;
	мСчетаЗадолженность = Новый Массив;
    мСчетаЗадолженность.Добавить(Счет64_3);
    мСчетаЗадолженность.Добавить(Счет64_4);
	Если НЕ Счет64_5 = Неопределено Тогда
		мСчетаЗадолженность.Добавить(Счет64_5);
	КонецЕсли;	
	Для каждого Счет Из мСчетаЗадолженность Цикл
		мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет);
		Пока мСчета.Следующий() Цикл
			Если мСчета.Вид = ВидСчета.АктивноПассивный Тогда
				ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", мСчета.Ссылка);
				Если НЕ ВыборкаПоСчету = Неопределено Тогда
					П11903_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
					П11903  = П11903 + П11903_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11903", "","+","!СНДРС",П11903_, мСчета.Ссылка);
					П11904_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
					П11904  = П11904 + П11904_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11904", "","+","!СКДРС",П11904_, мСчета.Ссылка);
				КонецЕсли;	
			Иначе 
				// учтем такую ситуацию: на чисто активном (чисто пассивном) счете может быть отрицательные сальдо
				// пример: на счете 6431 (если "первое событие" - по оплате) сальдо после отгрузки - отрицательное
				// не будем учитывать такие ситуации развернуто по субконто. Только итоговое сальдо по счету
				П11903_ = СНД(мСчета.Ссылка);
				Если П11903_ = 0 И СНК(мСчета.Ссылка) < 0 Тогда
					П11903_ = - СНК(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11903", "","-", "!СНК",-П11903_,мСчета.Ссылка );	
				ИначеЕсли П11903_ < 0 Тогда
					П11903_ = 0;	
				Иначе	
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11903", "","+", "!СНД",П11903_,мСчета.Ссылка );	
				КонецЕсли;
				П11903  = П11903 + П11903_;
				
				П11904_ = СКД(мСчета.Ссылка);
				Если П11904_ = 0 И СКК(мСчета.Ссылка) < 0 Тогда
					П11904_ = - СКК(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11904", "","-", "!СКК",-П11904_,мСчета.Ссылка );	
				ИначеЕсли П11904_ < 0 Тогда
					П11904_ = 0;	
				Иначе
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11904", "","+", "!СКД",П11904_,мСчета.Ссылка);
				КонецЕсли;
				П11904  = П11904 + П11904_;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("П11903", П11903);   
	УстановитьЗначениеПоказателя("П11904", П11904);
	
	// III. Необоротні активи, утримувані для продажу, та групи вибуття									
	П12003 = СНД(Счет28_6);
	Попытка
		УстановитьЗначениеПоказателя("П12003", П12003);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П12003", "Показник ""Необоротні активи та групи вибуття"", графа ""На початок звітного періоду""",	"+", "!СНД",П12003, Счет28_6);
	Исключение
	КонецПопытки;
	
	П12004 = СКД(Счет28_6);
	Попытка
		УстановитьЗначениеПоказателя("П12004", П12004);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П12004", "Показник ""Необоротні активи та групи вибуття"", графа ""На кінець звітного періоду""",	"+", "!СКД",П12004, Счет28_6);
	Исключение
	КонецПопытки;
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	// ПАССИВ
	// строка 1400 Зарегистрированный капитал
	
	//П14003 = СНК(Счет40) + СНК(Счет41);
	П14003 = СНК(Счет40) - СНК(Счет40_4);
    Попытка
    	УстановитьЗначениеПоказателя("П14003", П14003);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14003", "Показник ""Зареєстрований (пайовий) капітал"", графа ""На початок року""",	"+", "!СНК", СНК(Счет40), Счет40);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14003", "",	"-", "!СНК", СНК(Счет40_4), Счет40_4);
    Исключение
    КонецПопытки;

    //П14004 = СКК(Счет40) + СКК(Счет41);
	П14004 = СКК(Счет40) - СКК(Счет40_4);
    Попытка
    	УстановитьЗначениеПоказателя("П14004", П14004);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14004", "Показник ""Зареєстрований (пайовий) капітал"", графа ""На кінець звітного періоду""",	"+", "!СКК", СКК(Счет40), Счет40);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14004", "",	"-", "!СКК", СКК(Счет40_4), Счет40_4);
    Исключение
    КонецПопытки;

	// строка 1401 Внески до незареєстрованого статутного капіталу
	П14013 = СНК(Счет40_4);
    Попытка
    	УстановитьЗначениеПоказателя("П14013", П14013);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14013", "Показник ""Внески до незареєстрованого статутного капіталу"", графа ""На початок року""",	"+", "!СНК", СНК(Счет40_4), Счет40_4);
    Исключение
    КонецПопытки;
	
	П14014 = СКК(Счет40_4);
    Попытка
    	УстановитьЗначениеПоказателя("П14014", П14014);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14014", "Показник ""Внески до незареєстрованого статутного капіталу"", графа ""На кінець звітного періоду""",	"+", "!СКК", СКК(Счет40_4), Счет40_4);
    Исключение
    КонецПопытки;
	
    // строка 1405 Капитал в дооценках
	//П14053 = СНК(Счет42_3);
	П14053 = СНК(Счет41);
    Попытка
    	УстановитьЗначениеПоказателя("П14053", П14053);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14053", "Показник ""Додатковий вкладений капiтал"", графа ""На початок року""",	"+", "!СНК",П14053, Счет41);
    Исключение
    КонецПопытки;

    //П14054 = СКК(Счет42_3);
	П14054 = СКК(Счет41);
    Попытка
    	УстановитьЗначениеПоказателя("П14054", П14054);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14054", "Показник ""Додатковий вкладений капiтал"", графа ""На кінець звітного періоду""",	"+", "!СКК",П14054, Счет41);
    Исключение
    КонецПопытки;

    // строка 1410 Дополнительный капитал
	//П14103 = СНК(Счет42) - СНК(Счет42_3);
	П14103 = СНК(Счет42);
    Попытка
    	УстановитьЗначениеПоказателя("П14103", П14103);
    	
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14103", "Показник ""Інший додатковий капітал"", графа ""На початок року""",	"+", "!СНК",СНК(Счет42), Счет42);

    Исключение
    КонецПопытки;
	
	//П14104 = СКК(Счет42) - СКК(Счет42_3);
	П14104 = СКК(Счет42);
    Попытка
    	УстановитьЗначениеПоказателя("П14104", П14104);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14104", "Показник ""Інший додатковий капітал"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет42), Счет42);
    Исключение
    КонецПопытки;
	
    // строка 1411 Эмиссионный доход
	П14113 = СНК(Счет42_1);
    Попытка
    	УстановитьЗначениеПоказателя("П14113", П14113);
    	
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14113", "Показник ""Інший додатковий капітал"", графа ""На початок року""",	"+", "!СНК",СНК(Счет42_1), Счет42_1);
    Исключение
    КонецПопытки;

    П14114 = СКК(Счет42_1);
    Попытка
    	УстановитьЗначениеПоказателя("П14114", П14114);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14114", "Показник ""Інший додатковий капітал"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет42_1), Счет42_1);
    Исключение
    КонецПопытки;
	
    // строка 1412     Накопичені курсові різниці
	П14123 = СНК(Счет42_3);
    Попытка
    	УстановитьЗначениеПоказателя("П14123", П14123);
    	
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14123", "Показник ""Накопичені курсові різниці"", графа ""На початок року""",	"+", "!СНК",СНК(Счет42_3), Счет42_3);
    Исключение
    КонецПопытки;

    П14124 = СКК(Счет42_3);
    Попытка
    	УстановитьЗначениеПоказателя("П14124", П14124);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14124", "Показник ""Накопичені курсові різниці"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет42_3), Счет42_3);
    Исключение
    КонецПопытки;
	
	
    //строка 1415 Резервный капитал
    П14153 = СНК(Счет43);
    Попытка
    	УстановитьЗначениеПоказателя("П14153", П14153);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14153", "Показник ""Резервний капітал"", графа ""На початок року""",	"+", "!СНК",СНК(Счет43), Счет43);
    Исключение
    КонецПопытки;
    
    П14154 = СКК(Счет43);
    Попытка
    	УстановитьЗначениеПоказателя("П14154", П14154);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14154", "Показник ""Резервний капітал"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет43), Счет43);
    Исключение
    КонецПопытки;

	// строка 1420 Нераспределенная прибыль
    П14203 = (СНКР(Счет79) - СНДР(Счет79)) + (СНКР(Счет44) - СНДР(Счет44));
    Попытка
    	УстановитьЗначениеПоказателя("П14203",  П14203);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14203", "Показник ""Нерозподілений прибуток (непокритий збиток)"", графа ""На початок року""",	"+", "!СНКР",СНКР(Счет79), Счет79);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14203", "",	"+", "!СНКР",СНКР(Счет44), Счет44);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14203", "",	"-", "!СНДР",СНДР(Счет79), Счет79);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14203", "",	"-", "!СНДР",СНДР(Счет44), Счет44);
    Исключение
    КонецПопытки;

    П14204 = (СККР(Счет79) - СКДР(Счет79)) + (СККР(Счет44) - СКДР(Счет44));
    Попытка
    	УстановитьЗначениеПоказателя("П14204",  П14204);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14204", "Показник ""Нерозподілений прибуток (непокритий збиток)"", графа ""На кінець звітного періоду""",	"+", "!СККР",СККР(Счет79), Счет79);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14204", "",	"+", "!СККР",СККР(Счет44), Счет44);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14204", "",	"-", "!СКДР",СКДР(Счет79), Счет79);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14204", "",	"-", "!СКДР",СКДР(Счет44), Счет44);
    Исключение
    КонецПопытки;

    // строка 1425 Неоплаченный капитал 
    П14253 = СНД(Счет46); 
    Попытка
    	УстановитьЗначениеПоказателя("П14253", П14253);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "_П14253", "Показник ""Неоплачений капітал"", графа ""На початок року""",	"+", "!СНД",П14253, Счет46);
    Исключение
    КонецПопытки;

    П14254 = СКД(Счет46); 
    Попытка
    	УстановитьЗначениеПоказателя("П14254", П14254);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "_П14254", "Показник ""Неоплачений капітал"", графа ""На кінець звітного періоду""",	"+", "!СКД",П14254, Счет46);
    Исключение
    КонецПопытки;

    // строка 1430: Изъятый капитал 
    П14303 = СНД(Счет45); 
    Попытка
    	УстановитьЗначениеПоказателя("П14303", П14303);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "_П14303", "Показник ""Вилучений капітал"", графа ""На початок року""",	"+", "!СНД",П14303, Счет45);
    Исключение
    КонецПопытки;

    П14304 = СКД(Счет45); 
    Попытка
    	УстановитьЗначениеПоказателя("П14304", П14304);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "_П14304", "Показник ""Вилучений капітал"", графа ""На кінець звітного періоду""", "+", "!СКД",П14304, Счет45);
    Исключение
    КонецПопытки;

	
	// строка 1435: Прочие резервы
	// заполняют страховики
	//П14353 = СНК(Счет47_3) + СНК(Счет47_4); 
	//Попытка
	//	УстановитьЗначениеПоказателя("П14353", П14353);
	//	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П14353", "Показник ""Інші резерви"", графа ""На початок року""",	"+", "!СНК",СНК(Счет47_3), Счет47_3);
	//	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П14353", "", "+", "!СНК",СНК(Счет47_4), Счет47_4);
	//Исключение
	//КонецПопытки;

	//П14354 = СКК(Счет47_3) + СКК(Счет47_4); 
	//Попытка
	//	УстановитьЗначениеПоказателя("П14354", П14354);
	//	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П14354", "Показник ""Інші резерви"", графа ""На кінець звітного періоду""", "+", "!СКК",СКК(Счет47_3), Счет47_3);
	//	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П14354", "", "+", "!СКК",СКК(Счет47_4), Счет47_4);
	//Исключение
	//КонецПопытки;
	
    // строка 1500  Отсроченные налоговые обязательства
    П15003 = СНК(Счет54);
    _ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15003", "Показник ""Відстрочені податкові  зобов'язання"", графа ""На початок року""",	"+", "!СНК",СНК(Счет54), Счет54);
    УстановитьЗначениеПоказателя("П15003", П15003);
	
	П15004 = СКК(Счет54);
    _ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15004", "Показник ""Відстрочені податкові  зобов'язання"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет54), Счет54);
    УстановитьЗначениеПоказателя("П15004", П15004);

	
    // строка 1510 Долгосрочные кредиты банков
    П15103 = СНК(Счет50_1) + СНК(Счет50_2) + СНК(Счет50_3) + СНК(Счет50_4);
    Попытка
    	УстановитьЗначениеПоказателя("П15103", П15103);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15103", "Показник ""Довгострокові кредити банкiв"", графа ""На початок року""",	"+", "!СНК",СНК(Счет50_1), Счет50_1);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15103", "",	"+", "!СНК",СНК(Счет50_2), Счет50_2);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15103", "",	"+", "!СНК",СНК(Счет50_3), Счет50_3);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15103", "",	"+", "!СНК",СНК(Счет50_4), Счет50_4);
    Исключение
    КонецПопытки;
    
    П15104 = СКК(Счет50_1) + СКК(Счет50_2) + СКК(Счет50_3) + СКК(Счет50_4);
    Попытка
    	УстановитьЗначениеПоказателя("П15104", П15104);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15104", "Показник ""Довгострокові кредити банкiв"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет50_1), Счет50_1);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15104", "",	"+", "!СКК",СКК(Счет50_2), Счет50_2);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15104", "",	"+", "!СКК",СКК(Счет50_3), Счет50_3);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15104", "",	"+", "!СКК",СКК(Счет50_4), Счет50_4);
    Исключение
    КонецПопытки;
	
	// строка 1515 Другие долгосрочные обязательства 
    П15153 = СНК(Счет50_5) + СНК(Счет50_6) + СНК(Счет51) + СНК(Счет52) + СНК(Счет53) + СНК(Счет55);
    Попытка
    	УстановитьЗначениеПоказателя("П15153", П15153);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15153", "Показник ""Інші довгостроковi зобов'язання"", графа ""На початок року""",	"+", "!СНК",СНК(Счет51), Счет51);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15153", "",	"+", "!СНК",СНК(Счет52), Счет52);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15153", "",	"+", "!СНК",СНК(Счет53), Счет53);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15153", "",	"+", "!СНК",СНК(Счет55), Счет55);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15153", "",	"+", "!СНК",СНК(Счет50_5), Счет50_5);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15153", "",	"+", "!СНК",СНК(Счет50_6), Счет50_6);
    Исключение
    КонецПопытки;

    П15154 = СКК(Счет50_5) + СКК(Счет50_6) + СКК(Счет51) + СКК(Счет52) + СКК(Счет53) + СКК(Счет55);
    Попытка
    	УстановитьЗначениеПоказателя("П15154", П15154);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15154", "Показник ""Інші довгостроковi зобов'язання"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет51), Счет51);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15154", "",	"+", "!СКК",СКК(Счет52), Счет52);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15154", "",	"+", "!СКК",СКК(Счет53), Счет53);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15154", "",	"+", "!СКК",СКК(Счет55), Счет55);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15154", "",	"+", "!СКК",СКК(Счет50_5), Счет50_5);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15154", "",	"+", "!СКК",СКК(Счет50_6), Счет50_6);
    Исключение
    КонецПопытки;
	
    // строка 1520: Долгосрочное обеспечение
    П15203 = СНК(Счет47_2) + СНК(Счет47_8); 
    Попытка
    	УстановитьЗначениеПоказателя("П15203", П15203);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15203", "Показник ""Довгострокові забезпечення"", графа ""На початок року""",	"+", "!СНК",СНК(Счет47_2), Счет47_2);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15203", "", "+", "!СНК",СНК(Счет47_8), Счет47_8);
    Исключение
    КонецПопытки;

    П15204 = СКК(Счет47_2) + СКК(Счет47_8); 
    Попытка
    	УстановитьЗначениеПоказателя("П15204", П15204);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15204", "Показник ""Довгострокові забезпечення"", графа ""На кінець звітного періоду""", "+", "!СКК",СКК(Счет47_2), Счет47_2);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15204", "", "+", "!СКК",СКК(Счет47_8), Счет47_8);
    Исключение
    КонецПопытки;
	
    // строка 1521: Долгосрочное обеспечение выплат персоналу
    П15213 = СНК(Счет47_2); 
    Попытка
    	УстановитьЗначениеПоказателя("П15213", П15213);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15213", "Показник ""Довгострокові забезпечення витрат персоналу"", графа ""На початок року""",	"+", "!СНК",СНК(Счет47_2), Счет47_2);
    Исключение
    КонецПопытки;

    П15214 = СКК(Счет47_2); 
    Попытка
    	УстановитьЗначениеПоказателя("П15214", П15214);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15214", "Показник ""Довгострокові забезпечення витрат персоналу"", графа ""На кінець звітного періоду""", "+", "!СКК",СКК(Счет47_2), Счет47_2);
    Исключение
    КонецПопытки;
	
	
	// строка 1525 Целевое финансирование
    П15253 = СНК(Счет48);
    Попытка
    	УстановитьЗначениеПоказателя("П15253", П15253);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15253", "Показник ""Цільове фінансування"", графа ""На початок року""",	"+", "!СНК",СНК(Счет48), Счет48);
    Исключение
    КонецПопытки;

    П15254 = СКК(Счет48);
    Попытка
    	УстановитьЗначениеПоказателя("П15254", П15254);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15254", "Показник ""Цільове фінансування"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет48), Счет48);
    Исключение
    КонецПопытки;
	
    // строка 1526 Благотворительная помощь
    П15263 = СНК(Счет48_3);
    Попытка
    	УстановитьЗначениеПоказателя("П15263", П15263);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15263", "Показник ""Благодійна допомога"", графа ""На початок року""",	"+", "!СНК",СНК(Счет48_3), Счет48_3);
    Исключение
    КонецПопытки;

    П15264 = СКК(Счет48_3);
    Попытка
    	УстановитьЗначениеПоказателя("П15264", П15264);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15264", "Показник ""Благодійна допомога"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет48_3), Счет48_3);
    Исключение
    КонецПопытки;

    //строка 415 Сума страхових резервів
    П15303 = СНК(Счет49); 
    Попытка
    	УстановитьЗначениеПоказателя("П15303", П15303);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15303", "Сума страхових резервів, графа ""На початок року""",	"+", "!СНК",СНК(Счет49), Счет49);
    Исключение
    КонецПопытки;
    
    П15304 = СКК(Счет49); 
    Попытка
    	УстановитьЗначениеПоказателя("П15304", П15304);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15304", "Сума страхових резервів, графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет49), Счет49);
    Исключение
    КонецПопытки;

    //строка 1540 Призовий фонд
    П15403 = СНК(Счет47_5); 
    Попытка
    	УстановитьЗначениеПоказателя("П15403", П15403);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15403", "Призовий фонд, графа ""На початок року""",	"+", "!СНК",СНК(Счет47_5), Счет47_5);
    Исключение
    КонецПопытки;
    
    П15404 = СКК(Счет47_5); 
    Попытка
    	УстановитьЗначениеПоказателя("П15404", П15404);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15404", "Призовий фонд, графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет47_5), Счет47_5);
    Исключение
    КонецПопытки;
    
    //строка 1545 вписываемые строки Залишок сформованого резерву на виплату джекпота, не забеспеченого сплатою участі в лотереї
    П15453 = СНК(Счет47_6); 
    Попытка
    	УстановитьЗначениеПоказателя("П15453", П15453);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15453", "Резерв на виплату джек-поту, графа ""На початок року""",	"+", "!СНК",СНК(Счет47_6), Счет47_6);
    Исключение
    КонецПопытки;
    
    П15454 = СКК(Счет47_6); 
    Попытка
    	УстановитьЗначениеПоказателя("П15454", П15454);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П15454", "Резерв на виплату джек-поту, графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет47_6), Счет47_6);
    Исключение
    КонецПопытки;
	
	
    
    //строка 1600 Краткосрочные кредиты банков
    П16003 = СНК(Счет60) - СНК(Счет60_5) - СНК(Счет60_6);
    Попытка
    	УстановитьЗначениеПоказателя("П16003", П16003);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16003", "Показник ""Короткострокові кредити банкiв"", графа ""На початок року""",	"+", "!СНК",СНК(Счет60), Счет60);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16003", "",	"-", "!СНК",СНК(Счет60_5), Счет60_5);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16003", "",	"-", "!СНК",СНК(Счет60_6), Счет60_6);
    Исключение
    КонецПопытки;
    
    П16004 = СКК(Счет60) - СКК(Счет60_5) - СКК(Счет60_6);
    Попытка
    	УстановитьЗначениеПоказателя("П16004", П16004);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16004", "Показник ""Короткострокові кредити банкiв"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет60), Счет60);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16004", "",	"-", "!СКК",СКК(Счет60_5), Счет60_5);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16004", "",	"-", "!СКК",СКК(Счет60_6), Счет60_6);
    Исключение
    КонецПопытки;

	
    // строка 1605 Векселя выданные 
    П16053 = СНК(Счет62);
    Попытка
    	УстановитьЗначениеПоказателя("П16053", П16053);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16053", "Показник ""Векселі видані"", графа ""На початок року""",	"+", "!СНК",СНК(Счет62), Счет62);
    Исключение
    КонецПопытки;

    П16054 = СКК(Счет62);
    Попытка
    	УстановитьЗначениеПоказателя("П16054", П16054);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16054", "Показник ""Векселі видані"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет62), Счет62);
    Исключение
    КонецПопытки;
	
    // строка 1610 Текущая задолженность по долгосрочным обязательствам 
    П16103 = СНК(Счет61);
    Попытка
    	УстановитьЗначениеПоказателя("П16103", П16103);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16103", "Показник ""Поточна заборгованість за довгостроковими зобов'язаннями"", графа ""На початок року""",	"+", "!СНК",СНК(Счет61), Счет61);
    Исключение
    КонецПопытки;

    П16104 = СКК(Счет61);
    Попытка
    	УстановитьЗначениеПоказателя("П16104", П16104);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16104", "Показник ""Поточна заборгованість за довгостроковими зобов'язаннями"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет61), Счет61);
    Исключение
    КонецПопытки;
	
	// строка 1615 текущая Кредиторская задолженность за товары, работы 
    П16153 = 0;
    П16154 = 0;
   	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет63);
    Если НЕ ВыборкаПоСчету = Неопределено Тогда
    	П16153 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
    	П16154 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
    КонецЕсли;	
    
    Попытка
    	УстановитьЗначениеПоказателя("П16153", П16153);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16153", "Показник ""Поточна кредиторська заборгованість за товари, роботи, послуги"", графа ""На початок року""",	"+", "!СНКРС",П16153, Счет63);
    	УстановитьЗначениеПоказателя("П16154", П16154);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16154", "Показник ""Поточна кредиторська заборгованість за товари, роботи, послуги"", графа ""На кінець звітного періоду""",	"+", "!СККРС",П16154, Счет63);
    Исключение
    КонецПопытки;

    // строка 1620 текущие обязательства по расчетам с бюджетом
    С16203 = "Показник ""Поточна кредиторська заборгованість за розрахунками з бюджетом"", графа ""На початок звітного періоду""";
    С16204 = "Показник ""Поточна кредиторська заборгованість за розрахунками з бюджетом"", графа ""На кінець звітного періоду""";
    П16203 = 0; П16204 = 0; 
    мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет64_1);
    Пока мСчета.Следующий() Цикл
    	// Счета исключения
    	Если (мСчета.Ссылка = Счет64_15) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет64_15)) Тогда
    		Продолжить;
    	КонецЕсли;
    	П16203_ = СНК(мСчета.Ссылка);
    	П16203  = П16203 + П16203_;
    	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16203", С16203,"+", "!СНК",П16203_,мСчета.Ссылка );
    	П16204_ = СКК(мСчета.Ссылка);
    	П16204  = П16204 + П16204_;
    	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16204", С16204,"+", "!СКК",П16204_,мСчета.Ссылка);
    	С16203 = "";
    	С16204 = "";
    КонецЦикла;
	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет64_15);
    Если НЕ ВыборкаПоСчету = Неопределено Тогда
    	П16203_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
    	П16204_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16203", "",	"+","!СНКРС" ,П16203_, Счет64_15);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16204", "",	"+","!СККРС", П16204_, Счет64_15);
		
		П16203 = П16203 + П16203_;
		П16204 = П16204 + П16204_;
		
    КонецЕсли;	
	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет64_2);
    Если НЕ ВыборкаПоСчету = Неопределено Тогда
    	П16203_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
    	П16204_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16203", "",	"+","!СНКРС" ,П16203_, Счет64_2);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16204", "",	"+","!СККРС", П16204_, Счет64_2);
		
		П16203 = П16203 + П16203_;
		П16204 = П16204 + П16204_;
		
	КонецЕсли;	
	
    УстановитьЗначениеПоказателя("П16203", П16203);
   	УстановитьЗначениеПоказателя("П16204", П16204);
	
    // строка 1610 Текущая задолженность по долгосрочным обязательствам 
    П16213 = СНК(Счет64_13);
    Попытка
    	УстановитьЗначениеПоказателя("П16213", П16213);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16213", "Показник ""Поточна кредиторська заборгованість з податку на прибуток"", графа ""На початок року""",	"+", "!СНК",СНК(Счет64_13), Счет64_13);
    Исключение
    КонецПопытки;

    П16214 = СКК(Счет64_13);
    Попытка
    	УстановитьЗначениеПоказателя("П16214", П16214);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16214", "Показник ""Поточна кредиторська заборгованість з податку на прибуток"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет64_13), Счет64_13);
    Исключение
    КонецПопытки;
	
    // строка 1625 Текущие об-ва по страхованию
    //развернутое сальдо по счету 65
    П16253 = 0;
    П16254 = 0;
	//ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет65);
	//Если НЕ ВыборкаПоСчету = Неопределено Тогда
	//	П16253 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
	//	П16254 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
	//КонецЕсли;

	//Попытка
	//	УстановитьЗначениеПоказателя("П16253", П16253);
	//	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16253", "Показник ""Поточна кредиторська заборгованість за розрахунками зі страхування"", графа ""На початок року""",	"+", "!СНКР",П16253, Счет65);
	//	
	//	УстановитьЗначениеПоказателя("П16254", П16254);
	//	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16254", "Показник ""Поточна кредиторська заборгованість за розрахунками зі страхування"", графа ""На кінець звітного періоду""",	"+", "!СККР",П16254, Счет65);
	//Исключение
	//КонецПопытки;
	Субсчета65 = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(Счет65);
	Пока Субсчета65.Следующий() Цикл
	    ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Субсчета65.Ссылка);
		Если НЕ ВыборкаПоСчету = Неопределено Тогда
	    	П16253 = П16253 + ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
	    	П16254 = П16254 + ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
			
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16253", "Показник ""Поточна кредиторська заборгованість за розрахунками зі страхування"", графа ""На початок року""",	"+", "!СНКРС",ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт, Субсчета65.Ссылка);
	    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16254", "Показник ""Поточна кредиторська заборгованість за розрахунками зі страхування"", графа ""На кінець звітного періоду""", "+", "!СККРС",ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт, Субсчета65.Ссылка);
	    КонецЕсли;		
	КонецЦикла;
	УстановитьЗначениеПоказателя("П16253", П16253);
   	УстановитьЗначениеПоказателя("П16254", П16254);

    // строка 1630 Текущие об-ва по оплате труда
    П16303 = СНК(Счет66);
    Попытка
    	УстановитьЗначениеПоказателя("П16303", П16303);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16303", "Показник ""Поточна кредиторська заборгованість за розрахунками з оплати праці"", графа ""На початок року""",	"+", "!СНК",СНК(Счет66), Счет66);
    Исключение
    КонецПопытки;

    П16304 = СКК(Счет66);
    Попытка
    	УстановитьЗначениеПоказателя("П16304", П16304);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16304", "Показник ""Поточна кредиторська заборгованість за розрахунками з оплати праці"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет66), Счет66);
    Исключение
    КонецПопытки;
	
    // строка 1635 Текущие обязательства по расчетам: по полученным авансам
    П16353 = СНК(Счет68_1);
    Попытка
    	УстановитьЗначениеПоказателя("П16353", П16353);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16353", "Показник ""Поточна кредиторська заборгованість за одержаними авансами"", графа ""На початок року""",	"+", "!СНК",СНК(Счет68_1), Счет68_1);
    Исключение
    КонецПопытки;

    П16354 = СКК(Счет68_1);
    Попытка
    	УстановитьЗначениеПоказателя("П16354", П16354);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16354", "Показник ""Поточна кредиторська заборгованість за одержаними авансами"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет68_1), Счет68_1);
    Исключение
    КонецПопытки;

	// строка 1640 Текущие об-ва по расчетам с участниками
    П16403 = СНК(Счет67);
    Попытка
    	УстановитьЗначениеПоказателя("П16403", П16403);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16403", "Показник ""Поточна кредиторська заборгованість за розрахунками з учасниками"", графа ""На початок року""",	"+", "!СНК",СНК(Счет67), Счет67);
    Исключение
    КонецПопытки;

    П16404 = СКК(Счет67);
    Попытка
    	УстановитьЗначениеПоказателя("П16404", П16404);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16404", "Показник ""Поточна кредиторська заборгованість за розрахунками з учасниками"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет67), Счет67);
    Исключение
    КонецПопытки;

	
    // строка 16453 Текущие об-ва из внутренних расчетов
    П16453 = СНК(Счет68_2) + СНК(Счет68_3);
    Попытка
    	УстановитьЗначениеПоказателя("П16453", П16453);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16453", "Показник ""Поточна кредиторська заборгованість із внутрішніх розрахунків"", графа ""На початок року""",	"+", "!СНКРС",СНК(Счет68_2), Счет68_2);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16453", "",	"+", "!СНКРС",СНК(Счет68_3), Счет68_3);
    Исключение
    КонецПопытки;

    П16454 = СКК(Счет68_2) + СКК(Счет68_3);
    Попытка
    	УстановитьЗначениеПоказателя("П16454", П16454);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16454", "Показник ""Поточна кредиторська заборгованість із внутрішніх розрахунків"", графа ""На кінець звітного періоду""",	"+", "!СККРС",СКК(Счет68_2), Счет68_2);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16454", "",	"+", "!СККРС",СКК(Счет68_3), Счет68_3);
    Исключение
    КонецПопытки;
	
    // строка 1520: Текущее обеспечение
    П16603 = СНК(Счет47_1) + СНК(Счет47_3) + СНК(Счет47_4)+ СНК(Счет47_7); 
	Попытка
    	УстановитьЗначениеПоказателя("П16603", П16603);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16603", "Показник ""Поточні забезпечення"", графа ""На початок року""",	"+", "!СНК",СНК(Счет47_1), Счет47_1);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16603", "", "+", "!СНК",СНК(Счет47_3), Счет47_3);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16603", "", "+", "!СНК",СНК(Счет47_4), Счет47_4);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16603", "", "+", "!СНК",СНК(Счет47_7), Счет47_7);
    Исключение
    КонецПопытки;

    П16604 = СКК(Счет47_1) + СКК(Счет47_3)+ СКК(Счет47_4) + СКК(Счет47_7); 
    Попытка
    	УстановитьЗначениеПоказателя("П16604", П16604);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16604", "Показник ""Поточні забезпечення"", графа ""На кінець звітного періоду""", "+", "!СКК",СКК(Счет47_1), Счет47_1);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16604", "", "+", "!СКК",СКК(Счет47_3), Счет47_3);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16604", "", "+", "!СКК",СКК(Счет47_4), Счет47_4);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16604", "", "+", "!СКК",СКК(Счет47_7), Счет47_7);
    Исключение
    КонецПопытки;
	
    // Строка 1665 Доходы будущих периодов 
    П16653 = СНК(Счет69);
    Попытка
    	УстановитьЗначениеПоказателя("П16653", П16653);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16653", "Показник ""Доходи майбутніх періодів"", графа ""На початок року""",	"+", "!СНК",СНК(Счет69), Счет69);
    Исключение
    КонецПопытки;
    
    П16654 = СКК(Счет69);
    Попытка
    	УстановитьЗначениеПоказателя("П16654", П16654);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16654", "Показник ""Доходи майбутніх періодів"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет69), Счет69);
    Исключение
    КонецПопытки;
	
    //Строка 1690 другие обязательства
    П16903 = СНК(Счет60_5) + СНК(Счет60_6);
    _ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16903", "Показник ""Інші поточні зобов'язання"", графа ""На початок року""",	"+", "!СНК",СНК(Счет60_5), Счет60_5);
    _ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16903", "",	"+", "!СНК",СНК(Счет60_6), Счет60_6);
	
	П16904 = СКК(Счет60_5) + СКК(Счет60_6);
    _ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16904", "Показник ""Інші поточні зобов'язання"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет60_5), Счет60_5);
    _ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16904", "",	"+", "!СКК",СКК(Счет60_6), Счет60_6);
    
    ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет36);
    П16903_ = 0;
    П16904_ = 0;
    Если НЕ ВыборкаПоСчету = Неопределено Тогда
    	П16903_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
    	П16903 = П16903 + П16903_;
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16903", "",	"+", "!СНКРС",П16903_, Счет36);
		
		П16904_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
    	П16904 = П16904 + П16904_;
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16904", "",	"+", "!СККРС",П16904_, Счет36);
    КонецЕсли;
	
	
    мСчетаЗадолженность = Новый Массив;
    мСчетаЗадолженность.Добавить(Счет37);
    мСчетаЗадолженность.Добавить(Счет64_3);
    мСчетаЗадолженность.Добавить(Счет64_4);
	Если НЕ Счет64_5 = Неопределено Тогда
		мСчетаЗадолженность.Добавить(Счет64_5);
	КонецЕсли;
    мСчетаЗадолженность.Добавить(Счет68); 
    Для каждого Счет Из мСчетаЗадолженность Цикл
    	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет);
    	Пока мСчета.Следующий() Цикл
    		// Счета исключения
    		Если (мСчета.Ссылка = Счет68_0) ИЛИ (мСчета.Ссылка = Счет68_1) ИЛИ (мСчета.Ссылка = Счет68_2) ИЛИ 
    			(мСчета.Ссылка = Счет68_3) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет68_3)) ИЛИ
    			(мСчета.Ссылка.ПринадлежитЭлементу(Счет68_0)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет68_1)) ИЛИ 
    			(мСчета.Ссылка.ПринадлежитЭлементу(Счет68_2)) ИЛИ
				(мСчета.Ссылка = Счет37_1) ИЛИ (мСчета.Ссылка = Счет37_3) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет37_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет37_3)) Тогда 
    			Продолжить;
    		КонецЕсли;
    		Если мСчета.Вид = ВидСчета.АктивноПассивный Тогда
    			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", мСчета.Ссылка);
    			Если НЕ ВыборкаПоСчету = Неопределено Тогда
    				П16903_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
    				П16903  = П16903 + П16903_;
    				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П16903", "","+","!СНКРС",П16903_, мСчета.Ссылка);
    				П16904_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
    				П16904  = П16904 + П16904_;
    				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П16904", "","+","!СККРС",П16904_, мСчета.Ссылка);
    			КонецЕсли;	
    		Иначе 
				// учтем такую ситуацию: на чисто активном (чисто пассивном) счете может быть отрицательные сальдо
				// пример: на счете 6431 (если "первое событие" - по оплате) сальдо после отгрузки - отрицательное
				// не будем учитывать такие ситуации развернуто по субконто. Только итоговое сальдо по счету
				П16903_ = СНК(мСчета.Ссылка);
				Если П16903_ = 0 И СНД(мСчета.Ссылка) < 0 Тогда
					П16903_ = - СНД(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16903", "","-", "!СНД",-П16903_,мСчета.Ссылка );	
				ИначеЕсли П16903_ < 0 Тогда
					П16903_ = 0;	
				Иначе
	    			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16903", "","+", "!СНК",П16903_,мСчета.Ссылка );
				КонецЕсли;
    			П16903  = П16903 + П16903_;
				
				П16904_ = СКК(мСчета.Ссылка);
				Если П16904_ = 0 И СКД(мСчета.Ссылка) < 0 Тогда
					П16904_ = - СКД(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16904", "","-", "!СКД",-П16904_,мСчета.Ссылка );	
				ИначеЕсли П16904_ < 0 Тогда
					П16904_ = 0;	
				Иначе
	    			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16904", "","+", "!СКК",П16904_,мСчета.Ссылка);
				КонецЕсли;
    			П16904  = П16904 + П16904_;
    		КонецЕсли;
    	КонецЦикла;
    КонецЦикла;

    УстановитьЗначениеПоказателя("П16903", П16903);
    УстановитьЗначениеПоказателя("П16904", П16904);

    // строка 605 Необоротные активы предназначенные для продажи    
    Попытка
	    ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_0);
		П17003 = 0;
		Если НЕ ВыборкаПоСчету = Неопределено Тогда
	    	П17003 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
		КонецЕсли;
    	УстановитьЗначениеПоказателя("П17003", П17003);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П17003", "Показник ""Необоротні активи та групи вибуття"", графа ""На початок року""",	"+", "!СНКРС",П17003, Счет68_0);
    Исключение
    КонецПопытки;

    Попытка
	    ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_0);
		П17004 = 0;
		Если НЕ ВыборкаПоСчету = Неопределено Тогда
	    	П17004 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		КонецЕсли;
    	УстановитьЗначениеПоказателя("П17004", П17004);
    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П17004", "Показник ""Необоротні активи та групи вибуття"", графа ""На кінець звітного періоду""",	"+", "!СККРС",П17004, Счет68_0);
    Исключение
    КонецПопытки;

	Модифицированность = Истина;
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
	// скроем все пустые дополнительные строки
	Для каждого Строка Из мТаблицаСтрок Цикл
		Если ВРЕГ(Строка.ТипСтроки) = ВРЕГ("доп") Тогда
			Строка.ПоказатьСтроку = 	ЗначениеЗаполнено(СтруктураДанныхБаланс["П" + Строка.КодСтроки + "3"])
									ИЛИ ЗначениеЗаполнено(СтруктураДанныхБаланс["П" + Строка.КодСтроки + "4"]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
    Перем Ст8, Ст23;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)

КонецПроцедуры



&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			//ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
			ИмяПанели = Сред(Реквизит.Имя, 16);
			ТекПоказатели = Новый Структура(Новый ФиксированнаяСтруктура(ЭтаФорма[Реквизит.Имя]));
			СкорректироватьИмена(ИмяПанели, ТекПоказатели);
			ПоказателиОтчета.Вставить(ИмяПанели,ТекПоказатели);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С.Вставить("ДатаКонцаПериода", Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ';Л = uk_UA"));
	СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С.Вставить("ДатаКонцаПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции


&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
				
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	//Попытка
	//	СтруктураРеквизитовФормы.ДатаНач = ОтчетЗвит1С.GetValue("VIRT", "1C_DATE_1");				
	//	СтруктураРеквизитовФормы.ДатаКон = ОтчетЗвит1С.GetValue("VIRT", "1C_DATE_2");				
	//Исключение 
	//КонецПопытки;
	
	//глКомпонентаЗвит1С.Bring1CToFront();
	//ОткрытьФормуПараметров(Неопределено);	
	//глКомпонентаЗвит1С.BringZvitToFront();
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получене большего доп.параметров
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		// Заполнение зависит от формы реестра
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	КонецЕсли;

	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
  
КонецФункции	

#Область СкрываемыеДопСтроки


 &НаКлиенте
Процедура ОткрытьФормуНастроекОтображениеДополнительныхСтрок()
	
	СпозиционироватьсяНаОсновнуюСтраницу();

	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаНастройкиСтрок",, ЭтаФорма);
	
	КопироватьДанныеФормы(мТаблицаСтрок, ФормаНастройкиОтчета.ТаблицаСтрокОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуНастроекОтображениеДополнительныхСтрокЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекОтображениеДополнительныхСтрокЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		КопироватьДанныеФормы(РезультатВыбора, мТаблицаСтрок);
		ПоказатьСтрокиОтчета();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
// Управляет видимостью строк отчета
//
Процедура ПоказатьСтрокиОтчета()

	ТекПоле = ТабличныйДокумент;
	
	ИмеютсяСкрытые = Ложь;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;

	Для Каждого Строка Из мТаблицаСтрок Цикл
		
		КодСтроки = Строка.КодСтроки;
		
		Если НЕ ЗначениеЗаполнено(Строка.КодСтроки)
			ИЛИ ВРЕГ(Строка.ТипСтроки) = ВРЕГ("заг")
			ИЛИ ВРЕГ(Строка.ТипСтроки) = ВРЕГ("итог")
			ИЛИ ВРЕГ(Строка.ТипСтроки) = ВРЕГ("осн")
			Тогда
		    // видимостью таких строк мы не управляем
			Продолжить;	
		КонецЕсли;
		
		ТекущаяВидимость = ТекущаяВидимостьСтроки(КодСтроки);
		
		Если Строка.ПоказатьСтроку Тогда
			
			// открываем видимость без лишних вопросов
			Если ТекущаяВидимость = Ложь Тогда
				УстановитьВидимостьСтроки(КодСтроки, Строка.ПоказатьСтроку);	
			КонецЕсли;
			
		Иначе// строка должна быть скрыта
			
			ИмеютсяСкрытые = Истина;
			// если она содержит значение, то необходимо его обнулить в случае, если это не строка "в том. числе".
			// для строк "в том. числе" (ПризнакРасшифровки) мы оставляем заполненные в ней значение
			 
			Если ТекущаяВидимость = Ложь Тогда
				// строка и так скрыта	
			Иначе
				Если Строка.ПризнакРасшифровки Тогда
					УстановитьВидимостьСтроки(КодСтроки, Строка.ПоказатьСтроку);
				Иначе
					// это строка участвует в расчете	
					КодСтрокиРодителя = Строка.КодСтрокиРодителя;
					КодСтроки		  = Строка.КодСтроки;
					
					ЗначениеБылоПеренесеноВИтоговуюСтроку = Ложь;
					Для НомерКолонки = 3 По 4 Цикл
					
						// переносим в итоговую строку
						ТекЗначение = ПолучитьПоказательНаСервере("П" + КодСтроки + НомерКолонки, ЭтаФорма, "Баланс");
						
						ПредставлениеСтрокиРодителя = ТекПоле.Область("R" + НомерСтрокиТаблицыПоКодуСтроки(КодСтрокиРодителя) + "|Представление").Текст;
						ПредставлениеСтроки         = ТекПоле.Область("R" + НомерСтрокиТаблицыПоКодуСтроки(КодСтроки) 		  + "|Представление").Текст;
						
						Если ТекЗначение <> 0 Тогда
							
							ЗначениеБылоПеренесеноВИтоговуюСтроку = Истина;
							
							//переносим значение и сообщаем пользователю
							ЗаполнитьПоказательНаСервере("П" + КодСтрокиРодителя + НомерКолонки,
														 ТекЗначение + ПолучитьПоказательНаСервере("П" + КодСтрокиРодителя + НомерКолонки, ЭтаФорма, "Баланс"), ЭтаФорма, "Баланс");																					
																					
							Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Значение из строки %1 (%4) вместе с расшифровкой было перенесено в строку %2 (%5) /колонка ""%3""/! ';uk='Значення рядка %1 (%4) разом з розшифровкою було перенесено в рядок %2 (%5) /колонка ""%3""/! '")
														  , КодСтроки, КодСтрокиРодителя, НомерКолонки, ПредставлениеСтроки, ПредставлениеСтрокиРодителя));
														  
							ЗаполнитьПоказательНаСервере("П" + КодСтроки + НомерКолонки, 0, ЭтаФорма, "Баланс");							  
						КонецЕсли;
					
					КонецЦикла; 
					
					Если ЗначениеБылоПеренесеноВИтоговуюСтроку = Истина Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='     Внимание: при последующем включении в отчет дополнительной строки %1 суммы, и расшифровки, перенесенные в строку %2,  автоматически возвращены не будут!';uk='     Увага: при подальшому включенні в звіт додаткового рядка %1 суми, і розшифровки, перенесені в рядок %2, автоматично повернуті не будуть!'"), КодСтроки, КодСтрокиРодителя));
						
						// перенесем расшифровку
						Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
							
							Для каждого СтрокаРасшифровки Из ТаблицаРасшифровки Цикл
								
								Если Найти(СтрокаРасшифровки.ИмяПоказателя, КодСтроки) > 0 Тогда
									СтрокаРасшифровки.ИмяПоказателя = СтрЗаменить(СтрокаРасшифровки.ИмяПоказателя, КодСтроки, КодСтрокиРодителя);	
									СтрокаРасшифровки.НаименованиеПоказателя = "";
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;	
					
						
					УстановитьВидимостьСтроки(КодСтроки, Строка.ПоказатьСтроку);
					
				КонецЕсли;	
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	РасчетНаСервере();
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
	
		ТаблицаРасшифровки.Сортировать("ИмяПоказателя, НаименованиеПоказателя Убыв");
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
	КонецЕсли;
	
	КнопкиНастройки = Элементы.НастроитьОтображениеДополнительныхСтрок;
	ИсходныйТекст   = НСтр("ru='Настроить отображение дополнительных строк';uk='Налаштувати відображення додаткових рядків'");

	КнопкиНастройки.Заголовок = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка строк" доп. сммвол '*'.
		КнопкиНастройки.Заголовок = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуСтрок()

	ТекПоле = ТабличныйДокумент;
	ВысотаТаблицы = ТекПоле.ВысотаТаблицы;
	
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
		
		ТипСтроки = ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|ТипСтроки").Текст;
		Если НЕ ЗначениеЗаполнено(ТипСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление 			= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|Представление").Текст;
		КодСтроки	  			= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|КодСтроки").Текст;
		ПризнакРасшифровки 		= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|ПризнакРасшифровки").Текст;
		КодСтрокиРодителя	  	= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|КодСтрокиРодителя").Текст;
		
		Строка = мТаблицаСтрок.Добавить();
		Строка.Представление 	= Представление;
		Строка.КодСтроки 		= КодСтроки;
		Строка.ТипСтроки 	    = ТипСтроки;
		Строка.ПризнакРасшифровки 	= ЗначениеЗаполнено(ПризнакРасшифровки);
		Строка.КодСтрокиРодителя 	= КодСтрокиРодителя;
		
		Строка.ПоказатьСтроку 	= Истина;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ТекущаяВидимостьСтроки(КодСтроки)
	
	ТекПоле = ТабличныйДокумент;
	
	НомерСтрокиВТаблице = НомерСтрокиТаблицыПоКодуСтроки(КодСтроки);
	Если НомерСтрокиВТаблице = 0 Тогда
		Возврат Истина;	
	КонецЕсли;
	
	// видимость можно определить по ячейке строки, информация по строке - недоступна
	ТекВидимость = ТекПоле.Область(НомерСтрокиВТаблице,1,НомерСтрокиВТаблице,1).Видимость;
	
	Возврат ТекВидимость;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьСтроки(КодСтроки, Видимость)
	
	ТекПоле = ТабличныйДокумент;
	
	НомерСтрокиВТаблице = НомерСтрокиТаблицыПоКодуСтроки(КодСтроки);
	Если НомерСтрокиВТаблице = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ТекПоле.Область(НомерСтрокиВТаблице, ,НомерСтрокиВТаблице, ).Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Функция НомерСтрокиТаблицыПоКодуСтроки(КодСтроки)

	ТекПоле = ТабличныйДокумент;
	
	ЯчейкаСКодом = ТекПоле.Области.Найти("П" + КодСтроки + "3");
	
	Возврат ?(ЗначениеЗаполнено(ЯчейкаСКодом), Формат(ЯчейкаСКодом.Верх, "ЧГ="), 0);	

КонецФункции

#КонецОбласти

&НаСервере
// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СКК(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНКР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СКДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СККР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции



//Процедура заполняет значения в скобках по всему отчету  
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначенияВСкобках(Форма) Экспорт
	
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	Для Каждого ТекущаяОбласть Из ТекТабличноеПоле.Области Цикл 
		Если Сред(ТекущаяОбласть.Имя,1,1)= "_" Тогда 
			
			КодПоказателяБезСкобок = Сред(ТекущаяОбласть.Имя,2);
			ТекущаяОбласть.Значение = Формат(-ТекТабличноеПоле.Области[КодПоказателяБезСкобок].Значение, "ЧО=0" +Форма.СтруктураРеквизитовФормы.мСтрокаФормата);// формат отображения

		КонецЕсли;  	
	КонецЦикла 	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВводЧислаВСкобкахЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	
	ТабличныйДокумент.Области[ИмяЯчейки].Значение = РезультатВыбора; 
	ЗаполнитьПоказательНаСервере(ИмяЯчейки, РезультатВыбора, ЭтаФорма, "Баланс");
	
	// отобразим показатель "в скобках"
	ТабличныйДокумент.Области["_" +ИмяЯчейки].Значение = Формат(-РезультатВыбора,  "ЧО=0" + СтруктураРеквизитовФормы.мСтрокаФормата);// формат отображения
	
	Расчет(ЭтаФорма,,ИмяЯчейки);
		
КонецПроцедуры



&НаСервере
Процедура УстановитьЗначениеПоказателя(Имя, Значение)
	
	СтруктураДанныхБаланс[Имя] = Значение;
	
КонецПроцедуры


&НаСервере
Процедура _ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено)
	
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНДРС", "!СНДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СКДРС", "!СКДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНКРС", "!СНКР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СККРС", "!СККР");
	
	ДополнительныеПараметры = НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, Счет);
	
	Если    Лев(ИмяСлагаемого, 5) = "!СНДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СКДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СНКР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СККР" Тогда
	
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);	
		
		
		ТабличнаяЧастьГруппировка = Новый Массив;
		СчВидовСубконто = 0;
		Для каждого СтрокаВидовСубконто Из Счет.ВидыСубконто Цикл
			
			СчВидовСубконто = СчВидовСубконто + 1;
			ОписаниеГруппировки = Новый Структура;
			ОписаниеГруппировки.Вставить("Использование", Истина);
			ОписаниеГруппировки.Вставить("Поле", "Субконто" + СчВидовСубконто);
			ОписаниеГруппировки.Вставить("Представление", СтрокаВидовСубконто.ВидСубконто);
			ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
			ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		КонецЦикла;
		
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
		
	КонецЕсли;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого + " " + Счет.Код, Сумма, "Баланс", ДополнительныеПараметры);
	

КонецПроцедуры

&НаСервере
Функция НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры


&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	//временно, пока нет схем
	ПоказатьПредупреждение(,НСтр("ru='Выгрузка в XML - формат временно не доступна!';uk='Вивантаження в XML - формат тимчасово недоступне!'"));
	
	//СпозиционироватьсяНаОсновнуюСтраницу();

	//ВыгрузитьОтчет();

КонецПроцедуры // Выгрузить()      

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	// только для этого отчета
	ФормаВыгрузкиРеглОтчета.Объект.ВыгружатьПакетом = Ложь;
	ФормаВыгрузкиРеглОтчета.Элементы.ВыгружатьПакетом.Доступность= Ложь;
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Открыть();
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()

&НаКлиенте
Функция СоздатьТаблицуВыгружаемыхОтчетныхФорм() Экспорт

	АдресВХранилище = СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере()

	ТаблицаСхемXML = ЗаполнитьТаблицуСоСхемамиВыгрузки();
	ОпределитьСписокВыгружаемыхСхем(ТаблицаСхемXML);

	Возврат ПоместитьВоВременноеХранилище(ТаблицаСхемXML, Новый УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруСоСхемамиВыгрузки() Экспорт

	АдресВХранилище = СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере()

	ТипМакетаСхемыXSD = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные;

	СтруктураXSD = Новый Структура;
	Объект = ОбъектОтчета(ЭтаФорма.ИмяФормы);

	МетаданныеМактов = Объект.Метаданные().Макеты;

	Для Каждого Макет Из МетаданныеМактов Цикл
		
		Если ВРЕГ(Макет.Имя) = ВРЕГ("АрхивСхемXSD") Тогда
			
			АрхивСхемXSD = Объект.ПолучитьМакет("АрхивСхемXSD");
			
			ВременноеИмяZIP      = ПолучитьИмяВременногоФайла(".zip");
			ВременноеИмяКаталога = ПолучитьИмяВременногоФайла();
			
			АрхивСхемXSD.Записать(ВременноеИмяZIP);
			ЧтениеZIP = Новый ЧтениеZipФайла(ВременноеИмяZIP);
			
			Для каждого Схема Из ЧтениеZIP.Элементы Цикл
				
				ЧтениеZIP.Извлечь(Схема, ВременноеИмяКаталога);
				
				СтруктураXSD.Вставить(Схема.ИмяБезРасширения , Новый ДвоичныеДанные(ВременноеИмяКаталога + "\" + Схема.Имя));
			
			КонецЦикла;
			
			Попытка
				УдалитьФайлы(ВременноеИмяZIP);
			Исключение КонецПопытки;
			
			Попытка
				УдалитьФайлы(ВременноеИмяКаталога);
			Исключение КонецПопытки;
		
		КонецЕсли;
		
		Если Макет.ТипМакета = ТипМакетаСхемыXSD  Тогда
		
			СтруктураXSD.Вставить(Макет.Имя, Объект.ПолучитьМакет(Макет));		
		
		КонецЕсли;	
		
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(СтруктураXSD, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура  ОпределитьСписокВыгружаемыхСхем(тбСхемыXML);

	Для Каждого стр Из  тбСхемыXML Цикл
		стр.фВыгрузка = 1;
	КонецЦикла;

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьТаблицуСоСхемамиВыгрузки()

	//для возможности выгрузки в XML файл	
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТипПрефикса = СоздатьОписанияТипов("Строка",2);
	тбСхемыXML.Колонки.Добавить("Префикс",ТипПрефикса,НСтр("ru='Префикс';uk='Префікс'"));

	тбСхемыXML.Колонки.Добавить("Тип", ,НСтр("ru='Тип';uk='Тип'"));

	КоличествоСтраниц = 1;
	
	//НовСтрока = тбСхемыXML.Добавить();
	//НовСтрока.ИмяСхемы = "S0100114"; 
	//НовСтрока.ПредставлениеСхемы =НСтр("ru='Баланс (Единое окно, S0100114)';uk= 'Баланс (Єдино вікно, S0100114)'");
	//НовСтрока.НазваниеСтраницыПанели ="Баланс";

	//НовСтрока = тбСхемыXML.Добавить();
	//НовСтрока.ИмяСхемы = "J0900108"; 
	//НовСтрока.ПредставлениеСхемы ="Баланс (ДФС, J0900108)";
	//НовСтрока.НазваниеСтраницыПанели ="Баланс";

	тбСхемыXML.ЗаполнитьЗначения(Перечисления.ВерсииФорматовВыгрузки.ГНСУ_XML, "Тип");

	Возврат  тбСхемыXML

КонецФункции

&НаСервере
Процедура СкорректироватьИмена(ИмяПанели, СтруктураВход)
	// доп. показатели
	Структура = Новый Структура;
	
	// преобразуем показатели таблиц
	Для каждого Элемент Из СтруктураВход Цикл
	
		ИмяСтарое = Элемент.Ключ;
		
		Если ИмяПанели  = "Баланс" Тогда
			
			Если Лев(ИмяСтарое, 1) = "П" Тогда
				// для J
				Структура.Вставить("R"+Сред(ИмяСтарое, 2,4) + "G" + Прав(ИмяСтарое, 1), Элемент.Значение/1000);
				// для S
				Структура.Вставить(?(Прав(ИмяСтарое, 1) = "3", "A","B")+Сред(ИмяСтарое, 2,4) , Элемент.Значение/1000);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// добавим показатели шапки
	Если ИмяПанели  = "Баланс" Тогда
		
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("","ЮридическийАдрес");
		СписокПоказателей.Добавить("","Телефон");

		Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
		ЮридическийАдрес 	  = СокрЛП(Сведения.ЮридическийАдрес);
		Телефон				  = ОставитьТолькоЦифры(Сведения.Телефон);
		
		Структура.Вставить("FIRM_NAME", 	СтруктураВход.ОргНазв);
		Структура.Вставить("FIRM_EDRPOU", 	СтруктураВход.ОргКодЕДРПОУ);
		Структура.Вставить("FIRM_TERR", 	СтруктураВход.ОргТерритория);
		Структура.Вставить("FIRM_SPATO", 	СтруктураВход.ОргКодКОАТУУ);
		Структура.Вставить("FIRM_KVED", 	СтруктураВход.ОргКодКВЕД);
		Структура.Вставить("FIRM_ADR", 		ЮридическийАдрес);
		Структура.Вставить("FIRM_RUK", 		СтруктураВход.ОргДиректор);
		Структура.Вставить("FIRM_BUH", 		СтруктураВход.ОргБухгалтер);
		Структура.Вставить("FIRM_KVEDNM", 	СтруктураВход.ОргВЭД);
		Структура.Вставить("FIRM_OPFCD", 	?(ЗначениеЗаполнено(СтруктураВход.ОргКодОПФГ), СтруктураВход.ОргКодОПФГ, 0));
		Структура.Вставить("FIRM_OPFNM", 	СтруктураВход.ОргОПФГ);
		Структура.Вставить("FIRM_TELORG", 	Телефон);
		Структура.Вставить("MY_DATE", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Структура.Вставить("N1", 			СтруктураВход.ДатаКонцаПериодаОтчетаГод);
		Структура.Вставить("N2", 			СтруктураВход.ДатаКонцаПериодаОтчетаМесяц);
		Структура.Вставить("N3", 			СтруктураВход.ССЧ);
		Структура.Вставить("N4", 			СтруктураВход.ЗаполненоПоПСБУ);
		Структура.Вставить("N5", 			СтруктураВход.ЗаполненоПоМСФО);
		Структура.Вставить("LASTDAY", 		СтруктураВход.ДатаКонцаПериодаОтчетаЧисло);
		
		Структура.Вставить("HFILL", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета+1);
		Структура.Вставить("HNAME", 		СтруктураВход.ОргНазв);
		Структура.Вставить("HTIN", 			СтруктураВход.ОргКодЕДРПОУ);
		Структура.Вставить("HKOATUU_S", 	СтруктураВход.ОргТерритория);
		Структура.Вставить("HKOATUU", 		СтруктураВход.ОргКодКОАТУУ);
		Структура.Вставить("HKOPFG_S", 		СтруктураВход.ОргОПФГ);
		Структура.Вставить("HKOPFG", 		СтруктураВход.ОргКодОПФГ);
		Структура.Вставить("HKVED_S", 		СтруктураВход.ОргВЭД);
		Структура.Вставить("HKVED", 		СтруктураВход.ОргКодКВЕД);
		Структура.Вставить("HKIL", 			СтруктураВход.ССЧ);
		Структура.Вставить("HLOC", 			ЮридическийАдрес);
		Структура.Вставить("HTEL", 			Телефон);
		Структура.Вставить("H01", 			СтруктураВход.ЗаполненоПоПСБУ);
		Структура.Вставить("H02", 			СтруктураВход.ЗаполненоПоМСФО);
		Структура.Вставить("HPERIOD", 		Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ';Л = uk_UA"));
		Структура.Вставить("HZY", 			Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		Структура.Вставить("HBOS", 			СтруктураВход.ОргДиректор);
		Структура.Вставить("HBUH", 			СтруктураВход.ОргБухгалтер);
		
	ИначеЕсли ИмяПанели  = "СлужебныеДанные" Тогда
		
		Структура.Вставить("D_FILL", ДатаПодписи);
		
	КонецЕсли;
	
	// перенесем доп. показатели
	Для каждого Элемент Из Структура Цикл
		СтруктураВход.Вставить(Элемент.Ключ, Элемент.Значение);	
	КонецЦикла;

КонецПроцедуры
