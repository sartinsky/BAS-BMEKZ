

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьНачальныеНастройки();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПанельОтчетовКлючВарианта = " - ";
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.КомандыЕще.Ширина = 11;
	КонецЕсли;
	
	// Локальные переменные
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	РежимВариантаОтчета = (Параметры.Свойство("КлючВарианта") И Параметры.КлючВарианта <> Неопределено);
	КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
	НаименованиеОтчета = СокрЛП(ОтчетМетаданные.Представление());
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	// Параметры формы
	ФормаПараметры = Новый Структура(
	"КлючНазначенияИспользования, КлючПользовательскихНастроек,
	|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
	|ФиксированныеНастройки, ОтчетСсылка, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	Если НЕ ЗначениеЗаполнено(ФормаПараметры.ОтчетСсылка) Тогда
		ОтчетИнформация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(КлючОбъекта);
		Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
			ФормаПараметры.ОтчетСсылка = ОтчетИнформация.Отчет;
		Иначе
			ФормаПараметры.ОтчетСсылка = КлючОбъекта;
		КонецЕсли;
	КонецЕсли;
	
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	
	// Реквизиты
	НастройкиОтчета = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	НастройкиОтчета.Вставить("Отбор", Новый Структура);
	
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиОтчета.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
    //Если ВариантыОтчетовПовтИсп.ДоступныеОтчеты().Найти(ФормаПараметры.ОтчетСсылка) <> Неопределено Тогда
    //	ОтчетОбъект.ОпределитьНастройкиФормы(ЭтотОбъект, КлючТекущегоВарианта, НастройкиОтчета);
    //КонецЕсли;
	Если ОтчетМетаданные.ХранилищеНастроек = Неопределено Тогда
		НастройкиОтчета.Вставить("ХранилищеПользовательскихНастроек", Неопределено);
	Иначе
		НастройкиОтчета.Вставить("ХранилищеПользовательскихНастроек", ОтчетМетаданные.ХранилищеНастроек.ПолноеИмя());
	КонецЕсли;
	
	
	// Параметры по умолчанию
	Если НастройкиОтчета.Свойство("ВыводитьСуммуВыделенныхЯчеек") И Не НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		Элементы.АвтоСуммаГруппа.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Скрытие команд вариантов
	Если Не Параметры.Свойство("ВидимостьКомандВариантовОтчетов", ВидимостьКомандВариантовОтчетов) Тогда
		ВидимостьКомандВариантовОтчетов = ВариантыОтчетовПовтИсп.ПравоДобавления();
	КонецЕсли;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	// Скрытие кнопки выбора варианта из расшифровки.
	Если РежимРасшифровки Тогда
		Элементы.ВыбратьВариант.Видимость = Ложь;
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			РежимРасшифровкиПредставлениеВладельца = ОтчетНаименованиеТекущегоВарианта;
		КонецЕсли;
	КонецЕсли;
	
	// Приведение зависимых элементов формы к кондиции
	ВидимостьДоступностьКорректность();
	
	// Механизмы расширения
    //Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
    //	МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
    //	МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
    //КонецЕсли;
	Если НастройкиОтчета.События.ПриСозданииНаСервере Тогда
		ОтчетОбъект.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// Если в подменю одна команда, то выпадающий список не отображается.
	Если Элементы.Отправить.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.Отправить.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочте.Заголовок = Элементы.Отправить.Заголовок + "...";
	КонецЕсли;
	Если Элементы.ОтправитьВсеДействия.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.ОтправитьВсеДействия.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочтеВсеДействия.Заголовок = Элементы.ОтправитьВсеДействия.Заголовок + "...";
	КонецЕсли;
	
	ФормаПараметры = Новый ФиксированнаяСтруктура(ФормаПараметры);
	
	// Для этого отчета, период только месяц
	ЭтаФорма.ВидПериода = Перечисления.ДоступныеПериодыОтчета.Месяц;
	УправлениеФормой(ЭтаФорма);

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не Отказ Тогда
		ФормаОткрыта = Истина;
	КонецЕсли;
	
	// Варианты представления отчета
	Элементы.РежимОтображения.СписокВыбора.Добавить("Показывать только подразделения",Нстр("ru = 'Показывать только подразделения'; uk = 'Показувати тільки підрозділи'") );
	Элементы.РежимОтображения.СписокВыбора.Добавить("Показывать только сотрудников", Нстр("ru = 'Показывать только сотрудников'; uk = 'Показувати тільки співробітників'"));
	Элементы.РежимОтображения.СписокВыбора.Добавить("Показывать подразделения и сотрудников", Нстр("ru = 'Показывать подразделения и сотрудников'; uk = 'Показувати підрозділи і співробітників'"));
	Элементы.РежимОтображения.СписокВыбора.Добавить("Показывать подразделения, сотрудников и периоды",Нстр("ru = 'Показывать подразделения, сотрудников и периоды'; uk = 'Показувати підрозділи, співробітників і періоди'"));
	Элементы.РежимОтображения.СписокВыбора.Добавить("Показывать подразделения и периоды",Нстр("ru = 'Показывать подразделения и периоды'; uk = 'Показувати підрозділи і періоди'") );
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	Если ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта() Тогда
		ПанельОтчетовКлючВарианта = " - ";
		ВидимостьДоступностьКорректность();
		ОповещениеОбработано = Истина;
	КонецЕсли;
	
	ОтчетыКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	// Заголовок
	ВидимостьДоступностьКорректность("ВариантОтчета");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "КонецПериода,НачалоПериода");
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлажокБазаПриИзменении(Элемент)
	СформироватьОтчетНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ФлажокБазаВзносаПриИзменении(Элемент)
	СформироватьОтчетНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ФлажокРезультатПриИзменении(Элемент)
	СформироватьОтчетНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ФлажокСвернутьПодразделенияПриИзменении(Элемент)
	СформироватьОтчетНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	СформироватьОтчетНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	СформироватьОтчетНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ВыборПериодаКлиент.ВидПериодаПриИзменении(Элемент,ВидПериода,Отчет.НачалоПериода,Отчет.КонецПериода,Период);
	Период = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода,Отчет.КонецПериода,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода,ВидПериода",Отчет.НачалоПериода,Отчет.КонецПериода,ВидПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц",ПараметрыВыбора,Элементы.Период,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыборПериодаКлиент.ПериодОбработкаВыбора(Элемент,ВыбранноеЗначение,СтандартнаяОбработка,ВидПериода,Период,Отчет.НачалоПериода,Отчет.КонецПериода);
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ВыборПериодаКлиент.ПериодАвтоПодбор(Элемент,Текст,ДанныеВыбора,Ожидание,СтандартнаяОбработка,ВидПериода,Период,Отчет.НачалоПериода,Отчет.КонецПериода);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(Элемент,Текст,ДанныеВыбора,СтандартнаяОбработка,ВидПериода,Период,Отчет.НачалоПериода,Отчет.КонецПериода);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизацииОбласти(Элемент)
	Если НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РассчитатьСуммуЯчеек", ИнтервалОжидания, Истина);
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	
	ПараметрыФормы.Вставить("Вариант", Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючОбъекта",               Строка(КлючОбъекта));
	ПараметрыФормы.Вставить("КлючВарианта",              Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ВариантСсылка",             ВариантСсылка);
	ПараметрыФормы.Вставить("НастройкиОтчета",           НастройкиОтчета);
	ПараметрыФормы.Вставить("НаименованиеОтчета",        НаименованиеОтчета);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",     Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(КлючОбъекта + ".ФормаНастроек", ПараметрыФормы, ЭтотОбъект, , , , , Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	СуммаВыделенныхЯчеек = ВычислитьСуммуСервер(ОтчетТабличныйДокумент, ВыделенныеОбласти());

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	Для Каждого КлючИЗначение Из ФормаПараметры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(КлючОбъекта + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Событие", Новый Структура);
	ПараметрыЗаполнения.Событие.Вставить("Имя", "НастройкиПоУмолчанию");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru='Отчет не сформирован. Сформировать?';uk='Звіт не сформований. Сформувати?'");
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_РассчитатьСуммуЯчеек()
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, Неопределено);
	Если ТипЗнч(Сумма) = Тип("Число") Тогда
		СуммаВыделенныхЯчеек = Формат(Сумма, "ЧН=0");
	Иначе
		СуммаВыделенныхЯчеек = "-";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеОбласти()
	Результат = Новый Массив;
	Для Каждого ВыделеннаяОбласть Из ОтчетТабличныйДокумент.ВыделенныеОбласти  Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		Структура = Новый Структура("Верх, Низ, Лево, Право, ТипОбласти");
		ЗаполнитьЗначенияСвойств(Структура, ВыделеннаяОбласть);
		Результат.Добавить(Структура);
	КонецЦикла;
	
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СформироватьНепосредственно();
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ЭтотОбъект.ОтчетТабличныйДокумент, ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	
	
	ФормаЗаголовок = СтрЗаменить(НСтр("ru='Отправка отчета ""%1"" по почте';uk='Відправлення звіту ""%1"" поштою'"), "%1", ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	ПараметрыФормы.Вставить("Тема",               ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	ПараметрыФормы.Вставить("Заголовок",          ФормаЗаголовок);
	
	ОткрытьФорму("ОбщаяФорма.ОтправкаТабличныхДокументовПоПочте", ПараметрыФормы, , );
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент или сервер

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Форма.Период = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
	Форма.ВидПериода, Отчет.НачалоПериода, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуВыделенныхЯчеек(ТабличныйДокумент, ВыделенныеОбласти)
	
	#Если Клиент Тогда
		ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
	#КонецЕсли
	
	#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
		КоличествоВыделенныхОбластей = ВыделенныеОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0 Тогда
			Возврат 0;
		ИначеЕсли КоличествоВыделенныхОбластей >= 100 Тогда
			Возврат Неопределено; // Нужен вызов сервера.
		КонецЕсли;
		КоличествоВыделенныхЯчеек = 0;
	#КонецЕсли
	
	Сумма = 0;
	ПроверенныеЯчейки = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		#Если Клиент Тогда
			Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;
		
		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево;
		
		#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
			КоличествоВыделенныхЯчеек = КоличествоВыделенныхЯчеек + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;
			Если КоличествоВыделенныхЯчеек >= 1000 Тогда
				Возврат Неопределено; // Нужен вызов сервера.
			КонецЕсли;
		#КонецЕсли
		
		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Ячейка.Видимость = Истина Тогда
					Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки
						И Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Сумма = Сумма + Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						Сумма = Сумма + СтрокаВЧисло(Ячейка.Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(ИсходнаяСтрока)
	// Превращает строку в число без вызова исключений. Стандартная функция преобразования
	//   Число() строго контролирует отсутствие каких-либо символов кроме числовых.
	
	Результат = 0;
	ЗнаковПослеЗапятой = -1;
	ЗнакОтрицательный = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 45 Или КодСимвола = 40 Тогда // Минус или открывающая скобка.
			Если Результат <> 0 Тогда
				Возврат 0;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
		ИначеЕсли КодСимвола = 41 Тогда // Закрывающая скобка.
			Если Не ЗнакОтрицательный Или Результат = 0 Тогда // Не было открывающей скобки или нет числа.
				Возврат 0;
			КонецЕсли;
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 44 Или КодСимвола = 46 Тогда // Запятая или точка.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				Возврат 0; // Разделитель уже был, следовательно это не число.
			КонецЕсли;
			ЗнаковПослеЗапятой = 0; // Запуск отсчета знаков после запятой.
		ИначеЕсли КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			КонецЕсли;
			Число = КодСимвола - 48;
			Результат = Результат * 10 + Число;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Результат = Результат / Pow(10, ЗнаковПослеЗапятой);
	КонецЕсли;
	Если ЗнакОтрицательный Тогда
		Результат = -Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПодготовитьПараметрыОтчета() 
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                       , Отчет.Организация);
	ПараметрыОтчета.Вставить("Подразделение"                     , Отчет.Подразделение);
	ПараметрыОтчета.Вставить("НачалоПериода"                    , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                     , Отчет.КонецПериода);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура УстановитьНачальныеНастройки()
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	ОтчетТабличныйДокумент.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	ТабДок = ОтчетТабличныйДокумент;
	
	СводОтчисленийВФонды(ТабДок,Период);
	
КонецФункции

// Процедура формирует отчет
//
// Параметры:
//	ТабДок, ТабДок2	- Поле табличного документа 
//  Период			- Начальная дата периода
//	Организация		- Значение типа СправочникСсылка.Организации
//
&НаСервере
Процедура СводОтчисленийВФонды(ТабДок, Период) Экспорт	
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(); 
	
	// Заполнение названий статей налоговой декларации
	СтатьяНалоговойДекларации = Новый Массив();
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Орг32);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Орг4);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Орг42);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Декр);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Сотр15);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Орг29);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр05);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр1);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССНесчСлуч_Орг);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр025);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССБезработ_Орг);
	СтатьяНалоговойДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССБезработ_Сотр);
	
	// Список областей макета
	Области = Новый Массив();	
	Области.Добавить("");
	Области.Добавить("");
	Области.Добавить("ПФБаза");
	Области.Добавить("ПФИнвалиды");
	Области.Добавить("ПФЛетчики");
	Области.Добавить("ПФДекрет");
	Области.Добавить("ПФССотр1");
	Области.Добавить("ПФССотр2");
	Области.Добавить("ФСББазаИнвал");
	Области.Добавить("ФСБФОТ");
	Области.Добавить("ФСБССотр");
	Области.Добавить("ФСНетрБаза");
	Области.Добавить("ФСНетрССотр05");
	Области.Добавить("ФСНетрССотр1");
	Области.Добавить("ФСНесчСлФОТ");
	
	ОтборОрганизации = Новый Структура("Организация",Отчет.Организация);
	ОтборОрганизации.Организация = Отчет.Организация;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ИНАГРО_СводОтчисленийВФонды.СводОтчисленийВФонды");
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Запрос = Новый Запрос;
	
	ОтборОрганизации		= ЗначениеЗаполнено(Отчет.Организация);
	ОтборПодразделения			= ЗначениеЗаполнено(Отчет.Подразделение);
	
	Подразделение				= Отчет.Подразделение;
	
	Запрос.УстановитьПараметр("Организация", Отчет.Организация);
	ВидСравненияОрганизацииСтрокой = "=" ;
	
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Отчет.Подразделение);
	ВидСравненияПодразделение = "="; 
	
	
	РНУсловиеТекст = "";
	Если ОтборОрганизации Тогда
		РНУсловиеТекст = РНУсловиеТекст + " И РаботникиОрганизаций.Организация " + ВидСравненияОрганизацииСтрокой + " (&Организация)";
	КонецЕсли;
	
	Если ОтборПодразделения  Тогда
		РНУсловиеТекст = РНУсловиеТекст + " И РаботникиОрганизаций.ПодразделениеОрганизации " + ВидСравненияПодразделение + " (&ПодразделениеОрганизации)";
	КонецЕсли;
	
	// Получим подразделения по последнему приказу
	Текст_Приказы = "
	|	ВЫБРАТЬ 
	|		ПриказыДок.Организация,
	|		ПриказыДок.Сотрудник,
	|		ПриказыДок.Приказ,
	|		Подразделения.ПодразделениеОрганизации
	|	ИЗ (	
	|		ВЫБРАТЬ 
	|			Док.Организация,
	|			Док.Сотрудник,
	|			МАКСИМУМ(Док.Приказ) КАК Приказ
	|		ИЗ (
	|			ВЫБРАТЬ 
	|				Организация,
	|				Сотрудник,
	|				Регистратор КАК Приказ
	|			ИЗ  РегистрСведений.ИНАГРО_РаботникиОрганизаций 
	|			ГДЕ		Период <= &ДатаКонца  
	|				И	Регистратор ССЫЛКА Документ.ИНАГРО_УвольнениеИзОрганизаций
	|				" + ?(ОтборОрганизации, " И	Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|			ВЫБРАТЬ  
	|				Организация,
	|				Сотрудник,
	
	|				ВЫБОР
	|				КОГДА Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию ИЛИ
	|	                           Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	|				ТОГДА Регистратор
	|				ИНАЧЕ NULL
	|				КОНЕЦ КАК Приказ
	
	|			ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонца)
	|			ГДЕ		ЗанимаемыхСтавок > 0
	|				" + ?(ОтборОрганизации, " И	Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорникиОрганизаций.Организация,
	|		ДоговорникиОрганизаций.Сотрудник,
	|       NULL
	|	ИЗ  Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорникиОрганизаций
	|	
	|	ГДЕ ДоговорникиОрганизаций.Проведен
	|		И ДоговорникиОрганизаций.ДатаОкончания >= &ДатаНачала
	|		И ДоговорникиОрганизаций.ДатаНачала <= КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
	|		" + ?(ОтборОрганизации, " И	Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|		  ) КАК Док
	|		
	|		СГРУППИРОВАТЬ ПО 
	|			Док.Организация,
	|			Док.Сотрудник
	|	) КАК ПриказыДок	
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ 
	|				Организация,
	|				Сотрудник,
	|				ПодразделениеОрганизации,
	|				Регистратор КАК Приказ
	|			ИЗ  РегистрСведений.ИНАГРО_РаботникиОрганизаций 
	|			ГДЕ		Период <= &ДатаКонца  
	|				И	Регистратор ССЫЛКА Документ.ИНАГРО_УвольнениеИзОрганизаций
	|				" + ?(ОтборОрганизации, " И	Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|			ВЫБРАТЬ  
	|				Организация,
	|				Сотрудник,
	|				ПодразделениеОрганизации,
	
	|				ВЫБОР
	|						КОГДА Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию ИЛИ
	|	                           Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	|						ТОГДА Регистратор
	|						ИНАЧЕ NULL
	|				КОНЕЦ КАК Приказ
	
	
	|			ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонца)
	|			ГДЕ		ЗанимаемыхСтавок > 0
	|				" + ?(ОтборОрганизации, " И	Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорникиОрганизаций.Организация,
	|		ДоговорникиОрганизаций.ПодразделениеОрганизации,
	|		ДоговорникиОрганизаций.Сотрудник,
	|       NULL
	|	ИЗ  Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорникиОрганизаций
	|	
	|	ГДЕ ДоговорникиОрганизаций.Проведен
	|		И ДоговорникиОрганизаций.ДатаОкончания >= &ДатаНачала
	|		И ДоговорникиОрганизаций.ДатаНачала <= КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
	|		" + ?(ОтборОрганизации, " И	Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|	) КАК Подразделения
	|	ПО  	ПриказыДок.Организация = Подразделения.Организация
	|	  	И	ПриказыДок.Сотрудник = Подразделения.Сотрудник
	|	  	И	ПриказыДок.Приказ = Подразделения.Приказ
	|		
	|		
	|";	
	
	Текст_ПодразделениеОрганизации = "
	|	ВЫБРАТЬ 
	|		ВсеСотрудники.Организация				КАК Организация,
	|		ВсеСотрудники.Сотрудник					КАК Сотрудник,
	|		Приказы.Приказ						КАК Приказ,
	|		Приказы.ПодразделениеОрганизации	КАК ПодразделениеОрганизации
	|	ИЗ (				
	|		ВЫБРАТЬ 
	|			Организация,
	|			Сотрудник
	|		ИЗ  РегистрСведений.ИНАГРО_РаботникиОрганизаций 
	|		ГДЕ		Период <= &ДатаКонца  
	|			И	Регистратор ССЫЛКА Документ.ИНАГРО_УвольнениеИзОрганизаций
	|			" + ?(ОтборОрганизации, " И	Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ  
	|			Организация,
	|			Сотрудник
	|		ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонца)
	|		ГДЕ		ЗанимаемыхСтавок > 0
	|			" + ?(ОтборОрганизации, " И	Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорникиОрганизаций.Организация,
	|		ДоговорникиОрганизаций.Сотрудник
	|	ИЗ  Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорникиОрганизаций
	|	
	|	ГДЕ ДоговорникиОрганизаций.Проведен
	|		И ДоговорникиОрганизаций.ДатаОкончания >= &ДатаНачала
	|		И ДоговорникиОрганизаций.ДатаНачала <= КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
	|		" + ?(ОтборОрганизации, " И	Организация "+ ВидСравненияОрганизацииСтрокой +" (&Организация)","")+"
	|		) КАК ВсеСотрудники
	|			
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ ( " + Текст_Приказы + " ) КАК 	Приказы
	|		ПО  	ВсеСотрудники.Организация = Приказы.Организация
	|			И	ВсеСотрудники.Сотрудник = Приказы.Сотрудник
	|		
	|";	
	
	
	Запрос.УстановитьПараметр("Организация", Отчет.Организация);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокКолонки.НомерКолонки,
	|	ПорядокКолонки.Точность,
	|	ПорядокКолонки.ГруппаНалогов,
	|
	|	Взаиморасчеты.Организация					КАК Организация,
	|	Взаиморасчеты.Сотрудник			   			КАК Сотрудник,
	|	Взаиморасчеты.Период						КАК Период,
	|	Взаиморасчеты.ПодразделениеОрганизации 		КАК ПодразделениеОрганизации,
	|	Взаиморасчеты.СуммаНачислений,
	|	Взаиморасчеты.Ставка,
	|	Взаиморасчеты.Предел,
	|	Взаиморасчеты.База,
	|	Взаиморасчеты.БазаВзноса,
	|	Взаиморасчеты.Результат,               
	|	Взаиморасчеты.Налог,
	|	Взаиморасчеты.СтатьяНалоговойДекларации,
	|	// Подписи ответственных
	|	ОтветственныеЛицаДиректор.ФизическоеЛицо.Наименование 	КАК ФИОДиректор,
	|	ОтветственныеЛицаГлБух.ФизическоеЛицо.Наименование 	КАК ФИОГлБух
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		Взаиморасчеты.Организация  						КАК Организация,
	|		РаботникиОрганизаций.ПодразделениеОрганизации 	КАК ПодразделениеОрганизации,
	|		Взаиморасчеты.Сотрудник 							КАК Сотрудник,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодДействия, МЕСЯЦ)		КАК Период,
	|		&ПустойНалог 			КАК Налог,
	|		0  						КАК СтатьяНалоговойДекларации,
	|		0  						КАК Предел,
	|		0  						КАК Ставка,
	|		СУММА(Взаиморасчеты.Результат)			КАК СуммаНачислений,
	|		0 КАК База,
	|		0 КАК БазаВзноса,
	|		0 КАК Результат               
	|
	|	ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Взаиморасчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ( " + Текст_ПодразделениеОрганизации + "	)КАК РаботникиОрганизаций
	|	ПО 	Взаиморасчеты.Сотрудник = РаботникиОрганизаций.Сотрудник
	|	И	Взаиморасчеты.Организация = РаботникиОрганизаций.Организация
	|	
	|	ГДЕ	Взаиморасчеты.ПериодРегистрации = &ДатаНачала 
	|	" + РНУсловиеТекст + "
	|
	|	СГРУППИРОВАТЬ ПО
	|		Взаиморасчеты.Организация,
	|		РаботникиОрганизаций.ПодразделениеОрганизации,
	|		Взаиморасчеты.Сотрудник,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодДействия, МЕСЯЦ)
	|
	|
	|   ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Взаиморасчеты.Организация  							КАК Организация,
	|		РаботникиОрганизаций.ПодразделениеОрганизации 		КАК ПодразделениеОрганизации,
	|		Взаиморасчеты.ИНАГРО_Сотрудник 								КАК Сотрудник,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ)	КАК Период,
	|		Взаиморасчеты.Налог 						КАК Налог,
	|		Взаиморасчеты.СтатьяНалоговойДекларации  	КАК СтатьяНалоговойДекларации,
	|		Взаиморасчеты.Предел  						КАК Предел,
	|		Взаиморасчеты.Ставка  						КАК Ставка,
	|		0											КАК СуммаНачислений,
	|		СУММА( Взаиморасчеты.ИНАГРО_База ) 			КАК База,
	|		СУММА( Взаиморасчеты.ИНАГРО_БазаВзноса ) 	КАК БазаВзноса,
	|		СУММА( Взаиморасчеты.Сумма ) 				КАК Результат               
	|
	|	ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды КАК Взаиморасчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ( " + Текст_ПодразделениеОрганизации + "	)КАК РаботникиОрганизаций
	|	ПО 	Взаиморасчеты.ИНАГРО_Сотрудник = РаботникиОрганизаций.Сотрудник
	|	И	Взаиморасчеты.Организация = РаботникиОрганизаций.Организация
	|	
	|	ГДЕ	Взаиморасчеты.Период >= &ДатаНачала 
	|	И Взаиморасчеты.Период <= &ДатаКонца
	|	" + РНУсловиеТекст + "
	|
	|	СГРУППИРОВАТЬ ПО
	|		Взаиморасчеты.Организация,
	|		РаботникиОрганизаций.ПодразделениеОрганизации,
	|		Взаиморасчеты.ИНАГРО_Сотрудник,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		Взаиморасчеты.Ставка,
	|		Взаиморасчеты.Предел,
	|		Взаиморасчеты.Налог,
	|		Взаиморасчеты.СтатьяНалоговойДекларации
	|
	|   ) КАК Взаиморасчеты
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_СводОтчисленийВФондыНастройкиОтчета 	КАК ПорядокКолонки
	|	ПО ПорядокКолонки.Налог 		= Взаиморасчеты.Налог
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКонца) КАК ОтветственныеЛицаДиректор 
	|	ПО ОтветственныеЛицаДиректор.СтруктурнаяЕдиница = Взаиморасчеты.Организация
	|	И ОтветственныеЛицаДиректор.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКонца) КАК ОтветственныеЛицаГлБух
	|	ПО ОтветственныеЛицаГлБух.СтруктурнаяЕдиница = Взаиморасчеты.Организация
	|	И ОтветственныеЛицаГлБух.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,                                             
	|	НомерКолонки                                             
	|
	|ИТОГИ Сумма(СуммаНачислений), Сумма(База), Сумма(БазаВзноса), Сумма(Результат), Максимум(Точность), МАКСИМУМ(ФИОДиректор), МАКСИМУМ(ФИОГлБух) ПО
	|   ОБЩИЕ,
	|	Организация,
	|	ГруппаНалогов,                                             
	|	СтатьяНалоговойДекларации,                                             
	|	Ставка,                                             
	|   ПодразделениеОрганизации,
	|   Сотрудник,
	|	Период
	|
	|";
	
	Запрос.УстановитьПараметр("ДатаНачала", Отчет.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКонца", Отчет.КонецПериода);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ПустойНалог", Справочники.Налоги.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВнутреннийСовместитель", Перечисления.ВидыЗанятости.ВнутреннееСовместительство);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	рез = Запрос.Выполнить().Выгрузить();
	КолОтделов = 0;
	КолСотр = 0;
	
	
	ТабДок.ФиксацияСверху = 7;
	ТабДок.ФиксацияСлева = 19;
	
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	ВыборкаГруппаНалогов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГруппаНалогов");	
	Пока ВыборкаОрганизация.Следующий() Цикл
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Организация = ВыборкаОрганизация.Организация;
		ОбластьЗаголовок.Параметры.Период = ЭтаФорма.Период;
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		
		ОбластьШапкаОбщая		= Макет.ПолучитьОбласть("Шапка|Общая");
		ОбластьШапкаКолонка1	= Макет.ПолучитьОбласть("Шапка|Колонка1");
		ОбластьШапкаКолонка2	= Макет.ПолучитьОбласть("Шапка|Колонка2");
		ОбластьШапкаКолонка3	= Макет.ПолучитьОбласть("Шапка|Колонка3");
		ОбластьШапкаРазделитель	= Макет.ПолучитьОбласть("Шапка|Разделитель");
		
		ТабДок.Вывести(ОбластьШапкаОбщая);
		
		ВыборкаГруппаНалогов.Сбросить();
		
		КолСтолбцов = ВыборкаГруппаНалогов.Количество();
		Ст = 0;
		Пока ВыборкаГруппаНалогов.Следующий() Цикл
			Ст = Ст + 1;
			Если ВыборкаГруппаНалогов.ГруппаНалогов =NULL Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть =  ОбластьШапкаКолонка1;
			ТекущаяОбласть.Параметры.ИмяНалог = ВыборкаГруппаНалогов.ГруппаНалогов;
			
			ВыборкаСтатьяНалоговойДекларации = ВыборкаГруппаНалогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяНалоговойДекларации");
			Пока ВыборкаСтатьяНалоговойДекларации.Следующий() Цикл
				ВыборкаСтавка = ВыборкаСтатьяНалоговойДекларации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
				
				Пока ВыборкаСтавка.Следующий() Цикл
					
					ТекущаяОбласть.Параметры.ИмяСтатьяНалоговойДекларации = ВыборкаСтавка.СтатьяНалоговойДекларации;
					
					Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
					
					Если Отчет.ФлажокБаза Тогда
						ТекущаяОбласть.Параметры.ИмяРезультата = НСтр("ru='База';uk='База'");
						ТабДок.Присоединить(ТекущаяОбласть);
						ТекущаяОбласть = ОбластьШапкаКолонка3;
					КонецЕсли;
					Если Отчет.ФлажокБазаВзноса Тогда
						ТекущаяОбласть.Параметры.ИмяРезультата = НСтр("ru='База с огр.';uk='База с огр.'");
						ТабДок.Присоединить(ТекущаяОбласть);
						ТекущаяОбласть = ОбластьШапкаКолонка3;
					КонецЕсли;
					Если Отчет.ФлажокРезультат Тогда
						ТекущаяОбласть.Параметры.ИмяРезультата = НСтр("ru='Рез.';uk='Рез.'");
						ТабДок.Присоединить(ТекущаяОбласть);
					КонецЕсли;
					ТекущаяОбласть = ОбластьШапкаКолонка2;
					
				КонецЦикла;
				ТекущаяОбласть = ОбластьШапкаКолонка2;
			КонецЦикла;
		КонецЦикла;
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		// Теперь выводим основную часть
		РазворачиватьУровни = НЕ Отчет.ФлажокСвернутьПодразделения;
		ОбластьРазделитель =  Макет.ПолучитьОбласть("Подразделение|Разделитель");
		ОбластьПодразделениеОбщая	= Макет.ПолучитьОбласть("Подразделение|Общая");
		ОбластьПодразделениеКолонка	= Макет.ПолучитьОбласть("Подразделение|Колонка1");
		
		ОбластьФизЛицоОбщая		= Макет.ПолучитьОбласть("ФизЛицо|Общая");
		ОбластьФизЛицоКолонка	= Макет.ПолучитьОбласть("ФизЛицо|Колонка1");
		
		ОбластьПериодОбщая		= Макет.ПолучитьОбласть("Период|Общая");
		ОбластьПериодКолонка	= Макет.ПолучитьОбласть("Период|Колонка1");
		
		Если Отчет.РежимОтображения = "Показывать только сотрудников"  Тогда
			ВыборкаПодразделениеОрганизации = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
		Иначе
			ВыборкаПодразделениеОрганизации = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПодразделениеОрганизации");
		КонецЕсли;
		Пока ВыборкаПодразделениеОрганизации.Следующий() Цикл
			Если Отчет.РежимОтображения = "Показывать только сотрудников" Тогда
				ОбластьФизЛицоОбщая.Параметры.ФизЛицо = ВыборкаПодразделениеОрганизации.Сотрудник;
				ОбластьФизЛицоОбщая.Параметры.СуммаНачислений = Формат(ВыборкаПодразделениеОрганизации.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
				ТабДок.Вывести(ОбластьФизЛицоОбщая, 0,, РазворачиватьУровни );
				СводОтчисленийВФонды_ВыводСтроки(ВыборкаПодразделениеОрганизации, ВыборкаГруппаНалогов, ТабДок, ОбластьПодразделениеКолонка, ОбластьРазделитель);
			Иначе
				ОбластьПодразделениеОбщая.Параметры.ПодразделениеОрганизации = ВыборкаПодразделениеОрганизации.ПодразделениеОрганизации;
				ОбластьПодразделениеОбщая.Параметры.СуммаНачислений = Формат(ВыборкаПодразделениеОрганизации.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
				ТабДок.Вывести(ОбластьПодразделениеОбщая, 0,, РазворачиватьУровни );
				СводОтчисленийВФонды_ВыводСтроки(ВыборкаПодразделениеОрганизации, ВыборкаГруппаНалогов, ТабДок, ОбластьПодразделениеКолонка, ОбластьРазделитель);
			КонецЕсли;
			
			Если Отчет.РежимОтображения = "Показывать только подразделения" 
				ИЛИ Отчет.РежимОтображения = "Показывать только сотрудников" Тогда
				
				Продолжить;
				
			ИначеЕсли Отчет.РежимОтображения = "Показывать подразделения и периоды" Тогда
				
				ВыборкаПериод = ВыборкаПодразделениеОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
				Пока ВыборкаПериод.Следующий() Цикл
					ОбластьПериодОбщая.Параметры.Период = Формат(ВыборкаПериод.Период, "ДЛФ=Д");
					ОбластьПериодОбщая.Параметры.СуммаНачислений = Формат(ВыборкаПериод.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
					ТабДок.Вывести(ОбластьПериодОбщая, 2,, РазворачиватьУровни );
					СводОтчисленийВФонды_ВыводСтроки(ВыборкаПериод, ВыборкаГруппаНалогов, ТабДок, ОбластьПериодКолонка, ОбластьРазделитель);
				КонецЦикла;
				
			ИначеЕсли Отчет.РежимОтображения = "Показывать подразделения и сотрудников" Тогда
				
				ВыборкаФизЛицо = ВыборкаПодразделениеОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
				Пока ВыборкаФизЛицо.Следующий() Цикл    
					ОбластьФизЛицоОбщая.Параметры.ФизЛицо = ВыборкаФизЛицо.Сотрудник;
					ОбластьФизЛицоОбщая.Параметры.СуммаНачислений = Формат(ВыборкаФизЛицо.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
					ТабДок.Вывести(ОбластьФизЛицоОбщая, 1,, РазворачиватьУровни);
					СводОтчисленийВФонды_ВыводСтроки(ВыборкаФизЛицо, ВыборкаГруппаНалогов, ТабДок, ОбластьФизЛицоКолонка, ОбластьРазделитель);
				КонецЦикла;
				
			Иначе  // "Показывать подразделения, сотрудников и периоды"
				
				ВыборкаФизЛицо = ВыборкаПодразделениеОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
				Пока ВыборкаФизЛицо.Следующий() Цикл    
					ОбластьФизЛицоОбщая.Параметры.ФизЛицо = ВыборкаФизЛицо.Сотрудник;
					ОбластьФизЛицоОбщая.Параметры.СуммаНачислений = Формат(ВыборкаФизЛицо.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
					ТабДок.Вывести(ОбластьФизЛицоОбщая, 1,, РазворачиватьУровни );
					СводОтчисленийВФонды_ВыводСтроки(ВыборкаФизЛицо, ВыборкаГруппаНалогов, ТабДок, ОбластьФизЛицоКолонка, ОбластьРазделитель);
					
					ВыборкаПериод = ВыборкаФизЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
					Пока ВыборкаПериод.Следующий() Цикл
						ОбластьПериодОбщая.Параметры.Период = Формат(ВыборкаПериод.Период, "ДЛФ=Д");
						ОбластьПериодОбщая.Параметры.СуммаНачислений = Формат(ВыборкаПериод.СуммаНачислений, "ЧЦ=15; ЧДЦ=2");
						ТабДок.Вывести(ОбластьПериодОбщая, 2);
						СводОтчисленийВФонды_ВыводСтроки(ВыборкаПериод, ВыборкаГруппаНалогов, ТабДок, ОбластьПериодКолонка, ОбластьРазделитель);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		// Вывод итогов
		ОбластьПодвалОбщая	= Макет.ПолучитьОбласть("Подвал|Общая");
		ОбластьПодвалКолонка	= Макет.ПолучитьОбласть("Подвал|Колонка1");
		
		ВыборкаОБЩИЕ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
		Пока ВыборкаОБЩИЕ.Следующий() Цикл
			Если ВыборкаОБЩИЕ.Организация = ВыборкаОрганизация.Организация Тогда
				ОбластьПодвалОбщая.Параметры.СуммаНачислений = ВыборкаОБЩИЕ.СуммаНачислений;
				ТабДок.Вывести(ОбластьПодвалОбщая);
				СводОтчисленийВФонды_ВыводСтроки(ВыборкаОБЩИЕ, ВыборкаГруппаНалогов, ТабДок, ОбластьПодвалКолонка, ОбластьРазделитель);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		// Подписи ответственных лиц организаций
		
		ОбластьПодписиОтветственных = Макет.ПолучитьОбласть("ПодписиОтветственных");
		ОбластьПодписиОтветственных.Параметры.Заполнить(ВыборкаОрганизация);
		ТабДок.Вывести(ОбластьПодписиОтветственных);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();		
	КонецЦикла;
	
	
	// Всего начислений из фонда з/п
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ИНАГРО_СводОтчисленийВФонды.СводОтчисленийВФонды");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	Взаиморасчеты.Налог 					КАК Налог,
	|	Взаиморасчеты.Ставка*100 				КАК Ставка,
	|	СУММА(Взаиморасчеты.ИНАГРО_БазаВзноса)	КАК База,
	|	СУММА(Взаиморасчеты.Сумма)			 	КАК Сумма,
	|	Взаиморасчеты.Организация				КАК Организация,
	|		// Подписи ответственных
	|	МАКСИМУМ(ОтветственныеЛицаДиректор.ФизическоеЛицо.Наименование) 	КАК ФИОДиректор,
	|	МАКСИМУМ(ОтветственныеЛицаГлБух.ФизическоеЛицо.Наименование) 	КАК ФИОГлБух
	|
	|	ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды 		КАК Взаиморасчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ( " + Текст_ПодразделениеОрганизации + "	)КАК РаботникиОрганизаций
	|	ПО 	Взаиморасчеты.ИНАГРО_Сотрудник = РаботникиОрганизаций.Сотрудник
	|	И	Взаиморасчеты.Организация = РаботникиОрганизаций.Организация
	|	 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКонца)	КАК ОтветственныеЛицаДиректор
	|	ПО ОтветственныеЛицаДиректор.СтруктурнаяЕдиница = Взаиморасчеты.Организация
	|	И ОтветственныеЛицаДиректор.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКонца)	КАК ОтветственныеЛицаГлБух
	|	ПО ОтветственныеЛицаГлБух.СтруктурнаяЕдиница = Взаиморасчеты.Организация
	|	И ОтветственныеЛицаГлБух.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|
	|	 
	|ГДЕ	Взаиморасчеты.ВидДвижения	= &Приход
	|	И	Взаиморасчеты.Период			<= &ДатаКонца
	|	И	Взаиморасчеты.Период			>= &ДатаНачала
	|	" + ?(ОтборОрганизации, "И Взаиморасчеты.Организация	"+ ВидСравненияОрганизацииСтрокой +" (&Организация) ","")+"
	|	" + РНУсловиеТекст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Организация,
	|	Взаиморасчеты.Налог,
	|	Взаиморасчеты.Ставка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Налог Возр,
	|	Ставка,
	|	База,
	|	Сумма
	|ИТОГИ Сумма(База), Сумма(Сумма),  МАКСИМУМ(ФИОДиректор), МАКСИМУМ(ФИОГлБух) ПО
	|   ОБЩИЕ,
	|	Организация
	|";
	
	Запрос.УстановитьПараметр("Организация", Отчет.Организация);
	Запрос.УстановитьПараметр("ДатаКонца", Отчет.КонецПериода);
	Запрос.УстановитьПараметр("ДатаНачала", Отчет.НачалоПериода);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ВнутреннийСовместитель", Перечисления.ВидыЗанятости.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Отчет.Подразделение);
	
	Результат = Запрос.Выполнить();
	
	ОбластьЗаголовок1 = Макет.ПолучитьОбласть("Заголовок1");
	ОбластьПодвал1 = Макет.ПолучитьОбласть("Подвал1");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		ОбластьЗаголовок1.Параметры.Организация = ВыборкаОрганизация.Организация;
		ОбластьЗаголовок1.Параметры.Период = ЭтаФорма.Период;
		ТабДок.Вывести(ОбластьЗаголовок1);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		ВыборкаДетали = ВыборкаОрганизация.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если ВыборкаДетали.Налог <> Null И ВыборкаДетали.Ставка <> Null Тогда
				ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
				ОбластьДетальныхЗаписей.Параметры.Ставка = Строка(ВыборкаДетали.Ставка) + "%";
				ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
			КонецЕсли;
		КонецЦикла;
		
		
		// Подписи ответственных лиц организаций
		ТабДок.Вывести(ОбластьПодписиОтветственных);
			
		
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал1);
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

КонецПроцедуры

&НаСервере
Процедура СводОтчисленийВФонды_ВыводСтроки(ТекущаяВыборка, ВыборкаГруппаНалоговШапка, ТабДок, ТекущаяОбласть, ОбластьРазделитель)

	
	ВыборкаГруппаНалоговШапка.Сбросить();
	ВыборкаГруппаНалогов = ТекущаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГруппаНалогов");
	ВыборкаГруппаНалогов.Сбросить();
	Пока ВыборкаГруппаНалоговШапка.Следующий() Цикл
		
		Если ВыборкаГруппаНалоговШапка.ГруппаНалогов = NULL Тогда
			СуммаНачислений = ТекущаяВыборка.СуммаНачислений;
			Продолжить;
		КонецЕсли;
		Если ВыборкаГруппаНалогов.НайтиСледующий(ВыборкаГруппаНалоговШапка.ГруппаНалогов) Тогда
			
			ВыборкаСтатьяНалоговойДекларацииШапка = ВыборкаГруппаНалоговШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяНалоговойДекларации");
			ВыборкаСтатьяНалоговойДекларации = ВыборкаГруппаНалогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяНалоговойДекларации");
			Пока ВыборкаСтатьяНалоговойДекларацииШапка.Следующий() Цикл
				Если ВыборкаСтатьяНалоговойДекларации.НайтиСледующий(ВыборкаСтатьяНалоговойДекларацииШапка.СтатьяНалоговойДекларации) Тогда
					
					ВыборкаСтавка = ВыборкаСтатьяНалоговойДекларации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
					ВыборкаСтавкаШапка = ВыборкаСтатьяНалоговойДекларацииШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
					
					Пока ВыборкаСтавкаШапка.Следующий() Цикл
						
						Если ВыборкаСтавка.НайтиСледующий(ВыборкаСтавкаШапка.Ставка) Тогда
							Если Отчет.ФлажокБаза Тогда
								Если ТекущаяВыборка.СуммаНачислений <> ВыборкаСтавка.База Тогда 
									ТекущаяОбластьКр = УправлениеПечатью.МакетПечатнойФормы("Отчет.ИНАГРО_СводОтчисленийВФонды.СводОтчисленийВФонды").ПолучитьОбласть("Красный|Колонка1");
									ТекущаяОбластьКр.Параметры.Результат = Формат(ВыборкаСтавка.База, "ЧЦ=15; ЧДЦ=2");
									ТабДок.Присоединить(ТекущаяОбластьКр);
								Иначе
									ТекущаяОбласть.Параметры.Результат = Формат(ВыборкаСтавка.База, "ЧЦ=15; ЧДЦ=2");
									ТабДок.Присоединить(ТекущаяОбласть);
								КонецЕсли;
							КонецЕсли;
							Если Отчет.ФлажокБазаВзноса Тогда
								ТекущаяОбласть.Параметры.Результат = Формат(ВыборкаСтавка.БазаВзноса, "ЧЦ=15; ЧДЦ=2");
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
							Если Отчет.ФлажокРезультат Тогда
								ТекущаяОбласть.Параметры.Результат = Формат(ВыборкаСтавка.Результат, "ЧЦ=15; ЧДЦ="+ВыборкаСтавка.Точность);
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
						Иначе
							Если Отчет.ФлажокБаза Тогда
								ТекущаяОбласть.Параметры.Результат = "";
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
							Если Отчет.ФлажокБазаВзноса Тогда
								ТекущаяОбласть.Параметры.Результат = "";
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
							Если Отчет.ФлажокРезультат Тогда
								ТекущаяОбласть.Параметры.Результат = "";
								ТабДок.Присоединить(ТекущаяОбласть);
							КонецЕсли;
						КонецЕсли;	
						
					КонецЦикла;
					
				Иначе
					
					// пустая статья декларации
					ВыборкаСтавкаШапка = ВыборкаСтатьяНалоговойДекларацииШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
					Пока ВыборкаСтавкаШапка.Следующий() Цикл
						Если Отчет.ФлажокБаза Тогда
							ТекущаяОбласть.Параметры.Результат = "";
							ТабДок.Присоединить(ТекущаяОбласть);
						КонецЕсли;
						Если Отчет.ФлажокБазаВзноса Тогда
							ТекущаяОбласть.Параметры.Результат = "";
							ТабДок.Присоединить(ТекущаяОбласть);
						КонецЕсли;
						Если Отчет.ФлажокРезультат Тогда
							ТекущаяОбласть.Параметры.Результат = "";
							ТабДок.Присоединить(ТекущаяОбласть);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			// у сотрудника нет всей группы налогов, может пенсионер или декретчица
			ВыборкаСтатьяНалоговойДекларацииШапка = ВыборкаГруппаНалоговШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяНалоговойДекларации");
			Пока ВыборкаСтатьяНалоговойДекларацииШапка.Следующий() Цикл
				// пустая статья декларации
				ВыборкаСтавкаШапка = ВыборкаСтатьяНалоговойДекларацииШапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ставка");
				Пока ВыборкаСтавкаШапка.Следующий() Цикл
					Если Отчет.ФлажокБаза Тогда
						ТекущаяОбласть.Параметры.Результат = "";
						ТабДок.Присоединить(ТекущаяОбласть);
					КонецЕсли;
					Если Отчет.ФлажокБазаВзноса Тогда
						ТекущаяОбласть.Параметры.Результат = "";
						ТабДок.Присоединить(ТекущаяОбласть);
					КонецЕсли;
					Если Отчет.ФлажокРезультат Тогда
						ТекущаяОбласть.Параметры.Результат = "";
						ТабДок.Присоединить(ТекущаяОбласть);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВидимостьДоступностьКорректность(Изменения = "")
	// Быстрые настройки
	Если Изменения = "" Тогда
		
		// Вычисление параметров отображения.
		ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		ПоказыватьКомандыВариантовОтчетов = РежимВариантаОтчета И ВидимостьКомандВариантовОтчетов;
		ЕстьМедленныеНастройки = РежимВариантаОтчета И ПользовательскиеНастройкиКД.Элементы.Количество() > 0;
		
		// Применение параметров отображения.
		Элементы.ВсеНастройки.Видимость = ЕстьМедленныеНастройки;
		Элементы.КомандыВариантовОтчета.Видимость = ПоказыватьКомандыВариантовОтчетов;
		Элементы.ГруппаПользовательскиеНастройки_Левая.Видимость = ПоказыватьКомандыВариантовОтчетов И ЕстьМедленныеНастройки;
		Элементы.ГруппаПользовательскиеНастройки.Видимость = ПоказыватьКомандыВариантовОтчетов И ЕстьМедленныеНастройки;
		
		Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
			ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;
		КонецЕсли;
		
	
	КонецЕсли;
	
	// Заголовок
	Если Изменения = "" ИЛИ Изменения = "ВариантОтчета" Тогда
		ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			Заголовок = ОтчетНаименованиеТекущегоВарианта;
		Иначе
			Заголовок = НаименованиеОтчета;
		КонецЕсли;
		Если РежимРасшифровки Тогда
			Заголовок = РежимРасшифровкиПредставлениеВладельца + " (" + НРег(Заголовок) + ")";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗаполнить(Знач ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.Свойство("Переформировать") И ПараметрыЗаполнения.Переформировать Тогда
		НадоСформировать = Истина;
	КонецЕсли;
	

	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	Иначе
		 
	КонецЕсли;
	
	
	// Заголовок и свойства элементов.
	ВидимостьДоступностьКорректность();
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	Иначе
		 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНепосредственно()
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Формирование отчета.
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	НастройкиПечатиСохранить();
	ИнформацияОбОшибке = Неопределено;
	Попытка
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	ДопСвойства.Удалить("КлючВарианта");
	НастройкиПечатиВосстановить();
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Перезаполнение настроек.
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ВариантМодифицирован", Ложь);
	РезультатФормирования.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ВариантМодифицирован") = Истина Тогда
		РезультатФормирования.ВариантМодифицирован = Истина;
	КонецЕсли;
	Если РезультатФормирования.ВариантМодифицирован
		Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ПользовательскиеНастройкиМодифицированы") = Истина Тогда
		РезультатФормирования.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	ДопСвойства.Удалить("ВариантМодифицирован");
	ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
	
	Если РезультатФормирования.ВариантМодифицирован
		Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
		РезультатФормирования.Вставить("Событие", Новый Структура);
		РезультатФормирования.Событие.Вставить("Имя", "ПослеФормирования");
		РезультатФормирования.Событие.Вставить("Непосредственно", Истина);
		БыстрыеНастройкиЗаполнить(РезультатФормирования);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьСуммуСервер(Знач ОтчетТабличныйДокумент, Знач ВыделенныеОбласти)
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, ВыделенныеОбласти);
	Возврат Формат(Сумма, "ЧН=0");
КонецФункции


&НаСервере
Процедура НастройкиПечатиСохранить()
	ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент);
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиВосстановить()
	ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	
	ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ?(ПустаяСтрока(ОписаниеОшибки), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ОписаниеОшибки);
	
КонецПроцедуры


#КонецОбласти







