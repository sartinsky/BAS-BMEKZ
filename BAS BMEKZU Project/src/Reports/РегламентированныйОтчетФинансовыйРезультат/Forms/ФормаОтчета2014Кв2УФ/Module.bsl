&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровкиПрошлыйПериод;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2014Кв2УФ";
    СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	СтруктураДанныхФинРез = Новый Структура;
	СтруктураДанныхСлужебныеДанные 		= Новый Структура;
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	мСтруктураМногострочныхРазделов = Новый Структура;	
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен

	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	// Версия формы
	//СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2014";
	СтруктураРеквизитовФормы.мВерсияФормы = "01/03/2022";

	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "ФинРез";
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация      		  = Параметры.Организация;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;

    Если УчетнаяПолитика.Существует(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		ИспКлассыСчетов = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Иначе
		//предприятие работает не с начала года
		ИспКлассыСчетов = ОпределитьУчетнуюПолитикуВПериоде(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
    Если УчетнаяПолитика.Существует(СтруктураРеквизитовФормы.Организация, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12))) Тогда
		ИспКлассыСчетовПрошлГода = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураРеквизитовФормы.Организация, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12)));
	Иначе
		//предприятие работает не с начала прошлого года 
		ИспКлассыСчетовПрошлГода = ОпределитьУчетнуюПолитикуВПериоде(НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;

	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ИспКлассыСчетов");
	СтруктураРеквизитовФормы.Вставить("ИспКлассыСчетовПрошлГода");
	СтруктураРеквизитовФормы.Вставить("ВерсияБСП", СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	Возврат Результат; 
	
КонецФункции


// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

			УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
			ЗаполнитьТаблицуСтрок();

		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузить.Видимость = Ложь;
	КонецЕсли;

	
	ПоказатьПериод();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФинРез";
	СтрокаУровня1.Представление            = НСтр("ru='Отчет о финансовых результатах (стандарт № 3)';uk='Звіт про фінансовий стан (стандарт № 3)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СлужебныеДанные";
	СтрокаУровня1.Представление            = НСтр("ru='Служебные данные';uk='Службові дані'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ФинРез";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "СлужебныеДанные";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	    	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
КонецПроцедуры

		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	
	Если Лев(ИмяЯчейки, 1) = "_" Тогда
		
		ИмяЯчейкиБезСкобок = Сред(ИмяЯчейки, 2);
		ТекЗначениеБезСкобок = ТабличныйДокумент.Области[ИмяЯчейкиБезСкобок].Значение;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводЧислаВСкобкахЗавершение",ЭтаФорма, Новый Структура("ИмяЯчейки", ИмяЯчейкиБезСкобок));
		ПоказатьВводЧисла(ОписаниеОповещения, ТекЗначениеБезСкобок, НСтр("ru='Значение в скобках';uk='Значення в дужках'"), 15, 2);
		СтандартнаяОбработка = Ложь;
	
	КонецЕсли;		
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если    ИмяРаздела = "ФинРез" Тогда
		
		ИмяОбласти = Область.Имя;
		
		Если Сред(Область.Имя,1,1)<> "_" Тогда 
			РасчетНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
   ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	// Многостраничные разделы.
	//
	//Если ИмяТекРаздела = "Раздел2" Тогда 
	Если Ложь Тогда  
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		КонецЕсли;
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
	    
	    ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	    
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
	    КонецЦикла;
						
	// Многострочные и обычные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "ФинРез"
		  ИЛИ ИмяТекРаздела = "СлужебныеДанные"Тогда
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
		
		КонецЦикла;
		
	КонецЕсли;	
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);

	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	Если ИмяТекРаздела = "ФинРез" Тогда
		 ПоказатьСтрокиОтчета();
	КонецЕсли;
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "ФинРез" Тогда
		ЗаполнитьДатуПодписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()


&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	// Период в заголовке баланса
	ЗаполнитьПоказательНаСервере("ПериодОтчета",    "за " + ПредставлениеПериода(НачалоГода(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = uk_UA; ФП = Истина" ),  Форма, "ФинРез");	
	
	// Период в списке кодов в форме баланса
	ДатаНачалаПериодаОтчетаСлед = НачалоМесяца(ДобавитьМесяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,1));
	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаГод",    Формат(ДатаНачалаПериодаОтчетаСлед, "ДФ = 'гггг'"),  Форма, "ФинРез");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаМесяц",  Формат(ДатаНачалаПериодаОтчетаСлед, "ДФ = 'ММ'"),  Форма, "ФинРез");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаЧисло",  Формат(ДатаНачалаПериодаОтчетаСлед, "ДФ = 'дд'"),  Форма, "ФинРез");	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			
			КонецЕсли;
		ИначеЕсли ТипДанныхПоказателя = "О" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
			ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
			ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
			ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
			
			ФорматируемаяОбласть.Формат = "ЧО=0;" + "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
    
	мФинРез = Форма.СтруктураДанныхФинРез;
	
	ОргНазв = СтруктураРеквизитовФормы.Организация.НаименованиеПолное;
	ЗаполнитьПоказательНаСервере("ОргНазв", ОргНазв, 	Форма, "ФинРез");
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СписокПоказателей);
  
	ФИОДиректора = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СписокПоказателей).ФИОРук;
	ФИОГлавБуха  = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СписокПоказателей).ФИОБух;
	КодЕДРПОУ    = СведенияОбОрганизации.КодПоЕДРПОУ;
	КодКВЕД               = СведенияОбОрганизации.КодКВЕД;
	НалоговаяИнспекция    = СведенияОбОрганизации.НалоговаяИнспекция;
	
	
	ЗаполнитьПоказательНаСервере("ОргБухгалтер", 	ФИОГлавБуха, 	Форма, "ФинРез");
	ЗаполнитьПоказательНаСервере("ОргДиректор", 	ФИОДиректора, 	Форма, "ФинРез");
	ЗаполнитьПоказательНаСервере("ОргКодЕДРПОУ", 	КодЕДРПОУ, 		Форма, "ФинРез");
	
	
	
	// налоговая инспекция из справочника налоговых инспекций
	Если ЗначениеЗаполнено(НалоговаяИнспекция) Тогда
		ЗаполнитьПоказательНаСервере("C_RAJ", НалоговаяИнспекция.КодАдмРайона, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_REG", НалоговаяИнспекция.Родитель.Код, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI_ORIG", НалоговаяИнспекция.Код, 		Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI", НалоговаяИнспекция.Код, 			Форма, "СлужебныеДанные");
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("TIN",  КодЕДРПОУ, Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("KVED", КодКВЕД, Форма, "СлужебныеДанные");

	ЗаполнитьПоказательНаСервере("C_DOC_TYPE", 0, Форма, "СлужебныеДанные"); //номер исправленного доекумента. Для первого подающегося документа  = 0
	ЗаполнитьПоказательНаСервере("C_DOC_CNT",  1, Форма, "СлужебныеДанные");;
	ЗаполнитьПоказательНаСервере("C_DOC_STAN", 1, Форма, "СлужебныеДанные");	
	
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета))/3;
	
	ЗаполнитьПоказательНаСервере("PERIOD_YEAR",   Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),  Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("PERIOD_MONTH",  НомерКвартала * 3,  Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("PERIOD_TYPE",   НомерКвартала + 1,  Форма, "СлужебныеДанные");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0 И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;


	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ТаблицаМногостраничногоДокумента;
	Перем ВерсияФормы;
    Перем ЕстьДуплекс;
	Перем ВыполнялосьОбновлениеДанных;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем версию формы
	ВерсияФормы = Неопределено;
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения, ВыполнялосьОбновлениеДанных);
		КонецЕсли;
	КонецЕсли;
	
	// список листов, выводимых на печать
	// список листов, выводимых на печать
	//ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	//ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ТаблицаДополнительныхСтрок") Тогда
		ТаблицаДополнительныхСтрок =  СписокСохранения.ТаблицаДополнительныхСтрок;
		Если ТипЗнч(ТаблицаДополнительныхСтрок) = Тип("ТаблицаЗначений") Тогда
			ЗначениеВРеквизитФормы(ТаблицаДополнительныхСтрок, "мТаблицаДополнительныхСтрок");
		Иначе
			ЗаполнитьТаблицуСтрок();
		КонецЕсли;
	Иначе	
		ЗаполнитьТаблицуСтрок();
	КонецЕсли;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();	
	
	Префикс = "ПолеТабличногоДокумента";
    	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если ПоказателиОтчета.Свойство(Префикс + Раздел.ИмяСтраницы) Тогда
		    ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
			
	КонецЦикла;
	
	ИмяТекРаздела = "ФинРез";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = (ВыполнялосьОбновлениеДанных = Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если Найти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, Найти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
		Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	РезультатСохранения = ПередСохранением(ПодобныйОтчетСуществует, Автосохранение);
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, ВыполняемоеОповещение, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, ВыполняемоеОповещение, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = НСтр("ru='Отчет уже существует.
|Сохранить отчет с таким же видом?';uk='Звіт вже існує.
|Зберегти звіт з таким же видом?'");
		ДополнительныеПараметры = Новый Структура("Автосохранение, ВыполняемоеОповещение", Автосохранение, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, ВыполняемоеОповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, ВыполняемоеОповещение)
	
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...';uk='Зберігається %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(ПодобныйОтчетСуществует, Автосохранение)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	
	Если ПодобныйОтчетСуществует
		Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь) Экспорт	
	
	НаимТекРаздела = "ФинРез";
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 		  = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 	  = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	//СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность			  = Периодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	СписокСохранения.Вставить("ТаблицаДополнительныхСтрок", ДанныеФормыВЗначение(мТаблицаДополнительныхСтрок, Тип("ТаблицаЗначений")));
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)


		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
    		
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначенияВСкобках(Форма)
	
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	Для Каждого ТекущаяОбласть Из ТекТабличноеПоле.Области Цикл 
		Если Сред(ТекущаяОбласть.Имя,1,1)= "_" Тогда 
			
			КодПоказателяБезСкобок = Сред(ТекущаяОбласть.Имя,2);
			ТекущаяОбласть.Значение = Формат(-ТекТабличноеПоле.Области[КодПоказателяБезСкобок].Значение, "ЧО=0" +Форма.СтруктураРеквизитовФормы.мСтрокаФормата);// формат отображения

		КонецЕсли;  	
	КонецЦикла 	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВводЧислаВСкобкахЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	
	ТабличныйДокумент.Области[ИмяЯчейки].Значение = РезультатВыбора; 
	ЗаполнитьПоказательНаСервере(ИмяЯчейки, РезультатВыбора, ЭтаФорма, "ФинРез");
	
	// отобразим показатель "в скобках"
	ТабличныйДокумент.Области["_" +ИмяЯчейки].Значение = Формат(-РезультатВыбора,  "ЧО=0" + СтруктураРеквизитовФормы.мСтрокаФормата);// формат отображения
	
	Расчет(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма)

	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	ЗаполнитьЗначенияВСкобках(Форма);
	
	//Валовый доход/убыток
	Вал3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20003", Форма, "ФинРез")) 
		 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20103", Форма, "ФинРез")) 
	   	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20503", Форма, "ФинРез"))
		 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20703", Форма, "ФинРез"));
		 
	Вал4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20004", Форма, "ФинРез")) 
		 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20104", Форма, "ФинРез")) 
	   	 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20504", Форма, "ФинРез"))
		 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20704", Форма, "ФинРез"));
		 
	Если Вал3 > 0 Тогда 
		ЗаполнитьПоказательНаСервере("П20903", Вал3, Форма, "ФинРез");
		ЗаполнитьПоказательНаСервере("П20953",  0,	 Форма, "ФинРез");							   
	Иначе
		ЗаполнитьПоказательНаСервере("П20903", 0,	Форма, "ФинРез");	
		ЗаполнитьПоказательНаСервере("П20953", -Вал3,Форма, "ФинРез");
	КонецЕсли;	
	
	Если Вал4 > 0 Тогда 
		ЗаполнитьПоказательНаСервере("П20904", 	Вал4,	Форма, "ФинРез");
		ЗаполнитьПоказательНаСервере("П20954", 	0,		Форма, "ФинРез");							   
	Иначе
		ЗаполнитьПоказательНаСервере("П20904", 0,		Форма, "ФинРез");	
		ЗаполнитьПоказательНаСервере("П20954", -Вал4,	Форма, "ФинРез");
	КонецЕсли;	
	
	//Финансовый результат от операционной деятельности(доход/убыток)
	//
	// Заполнение строки 100 и 105  	                                                                                                           
	ДоходОперДеят3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20903", Форма, "ФинРез"))
				   - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20953", Форма, "ФинРез"))
				   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21053", Форма, "ФинРез"))
				   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21103", Форма, "ФинРез"))
				   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21203", Форма, "ФинРез"))
				   - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21303", Форма, "ФинРез"))
				   - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21503", Форма, "ФинРез"))
				   - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21803", Форма, "ФинРез"));
			  	
	ДоходОперДеят4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20904", Форма, "ФинРез"))
				   - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П20954", Форма, "ФинРез"))
				   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21054", Форма, "ФинРез"))
				   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21104", Форма, "ФинРез"))
				   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21204", Форма, "ФинРез"))
				   - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21304", Форма, "ФинРез"))
				   - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21504", Форма, "ФинРез"))
				   - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21804", Форма, "ФинРез"));
		
	Если ДоходОперДеят3 > 0 Тогда
		
		ЗаполнитьПоказательНаСервере("П21903", ДоходОперДеят3, Форма, "ФинРез");		
		ЗаполнитьПоказательНаСервере("П21953", 0, Форма, "ФинРез");
		
	Иначе	
		
		ЗаполнитьПоказательНаСервере("П21903", 0, Форма, "ФинРез");
		ЗаполнитьПоказательНаСервере("П21953", - ДоходОперДеят3, Форма, "ФинРез");
		
	КонецЕсли;
	
	Если ДоходОперДеят4 > 0 Тогда
		ЗаполнитьПоказательНаСервере("П21904", ДоходОперДеят4, Форма, "ФинРез");
		ЗаполнитьПоказательНаСервере("П21954", 0,Форма, "ФинРез");
	Иначе
		ЗаполнитьПоказательНаСервере("П21904", 0,Форма, "ФинРез");
		ЗаполнитьПоказательНаСервере("П21954",  - ДоходОперДеят4, Форма, "ФинРез");
	КонецЕсли;	
	
	//Финансовый результат от обычной деятельности(доход/убыток) до налогообложения
	Обыч3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21903", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21953", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22003", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22203", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22403", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22503", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22553", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22703", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22753", Форма, "ФинРез"));
		  
	Обыч4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21904", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П21954", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22004", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22204", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22404", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22504", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22554", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22704", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22754", Форма, "ФинРез"));
	
	Если Обыч3 > 0 Тогда
		
		ЗаполнитьПоказательНаСервере("П22903", Обыч3, Форма, "ФинРез");
		ЗаполнитьПоказательНаСервере("П22953", 0,Форма, "ФинРез");
		
	Иначе	
		
		ЗаполнитьПоказательНаСервере("П22903", 0,Форма, "ФинРез");										   
		ЗаполнитьПоказательНаСервере("П22953", -Обыч3, Форма, "ФинРез");
		
	КонецЕсли;
	
	Если Обыч4 > 0 Тогда
		
		ЗаполнитьПоказательНаСервере("П22904", Обыч4, Форма, "ФинРез");
		ЗаполнитьПоказательНаСервере("П22954", 0, Форма, "ФинРез");
		
	Иначе	
		
		ЗаполнитьПоказательНаСервере("П22904", 0, Форма, "ФинРез"); 
		ЗаполнитьПоказательНаСервере("П22954", -Обыч4, Форма, "ФинРез");
		
	КонецЕсли;
	
	// чистый финансовый результат
	Чист3 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22903", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22953", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П23003", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П23053", Форма, "ФинРез"));
		  
	Чист4 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22904", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П22954", Форма, "ФинРез"))
		  - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П23004", Форма, "ФинРез"))
		  + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П23054", Форма, "ФинРез"));
	
	Если Чист3 > 0 Тогда
		
		ЗаполнитьПоказательНаСервере("П23503", Чист3,Форма, "ФинРез");		
		ЗаполнитьПоказательНаСервере("П23553", 0,Форма, "ФинРез");		
		
	Иначе	
		
		ЗаполнитьПоказательНаСервере("П23503", 0,Форма, "ФинРез");											   
		ЗаполнитьПоказательНаСервере("П23553", -Чист3, Форма, "ФинРез");		
		
	КонецЕсли;
	
	Если Чист4 > 0 Тогда
		
		ЗаполнитьПоказательНаСервере("П23504", Чист4, Форма, "ФинРез");		
		ЗаполнитьПоказательНаСервере("П23554", 0,Форма, "ФинРез");		
		
	Иначе	
		
		ЗаполнитьПоказательНаСервере("П23504", 0,Форма, "ФинРез");											   
		ЗаполнитьПоказательНаСервере("П23554", - Чист4,Форма, "ФинРез");		
		
	КонецЕсли;

	// сукупный доход (который не включен в фин. результат) до налогообложения
	ЗаполнитьПоказательНаСервере("П24503", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24003", Форма, "ФинРез"))
								    + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24053", Форма, "ФинРез"))
									+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24103", Форма, "ФинРез"))
									+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24153", Форма, "ФинРез"))
									+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24453", Форма, "ФинРез")), Форма, "ФинРез");
									
	ЗаполнитьПоказательНаСервере("П24504", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24004", Форма, "ФинРез"))
								    + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24054", Форма, "ФинРез"))
									+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24104", Форма, "ФинРез"))
									+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24154", Форма, "ФинРез"))
									+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24454", Форма, "ФинРез")), Форма, "ФинРез");
									
	// сукупный доход - после налогообложения								
	ЗаполнитьПоказательНаСервере("П24603", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24503", Форма, "ФинРез"))
								    - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24553", Форма, "ФинРез")), Форма, "ФинРез");
									
	ЗаполнитьПоказательНаСервере("П24604", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24504", Форма, "ФинРез"))
								    - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24554", Форма, "ФинРез")), Форма, "ФинРез");
									
	// итоговый сукупный доход								
	ЗаполнитьПоказательНаСервере("П24653", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П23503", Форма, "ФинРез"))
								    - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П23553", Форма, "ФинРез"))
									+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24603", Форма, "ФинРез")), Форма, "ФинРез");
									
	ЗаполнитьПоказательНаСервере("П24654", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П23504", Форма, "ФинРез"))
								    - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П23554", Форма, "ФинРез"))
									+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П24604", Форма, "ФинРез")), Форма, "ФинРез");
	
	//Элементы операционных затрат(всего)
	ЗаполнитьПоказательНаСервере("П25503", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25003", Форма, "ФинРез"))
								   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25053", Форма, "ФинРез"))
								   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25103", Форма, "ФинРез"))
								   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25153", Форма, "ФинРез"))
								   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25203", Форма, "ФинРез")), Форма, "ФинРез");
	ЗаполнитьПоказательНаСервере("П25504", РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25004", Форма, "ФинРез"))
								   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25054", Форма, "ФинРез"))
								   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25104", Форма, "ФинРез"))
								   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25154", Форма, "ФинРез"))
								   + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("П25204", Форма, "ФинРез")), Форма, "ФинРез");
								   
	ЗаполнитьЗначенияВСкобках(Форма);

КонецПроцедуры

 &НаКлиенте
Процедура ОткрытьФормуНастроекОтображениеДополнительныхСтрок()
	СпозиционироватьсяНаОсновнуюСтраницу();

	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаНастройкиСтрок",, ЭтаФорма);
	
	КопироватьДанныеФормы(мТаблицаДополнительныхСтрок, ФормаНастройкиОтчета.ТаблицаСтрокОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуНастроекОтображениеДополнительныхСтрокЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекОтображениеДополнительныхСтрокЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		КопироватьДанныеФормы(РезультатВыбора, мТаблицаДополнительныхСтрок);
		ПоказатьСтрокиОтчета();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

 // Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
    	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	СпозиционироватьсяНаОсновнуюСтраницу();
	
	Очистить();
	
КонецПроцедуры


&НаКлиенте
Процедура Очистить()
	
	ОчиститьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхФинРез.Очистить();
	
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	ЗаполнитьЗначенияВСкобках(ЭтаФорма);
	
	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если Найти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    	              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
    
КонецПроцедуры

&НаСервере
Функция НоваяСтраница()
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер і встановити його в якості використовуваного за замовчуванням!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста", "Отчет о финансовых результатах");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Портрет");
	СтруктураПараметров.Вставить("ИмяСтраницы",  "ТабличныйДокумент");
	СтруктураПараметров.Вставить("ИмяОбластиТаблПоля", "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	СтруктураПараметров.Вставить("НомСтр", 				1);
	СтруктураПараметров.Вставить("Количество",          1);
	СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);

	ВывестиМакетВТаблДокНаСервере("ФинРез", 0);
	ВывестиНаПечатьЛист(СтруктураПараметров, СтруктураДанныхФинРез, 1);
		
	ПечатнаяФорма = НоваяСтраница();
	ТекОбласть = ТабличныйДокумент.ПолучитьОбласть("ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине");
	ПечатнаяФорма.Вывести(ТекОбласть);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	СоответствиеРазделовМакетам.Вставить("ФинРез",	"ПечатнаяФормаОтчета2014Кв2УФ_ФинРез");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[СтруктураПараметров.ИмяСтраницы];
	
	МакетПечатнойФормы = Новый ТабличныйДокумент;
	
	МакетПечатнойФормы.ОтображатьЗаголовки = Ложь;
	МакетПечатнойФормы.ОтображатьСетку     = Ложь;
	МакетПечатнойФормы.ЧерноБелыйПросмотр  = Истина;
	МакетПечатнойФормы.ЧерноБелаяПечать    = Истина;
	МакетПечатнойФормы.Автомасштаб         = Истина;
	МакетПечатнойФормы.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
    
	МакетПечатнойФормы.Вывести(ТабличныйДокумент);
		
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы);
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаОсновнуюСтраницу()

	Элементы.РазделыОтчета.ТекущаяСтрока = РазделыОтчета.ПолучитьЭлементы()[0].ПолучитьИдентификатор();		

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	СпозиционироватьсяНаОсновнуюСтраницу();
	
	Если НЕ ЗначениеЗаполнено(ИспКлассыСчетов) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не установлены ""Используемые классы счетов расходов"" за %1 год! Автоматическое заполнения отчета невозможно!';uk='Не встановлени ""Використовувані класи рахунків витрат"" за %1 рік! Автоматичне заповнення звіту неможливо!'"), Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)); 
		ПоказатьПредупреждение(, ТекстСообщения);				
		Возврат
	КонецЕсли;
	флЗаполнятьПрошлыйПериод = Истина;
	Если НЕ ЗначениеЗаполнено(ИспКлассыСчетовПрошлГода) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не установлены ""Используемые классы счетов расходов"" за %1 год! Автоматическое заполнение показателей прошлого года невозможно!';uk='Не встановлени ""Використовувані класи рахунків витрат"" за %1 рік! Автоматичне заповнення показників минулого року неможливо!'"), Год(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12))); 
		ПоказатьПредупреждение(, ТекстСообщения);				
		флЗаполнятьПрошлыйПериод = Ложь;
	КонецЕсли;
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		ПоказатьПредупреждение(,НСтр("ru='
|Дополнительные строки, в которых отсуствует информация, были скрыты! Для настройки дополнительных строк нажмите на кнопку ""Настроить отображение дополнительных строк"".
|';uk='
|Додаткові рядки, в яких відсутня інформація, були приховані! Для налаштування додаткових рядків натисніть на кнопку ""Налаштувати відображення додаткових рядків"".
|'"));
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
    Перем Ст8, Ст23;
	
	
КонецПроцедуры

&НаСервере
Функция ОпределитьУчетнуюПолитикуВПериоде(НачалоПериода, КонецПериода)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", СтруктураРеквизитовФормы.Организация); 
	Запрос.УстановитьПараметр("НачалоПериода", 		 НачалоПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.ИспользуемыеКлассыСчетовРасходов КАК ИспользуемыеКлассыСчетовРасходов
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация = &ГоловнаяОрганизация) КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Период >= &НачалоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетнаяПолитикаОрганизаций.Период";

		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат 	= Выборка.ИспользуемыеКлассыСчетовРасходов;
		Если Выборка.Период >= КонецПериода Тогда
			//период учетной политики не попадает в период отчета
			Результат 	= Неопределено;
		КонецЕсли;
	КонецЕсли;
    Возврат Результат;
КонецФункции

&НаСервере
Функция ДО(мБухИтоги, Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // ДО()

&НаСервере
Функция КО(мБухИтоги, Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
&НаСервере
Функция ОБ(мБухИтоги, СчетД, СчетК)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()

&НаСервере
Функция ДО2(мБухИтоги22, Счет)

	Перем Итог;

	Итог = мБухИтоги22.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // ДО2()

&НаСервере
Функция КО2(мБухИтоги22, Счет)

	Перем Итог;

	Итог = мБухИтоги22.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()

// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
&НаСервере
Функция ОБ2(мБухИтоги22, СчетД, СчетК)

	Перем Итог;

	Итог = мБухИтоги22.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()

//Процедура рассчитывает корреспонденции по двум спискам счетов
// 
// Параметры
//  СписокСчетовД  – значение типа СписокЗначений
//  СписокСчетовК  – значение типа СписокЗначений
//
&НаСервере
Процедура РассчитатьКорреспонденцииПоСпискамСчетов(мБухИтоги, мБухИтоги22, Счет23,Счет25,СписокСчетовДт,СписокСчетовКт,Показатель1,Показатель2,ТекстРасшифровки = "", Ячейка1 = "", Ячейка2 = "")
  Показатель1 = 0;
  Показатель2 = 0;
  
  Инд = 0;
  
  Для каждого элД  Из СписокСчетовДт Цикл
	  счетД = элД.Значение;
	  Для каждого элК  Из СписокСчетовКт Цикл
	  	счетК = элК.Значение;	
		Если (счетД = Счет23) и (счетК = Счет25) Тогда
			Продолжить;	
		КонецЕсли; 
		Инд = Инд+1;	
		Показатель1 = Показатель1 + ОБ(мБухИтоги, счетД,счетК);
		
		Если Инд = 1 Тогда
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, Ячейка1, ТекстРасшифровки + ", графа ""За звітний період""","+", "!ОБ",ОБ(мБухИтоги,счетД,счетК), счетД,счетК,НачалоГода (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

		Иначе
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, Ячейка1, "",	"+", "!ОБ",ОБ(мБухИтоги,счетД,счетК), счетД,счетК,НачалоГода (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		КонецЕсли;
		   
	  КонецЦикла;
  КонецЦикла;
// пришлось разнести на 2 цикла для правильности отработки расшифровок
//---------------------------------------------------------------
 	Инд = 0;
    Для каждого элД  Из СписокСчетовДт Цикл
	  счетД = элД.Значение;
	  Для каждого элК  Из СписокСчетовКт Цикл
	  	счетК = элК.Значение;	
		Если (счетД = Счет23) и (счетК = Счет25) Тогда
			Продолжить;	
		КонецЕсли; 
		Инд = Инд+1;	
		Показатель2 = Показатель2 + ОБ2(мБухИтоги22, счетД,счетК);
		
		Если Инд = 1 Тогда
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, Ячейка2, ТекстРасшифровки + ", графа ""За попередній період""",	"+", "!ОБ",ОБ2(мБухИтоги22,счетД,счетК), счетД,счетК);
		Иначе
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, Ячейка2, "",	"+", "!ОБ",ОБ2(мБухИтоги22,счетД,счетК), счетД,счетК);
		КонецЕсли;
		   
	  КонецЦикла;
  КонецЦикла;
  
КонецПроцедуры // РассчитатьКорреспонденцииПоСпискамСчетов()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод=Истина) Экспорт
	
	ОчиститьНаСервере();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод)
	
   	ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;
	
	Если ТаблицаРасшифровки = Неопределено Тогда
		ТаблицаРасшифровки = Новый ТаблицаЗначений;
		ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого");
		ТаблицаРасшифровки.Колонки.Добавить("Сумма");
		ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела");
		ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	КонецЕсли;
	
	ТаблицаРасшифровки.Очистить();
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

	ОбщиеПараметрыРасшифровкиПрошлыйПериод = Новый Структура;
	ОбщиеПараметрыРасшифровкиПрошлыйПериод.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ОбщиеПараметрыРасшифровкиПрошлыйПериод.Вставить("НачалоПериода", НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12)));
	ОбщиеПараметрыРасшифровкиПрошлыйПериод.Вставить("КонецПериода",  ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 12));
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПС = ПланыСчетов["Хозрасчетный"];
	Счет00	   = ПС.Вспомогательный;
	Счет10      = ПС.ОсновныеСредства;
	Счет11      = ПС.ДругиеНеоборотныеМатериальныеАктивыГруппа;
	Счет12      = ПС.НематериальныеАктивы;
	Счет13      = ПС.ИзносАмортизацияНеоборотныхАктивов;
	Счет16      = ПС.ДолгосрочныеБиологическиеАктивы;
	Счет20      = ПС.ПроизводственныеЗапасы;
	Счет21      = ПС.ТекущиеБиологическиеАктивы;
	Счет22      = ПС.МалоценныеИБыстроизнашивающиесяПредметы;
	Счет23	   = ПС.Производство;
	Счет24      = ПС.БракВПроизводстве;
	Счет25	   = ПС.Полуфабрикаты;
	Счет26      = ПС.ГотоваяПродукция;
	Счет27      = ПС.ПродукцияСельскохозяйственногоПроизводства;
	Счет28      = ПС.Товары;
	Счет28_6    = ПС.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи;
	Счет30      = ПС.Касса;
	Счет36      = ПС.РасчетыСПокупателямиИЗаказчиками;
	Счет37_7    = ПС.РасчетыСДругимиДебиторами;
	
	Счет41_1    = ПС.ДооценкаОсновныхСредств;
	Попытка
		Счет42_3    = ПС.НакопленныеКурсовыеРазницыВКапитале;
	Исключение
		Счет42_3    = ПС.ПустаяСсылка();
	КонецПопытки;	
	
	Счет44	   = ПС.НераспределеннаяПрибыльНепокрытыеУбытки;
	
	Счет483     = ПС.ГуманитарнаяПомощь;
	
	Счет47_1    = ПС.ОбеспечениеВыплатОтпусков;
	Счет47_7    = ПС.ОбеспечениеМатериальногоПоощерения;
	Счет63      = ПС.РасчетыСПоставщикамиИПодрядчиками;
	Счет64      = ПС.РасчетыПоНалогамИПлатежам;
	Счет64_1    = ПС.РасчетыПоНалогам;
	Счет64_1_2  = ПС.РасчетыПоНДС;
	Счет64_1_6  = ПС.РасчетыПоАкцизу;
	Счет64_2    = ПС.РасчетыПоОбязательнымПлатежам;
	Счет64_3    = ПС.НалоговыеОбязательстваВсего;
	Счет64_3_1  = ПС.НалоговыеОбязательства;
	Счет64_3_2  = ПС.НалоговыеОбязательстваНеподтвержденные;
	Счет64_3_4  = ПС.НалоговыеОбязательстваРозница;
	Счет64_4    = ПС.НалоговыйКредитВсего;
	
	Счет65_1    = ПС.РасчетыПоПенсионномуОбеспечению;
	Счет65_2    = ПС.РасчетыПоСоциальномуСтрахованию;
	Счет65_3    = ПС.РасчетыПоСтрахованиюНаСлучайБезработицы;
	Счет65_6    = ПС.РасчетыПоСтрахованиюОтНесчастныхСлучаев;
	Счет66      = ПС.РасчетыПоОплатеТруда;
	Счет68_5    = ПС.РасчетыСДругимиКредиторами;
	Счет70      = ПС.ДоходыОтРеализации;
	Счет70_1    = ПС.ДоходОтРеализацииГотовойПродукции;
	Счет70_2    = ПС.ДоходОтРеализацииТоваров;
	Счет70_3    = ПС.ДоходОтРеализацииРаботИУслуг;
	Счет70_4    = ПС.ВычетыИзДохода;
	Счет70_5    = ПС.Перестрахование;
	Попытка
		Счет70_9_1  = ПС.ДоходОтРозницы;
		Счет70_9_2  = ПС.ВычетыИзДоходаОтРозницы;
	Исключение
		Счет70_9_1  = ПС.ПустаяСсылка();
		Счет70_9_2  = ПС.ПустаяСсылка();
	КонецПопытки;	
	Счет71      = ПС.ДругойОперационныйДоход;
	Счет71_0    = ПС.ДоходОтПервоначальногоПризнанияИИзмененияСтоимостиАктивовПоСправедливойСтоимости;
	Счет71_2    = ПС.ДоходОтРеализацииДругихОборотныхАктивов;
	Счет72      = ПС.ДоходОтУчастияВКапитале;
	Счет73      = ПС.ПрочиеФинансовыеДоходы;
	Счет74      = ПС.ДругиеДоходы;
	Попытка
		Счет74_2    = ПС.ДоходОтРеализацииНеоборотныхАктивов;
	Исключение
	КонецПопытки;
	Счет74_5    = ПС.ДоходОтБесплатноПолученныхАктивов;
	Попытка
		Счет75  = ПС.ЧрезвычайныеДоходы;
	Исключение
		Счет75  = ПС.ПустаяСсылка();
	КонецПопытки;	
	Счет79      = ПС.ФинансовыеРезультаты;
	Счет80      = ПС.МатериальныеЗатраты;
	Счет81      = ПС.ЗатратыНаОплатуТруда;
	Счет82      = ПС.ОтчисленияНаСоциальныеМероприятия;
	Счет83      = ПС.Амортизация;
	Счет84      = ПС.ДругиеОперационныеЗатраты;
	Счет90_1    = ПС.СебестоимостьРеализованнойГотовойПродукции;
	Счет90_2    = ПС.СебестоимостьРеализованныхТоваров;
	Счет90_3    = ПС.СебестоимостьРеализованныхРаботИУслуг;
	Счет90_4    = ПС.СтраховыеВыплаты;
	Счет91      = ПС.ОбщепроизводственныеРасходы;
	Счет92      = ПС.АдминистративныеРасходы;
	Счет93      = ПС.РасходыНаСбыт;
	Счет94      = ПС.ДругиеЗатратыОперационнойДеятельностиГруппа;
	Счет94_0    = ПС.ЗатратыОтПервоначальногоПризнанияИИзмененияСтоимостиАктивовПоСправедливойСтоимости;
	Счет94_2    = ПС.СебестоимостьРеализованнойИностраннойВалюты;
	Счет94_3    = ПС.СебестоимостьРеализованныхПроизводственныхЗапасов;
	Счет94_9    = ПС.ДругиеЗатратыОперационнойДеятельности;
	Счет95      = ПС.ФинансовыеЗатраты;
	Счет96      = ПС.ПотериОтУчастияВКапитале;
	Счет97      = ПС.ДругиеЗатратыДеятельности;
	Попытка
		Счет97_2    = ПС.СебестоимостьРеализованныхНеоборотныхАктивов;
	Исключение
	КонецПопытки;
	Счет97_5    = ПС.УценкаНеоборотныхАктивовИФинансовыхИнвестиций;
	Счет97_6    = ПС.СписаниеНеоборотныхАктивов;
	Счет97_7    = ПС.ДругиеЗатратыОбычнойДеятельности;
	
	Счет98      = ПС.НалогНаПрибыль;
	
	Попытка
		Счет99  = ПС.ЧрезвычайныеЗатраты;
	Исключение
		Счет99  = ПС.ПустаяСсылка();
	КонецПопытки;	
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	
	// Бухгалтерский итоги по счетам
	мБухИтоги   = Обработки.БухгалтерскиеИтоги.Создать();
	мБухИтоги22 = Обработки.БухгалтерскиеИтоги.Создать();
			
	Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
	        |НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	        |КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
	        |КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт,
			|ОборотДт, ОборотКт, 
			|КорОборотДт, КорОборотКт";

	// Бухгалтерские итоги по счетам, без аналитики
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета, , , , , , "Организация", Организация);
	
	// Расчет итогов за аналогичный период прошлого года
	мБухИтоги22.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12), , , , , , "Организация", Организация);
	
	//чистый Доход от реализации продукции (работ, услуг)
	П20003 = КО(мБухИтоги, Счет70_1) 		  + КО(мБухИтоги, Счет70_2) 		  + КО(мБухИтоги, Счет70_3) 
		   + КО(мБухИтоги, Счет70_9_1) 	  - ОБ(мБухИтоги, Счет70_9_1,Счет70) - ОБ(мБухИтоги, Счет70, Счет70_9_1)
		   - ОБ(мБухИтоги, Счет70_1,Счет64)  - ОБ(мБухИтоги, Счет70_2,Счет64)   - ОБ(мБухИтоги, Счет70_3,Счет64) - ОБ(мБухИтоги, Счет70_9_1,Счет64) - ОБ(мБухИтоги, Счет70_9_2,Счет64) 
		   - ОБ(мБухИтоги, Счет70,Счет36)    - ОБ(мБухИтоги, Счет70,Счет30)     - ОБ(мБухИтоги, Счет70,Счет68_5)  
		   - ОБ(мБухИтоги, Счет70_4, Счет37_7) - ОБ(мБухИтоги, Счет70_4, Счет63)- ОБ(мБухИтоги, Счет70_4,Счет64) + ОБ(мБухИтоги, Счет64, Счет70_4)  + ОБ(мБухИтоги, Счет30,Счет70_4)		   
		   ;
	СтруктураДанныхФинРез["П20003"] = П20003;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "Показник ""Чистий дохід вiд реалiзацiї продукцiї (товарiв, робiт, послуг)"", графа ""За звітний період""",	"+", "!КО",КО(мБухИтоги, Счет70_1), Счет70_1,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"+", "!КО",КО(мБухИтоги, Счет70_2),Счет70_2,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"+", "!КО",КО(мБухИтоги, Счет70_3),Счет70_3,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"+", "!КО",КО(мБухИтоги, Счет70_9_1),Счет70_9_1,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70_9_1,Счет70),Счет70_9_1, Счет70,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70,Счет70_9_1),Счет70, Счет70_9_1,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70_1,Счет64),Счет70_1,Счет64,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70_2,Счет64),Счет70_2,Счет64,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70_3,Счет64),Счет70_3,Счет64,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70_9_1,Счет64),Счет70_9_1,Счет64,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70_9_2,Счет64),Счет70_9_2,Счет64,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70,Счет36),Счет70,Счет36,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70,Счет30),Счет70,Счет30,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70,Счет68_5),Счет70,Счет68_5,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70_4,Счет37_7),Счет70_4,Счет37_7,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70_4,Счет63),Счет70_4,Счет63,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет70_4,Счет64),Счет70_4,Счет64,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"+", "!ОБ",ОБ(мБухИтоги, Счет64,Счет70_4),Счет64,Счет70_4,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20003", "",	"+", "!ОБ",ОБ(мБухИтоги, Счет30,Счет70_4),Счет30,Счет70_4,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	
	ПП20004 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П20004 = КО2(мБухИтоги22, Счет70_1) 			+ КО2(мБухИтоги22, Счет70_2) 			+ КО2(мБухИтоги22, Счет70_3) 
		       + КО2(мБухИтоги22, Счет70_9_1) 		- ОБ2(мБухИтоги22, Счет70_9_1,Счет70) 	- ОБ2(мБухИтоги22, Счет70, Счет70_9_1)
			   - ОБ2(мБухИтоги22, Счет70_1,Счет64) 	- ОБ2(мБухИтоги22, Счет70_2,Счет64) 		- ОБ2(мБухИтоги22, Счет70_3,Счет64) 	  - ОБ2(мБухИтоги22, Счет70_9_1,Счет64)- ОБ2(мБухИтоги22, Счет70_9_2,Счет64) 
			   - ОБ2(мБухИтоги22, Счет70,Счет36)    	- ОБ2(мБухИтоги22, Счет70,Счет30)    	- ОБ2(мБухИтоги22, Счет70,Счет68_5)  
			   - ОБ2(мБухИтоги22, Счет70_4, Счет37_7) 	- ОБ2(мБухИтоги22, Счет70_4, Счет63) - ОБ2(мБухИтоги22, Счет70_4,Счет64) 	  + ОБ2(мБухИтоги22, Счет64, Счет70_4) + ОБ2(мБухИтоги22, Счет30,Счет70_4)		   
			   ;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "Показник ""Чистий дохід вiд реалiзацiї продукцiї (товарiв, робiт, послуг)"", графа ""За попередній період""",	"+", "!КО",КО2(мБухИтоги22, Счет70_1), Счет70_1,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"+", "!КО",КО2(мБухИтоги22, Счет70_2),Счет70_2,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"+", "!КО",КО2(мБухИтоги22, Счет70_3),Счет70_3,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"+", "!КО",КО2(мБухИтоги22, Счет70_9_1),Счет70_9_1,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));	
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70_9_1,Счет70),Счет70_9_1, Счет70,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70,Счет70_9_1),Счет70, Счет70_9_1,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70_1,Счет64),Счет70_1,Счет64,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70_2,Счет64),Счет70_2,Счет64,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70_3,Счет64),Счет70_3,Счет64,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70_9_1,Счет64),Счет70_9_1,Счет64,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70_9_2,Счет64),Счет70_9_2,Счет64,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70,Счет36),Счет70,Счет36,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70,Счет30),Счет70,Счет30,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70,Счет68_5),Счет70,Счет68_5,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70_4,Счет37_7),Счет70_4,Счет37_7,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70_4,Счет63),Счет70_4,Счет63,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет70_4,Счет64),Счет70_4,Счет64,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"+", "!ОБ",ОБ2(мБухИтоги22, Счет64,Счет70_4),Счет64,Счет70_4,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П20004", "",	"+", "!ОБ",ОБ2(мБухИтоги22, Счет30,Счет70_4),Счет30,Счет70_4,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П20004"] = П20004;
	
	П20503 = ДО(мБухИтоги, Счет90_1) + ДО(мБухИтоги, Счет90_2) + ДО(мБухИтоги, Счет90_3) + ДО(мБухИтоги, Счет90_4);
	СтруктураДанныхФинРез["П20503"] = П20503;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П20503", "Показник ""Собівартість реалізованої продукцiї (товарiв, робiт, послуг)"", графа ""За звітний період""",	"+", "!ДО",ДО(мБухИтоги, Счет90_1), Счет90_1,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П20503", "",	"+", "!ДО",ДО(мБухИтоги, Счет90_2),Счет90_2,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П20503", "",	"+", "!ДО",ДО(мБухИтоги, Счет90_3),Счет90_3,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П20503", "",	"+", "!ДО",ДО(мБухИтоги, Счет90_4),Счет90_4,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П20504 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П20504 = ДО2(мБухИтоги22, Счет90_1) + ДО2(мБухИтоги22, Счет90_2) + ДО2(мБухИтоги22, Счет90_3) + ДО2(мБухИтоги22, Счет90_4);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П20504", "Показник ""Собівартість реалізованої продукцiї (товарiв, робiт, послуг)"", графа ""За попередній період""",	"+", "!ДО",ДО2(мБухИтоги22, Счет90_1), Счет90_1,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П20504", "",	"+", "!ДО",ДО2(мБухИтоги22, Счет90_2),Счет90_2,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));	
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П20504", "",	"+", "!ДО",ДО2(мБухИтоги22, Счет90_3),Счет90_3,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П20504", "",	"+", "!ДО",ДО2(мБухИтоги22, Счет90_4),Счет90_4,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П20504"] = П20504;

	//Другой операционный доход
	П21203 = КО(мБухИтоги, Счет71) - ОБ(мБухИтоги, Счет71,Счет64);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21203", "Показник ""Інші операційні доходи "", графа ""За звітний період""",	"+", "!КО",КО(мБухИтоги, Счет71), Счет71,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21203", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет71,Счет64),Счет71,Счет64,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);	
	СтруктураДанныхФинРез["П21203"] = П21203;
	
	П21204 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П21204 = КО2(мБухИтоги22, Счет71) - ОБ2(мБухИтоги22, Счет71,Счет64);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21204", "Показник ""Інші операційні доходи "", графа ""За попередній період""",	"+", "!КО",КО2(мБухИтоги22, Счет71), Счет71,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21204", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет71,Счет64),Счет71,Счет64,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));	
	КонецЕсли;
	СтруктураДанныхФинРез["П21204"] = П21204;
	

	// строка 2121
	П21213 = КО(мБухИтоги, Счет71_0)-ОБ(мБухИтоги, Счет16,Счет71_0);
	СтруктураДанныхФинРез["П21213"] = П21213;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21213", "Дохід від зміни вартості активів, які оцінюються за справедливою вартістю, графа ""За звітний період""",	"+", "!КО",КО(мБухИтоги, Счет71_0), Счет71_0,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21213", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет16,Счет71_0), Счет16,Счет71_0,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П21214 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П21214 = КО2(мБухИтоги22, Счет71_0)-ОБ2(мБухИтоги22, Счет16,Счет71_0);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21214", "Дохід від зміни вартості активів, які оцінюються за справедливою вартістю, графа ""За попередній період""",	"+", "!КО",КО2(мБухИтоги22, Счет71_0), Счет71_0,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21214", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет16,Счет71_0), Счет16,Счет71_0,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П21214"] = П21214;
	
	
	// строка 2122
	П21223 = ОБ(мБухИтоги, Счет16,Счет71_0);
	СтруктураДанныхФинРез["П21223"] = П21223;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21223", "Дохід від первісного визнання біологічних активів і с/г продукції, графа ""За звітний період""",	"+", "!ОБ",П21223, Счет16,Счет71_0,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П21224 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П21224 = ОБ2(мБухИтоги22, Счет16,Счет71_0);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П21224", "Дохід від первісного визнання біологічних активів і с/г продукції, графа ""За попередній період""",	"+", "!ОБ",П21224, Счет16,Счет71_0,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П21224"] = П21224;
		
	
	//Административные затраты
	П21303 = ДО(мБухИтоги, Счет92);
	СтруктураДанныхФинРез["П21303"] = П21303;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21303", "Показник ""Адміністративні витрати"", графа ""За звітний період""",	"+", "!ДО",П21303, Счет92,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П21304 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П21304 = ДО2(мБухИтоги22, Счет92);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21304", "Показник ""Адміністративні витрати"", графа ""За попередній період""",	"+", "!ДО",П21304, Счет92,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П21304"] = П21304;
	
	//Затраты на сбыт
	П21503 = ДО(мБухИтоги, Счет93);
	СтруктураДанныхФинРез["П21503"] = П21503;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21503", "Показник ""Витрати на збут"", графа ""За звітний період""",	"+", "!ДО",П21503, Счет93,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П21504 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П21504 = ДО2(мБухИтоги22, Счет93);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21504", "Показник ""Витрати на збут"", графа ""За попередній період""",	"+", "!ДО",П21504, Счет93,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П21504"] = П21504;
	
	//Другие операционные затраты
	П21803 = ДО(мБухИтоги, Счет94);
	СтруктураДанныхФинРез["П21803"] = П21803;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21803", "Показник ""Інші операційні витрати"", графа ""За звітний період""",	"+", "!ДО",ДО(мБухИтоги, Счет94), Счет94,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П21804 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П21804 = ДО2(мБухИтоги22, Счет94);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21804", "Показник ""Інші операційні витрати"", графа ""За попередній період""",	"+", "!ДО",ДО2(мБухИтоги22, Счет94), Счет94,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П21804"] = П21804;
	
	П21814 = 0; П21824 = 0;
	Если ИспКлассыСчетов = Перечисления.КлассыСчетовРасходов.Класс9 Тогда 
		
		// строка 2181
		П21813 = ДО(мБухИтоги, Счет94_0) - ОБ(мБухИтоги, Счет94_0,Счет16);
		СтруктураДанныхФинРез["П21813"] = П21813;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21813", "Показник ""Витрати від зміни вартості активів, які оцінюються за справедливою вартістю"", графа ""За звітний період""",	"+", "!ДО",ДО(мБухИтоги, Счет94_0), Счет94_0,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21813", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет94_0,Счет16), Счет94_0,Счет16, НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			П21814 = ДО2(мБухИтоги22, Счет94_0) - ОБ2(мБухИтоги22, Счет94_0,Счет16);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21814", "Показник ""Витрати від зміни вартості активів, які оцінюються за справедливою вартістю"", графа ""За попередній період""",	"+", "!ДО",ДО2(мБухИтоги22, Счет94_0), Счет94_0,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21814", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет94_0,Счет16), Счет94_0,Счет16,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		КонецЕсли;
		СтруктураДанныхФинРез["П21814"] = П21814;
		
		// строка 2182
		П21823 = ОБ(мБухИтоги, Счет94_0,Счет16) ;
		СтруктураДанныхФинРез["П21823"] = П21823;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21823", "Витрати від первісного визнання біологічних активів і с/г продукції, графа ""За звітний період",	"+", "!ОБ",П21823, Счет94_0,Счет16, НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			П21824 = ОБ2(мБухИтоги22, Счет94_0,Счет16) ;
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21824", "Витрати від первісного визнання біологічних активів і с/г продукції, графа ""За звітний період",	"+", "!ОБ",П21824, Счет94_0,Счет16,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		КонецЕсли;
		СтруктураДанныхФинРез["П21824"] = П21824;
		
	Иначе 
		
		П21823 = ОБ(мБухИтоги, Счет84,Счет16) ;
		СтруктураДанныхФинРез["П21823"] = П21823;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21823", "Витрати від первісного визнання біологічних активів і с/г продукції, графа ""За звітний період",	"+", "!ОБ",П21823, Счет84,Счет16, НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			П21824 = ОБ2(мБухИтоги22, Счет84,Счет16) ;
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П21824", "Витрати від первісного визнання біологічних активів і с/г продукції, графа ""За звітний період",	"+", "!ОБ",П21824, Счет84,Счет16,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		КонецЕсли;
		СтруктураДанныхФинРез["П21824"] = П21824;
		
	КонецЕсли;  
	
	//Доход от участия в капитале
	П22003 = КО(мБухИтоги, Счет72);
	СтруктураДанныхФинРез["П22003"] = П22003;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22003", "Показник ""Доход від участі в капіталі"", графа ""За звітний період""",	"+", "!КО",П22003, Счет72,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П22004 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П22004 = КО2(мБухИтоги22, Счет72);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22004", "Показник ""Доход від участі в капіталі"", графа ""За попередній період""",	"+", "!КО",П22004, Счет72,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П22004"] = П22004;

	//Другой финансовый доход
	П22203 = КО(мБухИтоги, Счет73);
	СтруктураДанныхФинРез["П22203"] = П22203;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22203", "Показник ""Інші фінансові доходи"", графа ""За звітний період""",	"+", "!КО",П22203, Счет73,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);

	П22204 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П22204 = КО2(мБухИтоги22, Счет73);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22204", "Показник ""Інші фінансові доходи"", графа ""За попередній період""",	"+", "!КО",П22204, Счет73,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П22204"] = П22204;

	
	//Другой доход
	П22403 = КО(мБухИтоги, Счет74) - ОБ(мБухИтоги, Счет74,Счет64) + КО(мБухИтоги, Счет75);
	СтруктураДанныхФинРез["П22403"] = П22403;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22403", "Показник ""Інші доходи"", графа ""За звітний період""",	"+", "!КО",КО(мБухИтоги, Счет74), Счет74,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22403", "03",	"-", "!ОБ",ОБ(мБухИтоги, Счет74,Счет64),Счет74,Счет64,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22403", "02",	"+", "# оборот по счету 75 актуален в отчетах 2013 года",0);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22403", "01",	"+", "!КО",КО(мБухИтоги, Счет75), Счет75,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П22404 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П22404 = КО2(мБухИтоги22, Счет74) - ОБ2(мБухИтоги22, Счет74,Счет64) + КО2(мБухИтоги22, Счет75);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22404", "Показник ""Інші доходи"", графа ""За попередній період""",	"+", "!КО",КО2(мБухИтоги22, Счет74), Счет74,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22404", "03",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет74,Счет64),Счет74,Счет64,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));	
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22404", "02",	"+", "# оборот по счету 75 актуален в отчетах 2013 и 2014 годов",0);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22404", "01",	"+", "!КО",КО2(мБухИтоги22, Счет75), Счет75,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П22404"] = П22404;
	
	// строка 2241
	П22413 = ОБ(мБухИтоги, Счет483,Счет74);
	СтруктураДанныхФинРез["П22413"] = П22413;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22413", "Показник ""Дохід, пов'язаний з благодійною допомогою"", графа ""За звітний період""",	"+", "!ОБ",ОБ(мБухИтоги, Счет483,Счет74),Счет483,Счет74,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);	
	
	П22414 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П22414 = ОБ2(мБухИтоги22, Счет483,Счет74);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П22414", "Показник ""Дохід, пов'язаний з благодійною допомогою"", графа ""За попередній період""",	"+", "!ОБ",ОБ2(мБухИтоги22, Счет483,Счет74),Счет483,Счет74,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П22414"] = П22414;
	
	//Финансовые затраты
	П22503 = ДО(мБухИтоги, Счет95);
	СтруктураДанныхФинРез["П22503"] = П22503;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22503", "Показник ""Фінансові витрати"", графа ""За звітний період""",	"+", "!ДО",П22503, Счет95,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П22504 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П22504 = ДО2(мБухИтоги22, Счет95);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22504", "Показник ""Фінансові витрати"", графа ""За попередній період""",	"+", "!ДО",П22504, Счет95,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П22504"] = П22504;

  	//Затраты от участия в капитале
	П22553 = ДО(мБухИтоги, Счет96);
	СтруктураДанныхФинРез["П22553"] = П22553;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22553", "Показник ""Втрати від участі в капіталі"", графа ""За звітний період""",	"+", "!ДО",П22553, Счет96,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П22554 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П22554 = ДО2(мБухИтоги22, Счет96);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22554", "Показник ""Втрати від участі в капіталі"", графа ""За попередній період""",	"+", "!ДО",П22554, Счет96,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П22554"] = П22554;

   	//Другие затраты
	П22703 = ДО(мБухИтоги, Счет97) + ДО(мБухИтоги, Счет99);
	СтруктураДанныхФинРез["П22703"] = П22703;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22703", "Показник ""Інші витрати"", графа ""За звітний період""",	"+", "!ДО",ДО(мБухИтоги, Счет97), Счет97,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22703", "3",	"+", "# оборот по счету 99 актуален в отчетах 2013 года",0);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22703", "2",	"+", "!ДО",ДО(мБухИтоги, Счет99), Счет99,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		
	П22704 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П22704 = ДО2(мБухИтоги22, Счет97) + ДО2(мБухИтоги22, Счет99);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22704", "Показник ""Інші витрати"", графа ""За попередній період""",	"+", "!ДО",ДО2(мБухИтоги22, Счет97), Счет97,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22704", "3", "+", "# оборот по счету 99 актуален в отчетах 2013 и 2014 годов",0);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П22704", "2", "+", "!ДО",ДО2(мБухИтоги22, Счет99), Счет99,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П22704"] = П22704;
	
	//Налог на прибыль
	П23003 = ДО(мБухИтоги, Счет98);
	СтруктураДанныхФинРез["П23003"] = П23003;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П23003", "Показник ""Податок на прибуток від звичайної діяльності"", графа ""За звітний період""",	"+", "!ДО",П23003, Счет98,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П23004 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П23004 = ДО2(мБухИтоги22, Счет98);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П23004", "Показник ""Податок на прибуток від звичайної діяльності"", графа ""За попередній період""",	"+", "!ДО",П23004, Счет98,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П23004"] = П23004;
	
	// прочий сукупный доход 
	// сукупний дохід - зміни у власному капіталі протягом звітного періоду внаслідок господарських операцій та інших подій (за винятком змін капіталу за рахунок операцій з власниками);
	
	// строка 2400
	П24003 = КО(мБухИтоги, Счет41_1) - ДО(мБухИтоги, Счет41_1) - ОБ(мБухИтоги, Счет44, Счет41_1) + ОБ(мБухИтоги, Счет41_1, Счет44);
	СтруктураДанныхФинРез["П24003"] = П24003;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24003", "Показник ""Дооцінка (уцінка) необоротних активів"", графа ""За звітний період""",	"+", "!КО", КО(мБухИтоги, Счет41_1), Счет41_1,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24003", "",	"-", "!ДО",ДО(мБухИтоги, Счет41_1), Счет41_1,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24003", "",	"-", "!ОБ",ОБ(мБухИтоги, Счет44,Счет41_1),Счет44,Счет41_1,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24003", "",	"+", "!ОБ",ОБ(мБухИтоги, Счет41_1,Счет44),Счет41_1,Счет44,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);	
	
	
	П24004 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П24004 = КО2(мБухИтоги22, Счет41_1) - ДО2(мБухИтоги22, Счет41_1) - ОБ2(мБухИтоги22, Счет44, Счет41_1) + ОБ2(мБухИтоги22, Счет41_1, Счет44);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24004", "Показник ""Дооцінка (уцінка) необоротних активів"", графа ""За попередній період""",	"+", "!КО", КО2(мБухИтоги22, Счет41_1), Счет41_1,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24004", "",	"-", "!ДО",ДО2(мБухИтоги22, Счет41_1), Счет41_1,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24004", "",	"-", "!ОБ",ОБ2(мБухИтоги22, Счет44,Счет41_1),Счет44,Счет41_1,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));	
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24004", "",	"+", "!ОБ",ОБ2(мБухИтоги22, Счет41_1,Счет44),Счет41_1,Счет44,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));	
	КонецЕсли;
	СтруктураДанныхФинРез["П24004"] = П24004;
	
	
	// строка 2410
	П24103 = КО(мБухИтоги, Счет42_3) - ДО(мБухИтоги, Счет42_3);
	СтруктураДанныхФинРез["П24103"] = П24103;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24103", "Показник ""Накопичені курсові різниці"", графа ""За звітний період""",	"+", "!КО", КО(мБухИтоги, Счет42_3), Счет42_3,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24103", "",	"-", "!ДО",ДО(мБухИтоги, Счет42_3), Счет42_3,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
	
	П24104 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		П24104 = КО2(мБухИтоги22, Счет42_3) - ДО2(мБухИтоги22, П24104);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24104", "Показник ""Накопичені курсові різниці"", графа ""За попередній період""",	"+", "!КО", КО2(мБухИтоги22, Счет42_3), Счет42_3,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П24104", "",	"-", "!ДО",ДО2(мБухИтоги22, Счет42_3), Счет42_3,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;
	СтруктураДанныхФинРез["П24104"] = П24104;
	
	
	//III. ЕЛЕМЕНТИ ОПЕРАЦІЙНИХ ВИТРАТ											
	Если ИспКлассыСчетов = Перечисления.КлассыСчетовРасходов.Класс9 Тогда
		
		//материальные затраты
		спСчД = Новый СписокЗначений;
		спСчД.Добавить(Счет91);
		спСчД.Добавить(Счет92);
		спСчД.Добавить(Счет93);
		
		//нельзя считать весь 94 счетом затрат. Субсчета 943 - здесь не приводятся
		СубСчета94 = ПланыСчетов.Хозрасчетный.Выбрать(Счет94);
		Пока Субсчета94.Следующий() Цикл
			Если  СубСчета94.Ссылка = Счет94_3 Тогда
				Продолжить;
			КонецЕсли;
			спСчД.Добавить(СубСчета94.Ссылка);	
		КонецЦикла;
		
		спСчД.Добавить(Счет23);
		спСчД.Добавить(Счет24);
		
		спСчК = Новый СписокЗначений;
		спСчК.Добавить(Счет20);
		спСчК.Добавить(Счет21);
		спСчК.Добавить(Счет22);
		спСчК.Добавить(Счет25);
		спСчК.Добавить(Счет26);
		спСчК.Добавить(Счет27);		
		спСчК.Добавить(Счет28);
		
		
		П25003 = 0;
		П25004 = 0;
		РассчитатьКорреспонденцииПоСпискамСчетов(мБухИтоги, мБухИтоги22, Счет23,Счет25,спСчД,спСчК,П25003,П25004, "Матеріальні затрати", "П25003", "П25004");
		
		//Расходы на оплату труда
		спСчК.Очистить();
		спСчК.Добавить(Счет66);
		спСчК.Добавить(Счет47_1);
		спСчК.Добавить(Счет47_7);
		
		П25053 = 0;
		П25054 = 0;
		РассчитатьКорреспонденцииПоСпискамСчетов(мБухИтоги, мБухИтоги22, Счет23,Счет25,спСчД,спСчК,П25053,П25054, "Витрати на оплату праці", "П25053", "П25054");
		
		//Отчисления на социальные нужды
		спСчК.Очистить();
		спСчК.Добавить(Счет65_1);
		спСчК.Добавить(Счет65_2);
		спСчК.Добавить(Счет65_3);
		спСчК.Добавить(Счет65_6);
		
		П25103 = 0;
		П25104 = 0;
		РассчитатьКорреспонденцииПоСпискамСчетов(мБухИтоги, мБухИтоги22, Счет23,Счет25,спСчД,спСчК,П25103,П25104, "Відрахування на соціальні заходи", "П25103", "П25104");
		
		//Амортизация
		спСчК.Очистить();
		спСчК.Добавить(Счет13);
		П25153 = 0;
		П25154 = 0;
		РассчитатьКорреспонденцииПоСпискамСчетов(мБухИтоги, мБухИтоги22, Счет23,Счет25,спСчД,спСчК,П25153,П25154, "Амортизація", "П25153", "П25154");
		
		//Другие операционные затраты
		спСчК.Очистить();
		// исключим обороты при вводе начальных остаток, например Дт234 Кт00
		спСчК.Добавить(Счет00);
		спСчК.Добавить(Счет20);
		спСчК.Добавить(Счет21);
		спСчК.Добавить(Счет22);
		спСчК.Добавить(Счет25);
		спСчК.Добавить(Счет26);
		спСчК.Добавить(Счет27);
		спСчК.Добавить(Счет28);
		спСчК.Добавить(Счет66);
		спСчК.Добавить(Счет65_1);
		спСчК.Добавить(Счет65_2);
		спСчК.Добавить(Счет65_3);
		спСчК.Добавить(Счет65_6);
		спСчК.Добавить(Счет13);
		спСчК.Добавить(Счет47_1);
		спСчК.Добавить(Счет23);		
		спСчК.Добавить(Счет91);
		спСчК.Добавить(Счет92);
		спСчК.Добавить(Счет93);
		спСчК.Добавить(Счет94);
		
		П25203 = 0;
		П25204 = 0;
		Инд = 0;
		Для каждого эД  Из спСчД Цикл
			Инд = Инд + 1;
			счетД = эД.Значение;
			П25203 = П25203 + ДО(мБухИтоги, счетД);
			П25204 = П25204 + ДО2(мБухИтоги22, счетД);
			
			Если Инд=1 Тогда
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25203", "Показник ""Інші операційні витрати"", графа ""За звітний період""",	"+", "!ДО",ДО(мБухИтоги,счетД), счетД,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25204", "Показник ""Інші операційні витрати"", графа ""За попередній період""",	"+", "!ДО",ДО2(мБухИтоги22,счетД), счетД,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
			Иначе
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25203", "",	"+", "!ДО",ДО(мБухИтоги,счетД),счетД,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25204", "",	"+", "!ДО",ДО2(мБухИтоги22,счетД),счетД,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
			КонецЕсли;
			
			Для каждого элК  Из спСчК Цикл
				счетК = элК.Значение;	
				П25203 = П25203 - ОБ(мБухИтоги, счетД,счетК);
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25203", "",	"-", "!ОБ",ОБ(мБухИтоги,счетД,счетК),счетД,счетК,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
				П25204 = П25204 - ОБ2(мБухИтоги22, счетД,счетК);
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25204", "",	"-", "!ОБ",ОБ2(мБухИтоги22,счетД,счетК),счетД,счетК,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
			КонецЦикла;
		КонецЦикла;
	
	Иначе	
		
		// в этой части цикла "правильный" алгоритм заполнения показателей (на основании оборотов счетов класса 8),
		// т.е. возможный при использовании схем учета затрат "только 8 класс" или "8 и 9 классы"
		// материальные затраты
		П25003 = ДО(мБухИтоги, Счет80);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25003", "Показник ""Матеріальні затрати"", графа ""За звітний період""",	"+", "!ДО",П25003, Счет80,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		П25004 = ДО2(мБухИтоги22, Счет80);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25004", "Показник ""Матеріальні затрати"", графа ""За попередній період""",	"+", "!ДО",П25004, Счет80,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
				
		// Расходы на оплату труда
		П25053 = ДО(мБухИтоги, Счет81);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25053", "Показник ""Витрати на оплату праці"", графа ""За звітний період""",	"+", "!ДО",П25053, Счет81,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		П25054 = ДО2(мБухИтоги22, Счет81);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25054", "Показник ""Витрати на оплату праці"", графа ""За попередній період""",	"+", "!ДО",П25054, Счет81,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
				
		//Отчисления на социальные нужды
		П25103 = ДО(мБухИтоги, Счет82);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25103", "Показник ""Відрахування на соціальні заходи"", графа ""За звітний період""",	"+", "!ДО",П25103, Счет82,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		П25104 = ДО2(мБухИтоги22, Счет82);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25104", "Показник ""Відрахування на соціальні заходи"", графа ""За попередній період""",	"+", "!ДО",П25104, Счет82,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
				
		//Амортизация
		П25153 = ДО(мБухИтоги, Счет83);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25153", "Показник ""Амортизація"", графа ""За звітний період""",	"+", "!ДО",П25153, Счет83,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		П25154 = ДО2(мБухИтоги22, Счет83);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25154", "Показник ""Амортизація"", графа ""За попередній період""",	"+", "!ДО",П25154, Счет83,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
				
		//Другие операционные затраты
		П25203 = ДО(мБухИтоги, Счет84);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25203", "Показник ""Інші операційні витрати"", графа ""За звітний період""",	"+", "!ДО",П25203, Счет84,,НачалоГода (мДатаНачалаПериодаОтчета), мДатаКонцаПериодаОтчета);
		П25204 = ДО2(мБухИтоги22, Счет84);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П25204", "Показник ""Інші операційні витрати"", графа ""За попередній період""",	"+", "!ДО",П25204, Счет84,,НачалоГода (ДобавитьМесяц(мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12));
				
	КонецЕсли;
	
	Если НЕ флЗаполнятьПрошлыйПериод Тогда	
		П25004 = 0; П25054 = 0; 		
		П25104 = 0; П25204 = 0; 
	КонецЕсли;
	//материальные затраты
	СтруктураДанныхФинРез["П25003"] = П25003;
	СтруктураДанныхФинРез["П25004"] = П25004;
	
	// Расходы на оплату труда
	СтруктураДанныхФинРез["П25053"] = П25053;
	СтруктураДанныхФинРез["П25054"] = П25054;
	
	//Отчисления на социальные нужды
	СтруктураДанныхФинРез["П25103"] = П25103;
	СтруктураДанныхФинРез["П25104"] = П25104;
	
	//Амортизация
	СтруктураДанныхФинРез["П25153"] = П25153;
	СтруктураДанныхФинРез["П25154"] = П25154;
	
	//Другие операционные затраты
	СтруктураДанныхФинРез["П25203"] = П25203;
	СтруктураДанныхФинРез["П25204"] = П25204;
	
	// скроем все пустые дополнительные строки
	Для каждого Строка Из мТаблицаДополнительныхСтрок Цикл
		Если ВРЕГ(Строка.ТипСтроки) = ВРЕГ("доп") Тогда
			Строка.ПоказатьСтроку = 	ЗначениеЗаполнено(СтруктураДанныхФинРез["П" + Строка.КодСтроки + "3"])
									ИЛИ ЗначениеЗаполнено(СтруктураДанныхФинРез["П" + Строка.КодСтроки + "4"]);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
	// расчет будет выполнен в данной процедуре
	ПоказатьСтрокиОтчета();
	
	Если мМенеджерЗвит1С = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru='
|Дополнительные строки, в которых отсуствует информация, были скрыты! Для настройки дополнительных строк нажмите на кнопку ""Настроить отображение дополнительных строк"".
|';uk='
|Додаткові рядки, в яких відсутня інформація, були приховані! Для налаштування додаткових рядків натисніть на кнопку ""Налаштувати відображення додаткових рядків"".
|'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
					   
	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСтрок()

	ТекПоле = ТабличныйДокумент;
	ВысотаТаблицы = ТекПоле.ВысотаТаблицы;
	
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
		
		ТипСтроки = ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|ТипСтроки").Текст;
		Если НЕ ЗначениеЗаполнено(ТипСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление 			= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|Представление").Текст;
		КодСтроки	  			= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|КодСтроки").Текст;
		ПризнакРасшифровки 		= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|ПризнакРасшифровки").Текст;
		КодСтрокиРодителя	  	= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|КодСтрокиРодителя").Текст;
		
		Строка = мТаблицаДополнительныхСтрок.Добавить();
		Строка.Представление 	= Представление;
		Строка.КодСтроки 		= КодСтроки;
		Строка.ТипСтроки 	    = НРег(ТипСтроки);
		Строка.ПризнакРасшифровки 	= ЗначениеЗаполнено(ПризнакРасшифровки);
		Строка.КодСтрокиРодителя 	= КодСтрокиРодителя;
		
		Строка.ПоказатьСтроку 	= Истина;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ПоказатьСтрокиОтчета()

	Если мТаблицаДополнительныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые = Ложь;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;

	Для Каждого Строка Из мТаблицаДополнительныхСтрок Цикл
		
		КодСтроки = Строка.КодСтроки;
		
		Если НЕ ЗначениеЗаполнено(Строка.КодСтроки)
			ИЛИ ВРЕГ(Строка.ТипСтроки) = ВРЕГ("заг")
			ИЛИ ВРЕГ(Строка.ТипСтроки) = ВРЕГ("итог")
			ИЛИ ВРЕГ(Строка.ТипСтроки) = ВРЕГ("осн")
			Тогда
		    // видимостью таких строк мы не управляем
			Продолжить;	
		КонецЕсли;
		
		ТекущаяВидимость = ТекущаяВидимостьСтроки(КодСтроки);
		
		Если Строка.ПоказатьСтроку Тогда
			
			// открываем видимость без лишних вопросов
			Если ТекущаяВидимость = Ложь Тогда
				УстановитьВидимостьСтроки(КодСтроки, Строка.ПоказатьСтроку);	
			КонецЕсли;
			
		Иначе// строка должна быть скрыта
			
			ИмеютсяСкрытые = Истина;
			// если она содержит занчение, то необходим его обнулить вслучае, если это не строка "в том. числе".
			// для строк "в том. числе" (ПризнакРасшифровки) мы оставляем заполненные в ней значение
			 
			Если ТекущаяВидимость = Ложь Тогда
				// строка и так скрыта	
			Иначе
				Если Строка.ПризнакРасшифровки Тогда
					УстановитьВидимостьСтроки(КодСтроки, Строка.ПоказатьСтроку);
				Иначе
					// это строка участвует в расчете	
					КодСтрокиРодителя = Строка.КодСтрокиРодителя;
					КодСтроки		  = Строка.КодСтроки;
					
					ЗначениеБылоПеренесеноВИтоговуюСтроку = Ложь;
					Для НомерКолонки = 3 По 4 Цикл
					
						// переносим в итоговую строку
						ТекЗначение = ТабличныйДокумент.Области["П" + КодСтроки + НомерКолонки].Значение;
						
						ПредставлениеСтроки         = ТабличныйДокумент.Область("R" + НомерСтрокиТаблицыПоКодуСтроки(КодСтроки) 		  + "|Представление").Текст;
						
						Если ТекЗначение <> 0 Тогда
							
							ЗначениеБылоПеренесеноВИтоговуюСтроку = Истина;
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Значение в строке %1 (%2) было очищено /колонка %3/! Проверьте итоги по разделу! ';uk='Значення в рядку %1 (%2) було очищено /колонка %3/! Перевірте підсумки по розділу! '"), КодСтроки, ПредставлениеСтроки, НомерКолонки);
							Сообщение.Сообщить();		 
							
							ТабличныйДокумент.Области["П" + КодСтроки + НомерКолонки].Значение = 0;
														  
						КонецЕсли;
					
					КонецЦикла; 
					
					Если ЗначениеБылоПеренесеноВИтоговуюСтроку = Истина Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='     Внимание: при последующем включении в отчет дополнительной строки %1 суммы, и расшифровки, перенесенные в строку %2,  автоматически возвращены не будут!';uk='     Увага: при подальшому включенні в звіт додаткового рядка %1 суми, і розшифровки, перенесені в рядок %2, автоматично повернуті не будуть!'"), КодСтроки, КодСтрокиРодителя));
						
						// перенесем расшифровку
						Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
							
							Для каждого СтрокаРасшифровки Из ТаблицаРасшифровки Цикл
								
								Если Найти(СтрокаРасшифровки.ИмяПоказателя, КодСтроки) > 0 Тогда
									СтрокаРасшифровки.ИмяПоказателя = СтрЗаменить(СтрокаРасшифровки.ИмяПоказателя, КодСтроки, КодСтрокиРодителя);	
									СтрокаРасшифровки.НаименованиеПоказателя = "";
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;	
					
					УстановитьВидимостьСтроки(КодСтроки, Строка.ПоказатьСтроку);
					
				КонецЕсли;	
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Расчет(ЭтаФорма);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
	
		ТаблицаРасшифровки.Сортировать("ИмяПоказателя, НаименованиеПоказателя Убыв");
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
	КонецЕсли;
	
	КнопкиНастройки = Элементы.НастроитьОтображениеДополнительныхСтрок;
	ИсходныйТекст   = НСтр("ru='Настроить отображение дополнительных строк';uk='Налаштувати відображення додаткових рядків'");

	КнопкиНастройки.Заголовок = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка строк" доп. сммвол '*'.
		КнопкиНастройки.Заголовок = ИсходныйТекст + " (*)";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекущаяВидимостьСтроки(КодСтроки)
	
	ТекПоле = ТабличныйДокумент;
	
	НомерСтрокиВТаблице = НомерСтрокиТаблицыПоКодуСтроки(КодСтроки);
	Если НомерСтрокиВТаблице = 0 Тогда
		Возврат Истина;	
	КонецЕсли;
	
	// видимость можно определить по ячейке строки, информация по строке - недоступна
	ТекВидимость = ТекПоле.Область(НомерСтрокиВТаблице,1,НомерСтрокиВТаблице,1).Видимость;
	
	Возврат ТекВидимость;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьСтроки(КодСтроки, Видимость)
	
	ТекПоле = ТабличныйДокумент;
	
	НомерСтрокиВТаблице = НомерСтрокиТаблицыПоКодуСтроки(КодСтроки);
	Если НомерСтрокиВТаблице = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ТекПоле.Область(НомерСтрокиВТаблице, ,НомерСтрокиВТаблице, ).Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Функция НомерСтрокиТаблицыПоКодуСтроки(КодСтроки)

	ЯчейкаСКодом = ТабличныйДокумент.Области.Найти("П" + КодСтроки + "3");
	
	Возврат ?(ЗначениеЗаполнено(ЯчейкаСКодом), Формат(ЯчейкаСКодом.Верх, "ЧГ="), 0);	

КонецФункции

&НаСервере
Функция ДатаНачалаНачисленийТекПериода(НачДата, КонДата, Организация, ИмяРегистра)

	НачДатаПрошлыеОтпуска = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ЗапросПериода = Новый Запрос;
	ЗапросПериода.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	НАЧАЛОПЕРИОДА(РегистрДанных.Период, МЕСЯЦ) КАК НачДатаПрошлыеОтпуска
	                      |ИЗ
	                      |	РегистрНакопления."+ИмяРегистра+".Обороты(,&КонДата,МЕСЯЦ,
	                      |				  Организация = &Организация
	                      |				И ПериодВзаиморасчетов >= &НачДата
	                      |				И ПериодВзаиморасчетов <= &КонДата) КАК РегистрДанных
	                      |ГДЕ
	                      |	Период < &НачДата
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НачДатаПрошлыеОтпуска";
						  
	ЗапросПериода.УстановитьПараметр("НачДата", НачДата);
	ЗапросПериода.УстановитьПараметр("КонДата" ,КонДата);
	ЗапросПериода.УстановитьПараметр("Организация" ,Организация);
	Выборка = ЗапросПериода.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НачДатаПрошлыеОтпуска;
	Иначе
		Возврат НачДата;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция АдресПоказателя(СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения, ВыполнялосьОбновлениеДанных)
					 
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту.%1Виконується оновлення налаштувань користувача.'"), Символы.ПС);

	Сообщение.Сообщить();		 
	
	ВерсияФормы = СписокСохранения.ВерсияФормы;
	Если ВерсияФормы = "01/01/2014" Тогда
		
		СписокСохранения.ВерсияФормы = "01/03/2022";
	    ОбновитьВариантыЗаполнения();
		ЕстьИзмененияВариантыЗаполнения = Истина;
	КонецЕсли;
	
	Если ЕстьИзмененияВариантыЗаполнения Тогда
		
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'");

		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'");

		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	ОписаниеТиповЧисло1 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	Для Каждого ОбластьОтчета Из МакетСоставаПоказателей.Области Цикл
		
		ИмяСтраницы = ОбластьОтчета.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",            ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",        ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",             СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",                   СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",              ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
		
		Для Ном = ОбластьОтчета.Верх По ОбластьОтчета.Низ Цикл
			// Код показателя (по составу показателей) определяется по первой колонке макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать; // конечная строка
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить; // комментарий
			КонецЕсли;
			
			// Код показателя по форме отчете (имя ячейки в полях табличного документа формы).
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// Вариант заполнения ячейки определяется по колонке 6 макета.
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;				
				
			КонецЕсли;	
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;	
				
			Иначе
				// Актуализация вариантов автозаполнения текущей страницы.
				Для Каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						ДействующийВариантАвтозаполнения = Неопределено;
						
						НайденныеСтроки = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							ДействующийВариантАвтозаполнения = НайденныеСтроки[0];
						КонецЕсли;
												
						Если ДействующийВариантАвтозаполнения = Неопределено Тогда
							// Новый автозаполняемый показатель.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
							
						Иначе
							// Показатель должен соответствовать эталону, кроме удовлетворяющих следующим критериям:
							// - вариант эталона не 4 (авторасчет)и не 5 (запрет ввода значения);
							// - действующий вариант допускает корректировку (варианты 1-3).
							ИспользоватьДействующийВариант = ((ДействующийВариантАвтозаполнения.ВариантЗаполнения = 1
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 2
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 3)
							И (ВариантЗаполнения <> 4) И (ВариантЗаполнения <> 4));
							Если Не ИспользоватьДействующийВариант Тогда
								ДействующийВариантАвтозаполнения.КодПоказателя     = КодПоказателя;
								ДействующийВариантАвтозаполнения.ВариантЗаполнения = ВариантЗаполнения;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для Каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// В новой версии отчета автозаполнение показателя не предусмотрено.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								
								ЕстьИзменения = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОРИСОВКА И КОМАНДЫ ПАНЕЛИ ОТПРАВКИ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте    
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеПоказателя(Имя, Значение)
	
	СтруктураДанныхФинРез[Имя] = Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
				
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	
	флЗаполнятьПрошлыйПериод = Истина;
	Если НЕ ЗначениеЗаполнено(ИспКлассыСчетовПрошлГода) Тогда
		флЗаполнятьПрошлыйПериод = Ложь;
	КонецЕсли;
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получение большего доп.параметров
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		// Заполнение зависит от формы отчета
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	КонецЕсли;

	//Если глМенеджерЗвит1С.ФлагОтладки Тогда
	//	ЭтаФорма.Открыть();
	//КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура _ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено)
	
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНДРС", "!СНДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СКДРС", "!СКДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНКРС", "!СНКР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СККРС", "!СККР");
	
	ТребуемыеОбщиеПараметры =  ОбщиеПараметрыРасшифровки;
	//Если НЕ Сдвиг = Неопределено Тогда
	Если Сдвиг = ОбщиеПараметрыРасшифровкиПрошлыйПериод.НачалоПериода Тогда
		ТребуемыеОбщиеПараметры =  ОбщиеПараметрыРасшифровкиПрошлыйПериод;	
	КонецЕсли;
	
	Если Лев(ИмяСлагаемого, 1) = "#" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);

	ИначеЕсли ИмяСлагаемого = "!ОБ"
		ИЛИ ИмяСлагаемого = "!КО"
		ИЛИ ИмяСлагаемого = "!ДО" Тогда
	    ДополнительныеПараметры = НастройкиАнализаСчета(ТребуемыеОбщиеПараметры, Счет, КорСчет);
	Иначе	
		ДополнительныеПараметры = НастройкиОСВПоСчету(ТребуемыеОбщиеПараметры, Счет);
	КонецЕсли;
	              
	Если    Лев(ИмяСлагаемого, 5) = "!СНДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СКДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СНКР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СККР" Тогда
	
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);	
		
		
		ТабличнаяЧастьГруппировка = Новый Массив;
		СчВидовСубконто = 0;
		Для каждого СтрокаВидовСубконто Из Счет.ВидыСубконто Цикл
			
			СчВидовСубконто = СчВидовСубконто + 1;
			ОписаниеГруппировки = Новый Структура;
			ОписаниеГруппировки.Вставить("Использование", Истина);
			ОписаниеГруппировки.Вставить("Поле", "Субконто" + СчВидовСубконто);
			ОписаниеГруппировки.Вставить("Представление", СтрокаВидовСубконто.ВидСубконто);
			ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
			ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		КонецЦикла;
		
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
		
	КонецЕсли;
	
	Представление = ИмяСлагаемого + " " + Счет + ?(ЗначениеЗаполнено(КорСчет)," " + КорСчет, "");
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, Представление, Сумма, "ФинРез", ДополнительныеПараметры);
	

КонецПроцедуры

&НаСервере
Функция НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Функция НастройкиАнализаСчета(ОбщиеНастройки, Счет, КорСчет, ОтборПоАналитике = Неопределено)
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.АнализСчета.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", НЕ ЗначениеЗаполнено(КорСчет));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ЗначениеЗаполнено(КорСчет) Тогда
		ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("КорСчет");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВИерархии, КорСчет);
	КонецЕсли;
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			//ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
			ИмяПанели = Сред(Реквизит.Имя, 16);
			ТекПоказатели = Новый Структура(Новый ФиксированнаяСтруктура(ЭтаФорма[Реквизит.Имя]));
			СкорректироватьИмена(ИмяПанели, ТекПоказатели);
			ПоказателиОтчета.Вставить(ИмяПанели,ТекПоказатели);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 или 
		(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2021 и Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 9) Тогда
		//временно, пока нет схем
		ПоказатьПредупреждение(,НСтр("ru='Выгрузка в XML - формат временно не доступна!';uk='Вивантаження в XML - формат тимчасово недоступне!'"));
	Иначе
		СпозиционироватьсяНаОсновнуюСтраницу();
		ВыгрузитьОтчет();
	КонецЕсли;
КонецПроцедуры // Выгрузить()      

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	// только для этого отчета
	ФормаВыгрузкиРеглОтчета.Объект.ВыгружатьПакетом = Ложь;
	ФормаВыгрузкиРеглОтчета.Элементы.ВыгружатьПакетом.Доступность= Ложь;
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Открыть();
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()

&НаКлиенте
Функция СоздатьТаблицуВыгружаемыхОтчетныхФорм() Экспорт

	АдресВХранилище = СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере()

	ТаблицаСхемXML = ЗаполнитьТаблицуСоСхемамиВыгрузки();
	ОпределитьСписокВыгружаемыхСхем(ТаблицаСхемXML);

	Возврат ПоместитьВоВременноеХранилище(ТаблицаСхемXML, Новый УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруСоСхемамиВыгрузки() Экспорт

	АдресВХранилище = СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере()

	ТипМакетаСхемыXSD = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные;

	СтруктураXSD = Новый Структура;
	Объект = ОбъектОтчета(ЭтаФорма.ИмяФормы);

	МетаданныеМактов = Объект.Метаданные().Макеты;

	Для Каждого Макет Из МетаданныеМактов Цикл
		
		Если ВРЕГ(Макет.Имя) = ВРЕГ("АрхивСхемXSD") Тогда
			
			АрхивСхемXSD = Объект.ПолучитьМакет("АрхивСхемXSD");
			
			ВременноеИмяZIP      = ПолучитьИмяВременногоФайла(".zip");
			ВременноеИмяКаталога = ПолучитьИмяВременногоФайла();
			
			АрхивСхемXSD.Записать(ВременноеИмяZIP);
			ЧтениеZIP = Новый ЧтениеZipФайла(ВременноеИмяZIP);
			
			Для каждого Схема Из ЧтениеZIP.Элементы Цикл
				
				ЧтениеZIP.Извлечь(Схема, ВременноеИмяКаталога);
				
				СтруктураXSD.Вставить(Схема.ИмяБезРасширения , Новый ДвоичныеДанные(ВременноеИмяКаталога + "\" + Схема.Имя));
			
			КонецЦикла;
			
			Попытка
				УдалитьФайлы(ВременноеИмяZIP);
			Исключение КонецПопытки;
			
			Попытка
				УдалитьФайлы(ВременноеИмяКаталога);
			Исключение КонецПопытки;
		
		КонецЕсли;
		
		Если Макет.ТипМакета = ТипМакетаСхемыXSD  Тогда
		
			СтруктураXSD.Вставить(Макет.Имя, Объект.ПолучитьМакет(Макет));		
		
		КонецЕсли;	
		
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(СтруктураXSD, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура  ОпределитьСписокВыгружаемыхСхем(тбСхемыXML);

	Для Каждого стр Из  тбСхемыXML Цикл
		стр.фВыгрузка = 1;
	КонецЦикла;

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьТаблицуСоСхемамиВыгрузки()

	//для возможности выгрузки в XML файл	
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТипПрефикса = СоздатьОписанияТипов("Строка",2);
	тбСхемыXML.Колонки.Добавить("Префикс",ТипПрефикса,НСтр("ru='Префикс';uk='Префікс'"));

	тбСхемыXML.Колонки.Добавить("Тип", ,НСтр("ru='Тип';uk='Тип'"));

	КоличествоСтраниц = 1;
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 2021 или 
		(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2021 и Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 9) Тогда
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "S0100213"; 
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Фин.результат (Единое окно, S0100113)';uk= 'Фін.результат (Єдине вікно, S0100113)'");
		НовСтрока.НазваниеСтраницыПанели ="ФинРез";

		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0900207"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Фин.результат (ДФС, J0900108)';uk= 'Фін.результат (ДФС, J0900108)'");
		НовСтрока.НазваниеСтраницыПанели ="ФинРез";
	//Иначе
	//	
	//	НовСтрока = тбСхемыXML.Добавить();
	//	НовСтрока.ИмяСхемы = "S0100214"; 
	//	НовСтрока.ПредставлениеСхемы = НСтр("ru='Фин.результат (Единое окно, S0100114)';uk= 'Фін.результат (Єдине вікно, S0100114)'");
	//	НовСтрока.НазваниеСтраницыПанели ="ФинРез";

	КонецЕсли;	
	тбСхемыXML.ЗаполнитьЗначения(Перечисления.ВерсииФорматовВыгрузки.ГНСУ_XML, "Тип");

	Возврат  тбСхемыXML

КонецФункции

&НаСервере
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
  
КонецФункции	

Процедура СкорректироватьИмена(ИмяПанели, СтруктураВход)
	
	// доп. показатели
	Структура = Новый Структура;
	
	// преобразуем показатели таблиц
	Для каждого Элемент Из СтруктураВход Цикл
	
		ИмяСтарое = Элемент.Ключ;
		
		Если ИмяПанели  = "ФинРез" Тогда
			Если Лев(ИмяСтарое, 1) = "П" и Лев(ИмяСтарое,6) <> "Период" Тогда
				Точн = ?(Сред(ИмяСтарое,2,2)="26",1,1000);
				// для J
				Структура.Вставить("R"+Сред(ИмяСтарое, 2,4) + "G" + Прав(ИмяСтарое, 1), Элемент.Значение/Точн);
				
				// для S
				Структура.Вставить(?(Прав(ИмяСтарое, 1) = "3", "A","B")+Сред(ИмяСтарое, 2,4) , Элемент.Значение/Точн);
				
				Если Лев(ИмяСтарое, 5) = "П2300" Тогда
					Структура.Вставить("R"+Сред(ИмяСтарое, 2,4) + "G" + Прав(ИмяСтарое, 1), - Элемент.Значение/Точн);
					Структура.Вставить(?(Прав(ИмяСтарое, 1) = "3", "A","B")+Сред(ИмяСтарое, 2,4) , -Элемент.Значение/Точн);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// добавим показатели шапки
	Если ИмяПанели  = "ФинРез" Тогда
		
		Структура.Вставить("FIRM_NAME", 	СтруктураВход.ОргНазв);
		Структура.Вставить("FIRM_EDRPOU", 	СтруктураВход.ОргКодЕДРПОУ);
		Структура.Вставить("FIRM_RUK", 		СтруктураВход.ОргДиректор);
		Структура.Вставить("FIRM_BUH", 		СтруктураВход.ОргБухгалтер);
		Структура.Вставить("MY_DATE", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Структура.Вставить("N1", 			СтруктураВход.ДатаКонцаПериодаОтчетаГод);
		Структура.Вставить("N2", 			СтруктураВход.ДатаКонцаПериодаОтчетаМесяц);
		Структура.Вставить("LASTDAY", 		СтруктураВход.ДатаКонцаПериодаОтчетаЧисло);
		Структура.Вставить("KVED", 			ПолучитьПоказательНаСервере("KVED", ЭтаФорма, "СлужебныеДанные"));
		
		Структура.Вставить("HFILL", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета+1);
		Структура.Вставить("HNAME", 		СтруктураВход.ОргНазв);
		Структура.Вставить("HTIN", 			СтруктураВход.ОргКодЕДРПОУ);
		Структура.Вставить("HPERIOD", 		Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ';Л = uk_UA"));
		Структура.Вставить("HZY", 			Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		Структура.Вставить("HBOS", 			СтруктураВход.ОргДиректор);
		Структура.Вставить("HBUH", 			СтруктураВход.ОргБухгалтер);
		
	ИначеЕсли ИмяПанели  = "СлужебныеДанные" Тогда
		
		Структура.Вставить("D_FILL", ДатаПодписи);
		
	КонецЕсли;
	
	// перенесем доп. показатели
	Для каждого Элемент Из Структура Цикл
		СтруктураВход.Вставить(Элемент.Ключ, Элемент.Значение);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()
