#Область СлужебныеПроцедурыИФункции

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
КонецПроцедуры

Функция СформироватьЗапросОсновныеСведения(ДатаОтчета,Сотрудник, ОрганизацияОтчета, РаботникОтчета)		
	
	Запрос = Новый Запрос;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаОтчета",ДатаОтчета);
	Запрос.УстановитьПараметр("Организация",РаботникОтчета.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("Работник", РаботникОтчета.ФизическоеЛицо);
	Запрос.УстановитьПараметр("Сотрудник",РаботникОтчета);
	Запрос.УстановитьПараметр("МужскойПол",Перечисления.ПолФизическогоЛица.Мужской);
	Запрос.УстановитьПараметр("ЖенскийПол",Перечисления.ПолФизическогоЛица.Женский);
	Запрос.УстановитьПараметр("Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Телефон",Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ФизЛица.ДатаРождения КАК ДатаРождения,
	               |	ФизЛица.Пол КАК Пол,
	               |	ФизЛица.МестоРождения КАК МестоРождения,
	               |	ФизЛица.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизЛица
	               |ГДЕ
	               |	ФизЛица.Ссылка = &Работник";
	Запрос.Выполнить();
	
	МинусДней = "
	|   ВЫБОР	КОГДА ЕСТЬNULL(Дней,0)=0 ТОГДА 0 ИНАЧЕ -Дней КОНЕЦ
	|   "; 
	
	ТекстЗапросаСтаж =  "
	|ВЫБРАТЬ
	|  ПриказОПриеме.ДатаПриема		КАК ДатаПриема,
	|  СУММА( ЕСТЬNULL(ОбщийСтаж.ДнейСтажа, 0))  КАК ДнейСтажа
	|	ИЗ (	ВЫБРАТЬ 
	|           	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|			ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|   		ГДЕ Работники.Сотрудник = &Сотрудник
	|	) КАК ПриказОприеме
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ( 
	|	ВЫБРАТЬ
	|		Стаж.Сотрудник,
	|	Стаж.ДнейСтажа
	|	ИЗ РегистрСВедений.ИНАГРО_НачальныеСведенияОСтажеРаботниковОрганизации КАК Стаж
	|	ГДЕ	Стаж.Организация	= &Организация
	|	И	Стаж.ВидСтажа		= ТребуемыйВидСтажа
	|
	|) КАК ОбщийСтаж		
	|ПО ОбщийСтаж.Сотрудник = &Сотрудник
	|   
	|СГРУППИРОВАТЬ ПО  
	|  ПриказОПриеме.ДатаПриема
	|";
	
	ТекстВыслугаЛет= СтрЗаменить(ТекстЗапросаСтаж,"ТребуемыйВидСтажа", "ЗНАЧЕНИЕ(Справочник.ИНАГРО_ВидыСтажа.ОбщийТрудовойСтаж)" );
	Запрос.Текст = "
	|ВЫБРАТЬ 	
	|	&Работник КАК ФизЛицо,
	|	ДОБАВИТЬКДАТЕ( Стаж.ДатаПриема, ДЕНЬ, "+СтрЗаменить(МинусДней,"Дней","Стаж.ДнейСтажа")+")	КАК ДатаБольничногоСтажа   
	|ПОМЕСТИТЬ ВТСведенияОБольничномСтаже
	|ИЗ 
	|	( " + ТекстВыслугаЛет + " ) КАК Стаж";
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ  ДатаВыслугаЛет ИЗ ВТСведенияОБольничномСтаже";
	
	ТекстОбщийТрудовойСтаж = СтрЗаменить(ТекстЗапросаСтаж,"ТребуемыйВидСтажа", "ЗНАЧЕНИЕ(Справочник.ИНАГРО_ВидыСтажа.ОбщийТрудовойСтаж)" );
	Запрос.Текст = "
	|ВЫБРАТЬ 	
	|	&Работник КАК ФизЛицо,
	|	ДОБАВИТЬКДАТЕ( Стаж.ДатаПриема, ДЕНЬ, "+СтрЗаменить(МинусДней,"Дней","Стаж.ДнейСтажа")+")	КАК ДатаТрудовогоСтажа   
	|ПОМЕСТИТЬ ВТСведенияОбОбщемТрудовомСтаже
	|ИЗ 
	| ( " + ТекстОбщийТрудовойСтаж +"	) КАК Стаж";
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ  ДатаТрудовогоСтажа ИЗ ВТСведенияОбОбщемТрудовомСтаже";	
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ГОД(ФизическиеЛица.ДатаРождения) КАК ГодРождения,
	              |	МЕСЯЦ(ФизическиеЛица.ДатаРождения) КАК МесяцРождения,
	              |	ДЕНЬ(ФизическиеЛица.ДатаРождения) КАК ЧислоРождения,
	              |	ФИОФизЛицСрезПоследних.Имя,
	              |	ФИОФизЛицСрезПоследних.Отчество,
	              |	ФИОФизЛицСрезПоследних.Фамилия,
	              |	ВЫБОР
	              |		КОГДА ФизическиеЛица.Пол = &МужскойПол
	              |			ТОГДА ""Ч""
	              |		КОГДА ФизическиеЛица.Пол = &ЖенскийПол
	              |			ТОГДА ""Ж""
	              |		ИНАЧЕ """"
	              |	КОНЕЦ КАК Пол,
	              |	ФизическиеЛица.МестоРождения,
	              |	ФизическиеЛица_Образование.ВидОбразования,
	              |	ФизическиеЛица_Образование.УчебноеЗаведение,
	              |	ФизическиеЛица_Образование.Специальность,
	              |	ФизическиеЛица_Образование.Квалификация,
	              |	ФизическиеЛица_Образование.ФормаОбучения,
	              |	ФизическиеЛица_Образование.Диплом,
	              |	ФизическиеЛица_Образование.ГодОкончания,
	              |	ФизическиеЛица_ТрудоваяДеятельность.Организация КАК ПоследнееМестоРаботы,
	              |	ФизическиеЛица_ТрудоваяДеятельность.ДатаОкончания КАК ДатаУвольнения,
	              |	ФизическиеЛица_ТрудоваяДеятельность.Должность КАК ПоследняяДолжность,
	              |	ПаспортныеДанныеФизЛицСрезПоследних.ДатаВыдачи КАК ДокументДатаВыдачи,
	              |	ПаспортныеДанныеФизЛицСрезПоследних.КемВыдан КАК ДокументКемВыдан,
	              |	ПаспортныеДанныеФизЛицСрезПоследних.Номер КАК ДокументНомер,
	              |	ПаспортныеДанныеФизЛицСрезПоследних.Серия КАК ДокументСерия,
	              |	ГражданствоФизЛицСрезПоследних.Страна КАК Гражданство,
	              |	ВЫБОР
	              |		КОГДА РаботникиОрганизаций.Регистратор ССЫЛКА Документ.ИНАГРО_УвольнениеИзОрганизаций
	              |			ТОГДА РаботникиОрганизаций.Период
	              |		ИНАЧЕ &ПустаяДата
	              |	КОНЕЦ КАК ДатаУвольненияИзОрг,
	              |	ВЫБОР
	              |		КОГДА РаботникиОрганизаций.Регистратор ССЫЛКА Документ.ИНАГРО_УвольнениеИзОрганизаций
	              |			ТОГДА РаботникиОрганизаций.Регистратор
	              |		ИНАЧЕ NULL
	              |	КОНЕЦ КАК ДокументУвольнения,
	              |	СотрудникиОрганизаций.Код КАК ТабельныйНомер,
	              |	БольничныйСтаж.ДатаБольничногоСтажа КАК ДатаБольничногоСтажа,
	              |	ТрудовойСтаж.ДатаТрудовогоСтажа КАК ДатаТрудовогоСтажа
	              |ИЗ
	              |	ВТФизическиеЛица КАК ФизическиеЛица
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаОтчета, ) КАК ФИОФизЛицСрезПоследних
	              |		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникиОрганизаций
	              |		ПО (СотрудникиОрганизаций.Ссылка = &Сотрудник)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаОтчета, Сотрудник = &Сотрудник) КАК РаботникиОрганизаций
	              |		ПО (ИСТИНА)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&ДатаОтчета, ФизическоеЛицо = &Работник) КАК ГражданствоФизЛицСрезПоследних
	              |		ПО ФизическиеЛица.Ссылка = ГражданствоФизЛицСрезПоследних.ФизическоеЛицо
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_СемейноеПоложениеФизЛиц.СрезПоследних(&ДатаОтчета, ФизЛицо = &Работник) КАК СемейноеПоложениеФизЛицСрезПоследних
	              |		ПО ФизическиеЛица.Ссылка = СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаОтчета, ФизЛицо = &Работник) КАК ПаспортныеДанныеФизЛицСрезПоследних
	              |		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.Физлицо
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ИНАГРО_Образование КАК ФизическиеЛица_Образование
	              |		ПО (ФизическиеЛица_Образование.Ссылка = &Работник)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ИНАГРО_ТрудоваяДеятельность КАК ФизическиеЛица_ТрудоваяДеятельность
	              |		ПО (ФизическиеЛица_ТрудоваяДеятельность.Ссылка = &Работник)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБольничномСтаже КАК БольничныйСтаж
	              |		ПО ФизическиеЛица.Ссылка = БольничныйСтаж.ФизЛицо
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОбщемТрудовомСтаже КАК ТрудовойСтаж
	              |		ПО ФизическиеЛица.Ссылка = ТрудовойСтаж.ФизЛицо";
		
	Возврат Запрос.Выполнить();	
	
КонецФункции

Функция СформироватьЗапросЧленыСемьи(ДатаОтчета,РаботникОтчета)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Работник",	РаботникОтчета.ФизическоеЛицо);
	Запрос.УстановитьПараметр("Дата", ДатаОтчета);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| ФизическиеЛица_СоставСемьи.СтепеньРодства КАК СтепеньРодства,
	| ЕстьNULL(ФизическиеЛица_СоставСемьи.ФизЛицо,ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ЧленСемьи,
	| ФизическиеЛица_СоставСемьи.ФизЛицо.ДатаРождения КАК ДатаРожденияФизЛица,
	| ФизическиеЛица_СоставСемьи.ГодРождения КАК ГодРождения,	
	| ЕстьNULL(ФИОЧленовСемьи.Фамилия,"""")	КАК Фамилия,
	| ЕстьNULL(ФИОЧленовСемьи.Имя,"""")		КАК Имя,
	| ЕстьNULL(ФИОЧленовСемьи.Отчество,"""")	КАК Отчество
	|ИЗ
	| Справочник.ФизическиеЛица.СоставСемьи КАК ФизическиеЛица_СоставСемьи
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата) КАК ФИОЧленовСемьи
	|ПО
	|	ФизическиеЛица_СоставСемьи.ФизЛицо = ФИОЧленовСемьи.ФизическоеЛицо
	|ГДЕ
	| ФизическиеЛица_СоставСемьи.Ссылка = &Работник";
	
	Возврат Запрос.Выполнить();
	
	
КонецФункции

Функция СформироватьЗапросВоинскийУчет(ДатаОтчета, РаботникОтчета)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаОтчета", 		ДатаОтчета);
	Запрос.УстановитьПараметр("Работник",			РаботникОтчета.ФизическоеЛицо);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	| ВоинскийУчет.*,
	| ЕСТЬNULL(ВоинскийУчет.Звание.Состав, ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СоставыВоеннослужащих.ПустаяСсылка)) КАК Состав
	|ИЗ
	|	РегистрСведений.ИНАГРО_ВоинскийУчет.СрезПоследних(&ДатаОтчета) КАК ВоинскийУчет
	|
	|ГДЕ
	|	ВоинскийУчет.Физлицо = &Работник";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросНазначения(ДатаОтчета, Организация, РаботникОтчета)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаОтчета",ДатаОтчета);
	Запрос.УстановитьПараметр("Организация",РаботникОтчета.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Работник",РаботникОтчета);
		
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПриемНаРаботуВОрганизацию.Ссылка КАК Приказ,
	              |	ПриемНаРаботуВОрганизацию.ДатаПриема КАК ДатаС,
	              |	ПриемНаРаботуВОрганизацию.ПодразделениеОрганизации КАК Подразделение,
	              |	ПриемНаРаботуВОрганизацию.Должность,
	              |	ПлановыеНачисления.Показатель1 КАК Оклад,
	              |	ПриемНаРаботуВОрганизацию.Должность.КодКП КАК КодКП
	              |ИЗ
	              |	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизацию
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	              |		ПО ПриемНаРаботуВОрганизацию.ДатаПриема = ПлановыеНачисления.Период
	              |			И ПриемНаРаботуВОрганизацию.Сотрудник = ПлановыеНачисления.Сотрудник
	              |			И ПриемНаРаботуВОрганизацию.Ссылка.Организация = ПлановыеНачисления.Организация
	              |			И (ПлановыеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
	              |			И (ПлановыеНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное))
	              |			И (ПлановыеНачисления.Действует = ИСТИНА)
	              |ГДЕ
	              |	(ПриемНаРаботуВОрганизацию.Сотрудник = &Работник
	              |			ИЛИ ПриемНаРаботуВОрганизацию.Сотрудник.ОсновноеНазначение = &Работник)
	              |	И ПриемНаРаботуВОрганизацию.Ссылка.Проведен = ИСТИНА
	              |	И ПриемНаРаботуВОрганизацию.Ссылка.Организация = &Организация
	              |	И ПриемНаРаботуВОрганизацию.ДатаПриема <= &ДатаОтчета
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	КадровоеПеремещениеОрганизации.Ссылка,
	              |	КадровоеПеремещениеОрганизации.ДатаНачала,
	              |	КадровоеПеремещениеОрганизации.ПодразделениеОрганизации,
	              |	КадровоеПеремещениеОрганизации.Должность,
	              |	КадровоеПеремещениеНачисления.Показатель1,
	              |	КадровоеПеремещениеОрганизации.Должность.КодКП
	              |ИЗ
	              |	Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизации
	              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              |			КадровоеПеремещениеОрганизации.Ссылка КАК Ссылка,
	              |			МАКСИМУМ(КадровоеПеремещениеНачисления.Период) КАК Период
	              |		ИЗ
	              |			Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизации
	              |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК КадровоеПеремещениеНачисления
	              |				ПО КадровоеПеремещениеОрганизации.Сотрудник = КадровоеПеремещениеНачисления.Сотрудник
	              |					И КадровоеПеремещениеОрганизации.ДатаНачала >= КадровоеПеремещениеНачисления.Период
	              |					И КадровоеПеремещениеОрганизации.Ссылка.Организация = КадровоеПеремещениеНачисления.Организация
	              |					И (КадровоеПеремещениеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
	              |					И (КадровоеПеремещениеНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное))
	              |		ГДЕ
	              |			(КадровоеПеремещениеОрганизации.Сотрудник = &Работник
	              |					ИЛИ КадровоеПеремещениеОрганизации.Сотрудник.ОсновноеНазначение = &Работник)
	              |			И КадровоеПеремещениеОрганизации.Ссылка.Проведен = ИСТИНА
	              |			И КадровоеПеремещениеОрганизации.Ссылка.Организация = &Организация
	              |			И КадровоеПеремещениеОрганизации.ДатаНачала <= &ДатаОтчета
	              |		
	              |		СГРУППИРОВАТЬ ПО
	              |			КадровоеПеремещениеОрганизации.Ссылка) КАК НачисленияДаты
	              |		ПО КадровоеПеремещениеОрганизации.Ссылка = НачисленияДаты.Ссылка
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК КадровоеПеремещениеНачисления
	              |		ПО КадровоеПеремещениеОрганизации.Сотрудник = КадровоеПеремещениеНачисления.Сотрудник
	              |			И (НачисленияДаты.Период = КадровоеПеремещениеНачисления.Период)
	              |			И КадровоеПеремещениеОрганизации.Ссылка.Организация = КадровоеПеремещениеНачисления.Организация
	              |			И (КадровоеПеремещениеНачисления.ВидРасчета.ЗачетОтработанногоВремени)
	              |			И (КадровоеПеремещениеНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное))
	              |ГДЕ
	              |	(КадровоеПеремещениеОрганизации.Сотрудник = &Работник
	              |			ИЛИ КадровоеПеремещениеОрганизации.Сотрудник.ОсновноеНазначение = &Работник)
	              |	И КадровоеПеремещениеОрганизации.Ссылка.Проведен = ИСТИНА
	              |	И КадровоеПеремещениеОрганизации.Ссылка.Организация = &Организация
	              |	И КадровоеПеремещениеОрганизации.ДатаНачала <= &ДатаОтчета
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	ДатаС";

	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросОтпуска(ДатаОтчета, Организация, РаботникОтчета)
	
	ЗапросОтпуска = Новый Запрос;
	 	
	// Установим параметры запроса
	ЗапросОтпуска.УстановитьПараметр("ДатаОтчета",ДатаОтчета);
	ЗапросОтпуска.УстановитьПараметр("Организация",РаботникОтчета.ГоловнаяОрганизация);
	ЗапросОтпуска.УстановитьПараметр("Работник",РаботникОтчета);
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	Список.Добавить(Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
	Список.Добавить(Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускПрочий);
	ЗапросОтпуска.УстановитьПараметр("Отпуска",Список);
	
	 ЗапросОтпуска.Текст =
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	 |	НачислениеОтпускаРаботникамОрганизаций.Ссылка КАК Документ,
	 |	НачислениеОтпускаРаботникамОрганизаций.Сотрудник КАК Сотрудник,
	 |	НачислениеОтпускаРаботникамОрганизаций.ДатаНачала КАК ДатаНачала,
	 |	НачислениеОтпускаРаботникамОрганизаций.ДатаОкончания КАК ДатаОкончания,
	 |	НачислениеОтпускаРаботникамОрганизаций.ВидРасчета КАК ВидРасчета,
	 |	НачислениеОтпускаРаботникамОрганизаций.Состояние КАК Состояние,
	 |	НачислениеОтпускаРаботникамОрганизаций.Ссылка.РабочийГодС КАК РабочийГодС,
	 |	НачислениеОтпускаРаботникамОрганизаций.Ссылка.РабочийГодПо КАК РабочийГодПо,
	 |	НачислениеОтпускаРаботникамОрганизаций.КалендарныеДни КАК КалендарныеДни
	 |ИЗ
	 |	Документ.ИНАГРО_НачислениеОтпускаРаботникамОрганизаций.Начисления КАК НачислениеОтпускаРаботникамОрганизаций
	 |ГДЕ
	 |	(НачислениеОтпускаРаботникамОрганизаций.Сотрудник = &Работник
	 |			ИЛИ НачислениеОтпускаРаботникамОрганизаций.Сотрудник.ОсновноеНазначение = &Работник)
	 |	И НачислениеОтпускаРаботникамОрганизаций.Ссылка.Проведен = ИСТИНА
	 |	И НачислениеОтпускаРаботникамОрганизаций.Ссылка.Организация = &Организация
	 |	И НачислениеОтпускаРаботникамОрганизаций.ДатаНачала <= &ДатаОтчета
	 |	И НачислениеОтпускаРаботникамОрганизаций.Состояние В(&Отпуска)
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ДатаНачала УБЫВ";

	
	Возврат ЗапросОтпуска.Выполнить();
	
КонецФункции

Функция СформироватьЗапросКонтактнаяИнформация(РаботникОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Работник", РаботникОтчета.ФизическоеЛицо);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|					И ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица)
	|				ТОГДА ФизическиеЛицаКонтактнаяИнформация.Представление
	|			ИНАЧЕ "" ""
	|		КОНЕЦ) КАК ФактАдресПроживания,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|					И ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица)
	|				ТОГДА ФизическиеЛицаКонтактнаяИнформация.Представление
	|			ИНАЧЕ "" ""
	|		КОНЕЦ) КАК ЮрАдресПроживания,
	|	МАКСИМУМ(ФизическиеЛицаКонтактнаяИнформация.НомерТелефона) КАК Телефоны
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	НЕ ФизическиеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|	И ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Работник
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка" ;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросОбразование(ДатаОтчета, РаботникОтчета,ПоследипломнаяПодготовка = Ложь)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОтчета",ДатаОтчета);
	Запрос.УстановитьПараметр("Работник", РаботникОтчета.ФизическоеЛицо );
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Образование.ВидОбразования 		КАК ВидОбразования,
	|	Образование.УчебноеЗаведение	КАК УчебноеЗаведение,
	|	Образование.Специальность		КАК Специальность,
	|	Образование.Диплом				КАК Диплом,
	|	Образование.ГодОкончания		КАК ГодОкончания,
	|	Образование.Квалификация 		КАК Квалификация,
	|	Образование.ФормаОбучения		КАК ФормаОбучения,
	|	Образование.УченаяСтепень		КАК УчебнаяСтепень
	|ИЗ
	|	Справочник.ФизическиеЛица.ИНАГРО_Образование КАК Образование
	|ГДЕ
	|	Образование.Ссылка = &Работник 
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
	
КонецФункции
	
// Печатает личную карточку указанного Работника 
	//
	// Параметры
	//  ДатаОтчета – Дата
	//  РаботникОтчета    – Физическое лицо
	//  ПустойБланк  – Булево.
	//
Функция ПечатьФорма2009(ТабДокумент, ДатаОтчета, Организация, РаботникОтчета,ПустойБланк = Ложь) Экспорт	
   	Если Не ПустойБланк Тогда
		РезультатыОсновныеСведения = СформироватьЗапросОсновныеСведения(ДатаОтчета,, Организация, РаботникОтчета).Выбрать();
		РезультатыОбразование = СформироватьЗапросОбразование(ДатаОтчета, РаботникОтчета).Выгрузить();
		РезультатыЧленыСемьи = СформироватьЗапросЧленыСемьи(ДатаОтчета,РаботникОтчета).Выбрать();
		РезультатыВоинскийУчет = СформироватьЗапросВоинскийУчет(ДатаОтчета, РаботникОтчета).Выбрать();
		РезультатыНазначения = СформироватьЗапросНазначения(ДатаОтчета, Организация, РаботникОтчета).Выбрать();
		РезультатыОтпуска = СформироватьЗапросОтпуска(ДатаОтчета, Организация, РаботникОтчета).Выбрать();		
	КонецЕсли; 	     
	
	// запоминаем области макета
	Макет = Отчеты.ИНАГРО_ЛичнаяКарточка.ПолучитьМакет("ПФ_MXL_П2_от_25_12_2009");	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьОсновныеСведения = Макет.ПолучитьОбласть("ОсновныеСведения");
	ОбластьВоинскийУчет = Макет.ПолучитьОбласть("ВоинскийУчет");
	ОбластьПрофОбразование = Макет.ПолучитьОбласть("ПрофОбразование");
	ОбластьНазначенияИПеремещения = Макет.ПолучитьОбласть("НазначенияИПеремещения");
	ОбластьОтпуска = Макет.ПолучитьОбласть("Отпуска");
	ОбластьДополнительныеСведения = Макет.ПолучитьОбласть("ДополнительныеСведения");
	
	Если ПустойБланк Тогда
		ТабДокумент.Вывести(ОбластьШапка);
		ТабДокумент.Вывести(ОбластьОсновныеСведения);
		ТабДокумент.Вывести(ОбластьВоинскийУчет);
		ТабДокумент.Вывести(ОбластьПрофОбразование);
		ТабДокумент.Вывести(ОбластьНазначенияИПеремещения);
		ТабДокумент.Вывести(ОбластьОтпуска);
		ТабДокумент.Вывести(ОбластьДополнительныеСведения);
		Возврат Неопределено;
	КонецЕсли;
	
	
	// ШАПКА	
	ОбластьШапка.Параметры.Дата = ДатаОтчета;
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РаботникОтчета.ГоловнаяОрганизация, ДатаОтчета);
	ОбластьШапка.Параметры.НазваниеОрганизации = СведенияОбОрганизации.ПолноеНаименование;

	ОбластьШапка.Параметры.ЕДРПОУ = СведенияОбОрганизации.КодПоЕДРПОУ;
	
	Если РаботникОтчета.ИНАГРО_ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		ОбластьШапка.Параметры.ВидЗанятости = НСтр("ru='Основна';uk='Основна'");
	Иначе
		ОбластьШапка.Параметры.ВидЗанятости = НСтр("ru='За сумісництвом';uk='За сумісництвом'");
	КонецЕсли;
	
	Если РаботникОтчета.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		ОбластьШапка.Параметры.Пол = НСтр("ru='чоловіча';uk='чоловіча'");
	ИначеЕсли РаботникОтчета.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		ОбластьШапка.Параметры.Пол = НСтр("ru='жіноча';uk='жіноча'");
	Иначе
	КонецЕсли;
	ОбластьШапка.Параметры.КодПоДРФО = РаботникОтчета.ФизическоеЛицо.КодПоДРФО;
	ОбластьШапка.Параметры.ТабельныйНомер = РаботникОтчета.ИНАГРО_ТабельныйНомер;
	ОбластьШапка.Параметры.Дата = ДатаОтчета;

	
	// ОСНОВНЫЕ СВЕДЕНИЯ
	ДанныеУчебноеЗаведение = "";
	ДанныеДиплом = "";
	Пока РезультатыОсновныеСведения.Следующий() Цикл
		ОбластьОсновныеСведения.Параметры.Заполнить(РезультатыОсновныеСведения);
		
		ОбластьОсновныеСведения.Параметры.ДатаРождения = Формат(РезультатыОсновныеСведения.ЧислоРождения,"ЧГ=0; ЧВН=; ЧЦ=2") + ". " + Формат(РезультатыОсновныеСведения.МесяцРождения,"ЧГ=0; ЧВН=; ЧЦ=2") + ". "+  Формат(РезультатыОсновныеСведения.ГодРождения,"ЧГ=0; ЧВН=");
			
		// Заполняем образование. Выводим только наибольшее по значимости образование.
		ВидыОбразования = Справочники.ИНАГРО_ВидыОбразованияФизЛиц;
		
		Если РезультатыОбразование.Найти(ВидыОбразования.ВысшееОбразование, "ВидОбразования") <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.ВидОбразования = ВидыОбразования.ВысшееОбразование;
		ИначеЕсли РезультатыОбразование.Найти(ВидыОбразования.НеполноеВысшееОбразование, "ВидОбразования") <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.ВидОбразования = ВидыОбразования.НеполноеВысшееОбразование;
		ИначеЕсли РезультатыОбразование.Найти(ВидыОбразования.БазовоеВысшееОбразование, "ВидОбразования") <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.ВидОбразования = ВидыОбразования.БазовоеВысшееОбразование;
		ИначеЕсли РезультатыОбразование.Найти(ВидыОбразования.СреднееПрофессиональноеОбразование, "ВидОбразования")<> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.ВидОбразования = ВидыОбразования.СреднееПрофессиональноеОбразование;
		ИначеЕсли РезультатыОбразование.Найти(ВидыОбразования.НачальноеПрофессиональноеОбразование, "ВидОбразования") <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.ВидОбразования =ВидыОбразования.НачальноеПрофессиональноеОбразование;
		ИначеЕсли РезультатыОбразование.Найти(ВидыОБразования.СреднееПолноеОбщееОбразование, "ВидОбразования") <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.ВидОбразования = ВидыОбразования.СреднееПолноеОбщееОбразование;
		ИначеЕсли РезультатыОбразование.Найти(ВидыОбразования.БазовоеОбщееСреднееОбразование, "ВидОбразования") <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.ВидОбразования =ВидыОбразования.БазовоеОбщееСреднееОбразование
		КонецЕсли;
			
		номер = 0;
		Для Каждого Образование Из РезультатыОбразование Цикл
			Если Образование.ВидОбразования = ВидыОбразования.Аспирантура ИЛИ
					Образование.ВидОбразования = ВидыОбразования.АдъюнктураОрдинатура ИЛИ
					Образование.ВидОбразования = ВидыОбразования.Докторантура Тогда
					Продолжить;
			КонецЕсли;
				
			номер =	1	+	номер;
			Если номер > 4 Тогда
				Прервать;
			КонецЕсли;
			ОбластьОсновныеСведения.Параметры["УчебноеЗаведение" + номер]	=	Образование.УчебноеЗаведение;
			ОбластьОсновныеСведения.Параметры["Диплом" + номер] 			=   Образование.Диплом;
			ОбластьОсновныеСведения.Параметры["ГодОкончания" + номер]       =	Образование.ГодОкончания;
			ОбластьОсновныеСведения.Параметры["Специальность" + номер] 		= 	Образование.Специальность;
			ОбластьОсновныеСведения.Параметры["Квалификация" + номер]		= 	Образование.Квалификация;
			ОбластьОсновныеСведения.Параметры["ФормаОбучения" + номер]		= 	Образование.ФормаОбучения;				
		КонецЦикла;
		
		Если РезультатыОбразование.Найти(ВидыОбразования.Аспирантура, "ВидОбразования") <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.Аспирантура = "х";
		КонецЕсли;
		
		Если РезультатыОбразование.Найти(ВидыОбразования.АдъюнктураОрдинатура, "ВидОбразования") <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.Адъюнктура = "х";
		КонецЕсли;
		
		Если РезультатыОбразование.Найти(ВидыОбразования.Докторантура, "ВидОбразования") <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.Докторантура = "х";
		КонецЕсли;
		
		номер = 0;
		Для Каждого Образование Из РезультатыОбразование Цикл
			Если Образование.ВидОбразования = ВидыОбразования.Аспирантура ИЛИ
				Образование.ВидОбразования = ВидыОбразования.АдъюнктураОрдинатура ИЛИ
				Образование.ВидОбразования = ВидыОбразования.Докторантура Тогда
				Продолжить;
			КонецЕсли;
				
			номер =	1	+	номер;
			Если номер > 4 Тогда
				Прервать;
			КонецЕсли;
			ОбластьОсновныеСведения.Параметры["УчебноеЗаведение" + номер]	=	Образование.УчебноеЗаведение;
			ОбластьОсновныеСведения.Параметры["Диплом" + номер] 			=   Образование.Диплом;
			ОбластьОсновныеСведения.Параметры["ГодОкончания" + номер]       =	Образование.ГодОкончания;
			ОбластьОсновныеСведения.Параметры["Специальность" + номер] 		= 	Образование.Специальность;
			ОбластьОсновныеСведения.Параметры["Квалификация" + номер]		= 	Образование.Квалификация;
			ОбластьОсновныеСведения.Параметры["ФормаОбучения" + номер]		= 	Образование.ФормаОбучения;				
		КонецЦикла;
		
		номер = 4;
		Для Каждого Образование Из РезультатыОбразование Цикл
			Если Образование.ВидОбразования = ВидыОбразования.Аспирантура ИЛИ
					Образование.ВидОбразования = ВидыОбразования.АдъюнктураОрдинатура ИЛИ
					Образование.ВидОбразования = ВидыОбразования.Докторантура Тогда						
				номер =	1	+	номер;
				Если номер > 7 Тогда
					Прервать;
				КонецЕсли;
				ОбластьОсновныеСведения.Параметры["УчебноеЗаведение" + номер]	=	Образование.УчебноеЗаведение;
				ОбластьОсновныеСведения.Параметры["Диплом" + номер] 			=   Образование.Диплом;
				ОбластьОсновныеСведения.Параметры["ГодОкончания" + номер]       =	Образование.ГодОкончания;
				ОбластьОсновныеСведения.Параметры["УченаяСтепень" + номер] 	= 	Образование.УчебнаяСтепень;		
			КонецЕсли;
		КонецЦикла;
		
		// Пенсионер ли?
		Отбор = Новый Структура("ФизЛицо");
		Отбор.Вставить("ФизЛицо", РаботникОтчета.ФизическоеЛицо);
		Пенсионер = РегистрыСведений.СведенияОПенсионерах.СрезПоследних(ДатаОтчета, Отбор).Найти(Истина,"Пенсионер"); 
		Если Пенсионер <> Неопределено Тогда
			ОбластьОсновныеСведения.Параметры.Пенсия = НСтр("ru='є пенсіонером';uk='є пенсіонером'");
		Иначе
			ОбластьОсновныеСведения.Параметры.Пенсия = НСтр("ru='не є пенсіонером';uk='не є пенсіонером'");
		КонецЕсли;
		
		ЛетСтажа = 0;
		МесяцевСтажа = 0;
		ДнейСтажа = 0;
		ИНАГРО_ПроведениеРасчетов.РазобратьРазностьДат(ДатаОтчета,РезультатыОсновныеСведения.ДатаТрудовогоСтажа,ДнейСтажа, МесяцевСтажа, ЛетСтажа);
		ОбластьОсновныеСведения.Параметры.ДнейСтажа = ДнейСтажа;
		ОбластьОсновныеСведения.Параметры.МесяцевСтажа = МесяцевСтажа;
		ОбластьОсновныеСведения.Параметры.ЛетСтажа = ЛетСтажа;
		ОбластьОсновныеСведения.Параметры.ДатаПриемаВОрг = ДатаОтчета;
		
		ЛетСтажа = 0;
		МесяцевСтажа = 0;
		ДнейСтажа = 0;			
		ИНАГРО_ПроведениеРасчетов.РазобратьРазностьДат(ДатаОтчета,РезультатыОсновныеСведения.ДатаБольничногоСтажа,ДнейСтажа, МесяцевСтажа, ЛетСтажа);
		ОбластьОсновныеСведения.Параметры.ДнейВыслуга = ДнейСтажа;
		ОбластьОсновныеСведения.Параметры.МесяцевВыслуга = МесяцевСтажа;
		ОбластьОсновныеСведения.Параметры.ЛетВыслуга = ЛетСтажа;


	КонецЦикла;
	
	
	Если ЗначениеЗаполнено(РезультатыОсновныеСведения.ДокументУвольнения) Тогда
		ТЧ = РезультатыОсновныеСведения.ДокументУвольнения.РаботникиОрганизации.Выгрузить();
		СтрокаТЧ = ТЧ.Найти(РаботникОтчета,"Сотрудник");
		Если СтрокаТЧ = Неопределено Тогда
			Основание = "";
		Иначе
			Основание = ", "+СтрокаТЧ.ОснованиеУвольнения.Наименование;
		КонецЕсли;
	Иначе
		Основание = "";
	КонецЕсли;
	ДатаУвольненияИзОрг = Формат(РезультатыОсновныеСведения.ДатаУвольненияИзОрг,"ДФ=""дд.ММ.гггг"";ДП="" """);
	СтатьяКЗОТ = Основание;
	// Семейные связи
	номер = 0;
	Пока РезультатыЧленыСемьи.Следующий() Цикл
		номер = 1 + номер;
		Если номер>5 Тогда
			Прервать;
		КонецЕсли;
		ОбластьОсновныеСведения.Параметры["СтепеньРодства"+номер] = РезультатыЧленыСемьи.СтепеньРодства;
		ОбластьОсновныеСведения.Параметры["ФИО"+номер] = РезультатыЧленыСемьи.Фамилия + " " + РезультатыЧленыСемьи.Имя + " " + РезультатыЧленыСемьи.Отчество; 
		ОбластьОсновныеСведения.Параметры["ГодРождения"+номер] = РезультатыЧленыСемьи.ГодРождения;
	КонецЦикла;
		
	// Прописка и фактическое место жительства
	ТЗКонтактнаяИнформация = СформироватьЗапросКонтактнаяИнформация(РаботникОтчета).Выбрать();
	Пока ТЗКонтактнаяИнформация.Следующий() Цикл
		
		СтрокаФактАдрес = ТЗКонтактнаяИнформация.ФактАдресПроживания;
		Если СтрокаФактАдрес <> Неопределено Тогда
			СтрокаФактАдрес = СтрокаФактАдрес;
		КонецЕсли;
		
		СтрокаТелефон = ТЗКонтактнаяИнформация.Телефоны;
		Если СтрокаТелефон <> Неопределено И СтрокаФактАдрес <> Неопределено Тогда
			СтрокаФактАдрес = Строка(СтрокаФактАдрес) + ", тел: " + Строка(СтрокаТелефон); 
		ИначеЕсли СтрокаТелефон <> Неопределено Тогда
			СтрокаФактАдрес = "тел: " + Строка(СтрокаТелефон);	
		КонецЕсли;
		
		ОбластьОсновныеСведения.Параметры.ФактАдресПроживания = СтрокаФактАдрес;
		
		СтрокаЮрАдрес = ТЗКонтактнаяИнформация.ЮрАдресПроживания;
		Если СтрокаЮрАдрес <> Неопределено Тогда
			СтрокаЮрАдрес = СтрокаЮрАдрес;
		КонецЕсли;
		ОбластьОсновныеСведения.Параметры.ЮрАдресПроживания = СтрокаЮрАдрес;
	КонецЦикла;
	
	// ВОИНСКИЙ УЧЕТ
	Если Не ПустойБланк Тогда
		Если РезультатыВоинскийУчет.Следующий() Тогда
			Если ДатаОтчета >= ДатаПорядка921() Тогда
				// Воинский учет
				// згідно п.42 Постанови №921 від 07.12.16 р. для призовників:
				Если РезультатыВоинскийУчет.ОтношениеКВоинскойОбязанности = Перечисления.ИНАГРО_ОтношениеКВоинскойОбязанности.Призывник Тогда
					ОбластьВоинскийУчет.Параметры.Группа = "Призовник";
					ОбластьВоинскийУчет.Параметры.СпецУчет = РезультатыВоинскийУчет.СпецУчет;
					ОбластьВоинскийУчет.Параметры.Военкомат = РезультатыВоинскийУчет.Военкомат;
					ОбластьВоинскийУчет.Параметры.ВоенкоматФМП = РезультатыВоинскийУчет.ВоенкоматФМП;
					// згідно п.41 Постанови №921 від 07.12.16 р. для офіцерів запасу:
				ИначеЕсли РезультатыВоинскийУчет.Состав = Перечисления.ИНАГРО_СоставыВоеннослужащих.МладшиеОфицеры
					Или РезультатыВоинскийУчет.Состав = Перечисления.ИНАГРО_СоставыВоеннослужащих.СтаршиеОфицеры
					Или РезультатыВоинскийУчет.Состав = Перечисления.ИНАГРО_СоставыВоеннослужащих.ВысшиеОфицеры Тогда
					
					ОбластьВоинскийУчет.Параметры.Заполнить(РезультатыВоинскийУчет);
					ОбластьВоинскийУчет.Параметры.Группа = "";
					ОбластьВоинскийУчет.Параметры.ПолнаяГодность = "";
				Иначе
					ОбластьВоинскийУчет.Параметры.Заполнить(РезультатыВоинскийУчет);
					ОбластьВоинскийУчет.Параметры.ПолнаяГодность = "" + Локализация.ПолучитьЛокализованныйСинонимОбъекта(РезультатыВоинскийУчет.Годность, "uk") + " " + РезультатыВоинскийУчет.ОснованиеНегодности;
				КонецЕсли;
				// Згідно п.43 Постанови №921 від 07.12.16 р. для  виключених з військового обліку за віком.
				Если РезультатыВоинскийУчет.ОтношениеКВоинскомуУчету = Перечисления.ИНАГРО_ОтношениеКВоинскомуУчету.СнятПоВозрасту Тогда
					ОбластьВоинскийУчет.Параметры.ОтметкаОСнятииСУчета = НСтр("ru='Виключений з військового обліку за віком';uk='Виключений з військового обліку за віком'");
				Иначе
					ОбластьВоинскийУчет.Параметры.ОтметкаОСнятииСУчета = "";
				КонецЕсли;	
				Категория = ""; КатегорияИРеквизитыВоенногоБилета1 = ""; КатегорияИРеквизитыВоенногоБилета2 = "";			
				СтрокаКатегорияИРеквизитыВоенногоБилета = "";
				Если НЕ РезультатыВоинскийУчет.Категория = Перечисления.ИНАГРО_КатегорииВоинскогоУчета.ПустаяСсылка() Тогда
					Категория = Локализация.ПолучитьЛокализованныйСинонимОбъекта(РезультатыВоинскийУчет.Категория,"uk");
					РеквизитыБилета = РезультатыВоинскийУчет.РеквизитыВоенногоБилета;
					//СтрокаКатегорияИРеквизитыВоенногоБилета = Категория + ?(СокрЛП(РеквизитыБилета)="","",", " + СокрЛП(РеквизитыБилета));
					СтрокаКатегорияИРеквизитыВоенногоБилета =РезультатыВоинскийУчет.Категория ;
				Иначе
					СтрокаКатегорияИРеквизитыВоенногоБилета = ?(СокрЛП(РеквизитыБилета)="","",СокрЛП(РеквизитыБилета));
				КонецЕсли;		
				МассивДлинСтрок = Новый Массив;
				МассивДлинСтрок.Добавить(27);
				МассивДлинСтрок.Добавить(42);
				
				РезультирующаяСтрокаКатегорияИРеквизитыВоенногоБилета = ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(СтрокаКатегорияИРеквизитыВоенногоБилета, МассивДлинСтрок);
				Для Счетчик = 1 По ?(СтрЧислоСтрок(РезультирующаяСтрокаКатегорияИРеквизитыВоенногоБилета) <= 2, СтрЧислоСтрок(РезультирующаяСтрокаКатегорияИРеквизитыВоенногоБилета), 2)  Цикл
					ОбластьВоинскийУчет.Параметры["КатегорияИРеквизитыВоенногоБилета"+Счетчик] = СтрЗаменить(СтрПолучитьСтроку(РезультирующаяСтрокаКатегорияИРеквизитыВоенногоБилета, Счетчик),Символы.ПС, "");  
				КонецЦикла;

				Если НЕ ОбластьВоинскийУчет.Параметры.Состав = Неопределено Тогда
					ОбластьВоинскийУчет.Параметры.Состав = Локализация.ПолучитьЛокализованныйСинонимОбъекта(ОбластьВоинскийУчет.Параметры.Состав,  "uk");
				КонецЕсли;
								
			Иначе
				ОбластьВоинскийУчет.Параметры.Заполнить(РезультатыВоинскийУчет);
				ОбластьВоинскийУчет.Параметры.Группа = РезультатыВоинскийУчет.ГруппаДо2016; 
				Если РезультатыВоинскийУчет.ОтношениеКВоинскойОбязанности = Перечисления.ИНАГРО_ОтношениеКВоинскойОбязанности.Призывник Тогда
					ОбластьВоинскийУчет.Параметры.Группа = РезультатыВоинскийУчет.ОтношениеКВоинскойОбязанности;
				КонецЕсли;
			
				// Особенности заполнения некоторых полей карточки
			    ОбластьВоинскийУчет.Параметры.ПолнаяГодность = "" + Локализация.ПолучитьЛокализованныйСинонимОбъекта(РезультатыВоинскийУчет.Годность, "uk") + " " + РезультатыВоинскийУчет.ОснованиеНегодности;
				Если 	РезультатыВоинскийУчет.Состав = Перечисления.ИНАГРО_СоставыВоеннослужащих.МладшиеОфицеры
					Или РезультатыВоинскийУчет.Состав = Перечисления.ИНАГРО_СоставыВоеннослужащих.СтаршиеОфицеры
					Или РезультатыВоинскийУчет.Состав = Перечисления.ИНАГРО_СоставыВоеннослужащих.ВысшиеОфицеры Тогда
					ОбластьВоинскийУчет.Параметры.Состав = РезультатыВоинскийУчет.Профиль;
				КонецЕсли;
				Если РезультатыВоинскийУчет.ОтношениеКВоинскойОбязанности = Перечисления.ИНАГРО_ОтношениеКВоинскойОбязанности.Призывник Тогда
					ОбластьВоинскийУчет.Параметры.Группа = РезультатыВоинскийУчет.ОтношениеКВоинскойОбязанности;
					ОбластьВоинскийУчет.Параметры.Военкомат = РезультатыВоинскийУчет.Военкомат;
					ОбластьВоинскийУчет.Параметры.ВоенкоматФМП = РезультатыВоинскийУчет.ВоенкоматФМП;
				КонецЕсли;
				ОбластьВоинскийУчет.Параметры.Группа = Локализация.ПолучитьЛокализованныйСинонимОбъекта(ОбластьВоинскийУчет.Параметры.Группа, "uk");
				
				// Переводы
				ОбластьВоинскийУчет.Параметры.КатегорияИРеквизитыВоенногоБилета2 = "";
				ОбластьВоинскийУчет.Параметры.КатегорияИРеквизитыВоенногоБилета1 = Локализация.ПолучитьЛокализованныйСинонимОбъекта(РезультатыВоинскийУчет.Категория, "uk");
				ОбластьВоинскийУчет.Параметры.Состав = Локализация.ПолучитьЛокализованныйСинонимОбъекта(ОбластьВоинскийУчет.Параметры.Состав, "uk");
			
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;	

	
	// НАЗНАЧЕНИЯ И ПЕРЕМЕЩЕНИЯ
	
	// Выводим в хронологическом порядке последние 10 перемещений
	ДанныеЗаполненияПоСотруднику = СформироватьЗапросНазначения(ДатаОтчета,Организация,РаботникОтчета).Выгрузить();	
	Инд = ДанныеЗаполненияПоСотруднику.Количество() - 1;
	Сч = 1;
	КоличествоИтераций = 0;
	Если ДанныеЗаполненияПоСотруднику.Количество() <> 0 Тогда
		Если ДанныеЗаполненияПоСотруднику.Количество() >= 10 Тогда
			КоличествоИтераций = 10;
			ИндексМассива      = ДанныеЗаполненияПоСотруднику.Количество() - КоличествоИтераций;
		Иначе 
			КоличествоИтераций = ДанныеЗаполненияПоСотруднику.Количество();	
			ИндексМассива      = 0;
		КонецЕсли;	
		Пока   Сч <= КоличествоИтераций   Цикл
			СтрокаНазначенияИПеремещения = ДанныеЗаполненияПоСотруднику[ИндексМассива];
			Номер = Сч;
			ОбластьНазначенияИПеремещения.Параметры["ДатаС" + номер] = Формат(СтрокаНазначенияИПеремещения.ДатаС,"ДФ=""дд.ММ.гггг""");
			ОбластьНазначенияИПеремещения.Параметры["Подразделение" + номер] = СтрокаНазначенияИПеремещения.Подразделение;
			ОбластьНазначенияИПеремещения.Параметры["Должность" + номер] = СтрокаНазначенияИПеремещения.Должность;
			ОбластьНазначенияИПеремещения.Параметры["Код" + номер] = СтрокаНазначенияИПеремещения.Должность.КодКП;
			ОбластьНазначенияИПеремещения.Параметры["Приказ"+номер] = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаНазначенияИПеремещения.Приказ.Номер) + " від " + Формат(СтрокаНазначенияИПеремещения.Приказ.Дата,"ДФ=дд.ММ.гг");
			ОбластьНазначенияИПеремещения.Параметры["Оклад" + номер] = Формат(СтрокаНазначенияИПеремещения.Оклад,"ЧДЦ=2");
			ИндексМассива = ИндексМассива + 1;				
			Сч = Сч + 1;
			КонецЦикла;	
	КонецЕсли;
	
	
	// ОТПУСКА
	номер = РезультатыОтпуска.Количество();
	Пока РезультатыОтпуска.Следующий() Цикл
		ОбластьОтпуска.Параметры["ВидОтпуска" + номер] 	= РезультатыОтпуска.ВидРасчета.Наименование;
		ОбластьОтпуска.Параметры["ПриказОтпуск" + номер]= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РезультатыОтпуска.Документ.Номер) + " від " + Формат(РезультатыОтпуска.Документ.Дата,"ДФ=дд.ММ.гг");
		ОбластьОтпуска.Параметры["ДатаСОтпуск" + номер] = РезультатыОтпуска.ДатаНачала;
		ОбластьОтпуска.Параметры["ДатаПо" + номер] 		= РезультатыОтпуска.ДатаОкончания; 
		ОбластьОтпуска.Параметры["ЗаПериод" + номер] 	= Формат(РезультатыОтпуска.РабочийГодС,"ДФ=dd.MM.yyyy") + " - " + Формат(РезультатыОтпуска.РабочийГодПо,"ДФ=dd.MM.yyyy");
		номер = номер - 1;
	КонецЦикла;	
	

	// ДОПОЛНИТЕЛЬНЫЕ СВЕДЕНИЯ
	// ОтветсвенныеЛица
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", ДатаОтчета);
	Запрос.УстановитьПараметр("Организация", РаботникОтчета.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("РаботникКадровойСлужбы", Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизации.Должность			КАК ДолжностьКадровогоРаботника,
	|	ОтветственныеЛицаОрганизации.ФизическоеЛицо		КАК ФИОКадровогоРаботника, 
	|	ЕстьNULL(ФИООтветственногоЛица.Фамилия, """")	КАК Фамилия,
	|	ЕстьNULL(ФИООтветственногоЛица.Имя,"""")		КАК Имя,
	|	ЕстьNULL(ФИООтветственногоЛица.Отчество,"""")	КАК Отчество
	|
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&МоментВремени, СтруктурнаяЕдиница = &Организация И ОтветственноеЛицо = &РаботникКадровойСлужбы) КАК ответственныеЛицаОрганизации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&МоментВремени, ФизическоеЛицо = &РаботникКадровойСлужбы) КАК ФИООтветственногоЛица
	|ПО
	|	ОтветственныеЛицаОрганизации.ФизическоеЛицо = ФИООтветственногоЛица.ФизическоеЛицо
	|
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		КадровыйРаботник = Выборка;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КадровыйРаботник) Тогда
		Если КадровыйРаботник.Фамилия <> "" Тогда
			ОбластьДополнительныеСведения.Параметры.ФИОКадровогоРаботника =  Строка(КадровыйРаботник.Фамилия) + " " + Строка(КадровыйРаботник.Имя) + " " + Строка(КадровыйРаботник.Отчество);
		Иначе
			ОбластьДополнительныеСведения.Параметры.ФиоКадровогоРаботника = КадровыйРаботник.ФИОКадровогоРаботника;
		КонецЕсли;
			
		ОбластьДополнительныеСведения.Параметры.ДолжностьКадровогоРаботника = КадровыйРаботник.ДолжностьКадровогоРаботника;
	КонецЕсли;
	ОбластьДополнительныеСведения.Параметры.ДатаУвольненияИзОрг = ДатаУвольненияИзОрг;
	ОбластьДополнительныеСведения.Параметры.СтатьяКЗОТ = Основание;
	ТабДокумент.Вывести(ОбластьШапка);
	ТабДокумент.Вывести(ОбластьОсновныеСведения);
	ТабДокумент.Вывести(ОбластьВоинскийУчет);
	ТабДокумент.Вывести(ОбластьПрофОбразование);
	ТабДокумент.Вывести(ОбластьНазначенияИПеремещения);
	ТабДокумент.Вывести(ОбластьОтпуска);
	ТабДокумент.Вывести(ОбластьДополнительныеСведения);
	Возврат ТабДокумент;
		
КонецФункции

Функция ДатаПорядка921() Экспорт
	
	Возврат Дата(2016,12,19);
	
КонецФункции
	

#КонецЕсли
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    
    Настройки      = КомпоновщикНастроек.ПолучитьНастройки();
    ДатаОтчета     = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("ДатаОтчета")).Значение.Дата;
    РаботникОтчета = Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("РаботникОтчета")).Значение;
    ПечатьФорма2009(ДокументРезультат, ДатаОтчета,,РаботникОтчета);
      
КонецПроцедуры

#КонецОбласти