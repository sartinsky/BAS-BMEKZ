#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьПередВыводомЭлементаРезультата",
							Истина, Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат НСтр("ru='Оборотно-сальдовая ведомость';uk='Оборотно-сальдова відомість'") + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ПараметрыАлгоритма = ПараметрыАлгоритма();
	
	ПодготовитьНаборыДанных(ПараметрыОтчета, ПараметрыАлгоритма);
	
	// Для развернутого сальдо модифицируем выражения полей итога, а также укажем группировки, по которым они должны рассчитываться.
	Если ПараметрыАлгоритма.ВыводитьРазвернутоеСальдо Тогда
		
		СоздатьИтогиРазвернутогоСальдо(ПараметрыАлгоритма);
		
	КонецЕсли;
	
	Схема = ПараметрыАлгоритма.Схема;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	Для Каждого Параметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Использование = Истина;
	КонецЦикла;
	
	// Проверим список исключаемых счетов: возможно некоторые субсчета стоит из него исключить.
	// Запрос детализации строится с указанием конкретных видов субконто в параметре виртуальной таблицы.
	// Поэтому, если у какого-либо субсчета детализируемого счета нет нужного набора субконто, 
	// он будет исключен из запроса детализации. Такие субсчета не нужно исключать из запроса по счетам.
	СчетаИсключенныеИзЗапросаПоСчетам = СчетаССовпадающимНаборомСубконто(
		ПараметрыАлгоритма.СчетаИсключенныеИзЗапросаПоСчетам,
		ПараметрыАлгоритма.КоличествоСубконтоДетализацииПоСчетам);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаИсключенныеИзЗапросаПоСчетам, ПараметрыАлгоритма.СчетаДляОтдельногоЗапроса);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаИсключенныеИзЗапросаПоСчетам", СчетаИсключенныеИзЗапросаПоСчетам);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВыводитьЗабалансовыеСчета", ПараметрыОтчета.ВыводитьЗабалансовыеСчета);
	
	// Формирование структуры отчета.
	ПараметрыАлгоритма.Вставить("СписокСчетовПоСубсчетам", БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПоСубсчетам(ПараметрыАлгоритма.НастройкаГруппировки));
	СформироватьСтруктуруОтчета(КомпоновщикНастроек, ПараметрыОтчета, ПараметрыАлгоритма);	

КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
		
	МакетШапкиОтчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетШапки(МакетКомпоновки);
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	КоличествоГруппировок = 0;
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаТаблицы.Использование Тогда
			КоличествоСубконто = СтрЧислоВхождений(СтрокаТаблицы.ПоСубконто, "+");
			КоличествоГруппировок = Макс(КоличествоГруппировок, КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	КоличествоГруппировок = КоличествоГруппировок + 1;

	КоличествоСтрокШапки = Макс(КоличествоГруппировок, 2);
	ПараметрыОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 2 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
			
			Если ИндексКолонки < КоличествоКолонок - 6 Тогда
				Продолжить;	
			КонецЕсли;	
			
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоПоказателей > 1 Тогда
		Для ИндексСтроки = 1 По КоличествоСтрок - 1 Цикл
			СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
			
			КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
			
			Если КоличествоКолонок < 7 Тогда
				Продолжить;
			КонецЕсли;	
			
			Ячейка = СтрокаМакета.Ячейки[КоличествоКолонок - 7];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЕсли;	
	
	МакетПодвалаОтчета            = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетПодвала(МакетКомпоновки);
	МакетГруппировкиОрганизация   = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация");
	МакетГруппировкиСчет          = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет");
	МакетГруппировкиПодразделение = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение");
	МакетГруппировкиВалюта        = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
	
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		Если Макет = МакетШапкиОтчета Тогда
		Иначе
			Индекс = -1;
			МассивПоказателей = Новый Массив;
			МассивПоказателей.Добавить("БУ");
			МассивПоказателей.Добавить("НУ");
			
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
			Если ПараметрыОтчета.ПоказательРазница Тогда 
				Индекс = Индекс + 1;					
			КонецЕсли;
			
			Если ПараметрыОтчета.ПоказательВалютнаяСумма И КоличествоПоказателей = 1 Тогда 
				
			ИначеЕсли ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
				Индекс = Индекс + 1;				
				Если МакетГруппировкиВалюта.Найти(Макет) <> Неопределено Тогда
					
				Иначе
					Макет.Макет.Удалить(Макет.Макет[Индекс]);
					Индекс = Индекс - 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПоказателей = КоличествоПоказателей;
	Если КоличествоПоказателей > 0 Тогда
		ЗначенияПоказателей = Новый Массив(6, КоличествоПоказателей);
		Для Каждого Массив Из ЗначенияПоказателей Цикл
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Массив[Индекс] = 0;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МассивИменМакетовСчет = Новый Массив;
	Для Каждого МакетСчет Из МакетГруппировкиСчет Цикл
		МассивИменМакетовСчет.Добавить(МакетСчет.Имя);
	КонецЦикла;
	
	МассивИменМакетовВалюта = Новый Массив;
	Для Каждого МакетВалюта Из МакетГруппировкиВалюта Цикл
		МассивИменМакетовВалюта.Добавить(МакетВалюта.Имя);
	КонецЦикла;
	
	ВременныеДанныеОтчета = Новый Структура;
	ВременныеДанныеОтчета.Вставить("МакетВалюта"          , МассивИменМакетовВалюта);
	ВременныеДанныеОтчета.Вставить("МакетШапкиОтчета"     , МакетШапкиОтчета.Имя);
	ВременныеДанныеОтчета.Вставить("МакетСчет"            , МассивИменМакетовСчет);
	Если МакетПодвалаОтчета = Неопределено Тогда
		ВременныеДанныеОтчета.Вставить("МакетПодвал"          , Неопределено);
	Иначе	
		ВременныеДанныеОтчета.Вставить("МакетПодвал"          , МакетПодвалаОтчета.Имя);
	КонецЕсли;
	ВременныеДанныеОтчета.Вставить("КоличествоПоказателей", КоличествоПоказателей);
	ВременныеДанныеОтчета.Вставить("ЗначенияПоказателей"  , ЗначенияПоказателей);
	
	СмещениеПоСтроке = МакетШапкиОтчета.Макет[0].Ячейки.Количество() - 7;
	ВременныеДанныеОтчета.Вставить("СмещениеПоСтроке", СмещениеПоСтроке);
	
	ПараметрыОтчета.Вставить("ВременныеДанныеОтчета", ВременныеДанныеОтчета);
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт
	
	// Отсекаем валютные группировки на счетах, по которым не ведется
	// валютный учет
	Если ЭлементРезультата.ЗначенияПараметров.Количество() > 0
		И ЭлементРезультата.ЗначенияПараметров.Найти("П1") <> Неопределено
		И ЗначениеЗаполнено(ЭлементРезультата.Макет)
		И ПараметрыОтчета.ВременныеДанныеОтчета.МакетВалюта.Найти(ЭлементРезультата.Макет) <> Неопределено
		И ЭлементРезультата.ЗначенияПараметров.П1.Значение = Null Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ПоказательВалютнаяСумма
		И ПараметрыОтчета.ВременныеДанныеОтчета.КоличествоПоказателей > 1 Тогда
		КоличествоПоказателей = ПараметрыОтчета.ВременныеДанныеОтчета.КоличествоПоказателей - 1;
	Иначе
		КоличествоПоказателей = ПараметрыОтчета.ВременныеДанныеОтчета.КоличествоПоказателей;
	КонецЕсли;
	
	// Обрабатываем элементы, содержащие корневые счета
	Если ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
		И ЭлементРезультата.ЗначенияПараметров.Найти("П1") <> Неопределено
		И ЗначениеЗаполнено(ЭлементРезультата.Макет)
		И ПараметрыОтчета.ВременныеДанныеОтчета.МакетШапкиОтчета <> ЭлементРезультата.Макет
		И ПараметрыОтчета.ВременныеДанныеОтчета.МакетПодвал <> ЭлементРезультата.Макет Тогда
		
		//Накапливаем суммы по корневым счетам
		Если ПараметрыОтчета.ВременныеДанныеОтчета.МакетСчет.Найти(ЭлементРезультата.Макет) <> Неопределено Тогда
			ИдентификаторРасшифровки = ЭлементРезультата.ЗначенияПараметров.П2.Значение;
			ЗначениеСчет = ДанныеРасшифровки.Элементы[ИдентификаторРасшифровки].ПолучитьПоля()[0].Значение;
			Если Не ЗначениеЗаполнено(ЗначениеСчет.Родитель) И Не ЗначениеСчет.Забалансовый Тогда
				Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
					Для ПодИндекс = 1 По 6 Цикл
						
						ИндексЯчейки = ПодИндекс + ПараметрыОтчета.ВременныеДанныеОтчета.СмещениеПоСтроке;
						
						Если ИндексЯчейки < 0 Тогда
							Продолжить;
						КонецЕсли;
					
						СтрокаМакета = МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет[Индекс];
						Ячейка = СтрокаМакета.Ячейки[ИндексЯчейки];
						
						Если Ячейка.Элементы.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяПараметра = Строка(Ячейка.Элементы[0].Значение);
						ПараметрРезультата = ЭлементРезультата.ЗначенияПараметров.Найти(ИмяПараметра);
						
						Если (Не ЗначениеСчет.НалоговыйУчет И Индекс = (КоличествоПоказателей - 1)
							И ПараметрыОтчета.ПоказательРазница) ИЛИ ПараметрРезультата = Неопределено Тогда
							Значение = 0;
						Иначе
							Значение = ПараметрРезультата.Значение;
							Если Значение = Null Тогда 
								Значение = 0;
							КонецЕсли;
						КонецЕсли;
						
						ПараметрыОтчета.ВременныеДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] = ПараметрыОтчета.ВременныеДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] + Значение;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
		
		// Проставляем накопленные суммы в подвал отчета
	ИначеЕсли ЭлементРезультата.Макет = ПараметрыОтчета.ВременныеДанныеОтчета.МакетПодвал Тогда
		Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
			Для ПодИндекс = 1 По 6 Цикл
				СтрокаМакета = МакетКомпоновки.Макеты[ПараметрыОтчета.ВременныеДанныеОтчета.МакетПодвал].Макет[Индекс];
				
				ИндексЯчейки = ПодИндекс + ПараметрыОтчета.ВременныеДанныеОтчета.СмещениеПоСтроке;
				
				Если ИндексЯчейки < 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Ячейка = СтрокаМакета.Ячейки[ИндексЯчейки];
				
				Если Ячейка.Элементы.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяПараметра = Строка(Ячейка.Элементы[0].Значение);
				
				ПараметрРезультата = ЭлементРезультата.ЗначенияПараметров.Найти(ИмяПараметра);
				
				Если ПараметрРезультата <> Неопределено Тогда
					
					ПараметрРезультата.Значение = ПараметрыОтчета.ВременныеДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс];
			
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	Результат.ФиксацияСлева = 0;	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("Разница");
	НаборПоказателей.Добавить("ВалютнаяСумма");
	
	Возврат НаборПоказателей;
	
КонецФункции

Функция ПараметрыАлгоритма()

	ПараметрыАлгоритма = Новый Структура;
	ПараметрыАлгоритма.Вставить("Схема",                             ПолучитьМакет("СхемаКомпоновкиДанных")); // Получаем схему компоновки - эталон
	ПараметрыАлгоритма.Вставить("СчетаИсключенныеИзЗапросаПоСчетам", Новый СписокЗначений);
	ПараметрыАлгоритма.Вставить("СписокВсехСчетовРазвернутоеСальдо", Новый СписокЗначений);
	ПараметрыАлгоритма.Вставить("ЕстьДетализацияПоСубконто",         Ложь);
	ПараметрыАлгоритма.Вставить("ЕстьРазворотПоСубконто",            Ложь);
	ПараметрыАлгоритма.Вставить("ВыводитьРазвернутоеСальдо",         Ложь);
	ПараметрыАлгоритма.Вставить("НастройкаГруппировки",              Неопределено);
	ПараметрыАлгоритма.Вставить("ТекстУсловие",                      "Ложь ИЛИ ");
	
	// Для настройки развернутого сальдо может понадобиться информация о счетах и
	// количестве субконто, по которым нужна детализация.
	ПараметрыАлгоритма.Вставить("КоличествоСубконтоДетализации",         0);
	ПараметрыАлгоритма.Вставить("КоличествоСубконтоДетализацииПоСчетам", Новый Соответствие);	
	
	// Создадим массив, в который будем складывать счета, по которым хотим видеть развернутое сальдо
	// по разным субконто. Этот массив будем использовать для генерации выражений полей итогов СКД.
	СчетаСРазворотомПоСубконто = Новый Массив;
	Для инд = 1 По 3 Цикл
		СчетаСРазворотомПоСубконто.Добавить(Новый Массив);
	КонецЦикла;
	ПараметрыАлгоритма.Вставить("СчетаСРазворотомПоСубконто", СчетаСРазворотомПоСубконто);	
	ПараметрыАлгоритма.Вставить("СчетаДляОтдельногоЗапроса",  Новый Массив);

	Возврат ПараметрыАлгоритма;
	
КонецФункции

Процедура ПодготовитьНаборыДанных(ПараметрыОтчета, ПараметрыАлгоритма)
	
	ДоработатьНаборДанных_ПоСубконто(ПараметрыОтчета, ПараметрыАлгоритма);	
	
	ДоработатьНаборДанных_ПоСубконтоРазвернутое(ПараметрыОтчета, ПараметрыАлгоритма);
	
	Схема = ПараметрыАлгоритма.Схема;
	
	Если Не ПараметрыАлгоритма.ЕстьДетализацияПоСубконто Тогда
		Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто);
	КонецЕсли;
	Если Не ПараметрыАлгоритма.ВыводитьРазвернутоеСальдо
	 Или НЕ ПараметрыАлгоритма.ЕстьРазворотПоСубконто Тогда
		Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоработатьНаборДанных_ПоСубконто(ПараметрыОтчета, ПараметрыАлгоритма)
	
	НаборДанных = ПараметрыАлгоритма.Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто; // Набор "ПоСубконто".
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	// Определим текст запроса СКД который далее заменим.
	ТекстЗапросДетализацииПоСубконто       = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто Детализация", "//Конец ЗапросПоСубконто Детализация");
	ТекстУсловиеСчетаДетализацииПоСубконто = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета Детализация", "//Конец УсловиеСчета Детализация");
	ТекстСубконтоДетализацииПоСубконто     = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто Детализация", "//Конец Субконто Детализация");
	
	// Определяем параметры, на основании которых будем формировать тексты запросов.
	ПараметрыФормируемыхЗапросов = Новый ТаблицаЗначений;
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("Счет",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоДетализации",  Новый ОписаниеТипов("СписокЗначений"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоДетализации1", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоДетализации2", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоДетализации3", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("ПоСубсчетам",          Новый ОписаниеТипов("Булево"));
	
	СписокВсехСчетовГруппировка  = Новый СписокЗначений;
	СчетаИсключенныеИзЗапросаПоСчетам = ПараметрыАлгоритма.СчетаИсключенныеИзЗапросаПоСчетам;

	// Оставим уникальные строки со счетами.
	НастройкаГруппировки = УникальныеНастройкиОтчетаПоСчетам(ПараметрыОтчета.Группировка);

	Для Каждого СтрокаТаблицы Из НастройкаГруппировки Цикл
		
		СубконтоДетализации = Новый СписокЗначений;
		СубконтоДетализацииИндекс = Новый Массив;
			
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
		
		КоличествоСубконто = СтрДлина(СтрокаТаблицы.ПоСубконто) / 2;
		Для Индекс = 1 По КоличествоСубконто Цикл
			
			ПозицияНомераСубконтоВКоде = Индекс * 2;
			ВидСубконтоСчета           = ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, ПозицияНомераСубконтоВКоде, 1)];
			НужнаДетализацияПоСубконто = (Сред(СтрокаТаблицы.ПоСубконто, ПозицияНомераСубконтоВКоде - 1, 1) = "+");
			
			Если НужнаДетализацияПоСубконто Тогда
				СубконтоДетализации.Добавить(ВидСубконтоСчета);
				СубконтоДетализацииИндекс.Добавить(Индекс);
			КонецЕсли;
			
		КонецЦикла;
			
		Если СубконтоДетализации.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПодзапроса = ПараметрыФормируемыхЗапросов.Добавить();
		ОписаниеПодзапроса.Счет                = СтрокаТаблицы.Счет;
		ОписаниеПодзапроса.ПоСубсчетам         = СтрокаТаблицы.ПоСубсчетам;
		ОписаниеПодзапроса.СубконтоДетализации = СубконтоДетализации.Скопировать();
		Для Каждого ИндексПсевдонима Из СубконтоДетализацииИндекс Цикл
			ОписаниеПодзапроса["СубконтоДетализации" + ИндексПсевдонима] = ДанныеСчета["ВидСубконто" + ИндексПсевдонима];
		КонецЦикла; 
		
		СписокВсехСчетовГруппировка.Добавить(СтрокаТаблицы.Счет);
	
	КонецЦикла;

	// Сворачиваем копию таблицы запросов, получая тем самым минимальный набор запросов которые надо выполнить.
	Колонки = "ПоСубсчетам,СубконтоДетализации1,СубконтоДетализации2,СубконтоДетализации3";
	ЗапросыДляФормирования = ПараметрыФормируемыхЗапросов.Скопировать(, Колонки);
	ЗапросыДляФормирования.Свернуть(Колонки);
	
	СчетаГруппировки = НастройкаГруппировки.ВыгрузитьКолонку("Счет");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаИсключенныеИзЗапросаПоСчетам, СчетаГруппировки);
	
	ИерархияСчетовНастройкиГруппировка = ИерархияСчетовСписка(СчетаГруппировки);
	
	// Формируем тексты запросов.
	КоличествоСубконтоДетализацииПоСчетам = ПараметрыАлгоритма.КоличествоСубконтоДетализацииПоСчетам;
	НужноКорректироватьЗапросСКД = Ложь;
	ОтборСтрок = Новый Структура(Колонки);
	ИндексПодзапроса = 0;
	СчетаБезСубконто = Новый Массив;
	
	Для Каждого ОписаниеПодзапроса Из ЗапросыДляФормирования Цикл
		
		// Формируем список счетов по которым будет выполнен запрос.
		СчетаПодзапроса = Новый Массив;
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ОписаниеПодзапроса, Колонки);
		СтрокиДетализацииСПодходящимиПараметрами = ПараметрыФормируемыхЗапросов.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаДетализации Из СтрокиДетализацииСПодходящимиПараметрами Цикл
			СчетаПодзапроса.Добавить(СтрокаДетализации.Счет);
		КонецЦикла;
		
		// Список субконто возьмем из нулевой строки. Он одинаковый у всех.
		СубконтоДетализации = СтрокиДетализацииСПодходящимиПараметрами[0].СубконтоДетализации;
		
		ИндексПодзапроса = ИндексПодзапроса + 1;
		
		Если ОписаниеПодзапроса.ПоСубсчетам ИЛИ ПараметрыОтчета.ПоСубсчетам Тогда
			
			Для Каждого Счет Из СформироватьМассивСубсчетов(СчетаПодзапроса) Цикл
				КоличествоСубконтоДетализацииПоСчетам.Вставить(Счет, СубконтоДетализации);
			КонецЦикла;
			
		Иначе
			
			Для каждого Счет Из СчетаПодзапроса Цикл
				КоличествоСубконтоДетализацииПоСчетам.Вставить(Счет, СубконтоДетализации);
			КонецЦикла;
			
		КонецЕсли;
		ПараметрыАлгоритма.Вставить("КоличествоСубконтоДетализации", Макс(ПараметрыАлгоритма.КоличествоСубконтоДетализации, СубконтоДетализации.Количество()));

		// Формируем текст параметра УсловиеСчета запроса детализации по субконто.
		ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто = "Счет В (&СчетДетализации" + ИндексПодзапроса + ")
												   |				И (НЕ Счет.Забалансовый
												   |					ИЛИ &ВыводитьЗабалансовыеСчета)";
										  
		// Формируем текст параметра Субконто запроса детализации по субконто.
		ТекстДляПодстановкиСубконтоДетализацииПоСубконто = "&СубконтоДетализации" + ИндексПодзапроса;
		
		// Формируем текст запроса для счета детализации.
		ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстЗапросДетализацииПоСубконто, ТекстУсловиеСчетаДетализацииПоСубконто, ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто);
		ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ТекстСубконтоДетализацииПоСубконто, ТекстДляПодстановкиСубконтоДетализацииПоСубконто);
		
		// Доработка текста запроса СКД.
		// Для первого запроса секция "{Выбрать..." должна быть. 
		Если НужноКорректироватьзапросСКД Тогда
			
			ПозицияОткрывающейСкобки = СтрНайти(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "{");
			Если ПозицияОткрывающейСкобки <> 0 Тогда
				
				ПозицияЗакрывающейСкобки = СтрНайти(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "}", , ПозицияОткрывающейСкобки);
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = Лев(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ПозицияОткрывающейСкобки - 1)
					+ Сред(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ПозицияЗакрывающейСкобки + 1);
				
			КонецЕсли;
				
		Иначе
			// Для последующих запросов секцию "{Выбрать..." нужно убирать.
			НужноКорректироватьзапросСКД = Истина;
		КонецЕсли;
		
		// Корректировка текста запроса в зависимости от количества указанных видов субконто.
		Если ИндексПодзапроса > 1 Тогда
			// В первом запросе объединения должны присутствовать псевдонимы полей. Для последующих запросов удаляем псевдонимы.
			Для ИндексПсевдонима = 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима + "Представление", "");
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима, "");
			КонецЦикла;
			
			// Обнуляем субконто и его представление не указанные в запросе.
			Для ИндексСубконто = СубконтоДетализации.Количество() + 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто" + ИндексСубконто + ")", """""");
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ОстаткиИОбороты.Субконто" + ИндексСубконто, "Null");
			КонецЦикла;
			
		Иначе
			// Обнуляем субконто и его представление не указанные в запросе.
			Для ИндексСубконто = СубконтоДетализации.Количество() + 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто" + ИндексСубконто + ") КАК Субконто" + ИндексСубконто + "Представление" , """"" КАК Субконто" + ИндексСубконто + "Представление");
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ОстаткиИОбороты.Субконто" + ИндексСубконто + " КАК Субконто" + ИндексСубконто, "Null КАК Субконто" + ИндексСубконто);
			КонецЦикла;
		КонецЕсли;
		
		// Если среди субсчетов, есть счета со свойствами отличными от счета верхнего уровня, то удалим эти субсчета.
		СчетаИсключенныеИзЗапросаГруппировка = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокВсехСчетовГруппировка.ВыгрузитьЗначения(), СчетаПодзапроса);
		Для каждого Счет Из СчетаПодзапроса Цикл
			Исключения = ИерархияСчетовНастройкиГруппировка.Получить(Счет);
			Если Исключения <> Неопределено Тогда
				Для Каждого СчетИсключения Из Исключения Цикл
					// Если параметры группировки настроены так,
					// что счет и его субсчет могут быть отнесены к одному подзапросу,
					// то исключать субсчет не следует.
					Если СчетаПодзапроса.Найти(СчетИсключения) = Неопределено Тогда
						СчетаИсключенныеИзЗапросаГруппировка.Добавить(СчетИсключения);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		СчетаГруппировки = СформироватьМассивСубсчетов(СчетаПодзапроса);

		СубсчетаПодзапроса = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаГруппировки, СчетаИсключенныеИзЗапросаГруппировка);
		
		СубсчетаСписок = Новый СписокЗначений;
		СубсчетаСписок.ЗагрузитьЗначения(СубсчетаПодзапроса);
		
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетДетализации" + ИндексПодзапроса, "СчетДетализации", СубсчетаСписок);
		
		// Добавление и установка значения параметра СубконтоДетализации{Индекс}.
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СубконтоДетализации" + ИндексПодзапроса, "СубконтоДетализации", СубконтоДетализации);

		// Доработка запроса набора данных.
		НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросДетализацииПоСубконто
												+ Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;

		СписокСчетовГруппировки = Новый СписокЗначений;
		СписокСчетовГруппировки.ЗагрузитьЗначения(СчетаПодзапроса);
		
		// У некоторых субсчетов может быть отличный состав субконто от родительского счета. Определим такие счета
		// и создадим для них отдельный запрос.
		СчетаСПодходящимСоставомСубконто = СчетаССовпадающимНаборомСубконто(СписокСчетовГруппировки, КоличествоСубконтоДетализацииПоСчетам);
		
		// Подготовим список счетов для отдельного запроса. Возьмем список всех счетов группировки, включая их субсчета и
		// вычтем из них счета с подходящим составом субконто.
		СчетаДляОтдельногоЗапроса = СчетаВИерархии(СчетаПодзапроса); 
		СчетаДляОтдельногоЗапроса = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаДляОтдельногоЗапроса, СчетаСПодходящимСоставомСубконто.ВыгрузитьЗначения());
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаБезСубконто, СчетаДляОтдельногоЗапроса, Истина);
		
	КонецЦикла;
	
	// Сформируем отдельный запрос для счетов без субконто
	Если СчетаБезСубконто.Количество() > 0 Тогда
		
		// Формируем текст параметра УсловиеСчета запроса детализации по субконто.
		ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто = "Счет В (&СчетДетализации_БезСубконто)
			|				И (НЕ Счет.Забалансовый
			|					ИЛИ &ВыводитьЗабалансовыеСчета)";
		
		// Формируем текст параметра Субконто запроса детализации по субконто.
		ТекстДляПодстановкиСубконтоДетализацииПоСубконто = "";
		
		// Формируем текст запроса для счета детализации.
		ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстЗапросДетализацииПоСубконто, ТекстУсловиеСчетаДетализацииПоСубконто, ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто);
		ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ТекстСубконтоДетализацииПоСубконто, ТекстДляПодстановкиСубконтоДетализацииПоСубконто);
		
		ПозицияОткрывающейСкобки = СтрНайти(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "{");
		Если ПозицияОткрывающейСкобки <> 0 Тогда
			
			ПозицияЗакрывающейСкобки = СтрНайти(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "}", , ПозицияОткрывающейСкобки);
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = Лев(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ПозицияОткрывающейСкобки - 1)
				+ Сред(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ПозицияЗакрывающейСкобки + 1);
			
		КонецЕсли;
		
		// Корректировка текста запроса в зависимости от количества указанных видов субконто.
		// В первом запросе объединения должны присутствовать псевдонимы полей. Для последующих запросов удаляем псевдонимы.
		Для ИндексПсевдонима = 1 По 3 Цикл
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима + "Представление", "");
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима, "");
		КонецЦикла;
		
		СубсчетаСписок = Новый СписокЗначений;
		СубсчетаСписок.ЗагрузитьЗначения(СчетаБезСубконто);
		
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетДетализации_БезСубконто", "СчетДетализации", СубсчетаСписок);
		
		// Доработка запроса набора данных.
		НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросДетализацииПоСубконто
		+ Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыАлгоритма.СчетаДляОтдельногоЗапроса, СчетаБезСубконто);
		
	КонецЕсли;
	
	// Дорабатываем текст запроса СКД в соответствии с количеством детализируемых субконто.
	// Получаем список полей-субконто, которые требуются в запросе.
	ТекстДляПодстановкиЗапросДетализацииПоСубконто = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("{ВЫБРАТЬ");
	Для Индекс = 1 По ПараметрыАлгоритма.КоличествоСубконтоДетализации Цикл
		
		ТекстДляПодстановкиЗапросДетализацииПоСубконто.Добавить(СтрШаблон("
		|	Субконто%1Представление", Формат(Индекс, "ЧГ=0")));
		ТекстДляПодстановкиЗапросДетализацииПоСубконто.Добавить(",");
		
	КонецЦикла;
	ТекстДляПодстановкиЗапросДетализацииПоСубконто[ТекстДляПодстановкиЗапросДетализацииПоСубконто.ВГраница()] = "}";
	ТекстЗапросаСКД = СтрСоединить(ТекстДляПодстановкиЗапросДетализацииПоСубконто);
	// Вырезаем из запроса текущий полный набор полей и вставляем только требуемые.
	ПозицияОткрывающейСкобки = СтрНайти(НаборДанных.Запрос, "{");
	Если ПозицияОткрывающейСкобки <> 0 Тогда
		
		ПозицияЗакрывающейСкобки = СтрНайти(НаборДанных.Запрос, "}", , ПозицияОткрывающейСкобки);
		НаборДанных.Запрос = Лев(НаборДанных.Запрос, ПозицияОткрывающейСкобки - 1)
			+ ТекстЗапросаСКД
			+ Сред(НаборДанных.Запрос, ПозицияЗакрывающейСкобки + 1);
		
	КонецЕсли;
	
	// Удаляем Ключевую фразу " ОБЪЕДИНИТЬ ВСЕ " в конце запроса.
	НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	ПараметрыАлгоритма.ЕстьДетализацияПоСубконто = (ЗапросыДляФормирования.Количество() > 0);
	ПараметрыАлгоритма.НастройкаГруппировки      = НастройкаГруппировки;
	
КонецПроцедуры

Процедура ДоработатьНаборДанных_ПоСубконтоРазвернутое(ПараметрыОтчета, ПараметрыАлгоритма)
	
	НаборДанных = ПараметрыАлгоритма.Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое; // Набор "ПоСубконтоРазвернутое".
	СчетаИсключенныеИзЗапросаПоСчетам = ПараметрыАлгоритма.СчетаИсключенныеИзЗапросаПоСчетам;
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	ТекстЗапросПоСубконтоРазвернутое       = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто РазвернутоеСальдо", "//Конец ЗапросПоСубконто РазвернутоеСальдо");
	ТекстУсловиеСчетаПоСубконтоРазвернутое = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета РазвернутоеСальдо"    , "//Конец УсловиеСчета РазвернутоеСальдо");
	ТекстСубконтоПоСубконтоРазвернутое     = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто РазвернутоеСальдо"        , "//Конец Субконто РазвернутоеСальдо");
	
	// Оставим уникальные строки со счетами.
	НастройкаРазвернутоеСальдо = УникальныеНастройкиОтчетаПоСчетам(ПараметрыОтчета.РазвернутоеСальдо);

	СписокВсехСчетовРазвернутоеСальдо  = ПараметрыАлгоритма.СписокВсехСчетовРазвернутоеСальдо;
	СчетаБезСубконтоСразвернутымСальдо = Новый Массив;
	ЕстьРазворотПоСубконто             = Ложь;

	// Определяем параметры, на основании которых будем формировать тексты запросов.
	ПараметрыФормируемыхЗапросов = Новый ТаблицаЗначений;
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("Счет",                                   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоРазвернутоеСальдо",              Новый ОписаниеТипов("СписокЗначений"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоРазвернутоеСальдо1",             Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоРазвернутоеСальдо2",             Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоРазвернутоеСальдо3",             Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("ПоСубсчетам",                            Новый ОписаниеТипов("Булево"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("ЕстьРазворотПоСубконтоТекущегоСчета",    Новый ОписаниеТипов("Булево"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("КоличествоСубконтоДетализируемыхПоСчету",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	
	// Массив, в который будем складывать счета, по которым хотим видеть развернутое сальдо
	// по разным субконто. Этот массив будем использовать для генерации выражений полей итогов СКД.
	СчетаСРазворотомПоСубконто = ПараметрыАлгоритма.СчетаСРазворотомПоСубконто;
	
	Для Каждого СтрокаТаблицы Из НастройкаРазвернутоеСальдо Цикл
		
		ОписаниеПодзапроса = ПараметрыФормируемыхЗапросов.Добавить();
		ОписаниеПодзапроса.Счет        = СтрокаТаблицы.Счет;
		ОписаниеПодзапроса.ПоСубсчетам = СтрокаТаблицы.ПоСубсчетам;

		СубконтоРазвернутоеСальдо = Новый СписокЗначений;
		ЕстьРазворотПоСубконтоТекущегоСчета = Ложь;
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
		Для ИндексСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
			Если СтрНайти(СтрокаТаблицы.ПоСубконто, "+" + ИндексСубконто) = 0 Тогда // Не нужен разворот по субконто.
				Продолжить;
			КонецЕсли;
			
			// Дополняем список счетов с разворотом по определенному субконто.
			Если СтрокаТаблицы.ПоСубсчетам Тогда
				Для Каждого Счет Из СтрокаТаблицы.СчетаВИерархии Цикл
					СчетаСразворотомПоСубконто[ИндексСубконто - 1].Добавить(Счет);
				КонецЦикла;
			Иначе
				СчетаСразворотомПоСубконто[ИндексСубконто - 1].Добавить(СтрокаТаблицы.Счет);
			КонецЕсли;
			
			// Задаем набор субконто необходимый для разворота.
			СубконтоРазвернутоеСальдо.Очистить();
			Для ИндексПсевдонима = 1 По ИндексСубконто Цикл
				СубконтоРазвернутоеСальдо.Добавить(ДанныеСчета["ВидСубконто" + ИндексПсевдонима]);
				ОписаниеПодзапроса["СубконтоРазвернутоеСальдо" + ИндексПсевдонима] = ДанныеСчета["ВидСубконто" + ИндексПсевдонима];
			КонецЦикла;
			
			ЕстьРазворотПоСубконтоТекущегоСчета = Истина;
			ЕстьРазворотПоСубконто = Истина;
			
		КонецЦикла;
		
		СубконтоДетализируемыеПоСчету = ПараметрыАлгоритма.КоличествоСубконтоДетализацииПоСчетам.Получить(СтрокаТаблицы.Счет);
		КоличествоСубконтоДетализируемыхПоСчету = ?(СубконтоДетализируемыеПоСчету = Неопределено, 0, СубконтоДетализируемыеПоСчету.Количество());
		
		ОписаниеПодзапроса.КоличествоСубконтоДетализируемыхПоСчету = КоличествоСубконтоДетализируемыхПоСчету;
		ОписаниеПодзапроса.СубконтоРазвернутоеСальдо               = СубконтоРазвернутоеСальдо.Скопировать();
		ОписаниеПодзапроса.ЕстьРазворотПоСубконтоТекущегоСчета     = ЕстьРазворотПоСубконтоТекущегоСчета;
		
		СписокВсехСчетовРазвернутоеСальдо.Добавить(СтрокаТаблицы.Счет);
		
		СчетаИсключенныеИзЗапросаПоСчетам.Добавить(СтрокаТаблицы.Счет);
		
	КонецЦикла;
	
	// Сворачиваем копию таблицы запросов, получая тем самым минимальный набор запросов, которые надо выполнить.
	Колонки = "ПоСубсчетам,ЕстьРазворотПоСубконтоТекущегоСчета,КоличествоСубконтоДетализируемыхПоСчету,СубконтоРазвернутоеСальдо1,СубконтоРазвернутоеСальдо2,СубконтоРазвернутоеСальдо3";
	ЗапросыДляФормирования = ПараметрыФормируемыхЗапросов.Скопировать(, Колонки);
	ЗапросыДляФормирования.Свернуть(Колонки);	
	
	ПолныйСписокСубконтоДетализацииПоСчетам = Новый Соответствие;
	
	СчетаРазвернутогоСальдо = НастройкаРазвернутоеСальдо.ВыгрузитьКолонку("Счет");
	
	ИерархияСчетовНастройкиРазвернутогоСальдо = ИерархияСчетовСписка(СчетаРазвернутогоСальдо);
	
	ТекстУсловие = ПараметрыАлгоритма.ТекстУсловие;
	ОтборСтрок = Новый Структура(Колонки);
	ИндексПодзапроса = 0;
	Для Каждого ОписаниеПодзапроса Из ЗапросыДляФормирования Цикл
		
		// Формируем список счетов, по которым будет выполнен запрос.
		СчетаПодзапроса = Новый Массив;
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ОписаниеПодзапроса, Колонки);
		СтрокиРазвернутогоСальдоСПодходящимиПараметрами = ПараметрыФормируемыхЗапросов.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаРазвернутогоСальдо Из СтрокиРазвернутогоСальдоСПодходящимиПараметрами Цикл
			СчетаПодзапроса.Добавить(СтрокаРазвернутогоСальдо.Счет);
		КонецЦикла;
		
		// Субсчета для параметра СчетРазвернутоеСальдо (пока что без учета исключений).
		СчетаРазвернутоеСальдо = СформироватьМассивСубсчетов(СчетаПодзапроса);
		
		// Список субконто возьмем из нулевой строки. Он одинаковый у всех.
		СубконтоРазвернутоеСальдо = СтрокиРазвернутогоСальдоСПодходящимиПараметрами[0].СубконтоРазвернутоеСальдо;
		СубконтоРазвернутоеСальдоКоличество = СубконтоРазвернутоеСальдо.Количество();
		
		ИндексПодзапроса = ИндексПодзапроса + 1;
		
		// Тексты для итогов по ресурсам.
		ИндексСубСчета = 0;
		СчетаИтогов = ?(ОписаниеПодзапроса.ПоСубсчетам, СчетаРазвернутоеСальдо, СчетаПодзапроса);
		Для Каждого Счет Из СчетаИтогов Цикл
			
			ПолныйСписокСубконтоДетализацииПоСчетам.Вставить(Счет, СубконтоРазвернутоеСальдо);
			
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетРазвернутоеСальдоИтоги" + ИндексПодзапроса  + "_" + ИндексСубСчета, "СчетРазвернутоеСальдоИтоги", Счет);
			ТекстУсловие = ТекстУсловие + "Счет = &СчетРазвернутоеСальдоИтоги" + ИндексПодзапроса + "_" + ИндексСубСчета + " ИЛИ ";
			ИндексСубСчета = ИндексСубСчета + 1;
			
		КонецЦикла;
		
		// Счета без разворота по субконто будут обработаны общим запросом, поэтому отдельный запрос не формируем.
		// Модифицируема текст условия для вычисления развернутого сальдо и добавляем соответсвующий параметр.
		Если Не ОписаниеПодзапроса.ЕстьРазворотПоСубконтоТекущегоСчета Тогда
			// Счета, по которым нужно развернутое сальдо, но не в разрезе субконто, нельзя исключать из запроса по счетам. Запомним их.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаБезСубконтоСразвернутымСальдо,
				?(ОписаниеПодзапроса.ПоСубсчетам, СчетаВИерархии(СчетаПодзапроса), СчетаПодзапроса));

			СубсчетаСписок = Новый СписокЗначений;
			СубсчетаСписок.ЗагрузитьЗначения(СчетаРазвернутоеСальдо);
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетРазвернутоеСальдо" + ИндексПодзапроса, "СчетРазвернутоеСальдо", СубсчетаСписок);
			Продолжить;
		КонецЕсли;
					
		// Формируем текст параметра УсловиеСчета запроса детализации по субконто.
		ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое = "Счет В (&СчетРазвернутоеСальдо" + ИндексПодзапроса + ")
													|				И (НЕ Счет.Забалансовый
													|					ИЛИ &ВыводитьЗабалансовыеСчета)";
		
		// Формируем текст параметра Субконто запроса по субконто развернутое.
		ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое = "&СубконтоРазвернутый" + ИндексПодзапроса;
		
		// Если среди субсчетов, есть счета со свойствами отличными от счета верхнего уровня, то удалим эти субсчета.
		СчетаИсключенныеИзЗапросаПоСчетамРазвернутое = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокВсехСчетовРазвернутоеСальдо.ВыгрузитьЗначения(), СчетаПодзапроса);
		Для каждого Счет Из СчетаПодзапроса Цикл
			Исключения = ИерархияСчетовНастройкиРазвернутогоСальдо.Получить(Счет);
			Если Исключения <> Неопределено Тогда
				Для Каждого СчетИсключения Из Исключения Цикл
					// Если параметры развернутого сальдо настроены так,
					// что счет и его субсчет могут быть отнесены к одному подзапросу,
					// то исключать субсчет не следует.
					Если СчетаПодзапроса.Найти(СчетИсключения) = Неопределено Тогда
						СчетаИсключенныеИзЗапросаПоСчетамРазвернутое.Добавить(СчетИсключения);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		СчетаРазвернутоеСальдо = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаРазвернутоеСальдо, СчетаИсключенныеИзЗапросаПоСчетамРазвернутое);
		
		// Установка параметра СчетРазвернутоеСальдо.
		СубсчетаСписок = Новый СписокЗначений;
		СубсчетаСписок.ЗагрузитьЗначения(СчетаРазвернутоеСальдо);
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетРазвернутоеСальдо" + ИндексПодзапроса, "СчетРазвернутоеСальдо", СубсчетаСписок);
		
		// Установка параметра "СубконтоДетализацииРазвернутый.
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СубконтоРазвернутый" + ИндексПодзапроса, "СубконтоРазвернутый", СубконтоРазвернутоеСальдо);
		
		// Формируем текст запроса для счета детализации.
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = ТекстЗапросПоСубконтоРазвернутое;
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстУсловиеСчетаПоСубконтоРазвернутое, ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое);
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстСубконтоПоСубконтоРазвернутое, ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое);
		
		// Для разворота сальдо по нужному количеству субконто, включим их во вложенном запросе.
		Для ИндексСубконто = 1 По СубконтоРазвернутоеСальдоКоличество Цикл
			
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое,
															"//Null КАК Субконто" + ИндексСубконто,
															"ОстаткиИОбороты.Субконто" + ИндексСубконто + " КАК Субконто" + ИндексСубконто);
			
		КонецЦикла;
		
		// Для детализации могут потребоваться не все субконто, по которым разворачиваем.
		// Поэтому в конечном запросе берем КоличествоСубконтоДетализации.
		Для ИндексСубконто = 1 По ПараметрыАлгоритма.КоличествоСубконтоДетализации Цикл
			
			Если ИндексСубконто > ОписаниеПодзапроса.КоличествоСубконтоДетализируемыхПоСчету
			 Или ИндексСубконто > СубконтоРазвернутоеСальдоКоличество Тогда
				ТекстПодстановки = "Null КАК Субконто" + ИндексСубконто;
			Иначе
				ТекстПодстановки = "ВложенныйЗапрос.Субконто" + ИндексСубконто + " КАК Субконто" + ИндексСубконто;
			КонецЕсли;
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, "//Null КАК ВложенныйЗапрос.Субконто" + ИндексСубконто, ТекстПодстановки);
			
		КонецЦикла;
		
		// Доработка запроса набора данных.
		НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросПоСубконтоРазвернутое
												+ Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			
	КонецЦикла;
	
	// Вычтем из счетов без развернутого сальдо по субконто те, по которым развернутое сальдо по субконто все-таки включено
	// отдельной настройкой.
	Для ИндексСубконто = 0 По 2 Цикл
		СчетаБезСубконтоСРазвернутымСальдо = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаБезСубконтоСРазвернутымСальдо, СчетаСРазворотомПоСубконто[ИндексСубконто]);
	КонецЦикла;
	
	// Среди счетов с развернутым сальдо могут быть субсчета, по которым не удасться получить развернутое сальдо.
	// У некоторых субсчетов может быть отличный состав субконто от родительского счета. Определим такие счета
	// и создадим для них отдельный запрос.
	СчетаСПодходящимСоставомСубконто = СчетаССовпадающимНаборомСубконто(СписокВсехСчетовРазвернутоеСальдо, ПолныйСписокСубконтоДетализацииПоСчетам);
	
	// Подготовим список счетов для отдельного запроса по развернутому сальдо. Возьмем список всех счетов с развернутым
	// сальдо, включая их субсчета. Вычтем из них счета с подходящим составом субконто.
	СчетаДляОтдельногоЗапроса = СчетаВИерархии(СписокВсехСчетовРазвернутоеСальдо.ВыгрузитьЗначения());
	СчетаДляОтдельногоЗапроса = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаДляОтдельногоЗапроса, СчетаСПодходящимСоставомСубконто.ВыгрузитьЗначения());
	// Добавляем счета, у которых явно указано, что сальдо не разворачивается по субконто.
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаДляОтдельногоЗапроса, СчетаБезСубконтоСРазвернутымСальдо);
	
	// Сформируем отдельный запрос для таких счетов.
	Если СчетаДляОтдельногоЗапроса.Количество() > 0 Тогда
		
		СписокСчетаБезСубконтоСРазвернутымСальдо = Новый СписокЗначений;
		СписокСчетаБезСубконтоСРазвернутымСальдо.ЗагрузитьЗначения(СчетаДляОтдельногоЗапроса);
		
		// Установка параметра СчетРазвернутоеСальдо.
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетРазвернутоеСальдо_БезСубконто", "СчетРазвернутоеСальдо", СписокСчетаБезСубконтоСРазвернутымСальдо);
		
		// Формируем текст параметра УсловиеСчета запроса детализации по субконто.
		ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое = "Счет В ИЕРАРХИИ (&СчетРазвернутоеСальдо_БезСубконто)
													|				И (НЕ Счет.Забалансовый
													|					ИЛИ &ВыводитьЗабалансовыеСчета)";
		
		// Формируем текст параметра Субконто запроса по субконто развернутое.
		ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое = "";
		
		// Формируем текст запроса для счета детализации.
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = ТекстЗапросПоСубконтоРазвернутое;
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстУсловиеСчетаПоСубконтоРазвернутое, ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое);
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстСубконтоПоСубконтоРазвернутое, ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое);
		
		// Добавляем нужное количество субконто.
		Для Индекс = 1 По ПараметрыАлгоритма.КоличествоСубконтоДетализации Цикл
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, "//Null КАК ВложенныйЗапрос.Субконто" + Индекс, "Null КАК Субконто" + Индекс);
		КонецЦикла;
		
		// Доработка запроса набора данных.
		НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросПоСубконтоРазвернутое;
		
		// Взводим флаг, хотя формально разврота по субконто может и не быть
		ЕстьРазворотПоСубконто = Истина;
		
	Иначе
		
		// Удаляем Ключевую фразу " ОБЪЕДИНИТЬ ВСЕ " в конце запроса.
		НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	КонецЕсли;
	
	ПараметрыАлгоритма.ТекстУсловие              = Лев(ТекстУсловие, СтрДлина(ТекстУсловие) - 4);
	ПараметрыАлгоритма.ВыводитьРазвернутоеСальдо = (ЗапросыДляФормирования.Количество() > 0);
	ПараметрыАлгоритма.ЕстьРазворотПоСубконто    = ЕстьРазворотПоСубконто;
	
КонецПроцедуры

Процедура СоздатьИтогиРазвернутогоСальдо(ПараметрыАлгоритма)
	
	Схема = ПараметрыАлгоритма.Схема;
	ПоляИтогаОтчета = Схема.ПоляИтога;
	ТекстУсловие = ПараметрыАлгоритма.ТекстУсловие;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	
	СтороныПроводки = Новый Массив;
	СтороныПроводки.Добавить("Дт");
	СтороныПроводки.Добавить("Кт");
	
	СтороныОстатка = Новый Структура;
	СтороныОстатка.Вставить("СальдоНаНачалоПериода", "Начальный");
	СтороныОстатка.Вставить("СальдоНаКонецПериода", "Конечный");
	
	// Для итогов не по субконто изменяем область действия полей итогов.
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Для Каждого СторонаПроводки Из СтороныПроводки Цикл
			Для Каждого СторонаОстатка Из СтороныОстатка Цикл
				
				ИмяПоляИтога = СтрШаблон("%1.%2%3Остаток%4", СторонаОстатка.Ключ, ИмяПоказателя, СторонаОстатка.Значение, СторонаПроводки);
				ПолеИтога = ПоляИтогаОтчета.Найти(ИмяПоляИтога);
				
				ПолеИтога.Выражение = СтрШаблон("Выбор Когда %1 Тогда Сумма(%2.%3%4РазвернутыйОстаток%5) Иначе Сумма(%2.%3%4Остаток%5) Конец",
					ТекстУсловие, СторонаОстатка.Ключ, ИмяПоказателя, СторонаОстатка.Значение, СторонаПроводки);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Для каждого субконто добавляем свои поля итогов, которые рассчитываются только по конкретному субконто.
	Для СчетчикСубконто = 1 По 3 Цикл
		
		ТекстУсловие = "Ложь ИЛИ ";
		СчетчикСчетов = 1;
		// Составим текст условия для субконто <СчетчикСубконто>.
		Для Каждого СчетСразворотом Из ПараметрыАлгоритма.СчетаСРазворотомПоСубконто[СчетчикСубконто - 1] Цикл
			
			ТекстУсловие = ТекстУсловие + "Счет = &СчетСРазворотомПоСубконто" + СчетчикСубконто + "_" + СчетчикСчетов + " ИЛИ ";
			
			// Установка параметра СчетСРазворотомПоСубконто.
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "СчетСРазворотомПоСубконто" + + СчетчикСубконто + "_" + СчетчикСчетов, "СчетСРазворотомПоСубконто", СчетСразворотом);
			
			СчетчикСчетов = СчетчикСчетов + 1;
			
		КонецЦикла;
		
		ТекстУсловие = Лев(ТекстУсловие, СтрДлина(ТекстУсловие) - 4);
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Для Каждого СторонаПроводки Из СтороныПроводки Цикл
				Для Каждого СторонаОстатка Из СтороныОстатка Цикл
			
					ПолеИтога = ПоляИтогаОтчета.Добавить();
					ПолеИтога.ПутьКДанным = СтрШаблон("%1.%2%3Остаток%4", СторонаОстатка.Ключ, ИмяПоказателя, СторонаОстатка.Значение, СторонаПроводки);
					ПолеИтога.Выражение = СтрШаблон("Выбор Когда %1 Тогда Сумма(%2.%3%4РазвернутыйОстаток%5) Иначе Сумма(%2.%3%4Остаток%5) Конец",
						ТекстУсловие, СторонаОстатка.Ключ, ИмяПоказателя, СторонаОстатка.Значение, СторонаПроводки);
					ПолеИтога.Группировки.Добавить("Субконто" + СчетчикСубконто);
				
				КонецЦикла;
		    КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Для списка счетов подбирает субсчета, у которых имеются такие же виды субконто как требуются для счетов.
//
// Параметры:
//  СчетаГруппы  - СписокЗначений - счета, явно используемые в настройках.
//  СубконтоДетализацииПоСчетам - Соответствие - набор требуемых видов субконто для каждого счета.
//
// Возвращаемое значение:
//   СписокЗначений - счета, у всех из которых есть требуемые субконто.
//
Функция СчетаССовпадающимНаборомСубконто(СчетаГруппы, СубконтоДетализацииПоСчетам);

	Если СчетаГруппы.Количество() = 0 Тогда
		Возврат СчетаГруппы;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто,
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаГруппы)");
	Запрос.УстановитьПараметр("СчетаГруппы", СчетаГруппы);
	СчетаИСубконто = Запрос.Выполнить().Выгрузить();
	СчетаИСубконто.Индексы.Добавить("Счет");
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&[Счет])
	|	И ХозрасчетныйВидыСубконто.ВидСубконто В (&[ВидСубконто1], &[ВидСубконто2], &[ВидСубконто3])
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ХозрасчетныйВидыСубконто.Ссылка) = &[КоличествоСубконто]";

	Разделитель = "
	|
	|ОБЪЕДИНИТЬ
	|
	|";
	
	Запрос.Текст = "";
	НужноВыполнятьЗапрос = Ложь;
	СчетаИсключение = Новый Массив;
	Для Каждого ИсключенныйСчет Из СчетаГруппы Цикл
		
		Счет = ИсключенныйСчет.Значение;
		ВидыСубконто = СубконтоДетализацииПоСчетам.Получить(Счет);
		Если ВидыСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Если БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(Счет).Количество() > 1 Тогда
			
			ИндексСчета = СчетаГруппы.Индекс(ИсключенныйСчет);
			
			Запрос.УстановитьПараметр("Счет" + ИндексСчета, Счет);
			
			ПараметрыШаблона = Новый Структура();
			ПараметрыШаблона.Вставить("Счет", "Счет" + ИндексСчета);
			
			ВидыСубконтоСчета = СчетаИСубконто.НайтиСтроки(Новый Структура("Счет", Счет));
			Для Каждого ВидСубконто Из ВидыСубконтоСчета Цикл
				
				Если ВидыСубконто.НайтиПоЗначению(ВидСубконто.ВидСубконто) <> Неопределено Тогда
					
					Запрос.УстановитьПараметр("ВидСубконто" + ВидСубконто.НомерСубконто + "_" + ИндексСчета, ВидСубконто.ВидСубконто);
					ПараметрыШаблона.Вставить("ВидСубконто" + ВидСубконто.НомерСубконто, "ВидСубконто" + ВидСубконто.НомерСубконто + "_" + ИндексСчета);
					
				КонецЕсли;
				
			КонецЦикла;

			Запрос.УстановитьПараметр("КоличествоСубконто_" + ИндексСчета, ВидыСубконто.Количество());
			ПараметрыШаблона.Вставить("КоличествоСубконто", "КоличествоСубконто_" + ИндексСчета);
			
			Запрос.Текст = Запрос.Текст + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыШаблона) + Разделитель;
			
			НужноВыполнятьЗапрос = Истина;
			
		Иначе
			
			СчетаИсключение.Добавить(Счет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ВидСубконто1, ВидСубконто2, ВидСубконто3", "ВидСубконто1", "ВидСубконто2", "ВидСубконто3");
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Запрос.Текст, СтруктураПараметров);
	Запрос.УстановитьПараметр("ВидСубконто1", Неопределено);
	Запрос.УстановитьПараметр("ВидСубконто2", Неопределено);
	Запрос.УстановитьПараметр("ВидСубконто3", Неопределено);
	
	СписокСчетов = Новый СписокЗначений;
	Если НужноВыполнятьЗапрос Тогда
		
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 13);
		СписокСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, СчетаИсключение);
		
	Возврат СписокСчетов;
	
КонецФункции

Функция СчетаВИерархии(СчетГруппа)
	
	Если Не ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	// В отличие от функции БухгалтерскийУчет.СформироватьМассивСубсчетов() в данном случае для нас важно отсечь счета,
	// по которым не должно быть проводок в информационной базе, т.к. может сложиться ситуация, когда у счета-группы будут
	// субсчета, сами являющиеся группами.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный_Субсчета
	|		ПО Хозрасчетный.Ссылка = Хозрасчетный_Субсчета.Родитель
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)
	|	И Хозрасчетный_Субсчета.Родитель ЕСТЬ NULL";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

Функция ИерархияСчетовСписка(Счета)
	
	Иерархия = Новый Соответствие;
	
	Для Каждого ПроверяемыйСчет Из Счета Цикл
		Для Каждого Счет Из Счета Цикл
			Если ПроверяемыйСчет.ПринадлежитЭлементу(Счет) Тогда
				Иерархия.Вставить(Счет, БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПроверяемыйСчет));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Иерархия;
	
КонецФункции

Процедура СформироватьСтруктуруОтчета(КомпоновщикНастроек, ПараметрыОтчета, ПараметрыАлгоритма)
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	Если КоличествоПоказателей > 1 Тогда
		ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = НСтр("ru='Показатели';uk='Показники'");
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
		
	ГруппаСальдоНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачало.Заголовок     = НСтр("ru='Сальдо на начало периода';uk='Сальдо на початок періоду'");
	ГруппаСальдоНаНачало.Использование = Истина;
	ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоДт.Заголовок     = НСтр("ru='Дебет';uk='Дебет'");
	ГруппаСальдоНаНачалоДт.Использование = Истина;
	ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоКт.Заголовок     = НСтр("ru='Кредит';uk='Кредит'");
	ГруппаСальдоНаНачалоКт.Использование = Истина;
	ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = НСтр("ru='Обороты за период';uk='Обороти за період'");
	ГруппаОбороты.Использование = Истина;
	ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыДт.Заголовок     = НСтр("ru='Дебет';uk='Дебет'");
	ГруппаОборотыДт.Использование = Истина;
	ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыКт.Заголовок     = НСтр("ru='Кредит';uk='Кредит'");
	ГруппаОборотыКт.Использование = Истина;
	ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаСальдоНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонец.Заголовок     = НСтр("ru='Сальдо на конец периода';uk='Сальдо на кінець періоду'");
	ГруппаСальдоНаКонец.Использование = Истина;
	ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецДт.Заголовок     = НСтр("ru='Дебет';uk='Дебет'");
	ГруппаСальдоНаКонецДт.Использование = Истина;
	ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецКт.Заголовок     = НСтр("ru='Кредит';uk='Кредит'");
	ГруппаСальдоНаКонецКт.Использование = Истина;
	ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	  
	ВидОстатков = "";
	
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатков + "ОстатокДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатков + "ОстатокКт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ИмяПоказателя + ВидОстатков + "ОборотДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ИмяПоказателя + ВидОстатков + "ОборотКт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатков + "ОстатокДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатков + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Разница");
	МассивПоказателей.Добавить("ВалютнаяСумма");
	
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ИмяПоказателя + "ОборотДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ИмяПоказателя + "ОборотКт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "КонечныйОстатокДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "КонечныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Схема = ПараметрыАлгоритма.Схема;
	
	Схема.Параметры.ВыводитьЗабалансовыеСчета.Значение = Истина;
	
	Для Каждого Параметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Использование = Истина;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВыводитьЗабалансовыеСчета", ПараметрыОтчета.ВыводитьЗабалансовыеСчета);
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		ЗначениеПараметраАвтоОтступа = ЭлементОформления.Оформление.Элементы.Найти("АвтоОтступ");
		Если ЗначениеПараметраАвтоОтступа <> Неопределено И ЗначениеПараметраАвтоОтступа.Использование Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = НСтр("ru='Уменьшенный автоотступ';uk='Зменшений автовідступ'");
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	// Формирование структуры отчета
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;
	
	// Установка отбора на выводимый уровень иерархии счета
	ГруппаЭлементовОтбора = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
	ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "ПараметрыДанных.ПоСубсчетам", Истина);
	
	ИспользоватьКлассыСчетовВКачествеГрупп = БухгалтерскийУчетПереопределяемый.ПолучитьИспользоватьКлассыСчетовВКачествеГрупп();
	КоличествоУровнейСчет = ?(ИспользоватьКлассыСчетовВКачествеГрупп, 2, 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "СистемныеПоля.УровеньВГруппировке", КоличествоУровнейСчет, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	
	СписокСчетовПоСубсчетам = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПоСубсчетам(ПараметрыОтчета.Группировка);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "Счет", СписокСчетовПоСубсчетам, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, СписокСчетовПоСубсчетам.Количество() > 0);

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПоСубсчетам", ПараметрыОтчета.ПоСубсчетам);
	
	// Отключим вывод отборов
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));		
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
	КонецЕсли;
	
	Если ПараметрыАлгоритма.ЕстьДетализацияПоСубконто Тогда
		Для Индекс = 1 По 3 Цикл 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Субконто" + Индекс);
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
			
			Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));		
				ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				
				Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
				
				ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
				ПолеОформления.Поле = ПолеГруппировки.Поле;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборДляПоказателяРазница(ПараметрыОтчета, КомпоновщикНастроек);
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.НУНачальныйОстатокДт");
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.РазницаНачальныйОстатокДт");
	
	// Отключим использование этого элемента условного оформления в общих итогах
	УсловноеОформление.ИспользоватьВОбщемИтоге = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;

КонецПроцедуры

// Возвращает таблицу значений с группировками отчета, в которых каждый счет встречается только один раз.
// Возвращаются только те строки, у которых в исходной таблице заполнен Счет и установлен признак Использование.
//
// Параметры:
//	ГруппировкиОтчета - ТаблицаЗначений - Исходные группировки отчета по счетам. Обязательные колонки:
//		* Счет - ПланСчетовСсылка.Хозрасчетный - Счет учета, для которого заданы настройки.
//		* Использование - Булево - Признак "включения" строки настройки для отчета.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Совпадает по структуре с исходной таблицей ГруппировкиОтчета,
//  но не содержит повторяющихся строк для одного и того же счета. Дополнительно включает колонки:
//		* СчетаВИерархии - Массив - Массив субсчетов, которые необходимо учитывать по строке группировки.
//
Функция УникальныеНастройкиОтчетаПоСчетам(ГруппировкиОтчета)
	
	// Создаем таблицу, из которой дальше будем считывать настройки группировки.
	ГруппировкиПоСубсчетам = ГруппировкиОтчета.СкопироватьКолонки();
	
	// Для счетов-групп развернем каждую строку таблицы по субсчетам.
	ГруппировкиПоСубсчетам.Колонки.Добавить("Субсчет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ГруппировкиПоСубсчетам.Колонки.Добавить("НомерИсходнойГруппировки",        ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ГруппировкиПоСубсчетам.Колонки.Добавить("ЭтоСобственнаяНастройкаСубсчета", Новый ОписаниеТипов("Булево"));
	
	СчетаССобственнымиНастройками = Новый Массив;
	НомерИсходнойГруппировки = 0;
	Для каждого СтрокаГруппировки Из ГруппировкиОтчета Цикл

		НомерИсходнойГруппировки = НомерИсходнойГруппировки + 1;
		Если НЕ СтрокаГруппировки.Использование
		 Или НЕ ЗначениеЗаполнено(СтрокаГруппировки.Счет) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СчетаССобственнымиНастройками.Найти(СтрокаГруппировки.Счет) <> Неопределено Тогда
			// Повторяется один и тот же счет. Оставляет только первую из встреченных настроек.
			Продолжить;
		Иначе
			СчетаССобственнымиНастройками.Добавить(СтрокаГруппировки.Счет);
		КонецЕсли;
	
		Субсчета = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(СтрокаГруппировки.Счет);
		Для каждого Субсчет Из Субсчета Цикл
			НоваяСтрока = ГруппировкиПоСубсчетам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировки);
			НоваяСтрока.Субсчет                         = Субсчет;
			НоваяСтрока.НомерИсходнойГруппировки        = НомерИсходнойГруппировки;
			// Признак того, что настройка задана для самого субсчета, а не вычислена через счет верхнего уровня.
			НоваяСтрока.ЭтоСобственнаяНастройкаСубсчета = (СтрокаГруппировки.Счет = Субсчет);
		КонецЦикла;
		
	КонецЦикла;

	// Оставим по одной строке по каждому субсчету.
	ГруппировкиПоСубсчетам.Сортировать("Субсчет, ЭтоСобственнаяНастройкаСубсчета УБЫВ", Новый СравнениеЗначений);
	
	СтрокиКУдалению = Новый Массив;
	ТекущийСубсчет  = Неопределено;
	
	Для каждого СтрокаГруппировки Из ГруппировкиПоСубсчетам Цикл
		
		Если СтрокаГруппировки.Субсчет <> ТекущийСубсчет Тогда
			// Новый субсчет, первую строку по нему оставляем, остальные удалим.
			ТекущийСубсчет = СтрокаГруппировки.Субсчет;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаГруппировки);
		КонецЕсли;
	
	КонецЦикла;
	
	// Удаляем дублирующиеся строки.
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ГруппировкиПоСубсчетам.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	// Оставляем исходные колонки и формируем список субсчетов, которые относятся к конкретной строке.
	Результат = ГруппировкиПоСубсчетам.СкопироватьКолонки();
	Результат.Колонки.Добавить("СчетаВИерархии", Новый ОписаниеТипов("Массив"));
	
	ГруппировкиПоСубсчетам.Сортировать("НомерИсходнойГруппировки", Новый СравнениеЗначений);
	ТекущаяСтрока = Неопределено;
	
	Для каждого СтрокаГруппировки Из ГруппировкиПоСубсчетам Цикл
	
		Если ТекущаяСтрока = Неопределено 
			ИЛИ ТекущаяСтрока.НомерИсходнойГруппировки <> СтрокаГруппировки.НомерИсходнойГруппировки Тогда
			// Добавляем новую строку в результирующую таблицу группировок.
			ТекущаяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаГруппировки);
		КонецЕсли;
		
		// Заполняем массив субсчетов, входящих в строку группировки.
		ТекущаяСтрока.СчетаВИерархии.Добавить(СтрокаГруппировки.Субсчет);
	
	КонецЦикла;

	// Удалим вспомогательные колонки.
	Результат.Колонки.Удалить("Субсчет");
	Результат.Колонки.Удалить("НомерИсходнойГруппировки");
	Результат.Колонки.Удалить("ЭтоСобственнаяНастройкаСубсчета");
	
	Возврат Результат;
	
КонецФункции

// Дополняет переданные счета их субсчетами. После первого вызова запоминает субсчета
// и при последующих вызовах не обращается к СУБД.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетов(МассивСчетов)

	МассивСубсчетов = Новый Массив;
	Для каждого СчетВерхнегоУровня Из МассивСчетов Цикл
	
		Субсчета = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(СчетВерхнегоУровня);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубсчетов, Субсчета);
	
	КонецЦикла; 
	
	Возврат МассивСубсчетов;

КонецФункции // СформироватьМассивСубсчетов()

#КонецЕсли