&НаСервере
Перем мБухИтоги,мБухИтогиПрошлыйГод;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем ТаблицаПоИнвестФинансДеят, ТаблицаПоИнвестФинансДеятПрошлыйГод;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2013НепрямойМетод";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	
	
	СтруктураДанныхДДС	= Новый Структура;
	
	мСтруктураМногострочныхРазделов = Новый Структура;

	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/07/2013";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "ДДС";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи                                       = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;

    Если УчетнаяПолитика.Существует(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		ИспКлассыСчетов = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Иначе
		//предприятие работает не с начала года
		ИспКлассыСчетов = ОпределитьУчетнуюПолитикуВПериоде(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
    Если УчетнаяПолитика.Существует(СтруктураРеквизитовФормы.Организация, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12))) Тогда
		ИспКлассыСчетовПрошлГода = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураРеквизитовФормы.Организация, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12)));
	Иначе
		//предприятие работает не с начала прошлого года 
		ИспКлассыСчетовПрошлГода = ОпределитьУчетнуюПолитикуВПериоде(НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;

	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ИспКлассыСчетов");
	СтруктураРеквизитовФормы.Вставить("ИспКлассыСчетовПрошлГода");
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
КонецПроцедуры


// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	//Если ИмяРаздела = "Раздел1" 
	// ИЛИ ИмяРаздела = "Раздел2" 
	// ИЛИ ИмяРаздела = "Раздел3" 
	// ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	//ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	//Иначе
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	//КонецЕсли; 

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ЗаполнитьТаблицуСтрок();
			
		КонецЕсли;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтраниц Тогда
		Элементы.ДопСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДДС";
	СтрокаУровня1.Представление            = НСтр("ru='Звіт про рух грошових коштів';uk='Звіт про рух грошових коштів'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ДДС";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	
	

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	Элементы.УдалитьСтраницу.Доступность    = Ложь;
	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	Элементы.ДобавитьСтроку.Доступность     = Ложь;
	Элементы.УдалитьСтроку.Доступность      = Ложь;
					
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Доступность   = Истина;
		Элементы.УдалитьСтраницу.Доступность    = Истина;
		Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Доступность    = Ложь;
			Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	//Если ИмяТекРаздела = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
						
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	// Многостраничные разделы.
	
	//Если НаимРаздела = "Раздел2" Тогда
	Если Ложь Тогда
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
			
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = Ложь;
			
		КонецЕсли;
					
	// Многострочные и обычные разделы.
	//
	ИначеЕсли НаимРаздела = "ДДС" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // СохранитьДанныеРаздела()

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	  ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	// Многостраничные разделы.
	//
	//Если ИмяТекРаздела = "Раздел2" Тогда 
	Если Ложь Тогда  
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		КонецЕсли;
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
	    
	    ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	    
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
	    КонецЦикла;
						
	// Многострочные и обычные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "ДДС" Тогда
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
		
		КонецЦикла;
		
	КонецЕсли;	
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);

	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	Если ИмяТекРаздела = "ДДС" Тогда
		 ПоказатьСтрокиОтчета();
	КонецЕсли;
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
		ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()


&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияВСкобках(Форма);

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	ПериодОтчета = ПредставлениеПериода( НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	ЗаполнитьПоказательНаСервере("ПериодОтчета",   ПериодОтчета,  Форма, "ДДС");	
	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчета",       Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,  Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаГод",    Формат(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'"),  Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаМесяц",  Формат(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'"),  Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаЧисло",  Формат(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'"),  Форма, "ДДС");	
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина; Л="+РегламентированнаяОтчетностьКлиентСервер.ПолучитьКодЯзыкаИнтерфейса());
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					Если ВариантЗаполнения <> 4 Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	Организация 				= Форма.СтруктураРеквизитовФормы.Организация;	
	
	ОргНазв = Организация.НаименованиеПолное;
	ЗаполнитьПоказательНаСервере("ОргНазв", ОргНазв, Форма, "ДДС");
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
  
	ФИОДиректора = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей).ФИОРук;
	ФИОГлавБуха  = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей).ФИОБух;
	КодЕДРПОУ    = СведенияОбОрганизации.КодПоЕДРПОУ;
	
	ЗаполнитьПоказательНаСервере("ОргБухгалтер", ФИОГлавБуха, Форма, "ДДС"); 
	ЗаполнитьПоказательНаСервере("ОргДиректор",  ФИОДиректора, Форма, "ДДС");
	ЗаполнитьПоказательНаСервере("ОргКодЕДРПОУ", КодЕДРПОУ, Форма, "ДДС");
	
	
КонецПроцедуры

&НаСервере
Процедура ИзмШапкаПериодаНаСервере()
	
	ИзмШапкаПериода(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзмШапкаПериода(Форма)  
	
	Год    = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ГодСтр = Формат(Год, "ЧГ=0");
	
	Если (Форма.СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц)  Тогда    
		
		Месяц = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ЗаполнитьПоказательНаСервере("HMONTH", 	Месяц, Форма, "РасчетЕдиногоНалога");
		
		ЗаполнитьПоказательНаСервере("PERIOD_MONTH", 	Месяц, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("PERIOD_TYPE", 	1,		Форма, "СлужебныеДанные");
		
		ЗаполнитьПоказательНаСервере("HD", 	"X", Форма, "РасчетЕдиногоНалога");
		ЗаполнитьПоказательНаСервере("HZ", 	"", Форма, "РасчетЕдиногоНалога");
		
	Иначе   
		
		НомерКвартал = Месяц(КонецКвартала(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета))/3;
		Если НомерКвартал = 1 Тогда
			ЗаполнитьПоказательНаСервере("H1KV", "X", Форма, "РасчетЕдиногоНалога");
			ЗаполнитьПоказательНаСервере("H1KV", "X", Форма, "Приложение");
			ЗаполнитьПоказательНаСервере("PERIOD_TYPE", 2, Форма, "СлужебныеДанные");
		ИначеЕсли НомерКвартал = 2 Тогда
			ЗаполнитьПоказательНаСервере("HHY", "X", Форма, "РасчетЕдиногоНалога");
			ЗаполнитьПоказательНаСервере("HHY", "X", Форма, "Приложение");
			ЗаполнитьПоказательНаСервере("PERIOD_TYPE", 3, Форма, "СлужебныеДанные");
		ИначеЕсли НомерКвартал = 3 Тогда
			ЗаполнитьПоказательНаСервере("H3KV", "X", Форма, "РасчетЕдиногоНалога");
			ЗаполнитьПоказательНаСервере("H3KV", "X", Форма, "Приложение");
			ЗаполнитьПоказательНаСервере("PERIOD_TYPE", 4, Форма, "СлужебныеДанные");
		ИначеЕсли НомерКвартал = 4 Тогда
			ЗаполнитьПоказательНаСервере("HY", "X", Форма, "РасчетЕдиногоНалога");
			ЗаполнитьПоказательНаСервере("HY", "X", Форма, "Приложение");
			ЗаполнитьПоказательНаСервере("PERIOD_TYPE", 5, Форма, "СлужебныеДанные");
		КонецЕсли;
		
		ЗаполнитьПоказательНаСервере("PERIOD_MONTH", Месяц(КонецКвартала(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), Форма, "СлужебныеДанные");
		
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("PERIOD_YEAR", Год, Форма, "СлужебныеДанные");
	
	ЗаполнитьПоказательНаСервере("HZY", 		ГодСтр, Форма, "РасчетЕдиногоНалога");
	ЗаполнитьПоказательНаСервере("HZY", 		ГодСтр, Форма, "Приложение");
	
	ЗаполнитьПоказательНаСервере("HZGY", 		ГодСтр, Форма, "РасчетЕдиногоНалога");
	
	
КонецПроцедуры 	

&НаКлиентеНаСервереБезКонтекста
Функция ОставитьТолькоЦифры(Знач Текст);
	
	Сч = 1;
	Пока Сч <= СтрДлина(Текст) Цикл
	    Если Найти("01234567890", Сред(Текст, Сч, 1)) = 0 Тогда
			Текст = Лев(Текст, Сч-1) + Сред(Текст, Сч + 1);
		Иначе
			Сч = Сч + 1
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Текст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСледующийНомерДокументаВПериоде(Организация, ИсточникОтчета, Дата)

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(*) КАК Всего
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета ПОДОБНО &ИсточникОтчета
	               |	И РегламентированныйОтчет.Организация = &Организация
	               |	И (НЕ РегламентированныйОтчет.ПометкаУдаления)
	               |	И РегламентированныйОтчет.Дата МЕЖДУ &НачГода И &КонГода";
				   
	Запрос.УстановитьПараметр("Организация", Организация);			   
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("НачГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонГода", КонецГода(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТекНомерОтчет = 0;
	Если Выборка.Следующий() Тогда
		ТекНомерОтчет = ?(ЗначениеЗаполнено(Выборка.Всего), Выборка.Всего, 0);
	КонецЕсли;
	
	Возврат ТекНомерОтчет + 1;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;


	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
    Перем ЕстьДуплекс;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ТаблицаСтрок") Тогда
		ТаблицаСтрок =  СписокСохранения.ТаблицаСтрок;
		Если ТипЗнч(ТаблицаСтрок) = Тип("ТаблицаЗначений") Тогда
			ЗначениеВРеквизитФормы(ТаблицаСтрок, "мТаблицаСтрок");
		Иначе
			ЗаполнитьТаблицуСтрок();
		КонецЕсли;
	Иначе	
		ЗаполнитьТаблицуСтрок();
	КонецЕсли;	
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "ДДС";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	СписокСохранения.Вставить("ТаблицаСтрок", ДанныеФормыВЗначение(мТаблицаСтрок, Тип("ТаблицаЗначений")));
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	#Если НаКлиенте Тогда
	//		Форма.ИзменитьЦветЯчеекНаКлиенте();
	//	#Иначе
	//		Форма.ИзменитьЦветЯчеекНаСервере();
	//	#КонецЕсли
	//КонецЕсли;
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

	//КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	//
	//Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
	//	
	//	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	Иначе	
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
	//	КонецЕсли;
	//
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
	//	
	//Иначе	
	//	
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
	//	
	//	Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
	//			
	//КонецЕсли;
		
КонецПроцедуры // ИзменитьЦветЯчеек()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
    		
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	////Если (ИмяПоказателя = "Сумма30Раздел1")
	//// Или (ИмяПоказателя = "Сумма40Раздел1")
	//// Или (ИмяПоказателя = "Сумма50Раздел1")
	//// Или (ИмяПоказателя = "Сумма60Раздел1") Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСведенияОбОрганизации(Форма);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		ЗаполнитьЗначенияВСкобках(Форма);
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	

	// используем метод.рекомендации от 11.04.2013 № 476
	П35703 = ПолучитьПоказательНаСервере("П35003", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П35053", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35103", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35153", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35203", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35503", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35603", Форма, "ДДС")
								 
								 - ПолучитьПоказательНаСервере("П35104", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35154", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35204", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35404", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35504", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35604", Форма, "ДДС");
								 
	Если П35703 < 0 Тогда
		П35704 = - П35703;
		П35703 = 0;
	Иначе	
		П35704 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("П35703", П35703, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П35704", П35704, Форма, "ДДС");
	
	П35705 = ПолучитьПоказательНаСервере("П35005", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П35055", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35105", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35155", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35205", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35505", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П35605", Форма, "ДДС")
								 
								 - ПолучитьПоказательНаСервере("П35106", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35156", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35206", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35406", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35506", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П35606", Форма, "ДДС");
	Если П35705 < 0 Тогда
		П35706 = - П35705;
		П35705 = 0;
	Иначе	
		П35706 = 0;
	КонецЕсли;							 	
	ЗаполнитьПоказательНаСервере("П35705", П35705, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П35706", П35706, Форма, "ДДС");
	
	// Чистое движение средств от операционной деятельности
	П31953 =  ПолучитьПоказательНаСервере("П35703", Форма, "ДДС")
								  -	ПолучитьПоказательНаСервере("П35704", Форма, "ДДС")
								  - ПолучитьПоказательНаСервере("П35804", Форма, "ДДС")
								  - ПолучитьПоказательНаСервере("П35854", Форма, "ДДС");
	Если П31953 < 0 Тогда
		П31954 = - П31953;
		П31953 = 0;
	Иначе
		П31954 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("П31953", П31953, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П31954", П31954, Форма, "ДДС");
	
	П31955 =  ПолучитьПоказательНаСервере("П35705", Форма, "ДДС")
								  -	ПолучитьПоказательНаСервере("П35706", Форма, "ДДС")
								  - ПолучитьПоказательНаСервере("П35806", Форма, "ДДС")
								  - ПолучитьПоказательНаСервере("П35856", Форма, "ДДС");
	Если П31955 < 0 Тогда
		П31956 = - П31955;
		П31955 = 0;
	Иначе
		П31956 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("П31955", П31955, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П31956", П31956, Форма, "ДДС");
	
	
	// Чистое движение средств от инвестиционной деятельности
	П32953 = ПолучитьПоказательНаСервере("П32003", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П32053", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32153", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32203", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32253", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32303", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32353", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32503", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П32553", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П32603", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П32703", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П32753", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П32803", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П32903", Форма, "ДДС"); 
	Если П32953 < 0 Тогда
		П32954 = - П32953;
		П32953 = 0;
	Иначе
		П32954 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("П32953", П32953, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П32954", П32954, Форма, "ДДС");
	
	П32955 = ПолучитьПоказательНаСервере("П32004", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П32054", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32154", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32204", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32254", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32304", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32354", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П32504", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П32554", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П32604", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П32704", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П32754", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П32804", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П32904", Форма, "ДДС"); 
	Если П32955 < 0 Тогда
		П32956 = - П32955;
		П32955 = 0;
	Иначе
		П32956 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("П32955", П32955, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П32956", П32956, Форма, "ДДС");
	
	
	//Чистое движение средств от финансовой деятельности
	П33953 = ПолучитьПоказательНаСервере("П33003", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П33053", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П33103", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П33403", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П33453", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33503", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33553", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33603", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33653", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33703", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33753", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33903", Форма, "ДДС");		
	Если П33953 < 0 Тогда
		П33954 = - П33953;
		П33953 = 0;
	Иначе
		П33954 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("П33953", П33953, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П33954", П33954, Форма, "ДДС");
	
	П33955 = ПолучитьПоказательНаСервере("П33004", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П33054", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П33104", Форма, "ДДС")
								 + ПолучитьПоказательНаСервере("П33404", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П33454", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33504", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33554", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33604", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33654", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33704", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33754", Форма, "ДДС")
								 - ПолучитьПоказательНаСервере("П33904", Форма, "ДДС");		
	Если П33955 < 0 Тогда
		П33956 = - П33955;
		П33955 = 0;
	Иначе
		П33956 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("П33955", П33955, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П33956", П33956, Форма, "ДДС");
	
								 
	//Чистое движение средств за отчетный период
	П34003 = ПолучитьПоказательНаСервере("П31953", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П32953", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П33953", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П31954", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П32954", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П33954", Форма, "ДДС");
	Если П34003 < 0 Тогда
		П34004 = - П34003;
		П34003 = 0;
	Иначе
		П34004 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("П34003", П34003, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П34004", П34004, Форма, "ДДС");
	
	П34005 = ПолучитьПоказательНаСервере("П31955", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П32955", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П33955", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П31956", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П32956", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П33956", Форма, "ДДС");
	Если П34005 < 0 Тогда
		П34006 = - П34005;
		П34005 = 0;
	Иначе
		П34006 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("П34005", П34005, Форма, "ДДС");	
	ЗаполнитьПоказательНаСервере("П34006", П34006, Форма, "ДДС");
	
	П35154 = ПолучитьПоказательНаСервере("П35154", Форма, "ДДС");
	ЗаполнитьПоказательНаСервере("П34103", П35154, Форма, "ДДС");
	
	П35153 = ПолучитьПоказательНаСервере("П35153", Форма, "ДДС");
	ЗаполнитьПоказательНаСервере("П34104", П35153, Форма, "ДДС");
	
	П35156 = ПолучитьПоказательНаСервере("П35156", Форма, "ДДС");
	ЗаполнитьПоказательНаСервере("П34105", П35156, Форма, "ДДС");
	
	П35155 = ПолучитьПоказательНаСервере("П35155", Форма, "ДДС");
	ЗаполнитьПоказательНаСервере("П34106", П35155, Форма, "ДДС");
	
	//Остаток средств на конец года
	П34153 = ПолучитьПоказательНаСервере("П34003", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П34053", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П34103", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П34004", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П34104", Форма, "ДДС"); 
	ЗаполнитьПоказательНаСервере("П34153", П34153, Форма, "ДДС");
	
	П34155 = ПолучитьПоказательНаСервере("П34005", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П34054", Форма, "ДДС") 
								 + ПолучитьПоказательНаСервере("П34105", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П34006", Форма, "ДДС") 
								 - ПолучитьПоказательНаСервере("П34106", Форма, "ДДС"); 
	ЗаполнитьПоказательНаСервере("П34155", П34155, Форма, "ДДС");
									
КонецПроцедуры // Расчет()

// ОкруглитьЧислоПоФормату(Форма, )
//
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Перем Делитель;
	
	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
		
		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
		
	КонецЕсли;
	
КонецФункции // ОкруглитьЧислоПоФормату(Форма, )

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект), НСтр("ru='Удалить текущую страницу?';uk='Видалити поточну сторінку?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
    
    КопияТекущиеДанные = ТекущиеДанные;
    
    ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
    
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
    Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
        ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
        СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
    КонецЕсли;
    
    УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
    
    ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
    
    НомерСтраницы = 1;
    
    Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
        
        СтраницаРаздела.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
        СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
        
        НомерСтраницы = НомерСтраницы + 1;
        
    КонецЦикла;
    
    Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
        Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
        		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ВставитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		ВставитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
		
КонецПроцедуры // ДобавитьСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1(Внимание! Данная операция необратима)';uk='Вилучити вибраний рядок?%1(Увага! Дана операція необоротна)'"), Символы.ПС), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    #Если ВебКлиент Тогда
        УдалитьДополнительнуюСтрокуНаСервере();
    #Иначе
        УдалитьДополнительнуюСтрокуНаКлиенте();
    #КонецЕсли

КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаКлиенте()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
			
		ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ТекТабличноеПоле = Форма.ТабличныйДокумент;

		ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
		#Если НаКлиенте Тогда
			ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		#Иначе
			ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		#КонецЕсли

		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.';uk='Не обрано багаторядковий розділ, у який необхідно додати рядок.'");

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	ИмяПервойКолонки = КолонкиГруппы[0];
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойКолонки + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") > 0 Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;

	Если СпециальноеДобавление Тогда
		
	Иначе
				
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого ИмяКолонки ИЗ КолонкиГруппы Цикл
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрок + НомерПервойСтроки;
					Иначе
						ОбластьЯчейки.Текст = КолСтрок + НомерПервойСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		
		//ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
		ИмяТекущейОбласти = ИмяПервойКолонки + "_" + КолСтрокСтр1;

		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Форма.Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

// Удаляет строку многострочного раздела формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	#Если НаКлиенте Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
   	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	ИмяПервойКолонки = КолонкиГруппы[0];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		
		//ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для Каждого КолонкаИмя ИЗ КолонкиГруппы Цикл
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								НовыйПорядковыйНомер = НСтр - 1 + НомерПервойСтроки - 1;
								
								Если ОбластьСдвинутойЯчейки.СодержитЗначение = Истина Тогда
									ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер;
								Иначе
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 + НомерПервойСтроки - 1;
			
			Для Каждого КолонкаТаблицыИмя ИЗ КолонкиГруппы Цикл
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	//ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	ИмяТекущейОбласти = ИмяПервойКолонки + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
		
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли

КонецПроцедуры // УдалитьДополнительнуюСтроку()
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	
	Если Лев(ИмяЯчейки, 1) = "_" Тогда
		
		ИмяЯчейкиБезСкобок = Сред(ИмяЯчейки, 2);
		ТекЗначениеБезСкобок = ТабличныйДокумент.Области[ИмяЯчейкиБезСкобок].Значение;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводЧислаВСкобкахЗавершение",ЭтаФорма, Новый Структура("ИмяЯчейки", ИмяЯчейкиБезСкобок));
		ПоказатьВводЧисла(ОписаниеОповещения, ТекЗначениеБезСкобок, НСтр("ru='Значение в скобках';uk='Значення в дужках'"), 15, 2);
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли  ИмяЯчейки = "ЗаполненоПоПСБУ"
		И НаименованиеТекЛиста = "ДДС" Тогда
		
		ТабличныйДокумент.Области.ЗаполненоПоПСБУ.Значение	  = "V";
		ТабличныйДокумент.Области.ЗаполненоПоМСФО.Значение  = "";
		ЗаполнитьПоказательНаСервере("ЗаполненоПоПСБУ", "V", ЭтаФорма, "ДДС");
		ЗаполнитьПоказательНаСервере("ЗаполненоПоМСФО", "", ЭтаФорма, "ДДС");
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли ИмяЯчейки = "ЗаполненоПоМСФО"
		И НаименованиеТекЛиста = "ДДС" Тогда
		
		ТабличныйДокумент.Области.ЗаполненоПоМСФО.Значение	  = "V";
		ТабличныйДокумент.Области.ЗаполненоПоПСБУ.Значение  = "";
		ЗаполнитьПоказательНаСервере("ЗаполненоПоМСФО", "V", ЭтаФорма, "ДДС");
		ЗаполнитьПоказательНаСервере("ЗаполненоПоПСБУ", "", ЭтаФорма, "ДДС");
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;		
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если    ИмяРаздела = "ДДС" Тогда
		
		ИмяОбласти = Область.Имя;
		
		Если Сред(Область.Имя,1,1)<> "_" Тогда 
			РасчетНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	Модифицированность = Истина;
		
КонецПроцедуры // ДатаПодписиПриИзменении()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхДДС.Очистить();
	
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	ЗаполнитьЗначенияВСкобках(ЭтаФорма);
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции // НайтиСвойстваПоказателя()

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ВвестиПоказатель()

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
КонецПроцедуры


// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПоказатьБланк()

// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПечататьСразу()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ПечатьНаСервере()
//
&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()
	
// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаСервере()

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Если НЕ ЗначениеЗаполнено(ИспКлассыСчетов) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не установлены ""Используемые классы счетов расходов"" за %1 год! Автоматическое заполнения отчета невозможно!';uk='Не встановлени ""Використовувані класи рахунків витрат"" за %1 рік! Автоматичне заповнення звіту неможливо!'"), Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)); 
		ПоказатьПредупреждение(, ТекстСообщения);				
		Возврат
	КонецЕсли;
	флЗаполнятьПрошлыйПериод = Истина;
	Если НЕ ЗначениеЗаполнено(ИспКлассыСчетовПрошлГода) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не установлены ""Используемые классы счетов расходов"" за %1 год! Автоматическое заполнение показателей прошлого года невозможно!';uk='Не встановлени ""Використовувані класи рахунків витрат"" за %1 рік! Автоматичне заповнення показників минулого року неможливо!'"), Год(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12))); 
		ПоказатьПредупреждение(, ТекстСообщения);				
		флЗаполнятьПрошлыйПериод = Ложь;
	КонецЕсли;
	
	ПараметрыЗаполненияЗвит1С = Новый Структура;
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод);
	
	
	Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		ПоказатьПредупреждение(,НСтр("ru='
|Дополнительные строки, в которых отсуствует информация, были скрыты! Для настройки дополнительных строк нажмите на кнопку ""Настроить отображение дополнительных строк"".
|';uk='
|Додаткові рядки, в яких відсутній інформація, були приховані! Для налаштування додаткових рядків натисніть на кнопку ""Налаштувати відображення додаткових рядків"".
|'"));
					   
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С,флЗаполнятьПрошлыйПериод)
	
	ОчиститьНаСервере();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод)
	

    ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;
	
	Если ТаблицаРасшифровки = Неопределено Тогда
		ТаблицаРасшифровки = Новый ТаблицаЗначений;
		ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого");
		ТаблицаРасшифровки.Колонки.Добавить("Сумма");
		ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела");
		ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	КонецЕсли;
	
	ТаблицаРасшифровки.Очистить();
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

	
	ПС = ПланыСчетов["Хозрасчетный"];
	Счет14      = ПС.ДолгосрочныеФинансовыеИнвестиции;
	Счет15      = ПС.КапитальныеИнвестиции;
	Счет15_3    = ПС.ПриобретениеИзготовлениеДругихНеоборотныхМатериальныхАктивов;
	Счет20      = ПС.ПроизводственныеЗапасы;
	Счет22      = ПС.МалоценныеИБыстроизнашивающиесяПредметы;
	Счет21      = ПС.ТекущиеБиологическиеАктивы;
	Счет23      = ПС.Производство;
	Счет25      = ПС.Полуфабрикаты;
	Счет26      = ПС.ГотоваяПродукция;
	Счет27      = ПС.ПродукцияСельскохозяйственногоПроизводства;
	Счет28      = ПС.Товары;
	Счет15_3    = ПС.ПриобретениеИзготовлениеДругихНеоборотныхМатериальныхАктивов;
	Счет18_4    = ПС.ПрочиеНеоборотныеАктивы;
	Счет30      = ПС.Касса;
	Счет31      = ПС.СчетаВБанках;
	Счет33      = ПС.ПрочиеДенежныеСредства;
	Счет34      = ПС.КраткосрочныеВекселяПолученные;
    Счет35_2    = ПС.ПрочиеТекущиеФинансовыеИнвестиции;
	Счет36      = ПС.РасчетыСПокупателямиИЗаказчиками;
	Счет37_1    = ПС.РасчетыПоВыданнымАвансам;
	Счет37_2    = ПС.РасчетыСПодотчетнымиЛицами;
	Счет37_3    = ПС.РасчетыПоНачисленнымДоходам;
	Счет37_4    = ПС.РасчетыПоПретензиям;
	Счет37_5    = ПС.РасчетыПоВозмещениюПричиненногоУщерба;
	Счет37_7_1  = ПС.РасчетыСДругимиДебиторамиВНациональнойВалюте;
	Счет37_7_2  = ПС.РасчетыСДругимиДебиторамиВИностраннойВалюте;
	Счет37_7_3  = ПС.РасчетыСРабочимиИСлужащимиПоДругимОперациям;
	Счет37_9    = ПС.РасчетыПоОперациямСДеривативами;
	Счет41      = ПС.ПаевойКапитал;
	Счет42      = ПС.ДополнительныйКапитал;
	Счет45      = ПС.ИзъятыйКапитал;
	Счет46      = ПС.НеоплаченныйКапитал;
	Счет48      = ПС.ЦелевоеФинансированиеИЦелевыеПоступления;
	Счет50      = ПС.ДолгосрочныеЗаймы;
	Счет52      = ПС.ДолгосрочныеОбязательстваПоОблигациям;
	Счет53      = ПС.ДолгосрочныеОбязательстваПоАренде;
	Счет55      = ПС.ПрочиеДолгосрочныеОбязательства;
	Счет60      = ПС.КраткосрочныеЗаймы;
	Счет63      = ПС.РасчетыСПоставщикамиИПодрядчиками;
	Счет64      = ПС.РасчетыПоНалогамИПлатежам;
	Счет64_1    = ПС.РасчетыПоНалогам;
	Счет64_1_1  = ПС.РасчетыПоНДФЛ;
	Счет64_1_2  = ПС.РасчетыПоНДС;
	Счет64_1_3  = ПС.РасчетыПоНалогуНаПрибыль;
	Счет64_1_5  = ПС.РасчетыПоДругимНалогам;
	Счет64_1_6  = ПС.РасчетыПоАкцизу;
	Счет64_2    = ПС.РасчетыПоОбязательнымПлатежам;
	
	Счет64_3    = ПС.НалоговыеОбязательстваВсего;
	Счет64_4    = ПС.НалоговыйКредитВсего;
	
	Счет64_3_1  = ПС.НалоговыеОбязательства;
	Счет65_1    = ПС.РасчетыПоПенсионномуОбеспечению;
	Счет65_2    = ПС.РасчетыПоСоциальномуСтрахованию;
	Счет65_3    = ПС.РасчетыПоСтрахованиюНаСлучайБезработицы;
	Счет65_6    = ПС.РасчетыПоСтрахованиюОтНесчастныхСлучаев;
	Счет66      = ПС.РасчетыПоОплатеТруда;
	Счет67_1    = ПС.РасчетыПоНачисленнымДивидендам;
	Счет68_1    = ПС.РасчетыПоАвансамПолученным;
	Счет68_4    = ПС.РасчетыПоНачисленнымПроцентам;
	Счет68_5    = ПС.РасчетыСДругимиКредиторами;
	Счет71      = ПС.ДругойОперационныйДоход;
	Счет71_1    = ПС.ДоходОтРеализацииИностраннойВалюты;
	Счет71_3    = ПС.ДоходОтОперационнойАрендыАктивов;
	Счет71_4    = ПС.ДоходОтОперационнойКурсовойРазницы;
	Счет71_5    = ПС.ПолученныеШтрафыПениНеустойки;
	Счет71_9    = ПС.ДругиеДоходыОтОперационнойДеятельности;
	Счет73      = ПС.ПрочиеФинансовыеДоходы;
	Счет73_1    = ПС.ДивидендыПолученные;
	Счет73_2    = ПС.ПроцентыПолученные;
	Счет74_1    = ПС.ДоходОтРеализацииФинансовыхИнвестиций;
	Счет74_2    = ПС.ДоходОтРеализацииНеоборотныхАктивов;
	Счет74_6    = ПС.ДругиеДоходыОтОбычнойДеятельности;
	Попытка
		Счет75  = ПС.ЧрезвычайныеДоходы;
	Исключение
		Счет75  = ПС.ПустаяСсылка();
	КонецПопытки;	
	Счет84		= ПС.ДругиеОперационныеЗатраты;
	Счет91		= ПС.ОбщепроизводственныеРасходы;
	Счет92		= ПС.АдминистративныеРасходы;
	Счет93		= ПС.РасходыНаСбыт;
	Счет94      = ПС.ДругиеЗатратыОперационнойДеятельностиГруппа;
	Счет95_1    = ПС.ПроцентыЗаКредит;
	Счет95_2    = ПС.ДругиеФинансовыеЗатраты;
	
	Счет97_1    = ПС.СебестоимостьРеализованныхФинансовыхИнвестиций;
	Счет97_2    = ПС.СебестоимостьРеализованныхНеоборотныхАктивов;
	
	Попытка
		Счет99  = ПС.ЧрезвычайныеЗатраты;
	Исключение
		Счет99  = ПС.ПустаяСсылка();
	КонецПопытки;	
	
	СчетаДС = Новый Массив;
	СчетаДС.Добавить(Счет30);
	СчетаДС.Добавить(Счет31);
	
	// Заполнение текстового представления периодов отчетов (для расшифровок необоротных показателей)
	РезФинРез_Период 				= ПредставлениеПериода( НачалоДня(НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	РезБаланс_Период				= ПредставлениеПериода( НачалоДня(НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	РезБалансПрошлыйПериод_Период	= ПредставлениеПериода( НачалоДня(НачалоКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12))), КонецДня(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), "Л = ""uk_UA""; ФП = Истина" );
	
	// Бухгалтерский итоги за текущий год
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	
	Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
	|НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	|КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
	|КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт,
	|ОборотДт, ОборотКт, 
	|КорОборотДт, КорОборотКт";
	
	// Бухгалтерские итоги по счетам, без аналитики
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", НачалоГода (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, , , , , , "Организация", СтруктураРеквизитовФормы.Организация);
	
	// Бухгалтерские итоги за прошлый год
	мБухИтогиПрошлыйГод = Обработки.БухгалтерскиеИтоги.Создать();
	мБухИтогиПрошлыйГод.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", НачалоГода (ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), КонецКвартала (ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), , , , , , "Организация", СтруктураРеквизитовФормы.Организация);
	
	// данные текущего баланса и финреза получаем из 1С
	РезФинРез 			   = ПараметрыЗаполненияЗвит1С.РезФинРез;
	РезБаланс 			   = ПараметрыЗаполненияЗвит1С.РезБаланс;
	РезБалансПрошлыйПериод = ПараметрыЗаполненияЗвит1С.РезБалансПрошлыйПериод;
	
	Если (РезБаланс = Неопределено) или (РезБалансПрошлыйПериод = Неопределено) или (РезФинРез = Неопределено)  Тогда   
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Возврат; 
	КонецЕсли;
	
	
	// Развернутые итоги по задолженностям, в разрезе значений реквизитов договоров "Вид деятельности для ДДС" = Финансовая, инвестиционная.
	мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
	ИтогиРС = "НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт, КонечныйРазвернутыйОстатокДт, КонечныйРазвернутыйОстатокКт,
			  |ОборотДт, ОборотКт, КорОборотДт, КорОборотКт";
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма","Счет,КорСчет,Субконто1" , НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, , "36,37,63,643,644,681,685",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры,,,"Организация", СтруктураРеквизитовФормы.Организация);
	ТаблицаПоИнвестФинансДеят = Новый ТаблицаЗначений;
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("Счет");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("КорСчет");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("Договор");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("ОборотДтИнвест");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("ОборотКтИнвест");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("ОборотДтФин");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("ОборотКтФин");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("НачальныйОстатокДт");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("КонечныйОстатокДт");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("НачальныйОстатокКт");
	ТаблицаПоИнвестФинансДеят.Колонки.Добавить("КонечныйОстатокКт");
	
	РезультатРасчета = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	Если  НЕ РезультатРасчета.Пустой() Тогда
		СтрокаТаблицы = РезультатРасчета.Выбрать();
		Пока СтрокаТаблицы.Следующий() Цикл
			
			Если НЕ СтрокаТаблицы.Группировка() = "" Тогда
				Продолжить;
			ИначеЕсли  НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто1) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (СтрокаТаблицы.Субконто1.ВидДеятельностиДляДДС = Перечисления.ВидыДеятельностиДляДДС.Инвестиционная)
			 ИЛИ (СтрокаТаблицы.Субконто1.ВидДеятельностиДляДДС = Перечисления.ВидыДеятельностиДляДДС.Финансовая) Тогда
					НоваяСтрока = ТаблицаПоИнвестФинансДеят.Добавить();  
					НоваяСтрока.Счет			   = СтрокаТаблицы.Счет;
					НоваяСтрока.Договор			   = СтрокаТаблицы.Субконто1;
					НоваяСтрока.НачальныйОстатокДт = СтрокаТаблицы.СуммаНачальныйРазвернутыйОстатокДт;
					НоваяСтрока.КонечныйОстатокДт  = СтрокаТаблицы.СуммаКонечныйРазвернутыйОстатокДт;
					НоваяСтрока.НачальныйОстатокКт = СтрокаТаблицы.СуммаНачальныйРазвернутыйОстатокКт;
					НоваяСтрока.КонечныйОстатокКт  = СтрокаТаблицы.СуммаКонечныйРазвернутыйОстатокКт;
					НоваяСтрока.ОборотДтИнвест 	   = 0;
					НоваяСтрока.ОборотКтИнвест     = 0;
					НоваяСтрока.ОборотДтФин 	   = 0;
					НоваяСтрока.ОборотКтФин  	   = 0;
			КонецЕсли;
				
		КонецЦикла; 	
	КонецЕсли;
	РезультатРасчета = мБухИтогиРС.ПолучитьКорОбороты();
	Если  НЕ РезультатРасчета.Пустой() Тогда
		СтрокаТаблицы = РезультатРасчета.Выбрать();
		Пока СтрокаТаблицы.Следующий() Цикл
			Если НЕ СтрокаТаблицы.Группировка() = "" Тогда
				Продолжить;
			ИначеЕсли  НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто1) Тогда
				Продолжить;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет)
				  ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорСчет)Тогда
				Продолжить;
			ИначеЕсли СтрокаТаблицы.Счет = Счет64_3 ИЛИ СтрокаТаблицы.Счет = Счет64_4 
				  ИЛИ СтрокаТаблицы.Счет.ПринадлежитЭлементу(Счет64_3) ИЛИ СтрокаТаблицы.Счет.ПринадлежитЭлементу(Счет64_4) Тогда
				  Продолжить;
			ИначеЕсли НЕ (    СтрокаТаблицы.КорСчет = Счет30 ИЛИ СтрокаТаблицы.КорСчет = Счет31
				          ИЛИ СтрокаТаблицы.КорСчет.ПринадлежитЭлементу(Счет30) ИЛИ СтрокаТаблицы.КорСчет.ПринадлежитЭлементу(Счет31)) Тогда
				  Продолжить;
			КонецЕсли;
			Если СтрокаТаблицы.Субконто1.ВидДеятельностиДляДДС = Перечисления.ВидыДеятельностиДляДДС.Инвестиционная Тогда
					НоваяСтрока = ТаблицаПоИнвестФинансДеят.Добавить();  
					НоваяСтрока.Счет			   = СтрокаТаблицы.Счет;
					НоваяСтрока.КорСчет			   = СтрокаТаблицы.КорСчет;
					НоваяСтрока.Договор		 	   = СтрокаТаблицы.Субконто1;
					НоваяСтрока.ОборотДтИнвест 	   = СтрокаТаблицы.СуммаКорОборотДт;
					НоваяСтрока.ОборотКтИнвест     = СтрокаТаблицы.СуммаКорОборотКт;
					НоваяСтрока.ОборотДтФин 	   = 0;
					НоваяСтрока.ОборотКтФин  	   = 0;
					НоваяСтрока.НачальныйОстатокДт = 0;
					НоваяСтрока.КонечныйОстатокДт  = 0;
					НоваяСтрока.НачальныйОстатокКт = 0;
					НоваяСтрока.КонечныйОстатокКт  = 0;
					
			ИначеЕсли СтрокаТаблицы.Субконто1.ВидДеятельностиДляДДС = Перечисления.ВидыДеятельностиДляДДС.Финансовая Тогда
					НоваяСтрока = ТаблицаПоИнвестФинансДеят.Добавить();  
					НоваяСтрока.Счет			   = СтрокаТаблицы.Счет;
					НоваяСтрока.КорСчет			   = СтрокаТаблицы.КорСчет;
					НоваяСтрока.Договор		 	   = СтрокаТаблицы.Субконто1;
					НоваяСтрока.ОборотДтИнвест 	   = 0;
					НоваяСтрока.ОборотКтИнвест     = 0;
					НоваяСтрока.ОборотДтФин 	   = СтрокаТаблицы.СуммаКорОборотДт;
					НоваяСтрока.ОборотКтФин  	   = СтрокаТаблицы.СуммаКорОборотКт;
					НоваяСтрока.НачальныйОстатокДт = 0;
					НоваяСтрока.КонечныйОстатокДт  = 0;
					НоваяСтрока.НачальныйОстатокКт = 0;
					НоваяСтрока.КонечныйОстатокКт  = 0;
			КонецЕсли;
		КонецЦикла; 	
	КонецЕсли;
	
	// Развернутые итоги прошлый год 
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма","Счет,КорСчет,Субконто1", НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), , "36,37,63,643,644,681,685",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, , , "Организация", СтруктураРеквизитовФормы.Организация);
	ТаблицаПоИнвестФинансДеятПрошлыйГод = ТаблицаПоИнвестФинансДеят.СкопироватьКолонки();
	РезультатРасчета = мБухИтогиРС.ПолучитьОстаткиИОбороты();
	Если  НЕ РезультатРасчета.Пустой() Тогда
		СтрокаТаблицы = РезультатРасчета.Выбрать();
		Пока СтрокаТаблицы.Следующий() Цикл
			
			Если НЕ СтрокаТаблицы.Группировка() = "" Тогда
				Продолжить;
			ИначеЕсли  НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто1) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (СтрокаТаблицы.Субконто1.ВидДеятельностиДляДДС = Перечисления.ВидыДеятельностиДляДДС.Инвестиционная)
			 ИЛИ (СтрокаТаблицы.Субконто1.ВидДеятельностиДляДДС = Перечисления.ВидыДеятельностиДляДДС.Финансовая) Тогда
					НоваяСтрока = ТаблицаПоИнвестФинансДеятПрошлыйГод.Добавить();  
					НоваяСтрока.Счет			   = СтрокаТаблицы.Счет;
					НоваяСтрока.Договор			   = СтрокаТаблицы.Субконто1;
					НоваяСтрока.НачальныйОстатокДт = СтрокаТаблицы.СуммаНачальныйРазвернутыйОстатокДт;
					НоваяСтрока.КонечныйОстатокДт  = СтрокаТаблицы.СуммаКонечныйРазвернутыйОстатокДт;
					НоваяСтрока.НачальныйОстатокКт = СтрокаТаблицы.СуммаНачальныйРазвернутыйОстатокКт;
					НоваяСтрока.КонечныйОстатокКт  = СтрокаТаблицы.СуммаКонечныйРазвернутыйОстатокКт;
					НоваяСтрока.ОборотДтИнвест 	   = 0;
					НоваяСтрока.ОборотКтИнвест     = 0;
					НоваяСтрока.ОборотДтФин 	   = 0;
					НоваяСтрока.ОборотКтФин  	   = 0;
			КонецЕсли;
				
		КонецЦикла; 	
	КонецЕсли;
	РезультатРасчета = мБухИтогиРС.ПолучитьКорОбороты();
	Если  НЕ РезультатРасчета.Пустой() Тогда
		СтрокаТаблицы = РезультатРасчета.Выбрать();
		Пока СтрокаТаблицы.Следующий() Цикл
			Если НЕ СтрокаТаблицы.Группировка() = "" Тогда
				Продолжить;
			ИначеЕсли  НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто1) Тогда
				Продолжить;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет)
				  ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорСчет)Тогда
				Продолжить;
			ИначеЕсли СтрокаТаблицы.Счет = Счет64_3 ИЛИ СтрокаТаблицы.Счет = Счет64_4 ИЛИ СтрокаТаблицы.КорСчет = Счет64_3 ИЛИ СтрокаТаблицы.КорСчет = Счет64_4 
				  ИЛИ СтрокаТаблицы.Счет.ПринадлежитЭлементу(Счет64_3) ИЛИ СтрокаТаблицы.Счет.ПринадлежитЭлементу(Счет64_4)
				  ИЛИ СтрокаТаблицы.КорСчет.ПринадлежитЭлементу(Счет64_3) ИЛИ СтрокаТаблицы.КорСчет.ПринадлежитЭлементу(Счет64_4) Тогда
				  Продолжить;
			КонецЕсли;
			Если СтрокаТаблицы.Субконто1.ВидДеятельностиДляДДС = Перечисления.ВидыДеятельностиДляДДС.Инвестиционная Тогда
					НоваяСтрока = ТаблицаПоИнвестФинансДеятПрошлыйГод.Добавить();  
					НоваяСтрока.Счет			   = СтрокаТаблицы.Счет;
					НоваяСтрока.КорСчет			   = СтрокаТаблицы.КорСчет;
					НоваяСтрока.Договор		 	   = СтрокаТаблицы.Субконто1;
					НоваяСтрока.ОборотДтИнвест 	   = СтрокаТаблицы.СуммаКорОборотДт;
					НоваяСтрока.ОборотКтИнвест     = СтрокаТаблицы.СуммаКорОборотКт;
					НоваяСтрока.ОборотДтФин 	   = 0;
					НоваяСтрока.ОборотКтФин  	   = 0;
					НоваяСтрока.НачальныйОстатокДт = 0;
					НоваяСтрока.КонечныйОстатокДт  = 0;
					НоваяСтрока.НачальныйОстатокКт = 0;
					НоваяСтрока.КонечныйОстатокКт  = 0;
			ИначеЕсли СтрокаТаблицы.Субконто1.ВидДеятельностиДляДДС = Перечисления.ВидыДеятельностиДляДДС.Финансовая Тогда
					НоваяСтрока = ТаблицаПоИнвестФинансДеятПрошлыйГод.Добавить();  
					НоваяСтрока.Счет			   = СтрокаТаблицы.Счет;
					НоваяСтрока.КорСчет			   = СтрокаТаблицы.КорСчет;
					НоваяСтрока.Договор		 	   = СтрокаТаблицы.Субконто1;
					НоваяСтрока.ОборотДтИнвест 	   = 0;
					НоваяСтрока.ОборотКтИнвест     = 0;
					НоваяСтрока.ОборотДтФин 	   = СтрокаТаблицы.СуммаКорОборотДт;
					НоваяСтрока.ОборотКтФин  	   = СтрокаТаблицы.СуммаКорОборотКт;
					НоваяСтрока.НачальныйОстатокДт = 0;
					НоваяСтрока.КонечныйОстатокДт  = 0;
					НоваяСтрока.НачальныйОстатокКт = 0;
					НоваяСтрока.КонечныйОстатокКт  = 0;
			КонецЕсли;
		КонецЦикла; 	
	КонецЕсли;
	
	Отчет2013 = (Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2013);
	
	// рядок 3500 (Прибуток (збиток) від звичайної діяльності до оподаткування)
	ЗаполнитьПоказательПоДаннымФинОтчетности("3500", 3, "Ф", РезФинРез, "2290", 3);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3500", 4, "Ф", РезФинРез, "2295", 3);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3500", 5, "Ф", РезФинРез, "2290", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3500", 6, "Ф", РезФинРез, "2295", 4);
	
	// рядок 3505 Коригування на: амортизацію необоротних активів
	ЗаполнитьПоказательПоДаннымФинОтчетности("3505", 3, "Ф", РезФинРез, "2515", 3);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3505", 5, "Ф", РезФинРез, "2515", 4);
	
	// рядок 3510 Коригування на:   збільшення (зменшення) забезпечень
	// проведем предварительный расчет, определим какой получится знак показателя, в зависимости от него будем заполнять строку ДДС
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1520", 4)
	          - ПолучитьПоказательФинОтчетности(РезБаланс, "1520", 3)
		      + ПолучитьПоказательФинОтчетности(РезБаланс, "1525", 4)
		      - ПолучитьПоказательФинОтчетности(РезБаланс, "1525", 3);
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБаланс, "1520", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБаланс, "1520", 3,,"-");
	ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБаланс, "1525", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБаланс, "1525", 3,,"-");
	УстановитьЗначениеПоказателя("П35103", 0); 
	УстановитьЗначениеПоказателя("П35104", 0); 
	УстановитьЗначениеПоказателя("П3510" + НомерКолонкиДДС, Результат);
	
	
	Если флЗаполнятьПрошлыйПериод Тогда	
		Если НЕ Отчет2013 Тогда
			Результат =  ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1520", 4)
			           - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1520", 3)
				       + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1525", 4)
				       - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1525", 3);
		Иначе	
			
			Результат =  ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "400", 4)
			           - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "400", 3)
				       + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "410", 4)
				       - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "410", 3)
				       + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "415", 4)
				       - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "415", 3)
					   
					   + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "416", 3)
				       - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "416", 4)
					   
					   + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "417", 4)
				       - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "417", 3)
				       + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "418", 4)
				       - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "418", 3)
				       + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "420", 4)
				       - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "420", 3);
				
		
		КонецЕсли;
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		
		Если НЕ Отчет2013 Тогда
			
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1520", 4, Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1520", 3, Истина, "-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1525", 4, Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1525", 3, Истина, "-");
			
		Иначе
			
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "400", 4, Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "400", 3, Истина, "-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "410", 4, Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "410", 3, Истина, "-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "415", 4, Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "415", 3, Истина, "-");
			
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "416", 3, Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "416", 4, Истина, "-");
			
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "417", 4, Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "417", 3, Истина, "-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "418", 4, Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "418", 3, Истина, "-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "420", 4, Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3510", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "420", 3, Истина, "-");
			
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П35105", 0); 
		УстановитьЗначениеПоказателя("П35106", 0); 
		УстановитьЗначениеПоказателя("П3510" + НомерКолонкиДДС, Результат); 
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации()  =  "БП"  ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП" Тогда  // ИНАГРО
		// рядок 3515 коригування на збиток (прибуток) від нереалізованих курсових різниць
		// только по счетам денежных средств
		// свернем доходы с расходами и отразим в колонке 4 или 3 (5 или 6 соответственно)
		// Вплив зміни валютних курсів на залишок коштів  
		СчетДоходовОпер    = Неопределено;
		СчетДоходовНеОпер  = Неопределено;
		СчетЗатратНеОпер   = Неопределено;
		
		СчетЗатратОпер     = Неопределено;
		СтатьяЗатратОпер   = Неопределено;
		НомерСубконтоСтатьиЗатратОпер = неопределено;
		
		ТипСтатьиЗатрат       = Тип("СправочникСсылка.СтатьиЗатрат");
		
		ДанныеПоКурсовымРазницам = РегистрыСведений.ПараметрыУчетаКурсовыхРазниц.СоздатьНаборЗаписей();
		ДанныеПоКурсовымРазницам.Прочитать();
		Для каждого Строка Из ДанныеПоКурсовымРазницам Цикл
			
			 Если Строка.КлассСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс9
				И ИспКлассыСчетов = Перечисления.КлассыСчетовРасходов.Класс8 Тогда
				Продолжить;
			 КонецЕсли;
			 
			 Если Строка.КлассСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
				И НЕ ИспКлассыСчетов = Перечисления.КлассыСчетовРасходов.Класс8 Тогда
				Продолжить;
			 КонецЕсли;
			
	         Если Строка.Операционная Тогда
				 
				СчетДоходовОпер    = Строка.СчетДоходов;
				СчетЗатратОпер     = Строка.СчетЗатрат;
				СтатьяЗатратОпер   = ?(ТипЗнч(Строка.Субконто1Затрат) = ТипСтатьиЗатрат, Строка.Субконто1Затрат, 
									  ?(ТипЗнч(Строка.Субконто2Затрат) = ТипСтатьиЗатрат, Строка.Субконто2Затрат, 
									   ?(ТипЗнч(Строка.Субконто3Затрат) = ТипСтатьиЗатрат, Строка.Субконто3Затрат, Неопределено)));
				НомерСубконтоСтатьиЗатратОпер   = ?(ТипЗнч(Строка.Субконто1Затрат) = ТипСтатьиЗатрат, 1, 
									  				?(ТипЗнч(Строка.Субконто2Затрат) = ТипСтатьиЗатрат, 2, 
									   				  ?(ТипЗнч(Строка.Субконто3Затрат) = ТипСтатьиЗатрат, 3, Неопределено)));
			 Иначе 	
				 
				СчетДоходовНеОпер  = Строка.СчетДоходов;	
				СчетЗатратНеОпер   = Строка.СчетЗатрат;
				
			КонецЕсли;
			
			Если  Строка.КлассСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс9
			    И ИспКлассыСчетов  = Перечисления.КлассыСчетовРасходов.Класс8и9 Тогда
				 
				Если НЕ СтатьяЗатратОпер = Неопределено Тогда
					СчетЗатратОпер = СтатьяЗатратОпер.Счет8Класса;
				КонецЕсли;									   
		 
			 КонецЕсли;	
		
		КонецЦикла;
		ЗапросКурсоваяРазницаЗатратОпер = Новый Запрос();
		ЗапросКурсоваяРазницаЗатратОпер.Текст = "ВЫБРАТЬ
		                                        |	ЕСТЬNULL(ВЫБОР
		                                        |			КОГДА НалоговыйОбороты.КорСчет В Иерархии(&Счет30)
		                                        |				ТОГДА НалоговыйОбороты.СуммаОборотДт
		                                        |			ИНАЧЕ 0
		                                        |		КОНЕЦ, 0) КАК Сумма30,
		                                        |	ЕСТЬNULL(ВЫБОР
		                                        |			КОГДА НалоговыйОбороты.КорСчет В Иерархии(&Счет31)
		                                        |				ТОГДА НалоговыйОбороты.СуммаОборотДт
		                                        |			ИНАЧЕ 0
		                                        |		КОНЕЦ, 0) КАК Сумма31,
		                                        |	ЕСТЬNULL(ВЫБОР
		                                        |			КОГДА НалоговыйОбороты.КорСчет В Иерархии(&Счет33)
		                                        |				ТОГДА НалоговыйОбороты.СуммаОборотДт
		                                        |			ИНАЧЕ 0
		                                        |		КОНЕЦ, 0) КАК Сумма33
		                                        |ИЗ
		                                        |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		                                        |			&ДатаНач,
		                                        |			&ДатаКон,
		                                        |			,
		                                        |			СЧет = &СчетЗатарат,
		                                        |			&СтатьиЗатрат,
		                                        |			Организация = &Организация И Субконто1 = &Субконто1,
		                                        |			КорСчет В Иерархии(&Счет30) ИЛИ КорСчет В Иерархии(&Счет31) ИЛИ КорСчет В Иерархии(&Счет33),
		                                        |			) КАК НалоговыйОбороты";
		ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("Организация",  СтруктураРеквизитовФормы.Организация);
		ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("СтатьиЗатрат", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("СчетЗатарат",  СчетЗатратОпер); 
		ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("Субконто1",    СтатьяЗатратОпер);
		ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("Счет30",       Счет30);
		ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("Счет31",       Счет31);
		ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("Счет33",       Счет33);
		
		П3515нач = ОБ(Счет30,СчетДоходовОпер)   + ОБ(Счет31,СчетДоходовОпер)   + ОБ(Счет33,СчетДоходовОпер) 
				 + ОБ(Счет30,СчетДоходовНеОпер) + ОБ(Счет31,СчетДоходовНеОпер) + ОБ(Счет33,СчетДоходовНеОпер) 
			     - ОБ(СчетЗатратНеОпер,Счет30)  - ОБ(СчетЗатратНеОпер,Счет31)  - ОБ(СчетЗатратНеОпер,Счет33);
		ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("ДатаКон", КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		ВыборкаКурсоваяРазницаЗатратОпер = ЗапросКурсоваяРазницаЗатратОпер.Выполнить().Выбрать();
		ДопРасшифровка = Ложь;
		Если ВыборкаКурсоваяРазницаЗатратОпер.Следующий() Тогда
			П3515нач = П3515нач - ВыборкаКурсоваяРазницаЗатратОпер.Сумма30 - ВыборкаКурсоваяРазницаЗатратОпер.Сумма31 - ВыборкаКурсоваяРазницаЗатратОпер.Сумма33;
			ДопРасшифровка = Истина;
		КонецЕсли;
		
		Если П3515нач >= 0 Тогда
			// доход отражаем в "видатку"
			П3515кол = "П35154";
		Иначе
			// убыток отражаем в "надходженні"
			П3515кол = "П35153";
		КонецЕсли;
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет30,СчетДоходовОпер), Счет30,СчетДоходовОпер);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ(Счет31,СчетДоходовОпер), Счет31,СчетДоходовОпер);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ(Счет33,СчетДоходовОпер), Счет33,СчетДоходовОпер);
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ(Счет30,СчетДоходовНеОпер), Счет30,СчетДоходовНеОпер);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ(Счет31,СчетДоходовНеОпер), Счет31,СчетДоходовНеОпер);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ(Счет33,СчетДоходовНеОпер), Счет33,СчетДоходовНеОпер);
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ОБ(СчетЗатратНеОпер,Счет30),  СчетЗатратНеОпер,Счет30);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ОБ(СчетЗатратНеОпер,Счет31),  СчетЗатратНеОпер,Счет31);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ОБ(СчетЗатратНеОпер,Счет33),  СчетЗатратНеОпер,Счет33);
		Если ДопРасшифровка Тогда
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратОпер.Сумма30,  СчетЗатратОпер, Счет30,,,,,,,?(НомерСубконтоСтатьиЗатратОпер = 1, СтатьяЗатратОпер, Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 2, СтатьяЗатратОпер,Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 3, СтатьяЗатратОпер, Неопределено));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратОпер.Сумма31,  СчетЗатратОпер, Счет31,,,,,,,?(НомерСубконтоСтатьиЗатратОпер = 1, СтатьяЗатратОпер, Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 2, СтатьяЗатратОпер,Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 3, СтатьяЗатратОпер, Неопределено));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратОпер.Сумма33,  СчетЗатратОпер, Счет33,,,,,,,?(НомерСубконтоСтатьиЗатратОпер = 1, СтатьяЗатратОпер, Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 2, СтатьяЗатратОпер,Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 3, СтатьяЗатратОпер, Неопределено));
		КонецЕсли;
	    УстановитьЗначениеПоказателя("П35153", 0);
		УстановитьЗначениеПоказателя("П35154", 0);
		УстановитьЗначениеПоказателя(П3515кол, П3515нач);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			П3515кон = ОБ2(Счет30,СчетДоходовОпер)   + ОБ2(Счет31,СчетДоходовОпер)   + ОБ2(Счет33,СчетДоходовОпер) 
				     + ОБ2(Счет30,СчетДоходовНеОпер) + ОБ2(Счет31,СчетДоходовНеОпер) + ОБ2(Счет33,СчетДоходовНеОпер) 
				     - ОБ2(СчетЗатратНеОпер,Счет30)  - ОБ2(СчетЗатратНеОпер,Счет31)  - ОБ2(СчетЗатратНеОпер,Счет33);
			
			ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("ДатаНач", НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			ЗапросКурсоваяРазницаЗатратОпер.УстановитьПараметр("ДатаКон", КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			ВыборкаКурсоваяРазницаЗатратОпер = ЗапросКурсоваяРазницаЗатратОпер.Выполнить().Выбрать();
			ДопРасшифровка = Ложь;
			Если ВыборкаКурсоваяРазницаЗатратОпер.Следующий() Тогда
				П3515кон = П3515кон - ВыборкаКурсоваяРазницаЗатратОпер.Сумма30 - ВыборкаКурсоваяРазницаЗатратОпер.Сумма31 - ВыборкаКурсоваяРазницаЗатратОпер.Сумма33;
				ДопРасшифровка = Истина;
			КонецЕсли;
			
			Если П3515кон >= 0 Тогда
				// доход отражаем в "видатку"
				П3515кол = "П35156";
			Иначе
				// убыток отражаем в "надходженні"
				П3515кол = "П35155";
			КонецЕсли;

			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет30,СчетДоходовОпер), Счет30,СчетДоходовОпер,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ2(Счет31,СчетДоходовОпер),Счет31,СчетДоходовОпер,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ2(Счет33,СчетДоходовОпер),Счет33,СчетДоходовОпер,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ2(Счет30,СчетДоходовНеОпер),Счет30,СчетДоходовНеОпер,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ2(Счет31,СчетДоходовНеОпер),Счет31,СчетДоходовНеОпер,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ОБ2(Счет33,СчетДоходовНеОпер),Счет33,СчетДоходовНеОпер,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ОБ2(СчетЗатратНеОпер,Счет30),СчетЗатратНеОпер,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ОБ2(СчетЗатратНеОпер,Счет31),СчетЗатратНеОпер,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ОБ2(СчетЗатратНеОпер,Счет33),СчетЗатратНеОпер,Счет33,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			
			Если ДопРасшифровка Тогда
			
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратОпер.Сумма30,  СчетЗатратОпер, Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),,,,,?(НомерСубконтоСтатьиЗатратОпер = 1, СтатьяЗатратОпер, Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 2, СтатьяЗатратОпер,Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 3, СтатьяЗатратОпер, Неопределено));
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратОпер.Сумма31,  СчетЗатратОпер, Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),,,,,?(НомерСубконтоСтатьиЗатратОпер = 1, СтатьяЗатратОпер, Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 2, СтатьяЗатратОпер,Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 3, СтатьяЗатратОпер, Неопределено));
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратОпер.Сумма33,  СчетЗатратОпер, Счет33,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),,,,,?(НомерСубконтоСтатьиЗатратОпер = 1, СтатьяЗатратОпер, Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 2, СтатьяЗатратОпер,Неопределено), ?(НомерСубконтоСтатьиЗатратОпер = 3, СтатьяЗатратОпер, Неопределено));
			
			КонецЕсли;
			
		    УстановитьЗначениеПоказателя("П35155", 0);
			УстановитьЗначениеПоказателя("П35156", 0);
			УстановитьЗначениеПоказателя(П3515кол, П3515кон);
		КонецЕсли;
	Иначе //ЕРП, УТ
		// Вплив зміни валютних курсів на залишок коштів  
		СчетДоходовОпер    = Неопределено;
		СчетДоходовНеОпер  = Неопределено;
		СчетЗатратНеОпер   = Неопределено;
		
		СчетЗатратОпер     = Неопределено;
		СтатьяЗатратОпер   = ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы;
		СтатьяЗатратНеОпер   = ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные;
		
		ЗапросКурсоваяРазницаДоход = Новый Запрос();
		ЗапросКурсоваяРазницаДоход.Текст = "ВЫБРАТЬ
		                                   |	НалоговыйОбороты.Счет КАК Счет,
		                                   |	НалоговыйОбороты.КорСчет КАК КорСчет,
		                                   |	ЕСТЬNULL(ВЫБОР
		                                   |			КОГДА НалоговыйОбороты.Счет В ИЕРАРХИИ (&Счет30)
		                                   |				ТОГДА НалоговыйОбороты.СуммаОборотДт
		                                   |			ИНАЧЕ 0
		                                   |		КОНЕЦ, 0) КАК Сумма30,
		                                   |	ЕСТЬNULL(ВЫБОР
		                                   |			КОГДА НалоговыйОбороты.Счет В ИЕРАРХИИ (&Счет31)
		                                   |				ТОГДА НалоговыйОбороты.СуммаОборотДт
		                                   |			ИНАЧЕ 0
		                                   |		КОНЕЦ, 0) КАК Сумма31,
		                                   |	ЕСТЬNULL(ВЫБОР
		                                   |			КОГДА НалоговыйОбороты.Счет В ИЕРАРХИИ (&Счет33)
		                                   |				ТОГДА НалоговыйОбороты.СуммаОборотДт
		                                   |			ИНАЧЕ 0
		                                   |		КОНЕЦ, 0) КАК Сумма33
		                                   |ИЗ
		                                   |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		                                   |			&ДатаНач,
		                                   |			&ДатаКон,
		                                   |			,
		                                   |			Счет В ИЕРАРХИИ (&Счет30)
		                                   |				ИЛИ Счет В ИЕРАРХИИ (&Счет31)
		                                   |				ИЛИ Счет В ИЕРАРХИИ (&Счет33),
		                                   |			,
		                                   |			Организация = &Организация
		                                   |				И КорСубконто1 = &Субконто1,
		                                   |			,
		                                   |			&СтатьиДоход) КАК НалоговыйОбороты";
		ЗапросКурсоваяРазницаДоход.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		ЗапросКурсоваяРазницаДоход.УстановитьПараметр("СтатьиДоход", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов);
		ЗапросКурсоваяРазницаДоход.УстановитьПараметр("Счет30",      Счет30);  
		ЗапросКурсоваяРазницаДоход.УстановитьПараметр("Счет31",      Счет31);
		ЗапросКурсоваяРазницаДоход.УстановитьПараметр("Счет33",      Счет33);
		
		ЗапросКурсоваяРазницаЗатрат = Новый Запрос();
		ЗапросКурсоваяРазницаЗатрат.Текст = "ВЫБРАТЬ
		                                    |	ЕСТЬNULL(ВЫБОР
		                                    |			КОГДА НалоговыйОбороты.КорСчет В ИЕРАРХИИ (&Счет30)
		                                    |				ТОГДА НалоговыйОбороты.СуммаОборотДт
		                                    |			ИНАЧЕ 0
		                                    |		КОНЕЦ, 0) КАК Сумма30,
		                                    |	ЕСТЬNULL(ВЫБОР
		                                    |			КОГДА НалоговыйОбороты.КорСчет В ИЕРАРХИИ (&Счет31)
		                                    |				ТОГДА НалоговыйОбороты.СуммаОборотДт
		                                    |			ИНАЧЕ 0
		                                    |		КОНЕЦ, 0) КАК Сумма31,
		                                    |	ЕСТЬNULL(ВЫБОР
		                                    |			КОГДА НалоговыйОбороты.КорСчет В ИЕРАРХИИ (&Счет33)
		                                    |				ТОГДА НалоговыйОбороты.СуммаОборотДт
		                                    |			ИНАЧЕ 0
		                                    |		КОНЕЦ, 0) КАК Сумма33,
		                                    |	НалоговыйОбороты.Счет
		                                    |ИЗ
		                                    |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		                                    |			&ДатаНач,
		                                    |			&ДатаКон,
		                                    |			,
		                                    |			,
		                                    |			&СтатьиЗатрат,
		                                    |			Организация = &Организация
		                                    |				И Субконто1 = &Субконто1,
		                                    |			КорСчет В ИЕРАРХИИ (&Счет30)
		                                    |				ИЛИ КорСчет В ИЕРАРХИИ (&Счет31)
		                                    |				ИЛИ КорСчет В ИЕРАРХИИ (&Счет33),
		                                    |			) КАК НалоговыйОбороты";
		ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("Организация",  СтруктураРеквизитовФормы.Организация);
		ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("СтатьиЗатрат",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("Счет30",       Счет30);  
		ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("Счет31",       Счет31);
		ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("Счет33",       Счет33);
		
		П3515нач = 0; П3515кон = 0;
		ДопРасшифровка1 = Ложь;
		ДопРасшифровка2 = Ложь;
		ДопРасшифровка3 = Ложь;
		ДопРасшифровка4 = Ложь;
		ЗапросКурсоваяРазницаДоход.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросКурсоваяРазницаДоход.УстановитьПараметр("ДатаКон", КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		//операционные доходы
		ЗапросКурсоваяРазницаДоход.УстановитьПараметр("Субконто1",   ПланыВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы);
		ВыборкаКурсоваяРазницаДоход = ЗапросКурсоваяРазницаДоход.Выполнить().Выбрать();
		Если ВыборкаКурсоваяРазницаДоход.Следующий() Тогда
			П3515нач = ВыборкаКурсоваяРазницаДоход.Сумма30 + ВыборкаКурсоваяРазницаДоход.Сумма31 + ВыборкаКурсоваяРазницаДоход.Сумма33;
			СчетДоходовОпер = ВыборкаКурсоваяРазницаДоход.КорСчет;
			ДопРасшифровка1 = Истина;
		КонецЕсли;
		//НЕоперационные доходы
		ЗапросКурсоваяРазницаДоход.УстановитьПараметр("Субконто1",   ПланыВидовХарактеристик.СтатьиДоходов.КурсовыеРазницыНеоперационные);
		ВыборкаКурсоваяРазницаДоходНЕ = ЗапросКурсоваяРазницаДоход.Выполнить().Выбрать();
		Если ВыборкаКурсоваяРазницаДоходНЕ.Следующий() Тогда
			СчетДоходовНеОпер = ВыборкаКурсоваяРазницаДоходНЕ.КорСчет;
			П3515нач = П3515нач + ВыборкаКурсоваяРазницаДоходНЕ.Сумма30 + ВыборкаКурсоваяРазницаДоходНЕ.Сумма31 + ВыборкаКурсоваяРазницаДоходНЕ.Сумма33;
			ДопРасшифровка2 = Истина;
		КонецЕсли;
	
		ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("ДатаКон", КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		//операционные расходы
		ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("Субконто1", ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы);
		ВыборкаКурсоваяРазницаЗатрат = ЗапросКурсоваяРазницаЗатрат.Выполнить().Выбрать();
		Если ВыборкаКурсоваяРазницаЗатрат.Следующий() Тогда
			СчетЗатратОпер = ВыборкаКурсоваяРазницаЗатрат.Счет;
			П3515нач = П3515нач - ВыборкаКурсоваяРазницаЗатрат.Сумма30 - ВыборкаКурсоваяРазницаЗатрат.Сумма31 - ВыборкаКурсоваяРазницаЗатрат.Сумма33;
			ДопРасшифровка3 = Истина;
		КонецЕсли;
		//НЕоперационные расходы
		ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("Субконто1", ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные);
		ВыборкаКурсоваяРазницаЗатратНЕ = ЗапросКурсоваяРазницаЗатрат.Выполнить().Выбрать();
		Если ВыборкаКурсоваяРазницаЗатратНЕ.Следующий() Тогда
			СчетЗатратНеОпер = ВыборкаКурсоваяРазницаЗатратНЕ.Счет;
			П3515нач = П3515нач - ВыборкаКурсоваяРазницаЗатратНЕ.Сумма30 - ВыборкаКурсоваяРазницаЗатратНЕ.Сумма31 - ВыборкаКурсоваяРазницаЗатратНЕ.Сумма33;
			ДопРасшифровка4 = Истина;
		КонецЕсли;
		
		Если П3515нач >= 0 Тогда
			// доход отражаем в "видатку"
			П3515кол = "П35154";
		Иначе
			// убыток отражаем в "надходженні"
			П3515кол = "П35153";
		КонецЕсли;
		Если ДопРасшифровка1 Тогда
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За звітний період""",	"+", "!ОБ", ВыборкаКурсоваяРазницаДоход.Сумма30, Счет30,СчетДоходовОпер);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ", ВыборкаКурсоваяРазницаДоход.Сумма31, Счет31,СчетДоходовОпер);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ", ВыборкаКурсоваяРазницаДоход.Сумма33, Счет33,СчетДоходовОпер);
		КонецЕсли;
			
		Если ДопРасшифровка2 Тогда
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За звітний період""",	"+", "!ОБ", ВыборкаКурсоваяРазницаДоходНЕ.Сумма30, Счет30,СчетДоходовНеОпер);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ", ВыборкаКурсоваяРазницаДоходНЕ.Сумма31, Счет31,СчетДоходовНеОпер);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ", ВыборкаКурсоваяРазницаДоходНЕ.Сумма33, Счет33,СчетДоходовНеОпер);
		КонецЕсли;
			
		Если ДопРасшифровка3 Тогда
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За звітний період""",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатрат.Сумма30,  СчетЗатратОпер, Счет30,,,,,,,СтатьяЗатратОпер);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатрат.Сумма31,  СчетЗатратОпер, Счет31,,,,,,,СтатьяЗатратОпер);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатрат.Сумма33,  СчетЗатратОпер, Счет33,,,,,,,СтатьяЗатратОпер);
		КонецЕсли;
			
		Если ДопРасшифровка4 Тогда
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За звітний період""",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратНЕ.Сумма30,  СчетЗатратНеОпер, Счет30,,,,,,,СтатьяЗатратНеОпер);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратНЕ.Сумма31,  СчетЗатратНеОпер, Счет31,,,,,,,СтатьяЗатратНеОпер);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратНЕ.Сумма33,  СчетЗатратНеОпер, Счет33,,,,,,,СтатьяЗатратНеОпер);
		КонецЕсли;
		
	    УстановитьЗначениеПоказателя("П35153", 0);
		УстановитьЗначениеПоказателя("П35154", 0);
		УстановитьЗначениеПоказателя(П3515кол, П3515нач);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			ДопРасшифровка1 = Ложь;
			ДопРасшифровка2 = Ложь;
			ДопРасшифровка3 = Ложь;
			ДопРасшифровка4 = Ложь;
			ЗапросКурсоваяРазницаДоход.УстановитьПараметр("ДатаНач", НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			ЗапросКурсоваяРазницаДоход.УстановитьПараметр("ДатаКон", КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			//операционные доходы
			ЗапросКурсоваяРазницаДоход.УстановитьПараметр("Субконто1",   ПланыВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы);
			ВыборкаКурсоваяРазницаДоход = ЗапросКурсоваяРазницаДоход.Выполнить().Выбрать();
			Если ВыборкаКурсоваяРазницаДоход.Следующий() Тогда
				П3515кон = ВыборкаКурсоваяРазницаДоход.Сумма30 + ВыборкаКурсоваяРазницаДоход.Сумма31 + ВыборкаКурсоваяРазницаДоход.Сумма33;
				СчетДоходовОпер = ВыборкаКурсоваяРазницаДоход.КорСчет;
				ДопРасшифровка1 = Истина;
			КонецЕсли;
			
			//НЕоперационные доходы
			ЗапросКурсоваяРазницаДоход.УстановитьПараметр("Субконто1",   ПланыВидовХарактеристик.СтатьиДоходов.КурсовыеРазницыНеоперационные);
			ВыборкаКурсоваяРазницаДоходНЕ = ЗапросКурсоваяРазницаДоход.Выполнить().Выбрать();
			Если ВыборкаКурсоваяРазницаДоходНЕ.Следующий() Тогда
				СчетДоходов = ВыборкаКурсоваяРазницаДоходНЕ.КорСчет;
				П3515кон = П3515кон + ВыборкаКурсоваяРазницаДоходНЕ.Сумма30 + ВыборкаКурсоваяРазницаДоходНЕ.Сумма31 + ВыборкаКурсоваяРазницаДоходНЕ.Сумма33;
				ДопРасшифровка2 = Истина;
			КонецЕсли;
		
			ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("ДатаНач", НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("ДатаКон", КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			ВыборкаКурсоваяРазницаЗатрат = ЗапросКурсоваяРазницаЗатрат.Выполнить().Выбрать();
			Если ВыборкаКурсоваяРазницаЗатрат.Следующий() Тогда
				
				СчетЗатратОпер = ВыборкаКурсоваяРазницаЗатрат.Счет;
				П3515кон = П3515кон - ВыборкаКурсоваяРазницаЗатрат.Сумма30 - ВыборкаКурсоваяРазницаЗатрат.Сумма31 - ВыборкаКурсоваяРазницаЗатрат.Сумма33;
				ДопРасшифровка3 = Истина;
			КонецЕсли;
			//НЕоперационные расходы
			ЗапросКурсоваяРазницаЗатрат.УстановитьПараметр("Субконто1", ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные);
			ВыборкаКурсоваяРазницаЗатратНЕ = ЗапросКурсоваяРазницаЗатрат.Выполнить().Выбрать();
			Если ВыборкаКурсоваяРазницаЗатратНЕ.Следующий() Тогда
				
				СчетЗатратНеОпер = ВыборкаКурсоваяРазницаЗатратНЕ.Счет;
				П3515кон = П3515кон - ВыборкаКурсоваяРазницаЗатратНЕ.Сумма30 - ВыборкаКурсоваяРазницаЗатратНЕ.Сумма31 - ВыборкаКурсоваяРазницаЗатратНЕ.Сумма33;
				ДопРасшифровка4 = Истина;
			КонецЕсли;
				
			Если П3515кон >= 0 Тогда
				// доход отражаем в "видатку"
				П3515кол = "П35156";
			Иначе
				// убыток отражаем в "надходженні"
				П3515кол = "П35155";
			КонецЕсли;

			Если ДопРасшифровка1 Тогда
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За попередній період""",	"+", "!ОБ",ВыборкаКурсоваяРазницаДоход.Сумма30, Счет30,СчетДоходовОпер,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ВыборкаКурсоваяРазницаДоход.Сумма31,Счет31,СчетДоходовОпер,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ВыборкаКурсоваяРазницаДоход.Сумма33,Счет33,СчетДоходовОпер,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			КонецЕсли;
			Если ДопРасшифровка2 Тогда
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За попередній період""",	"+", "!ОБ",ВыборкаКурсоваяРазницаДоходНЕ.Сумма30, Счет30,СчетДоходов,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ВыборкаКурсоваяРазницаДоходНЕ.Сумма31,Счет31,СчетДоходов,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"+", "!ОБ",ВыборкаКурсоваяРазницаДоходНЕ.Сумма33,Счет33,СчетДоходов,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			КонецЕсли;
			Если ДопРасшифровка3 Тогда
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За попередній період""",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатрат.Сумма30,  СчетЗатратОпер, Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),,,,,СтатьяЗатратОпер);
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатрат.Сумма31,  СчетЗатратОпер, Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),,,,,СтатьяЗатратОпер);
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатрат.Сумма33,  СчетЗатратОпер, Счет33,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),,,,,СтатьяЗатратОпер);
			КонецЕсли;
			Если ДопРасшифровка4 Тогда
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "Рядок 3515, графа ""За попередній період""",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратНЕ.Сумма30,  СчетЗатратНеОпер, Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),,,,,СтатьяЗатратНеОпер);
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратНЕ.Сумма31,  СчетЗатратНеОпер, Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),,,,,СтатьяЗатратНеОпер);
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,П3515кол, "",	"-", "!ОБ",ВыборкаКурсоваяРазницаЗатратНЕ.Сумма33,  СчетЗатратНеОпер, Счет33,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),,,,,СтатьяЗатратНеОпер);
			КонецЕсли;
			
		    УстановитьЗначениеПоказателя("П35155", 0);
			УстановитьЗначениеПоказателя("П35156", 0);
			УстановитьЗначениеПоказателя(П3515кол, П3515кон);	
		КонецЕсли;
	КонецЕсли;
	
	// рядок 3520  коригування на  збиток (прибуток) від неопераційної діяльності та інших негрошових операцій"							
	Результат =  ПолучитьПоказательФинОтчетности(РезФинРез, "2255", 3)
	           + ПолучитьПоказательФинОтчетности(РезФинРез, "2270", 3)
		       - ПолучитьПоказательФинОтчетности(РезФинРез, "2200", 3)
		       - ПолучитьПоказательФинОтчетности(РезФинРез, "2220", 3)
			   - ПолучитьПоказательФинОтчетности(РезФинРез, "2240", 3);
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2255", 3);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2270", 3);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2200", 3,,"-");
	ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2220", 3,,"-");
	ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2240", 3,,"-");
	УстановитьЗначениеПоказателя("П" + "3520" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3520" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3520" + НомерКолонкиДДС, Результат);
	
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат =  ПолучитьПоказательФинОтчетности(РезФинРез, "2255", 4)
		           + ПолучитьПоказательФинОтчетности(РезФинРез, "2270", 4)
			       - ПолучитьПоказательФинОтчетности(РезФинРез, "2200", 4)
			       - ПолучитьПоказательФинОтчетности(РезФинРез, "2220", 4)
				   - ПолучитьПоказательФинОтчетности(РезФинРез, "2240", 4);
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2255", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2270", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2200", 4,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2220", 4,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3520", НомерКолонкиДДС, "Ф", РезФинРез, "2240", 4,,"-");
		УстановитьЗначениеПоказателя("П" + "3520" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3520" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3520" + НомерКолонкиДДС, Результат);
	КонецЕсли;
	
	// рядок 3521  коригування на  Прибуток (збиток) від участі в капіталі 
	Результат =  ПолучитьПоказательФинОтчетности(РезФинРез, "2255", 3)
		       - ПолучитьПоказательФинОтчетности(РезФинРез, "2200", 3);
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	ЗаполнитьПоказательПоДаннымФинОтчетности("3521", НомерКолонкиДДС, "Ф", РезФинРез, "2255", 3);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3521", НомерКолонкиДДС, "Ф", РезФинРез, "2200", 3,,"-");
	УстановитьЗначениеПоказателя("П" + "3521" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3521" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3521" + НомерКолонкиДДС, Результат);
	
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат =  ПолучитьПоказательФинОтчетности(РезФинРез, "2255", 4)
			       - ПолучитьПоказательФинОтчетности(РезФинРез, "2200", 4);
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		ЗаполнитьПоказательПоДаннымФинОтчетности("3521", НомерКолонкиДДС, "Ф", РезФинРез, "2255", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3521", НомерКолонкиДДС, "Ф", РезФинРез, "2200", 4,,"-");
		УстановитьЗначениеПоказателя("П" + "3521" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3521" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3521" + НомерКолонкиДДС, Результат);	
	КонецЕсли;
	
	// Рядок 3522 
	УстановитьЗначениеПоказателя("П" + "3522" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3522" + 4, 0);		
	УстановитьЗначениеПоказателя("П" + "3522" + 5, 0);		
	УстановитьЗначениеПоказателя("П" + "3522" + 6, 0);		
	
	// Рядок 3523 
	УстановитьЗначениеПоказателя("П" + "3523" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3523" + 4, 0);		
	УстановитьЗначениеПоказателя("П" + "3523" + 5, 0);		
	УстановитьЗначениеПоказателя("П" + "3523" + 6, 0);		
	
	// Рядок  3524 коригування на  Зменшення (збільшення) іншої поточної дебіторської  заборгованості
	Результат = ДО(Счет97_1) - КО(Счет74_1);
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П3524" + НомерКолонкиДДС, "Рядок 3524, графа " + НомерКолонкиДДС,	"+", "!ДО", ДО(Счет97_1), Счет97_1,,НачалоГода (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П3524" + НомерКолонкиДДС, , "-", "!КО",КО(Счет74_1), Счет74_1,,НачалоГода (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П" + "3524" + 3, 0);
	УстановитьЗначениеПоказателя("П" + "3524" + 4, 0);
	УстановитьЗначениеПоказателя("П" + "3524" + НомерКолонкиДДС, Результат);

	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ДО2(Счет97_1) - КО2(Счет74_1);
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П3524" + НомерКолонкиДДС, "Рядок 3524, графа " + НомерКолонкиДДС,	"+", "!ДО", ДО2(Счет97_1), Счет97_1,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П3524" + НомерКолонкиДДС, , "-", "!КО",КО2(Счет74_1), Счет74_1,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),  КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		УстановитьЗначениеПоказателя("П" + "3524" + 5, 0);
		УстановитьЗначениеПоказателя("П" + "3524" + 6, 0);
		УстановитьЗначениеПоказателя("П" + "3524" + НомерКолонкиДДС, Результат);
	КонецЕсли;
	
	// Рядок  3526   Зменшення (відновлення) корисності необоротних активів							
	Результат = ДО(Счет97_2) - КО(Счет74_2);
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П" + "3526" + НомерКолонкиДДС, "Рядок 3526, графа " + НомерКолонкиДДС,	"+", "!ДО", ДО(Счет97_2), Счет97_2,,НачалоГода (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П" + "3526" + НомерКолонкиДДС, , "-", "!КО",КО(Счет74_2), Счет74_2,,НачалоГода (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П" + "3526" + 3, 0);
	УстановитьЗначениеПоказателя("П" + "3526" + 4, 0);
	УстановитьЗначениеПоказателя("П" + "3526" + НомерКолонкиДДС, Результат);

	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ДО2(Счет97_2) - КО2(Счет74_2);
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П" + "3526" + НомерКолонкиДДС, "Рядок 3526, графа " + НомерКолонкиДДС,	"+", "!ДО", ДО2(Счет97_2), Счет97_2,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П" + "3526" + НомерКолонкиДДС, , "-", "!КО",КО2(Счет74_2), Счет74_2,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)),  КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		УстановитьЗначениеПоказателя("П" + "3526" + 5, 0);
		УстановитьЗначениеПоказателя("П" + "3526" + 6, 0);
		УстановитьЗначениеПоказателя("П" + "3526" + НомерКолонкиДДС, Результат);	
	КонецЕсли;
	
	// рядок 3540 Фінансові витрати							
	ЗаполнитьПоказательПоДаннымФинОтчетности("3540", 4, "Ф", РезФинРез, "2250", 3);
	Если флЗаполнятьПрошлыйПериод Тогда	
		ЗаполнитьПоказательПоДаннымФинОтчетности("3540", 6, "Ф", РезФинРез, "2250", 4);
	КонецЕсли;
	
	// рядок 3550 Зменшення (збільшення) оборотних активів
	Если Истина Тогда //группировка
		
		//Уменьшение(увеличение) оборотных активов 
		//Поступление : Уменьшение статей оборотных активов
		Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1100", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1100", 3)
				  //не учитываем изменение в 15 счете в связи с измененями в запасах
				  - ОБ(Счет15,Счет20) - ОБ(Счет15,Счет22) - ОБ(Счет15,Счет21) 
				  - ОБ(Счет15,Счет23) - ОБ(Счет15,Счет25) - ОБ(Счет15,Счет26)
				  - ОБ(Счет15,Счет27) - ОБ(Счет15,Счет28)
				  
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1110", 4)
				  - ПолучитьПоказательФинОтчетности(РезБаланс, "1110", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1120", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1120", 3)
				  
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1125", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1125", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1130", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1130", 3)
				  //не учитываем дебиторскую задолженность, которая должна быть погашена необоротными активами
				  - (ТаблицаПоИнвестФинансДеят.Итог("КонечныйОстатокДт")-ТаблицаПоИнвестФинансДеят.Итог("НачальныйОстатокДт")) 
				  
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1135", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1135", 3)
				  //не должно учитываться изменение дебиторской задолженности по налогу на прибыль
                  -(ПолучитьПоказательФинОтчетности(РезБаланс, "1136", 4) - ПолучитьПоказательФинОтчетности(РезБаланс, "1136", 3))
				  
				  //не должно учитываться изменение дебиторской задолженности по начисленным процентам
				  - (СКДР(Счет68_4) - СНДР(Счет68_4)) 
				  
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1140", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1140", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1145", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1145", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1155", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1155", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1170", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1170", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1190", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1190", 3);
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 4;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 3;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1100", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1100", 3,,"-");
				  
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ(Счет15,Счет20),Счет15,Счет20);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ(Счет15,Счет21),Счет15,Счет21);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ(Счет15,Счет22),Счет15,Счет22);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ(Счет15,Счет23),Счет15,Счет23);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ(Счет15,Счет25),Счет15,Счет25);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ(Счет15,Счет26),Счет15,Счет26);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ(Счет15,Счет27),Счет15,Счет27);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ(Счет15,Счет28),Счет15,Счет28);
				  
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1110", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1110", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1120", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1120", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1125", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1125", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1130", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1130", 3,,"-");
		
		ДобавитьРасшифровкуПоИзменениюСтатейНеОперДеятельности("П" + "3550" + НомерКолонкиДДС, ТаблицаПоИнвестФинансДеят, "Дт", "-");  				  
				  
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1135", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1135", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1136", 4,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1136", 3);

		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!СКДР",СКДР(Счет68_4),Счет68_4);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"+", "!СНДР",СНДР(Счет68_4),Счет68_4);
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1140", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1140", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1145", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1145", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1155", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1155", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1170", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1170", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1190", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБаланс, "1190", 3,,"-");
		
		УстановитьЗначениеПоказателя("П" + "3550" + 3, 0);	
		УстановитьЗначениеПоказателя("П" + "3550" + 4, 0);	
		УстановитьЗначениеПоказателя("П" + "3550" + НомерКолонкиДДС, Результат);
		
		
		// на конец периода
		//Уменьшение(увеличение) оборотных активов 
		//Поступление : Уменьшение статей оборотных активов
		Если флЗаполнятьПрошлыйПериод Тогда	
			Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1100", 100), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1100", 100), 3)
				  //не учитываем изменение в 15 счете в связи с измененями в запасах
				  - ОБ2(Счет15,Счет20) - ОБ2(Счет15,Счет22) - ОБ2(Счет15,Счет21) 
				  - ОБ2(Счет15,Счет23) - ОБ2(Счет15,Счет25) - ОБ2(Счет15,Счет26)
				  - ОБ2(Счет15,Счет27) - ОБ2(Счет15,Счет28)
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1110","110"), 4)
				  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1110","110"), 3)
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1120","120"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1120","120"), 3)
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1125","130"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1125","130"), 3)
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1130","140"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1130","140"), 3)
				  //не учитываем дебиторскую задолженность, которая должна быть погашена необоротными активами
				  - (ТаблицаПоИнвестФинансДеятПрошлыйГод.Итог("КонечныйОстатокДт")-ТаблицаПоИнвестФинансДеятПрошлыйГод.Итог("НачальныйОстатокДт")) 
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1135","150"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1135","150"), 3)
				  //не должно учитываться изменение дебиторской задолженности по налогу на прибыль
                  - ?(НЕ Отчет2013,
				       ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1136", 4) - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1136", 3),
					   СКДР2(Счет64_1_3) - СНДР2(Счет64_1_3))
				  
				  //не должно учитываться изменение дебиторской задолженности по начисленным процентам
				  - (СКДР2(Счет68_4) - СНДР2(Счет68_4)) 
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1140","160"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1140","160"), 3)
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1145","170"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1145","170"), 3)
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1155","180"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1155","180"), 3)
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1170","270"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1170","270"), 3)
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1190","200"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1190","200"), 3)
				  
				  + ?(НЕ Отчет2013, 0, ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "210", 4))
				  - ?(НЕ Отчет2013, 0, ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "210", 3))
				  + ?(НЕ Отчет2013, 0, ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "250", 4))
				  - ?(НЕ Отчет2013, 0, ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "250", 3));
		
			Если Результат>=0 Тогда
				НомерКолонкиДДС = 6;
			Иначе	
				Результат = - Результат;
				НомерКолонкиДДС = 5;
			КонецЕсли;
		
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1100","100"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1100","100"), 3,Истина,"-");
					  
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ2(Счет15,Счет20),Счет15,Счет20, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ2(Счет15,Счет21),Счет15,Счет21, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ2(Счет15,Счет22),Счет15,Счет22, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ2(Счет15,Счет23),Счет15,Счет23, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ2(Счет15,Счет25),Счет15,Счет25, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ2(Счет15,Счет26),Счет15,Счет26, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ2(Счет15,Счет27),Счет15,Счет27, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!ОБ",ОБ2(Счет15,Счет28),Счет15,Счет28, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
					  
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1110","110"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1110","110"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1120","120"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1120","120"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1125","130"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1125","130"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1130","140"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1130","140"), 3,Истина,"-");
			
			ДобавитьРасшифровкуПоИзменениюСтатейНеОперДеятельности("П" + "3550" + НомерКолонкиДДС, ТаблицаПоИнвестФинансДеятПрошлыйГод, "Дт", "-");  
					  
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1135","150"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1135","150"), 3,Истина,"-");
			Если Не Отчет2013 Тогда
				ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1136", 4,Истина,"-");
				ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1136", 3,Истина);
			Иначе		
				_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!СКДР",СКДР2(Счет64_1_3),Счет64_1_3,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
				_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"+", "!СНДР",СНДР2(Счет64_1_3),Счет64_1_3,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			КонецЕсли;

			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"-", "!СКДР",СКДР2(Счет68_4),Счет68_4,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3550" + НомерКолонкиДДС, "0",	"+", "!СНДР",СНДР2(Счет68_4),Счет68_4,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1140","160"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1140","160"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1145","170"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1145","170"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1155","180"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1155","180"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1170","270"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1170","270"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1190","200"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1190","200"), 3,Истина,"-");
			
			Если Отчет2013 Тогда
				ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "210", 4,Истина);
				ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "210", 3,Истина,"-");

				ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "250", 4,Истина);
				ЗаполнитьПоказательПоДаннымФинОтчетности("3550", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "250", 3,Истина,"-");
			КонецЕсли;
			
			УстановитьЗначениеПоказателя("П" + "3550" + 5, 0);	
			УстановитьЗначениеПоказателя("П" + "3550" + 6, 0);	
			УстановитьЗначениеПоказателя("П" + "3550" + НомерКолонкиДДС, Результат);
		КонецЕсли; 
		
	КонецЕсли; 
	
	// рядок 3551   Збільшення (зменшення) запасів
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1100", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1100", 3)
			  //не учитываем изменение в 15 счете в связи с измененями в запасах
			  - ОБ(Счет15,Счет20) - ОБ(Счет15,Счет22) - ОБ(Счет15,Счет21) 
			  - ОБ(Счет15,Счет23) - ОБ(Счет15,Счет25) - ОБ(Счет15,Счет26)
			  - ОБ(Счет15,Счет27) - ОБ(Счет15,Счет28);
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 4;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 3;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБаланс, "1100", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБаланс, "1100", 3,,"-");
			  
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ(Счет15,Счет20),Счет15,Счет20);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ(Счет15,Счет21),Счет15,Счет21);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ(Счет15,Счет22),Счет15,Счет22);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ(Счет15,Счет23),Счет15,Счет23);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ(Счет15,Счет25),Счет15,Счет25);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ(Счет15,Счет26),Счет15,Счет26);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ(Счет15,Счет27),Счет15,Счет27);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ(Счет15,Счет28),Счет15,Счет28);
	
	УстановитьЗначениеПоказателя("П" + "3551" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3551" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3551" + НомерКолонкиДДС, Результат);
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1100", 100), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1100", 100), 3);
		Если Отчет2013 Тогда
		Результат = Результат
					+ ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, 120, 4)
					- ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, 120, 3)
					+ ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, 130, 4)
					- ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, 130, 3)
					+ ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, 140, 4)
					- ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, 140, 3);
		КонецЕсли;			  
		Результат = Результат
			  //не учитываем изменение в 15 счете в связи с измененями в запасах
				  - ОБ2(Счет15,Счет20) - ОБ2(Счет15,Счет22) - ОБ2(Счет15,Счет21) 
				  - ОБ2(Счет15,Счет23) - ОБ2(Счет15,Счет25) - ОБ2(Счет15,Счет26)
				  - ОБ2(Счет15,Счет27) - ОБ2(Счет15,Счет28);
				  
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 6;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 5;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1100","100"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1100","100"), 3,Истина,"-");
		Если Отчет2013 Тогда
			ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "120", 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "120", 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "130", 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "130", 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "140", 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3551", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "140", 3,Истина,"-");
		КонецЕсли;		  
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ2(Счет15,Счет20),Счет15,Счет20, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ2(Счет15,Счет21),Счет15,Счет21, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ2(Счет15,Счет22),Счет15,Счет22, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ2(Счет15,Счет23),Счет15,Счет23, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ2(Счет15,Счет25),Счет15,Счет25, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ2(Счет15,Счет26),Счет15,Счет26, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ2(Счет15,Счет27),Счет15,Счет27, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3551" + НомерКолонкиДДС, "",	"-", "!ОБ",ОБ2(Счет15,Счет28),Счет15,Счет28, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		
		УстановитьЗначениеПоказателя("П" + "3551" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3551" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3551" + НомерКолонкиДДС, Результат);
	КонецЕсли;		  

	
	// рядок 3552    Збільшення (зменшення) поточних біологічних активів							
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1110", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1110", 3);
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 4;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 3;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3552", НомерКолонкиДДС, "Б", РезБаланс, "1110", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3552", НомерКолонкиДДС, "Б", РезБаланс, "1110", 3,,"-");
	
	УстановитьЗначениеПоказателя("П" + "3552" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3552" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3552" + НомерКолонкиДДС, Результат);
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1110", 110), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1110", 110), 3);
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 6;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 5;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3552", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1100","110"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3552", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1100","110"), 3,Истина,"-");
		
		УстановитьЗначениеПоказателя("П" + "3552" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3552" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3552" + НомерКолонкиДДС, Результат);
	КонецЕсли;

	
	// рядок 3553      Збільшення (зменшення) дебіторської заборгованості за продукцію, товари, роботи, послуги
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1125", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1125", 3)
			  //не учитываем дебиторскую задолженность, которая должна быть погашена необоротными активами
			  - (ТаблицаПоИнвестФинансДеят.Итог("КонечныйОстатокДт")-ТаблицаПоИнвестФинансДеят.Итог("НачальныйОстатокДт"));
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 4;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 3;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3553", НомерКолонкиДДС, "Б", РезБаланс, "1125", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3553", НомерКолонкиДДС, "Б", РезБаланс, "1125", 3,,"-");
	
	ДобавитьРасшифровкуПоИзменениюСтатейНеОперДеятельности("П" + "3553" + НомерКолонкиДДС, ТаблицаПоИнвестФинансДеят, "Дт", "-");	
	
	УстановитьЗначениеПоказателя("П" + "3553" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3553" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3553" + НомерКолонкиДДС, Результат);
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1125", 160), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1125", 160), 3)
				  //не учитываем дебиторскую задолженность, которая должна быть погашена необоротными активами
				  - (ТаблицаПоИнвестФинансДеятПрошлыйГод.Итог("КонечныйОстатокДт")-ТаблицаПоИнвестФинансДеятПрошлыйГод.Итог("НачальныйОстатокДт"));
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 6;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 5;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3553", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1125","160"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3553", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1125","160"), 3,Истина,"-");
		
		ДобавитьРасшифровкуПоИзменениюСтатейНеОперДеятельности("П" + "3553" + НомерКолонкиДДС, ТаблицаПоИнвестФинансДеятПрошлыйГод, "Дт", "-");

		УстановитьЗначениеПоказателя("П" + "3553" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3553" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3553" + НомерКолонкиДДС, Результат);
	КонецЕсли;
	
	
	// рядок 3554   "  Зменшення (збільшення) іншої поточної дебіторської заборгованості"							
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1155", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1155", 3);
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 4;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 3;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3554", НомерКолонкиДДС, "Б", РезБаланс, "1155", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3554", НомерКолонкиДДС, "Б", РезБаланс, "1155", 3,,"-");
	
	УстановитьЗначениеПоказателя("П" + "3554" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3554" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3554" + НомерКолонкиДДС, Результат);
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1155", 210), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1155", 210), 3);
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 6;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 5;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3554", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1155","210"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3554", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1155","210"), 3,Истина,"-");
		
		УстановитьЗначениеПоказателя("П" + "3554" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3554" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3554" + НомерКолонкиДДС, Результат);
	КонецЕсли;
	
	
	// рядок 3556     Зменшення (збільшення) витрат майбутніх періодів						
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1170", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1170", 3);
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 4;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 3;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3556", НомерКолонкиДДС, "Б", РезБаланс, "1170", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3556", НомерКолонкиДДС, "Б", РезБаланс, "1170", 3,,"-");
	
	УстановитьЗначениеПоказателя("П" + "3556" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3556" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3556" + НомерКолонкиДДС, Результат);
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1170", 270), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1170", 270), 3);
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 6;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 5;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3556", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1170","270"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3556", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1170","270"), 3,Истина,"-");
		
		УстановитьЗначениеПоказателя("П" + "3556" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3556" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3556" + НомерКолонкиДДС, Результат);
	КонецЕсли;
	
	
	// рядок 3557      Зменшення (збільшення) інших оборотних активів
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1190", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1190", 3);
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 4;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 3;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3557", НомерКолонкиДДС, "Б", РезБаланс, "1190", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3557", НомерКолонкиДДС, "Б", РезБаланс, "1190", 3,,"-");
	
	УстановитьЗначениеПоказателя("П" + "3557" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3557" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3557" + НомерКолонкиДДС, Результат);
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1190", 250), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1190", 250), 3);
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 6;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 5;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3557", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1190","250"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3557", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1190","250"), 3,Истина,"-");
		
		УстановитьЗначениеПоказателя("П" + "3557" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3557" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3557" + НомерКолонкиДДС, Результат);
	КонецЕсли;
	
	
	// рядок 3560   Збільшення (зменшення) поточних зобов'язань
	Если Истина Тогда //группировка
	
		Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1605", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1605", 3)
				  
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1615", 4)
				  - ПолучитьПоказательФинОтчетности(РезБаланс, "1615", 3)
				  //не учитываем кредиторскую задолженность, которая должна быть погашена необоротными активами
				  - (ТаблицаПоИнвестФинансДеят.Итог("КонечныйОстатокКт")-ТаблицаПоИнвестФинансДеят.Итог("НачальныйОстатокКт")) 
				  
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1635", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1635", 3)
				  
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1620", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1620", 3)
				  // вычтем изменения по налогу на прибыль
				  -(ПолучитьПоказательФинОтчетности(РезБаланс, "1621", 4) - ПолучитьПоказательФинОтчетности(РезБаланс, "1621", 3))
				  
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1625", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1625", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1630", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1630", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1645", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1645", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1690", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1690", 3)
				  + ПолучитьПоказательФинОтчетности(РезБаланс, "1665", 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1665", 3);
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 3;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 4;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1605", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1605", 3,,"-");
					  
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1615", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1615", 3,,"-");
		
		ДобавитьРасшифровкуПоИзменениюСтатейНеОперДеятельности("П" + "3560" + НомерКолонкиДДС, ТаблицаПоИнвестФинансДеят, "Кт", "-");

		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1635", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1635", 3,,"-");
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1620", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1620", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1621", 4,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1621", 3);
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1625", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1625", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1630", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1630", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1645", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1645", 3,,"-");
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1690", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1690", 3,,"-");
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1665", 4);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБаланс, "1665", 3,,"-");
		
		УстановитьЗначениеПоказателя("П" + "3560" + 3, 0);	
		УстановитьЗначениеПоказателя("П" + "3560" + 4, 0);	
		УстановитьЗначениеПоказателя("П" + "3560" + НомерКолонкиДДС, Результат);
		
		
		// на конец периода
		Если флЗаполнятьПрошлыйПериод Тогда	
			Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1605", 520), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013, "1605", 520), 3)
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1615","530"), 4)
				  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1615","530"), 3)
				  
				  //не учитываем кредиторскую задолженность, которая должна быть погашена необоротными активами
				  - (ТаблицаПоИнвестФинансДеятПрошлыйГод.Итог("КонечныйОстатокКт")-ТаблицаПоИнвестФинансДеятПрошлыйГод.Итог("НачальныйОстатокКт")) 
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1635","540"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1635","540"), 3)
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1620","550"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1620","550"), 3)
				  - ?(НЕ Отчет2013,
				  	  ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1621", 4) - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1621", 3),
					   - (СККР2(Счет64_1_3) - СНКР2(Счет64_1_3)))
					   
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1625","560"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1625","560"), 3)
				  + ?(Не Отчет2013,
				  	  0,
					  ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "570", 4) - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "570", 3))
				  
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1630","580"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1630","580"), 3)
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1645","600"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1645","600"), 3)
				  
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1690","610"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1690","610"), 3)
				  + ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1665","630"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1665","630"), 3);
		
			Если Результат>=0 Тогда
				НомерКолонкиДДС = 5;
			Иначе	
				Результат = - Результат;
				НомерКолонкиДДС = 6;
			КонецЕсли;
		
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1605","520"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1605","520"), 3,Истина,"-");
					  
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1615","530"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1615","530"), 3,Истина,"-");
			
			ДобавитьРасшифровкуПоИзменениюСтатейНеОперДеятельности("П" + "3560" + НомерКолонкиДДС, ТаблицаПоИнвестФинансДеятПрошлыйГод, "Кт", "-");

			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1635","540"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1635","540"), 3,Истина,"-");
			
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1620","550"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1620","550"), 3,Истина,"-");
			Если НЕ Отчет2013 Тогда
				ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1621", 4,Истина,"-");
				ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1621", 3,Истина);
			Иначе	
				_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3560" + НомерКолонкиДДС, "0",	"-", "!СККР",СККР2(Счет64_1_3),Счет64_1_3,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
				_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3560" + НомерКолонкиДДС, "0",	"+", "!СНКР",СНКР2(Счет64_1_3),Счет64_1_3,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			КонецЕсли;
		
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1625","560"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1625","560"), 3,Истина,"-");
			Если НЕ Отчет2013 Тогда
			Иначе
				ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "570", 4,Истина);
				ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "570", 3,Истина,"-");
			КонецЕсли;
			
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1630","580"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1630","580"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1645","600"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1645","600"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1690","610"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1690","610"), 3,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1665","630"), 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3560", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1665","630"), 3,Истина,"-");
			
			УстановитьЗначениеПоказателя("П" + "3560" + 5, 0);	
			УстановитьЗначениеПоказателя("П" + "3560" + 6, 0);	
			УстановитьЗначениеПоказателя("П" + "3560" + НомерКолонкиДДС, Результат);
		КонецЕсли;
	
	КонецЕсли;

	// рядок 3561 "Збільшення (зменшення) поточної кредиторської заборгованості за товари, роботи, послуги"
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1615", 4)
			  - ПолучитьПоказательФинОтчетности(РезБаланс, "1615", 3)
			  //не учитываем кредиторскую задолженность, которая должна быть погашена необоротными активами
			  - (ТаблицаПоИнвестФинансДеят.Итог("КонечныйОстатокКт")-ТаблицаПоИнвестФинансДеят.Итог("НачальныйОстатокКт")); 
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
				  
	ЗаполнитьПоказательПоДаннымФинОтчетности("3561", НомерКолонкиДДС, "Б", РезБаланс, "1615", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3561", НомерКолонкиДДС, "Б", РезБаланс, "1615", 3,,"-");
	
	ДобавитьРасшифровкуПоИзменениюСтатейНеОперДеятельности("П" + "3561" + НомерКолонкиДДС, ТаблицаПоИнвестФинансДеят, "Кт", "-");	
	
	УстановитьЗначениеПоказателя("П" + "3561" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3561" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3561" + НомерКолонкиДДС, Результат);
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1615","530"), 4)
				  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1615","530"), 3)
				  
				  //не учитываем кредиторскую задолженность, которая должна быть погашена необоротными активами
				  - (ТаблицаПоИнвестФинансДеятПрошлыйГод.Итог("КонечныйОстатокКт")-ТаблицаПоИнвестФинансДеятПрошлыйГод.Итог("НачальныйОстатокКт")); 
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3561", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1615","530"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3561", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1615","530"), 3,Истина,"-");
		
		ДобавитьРасшифровкуПоИзменениюСтатейНеОперДеятельности("П" + "3561" + НомерКолонкиДДС, ТаблицаПоИнвестФинансДеятПрошлыйГод, "Кт", "-");	
		
		УстановитьЗначениеПоказателя("П" + "3561" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3561" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3561" + НомерКолонкиДДС, Результат);
	КонецЕсли;

	
	// рядок 3562 Збільшення (зменшення) поточної кредиторської заборгованості за розрахунками з бюджетом
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1620", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1620", 3)
			  // вычтем изменения по налогу на прибыль
			  -(ПолучитьПоказательФинОтчетности(РезБаланс, "1621", 4) - ПолучитьПоказательФинОтчетности(РезБаланс, "1621", 3));
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	ЗаполнитьПоказательПоДаннымФинОтчетности("3562", НомерКолонкиДДС, "Б", РезБаланс, "1620", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3562", НомерКолонкиДДС, "Б", РезБаланс, "1620", 3,,"-");
	ЗаполнитьПоказательПоДаннымФинОтчетности("3562", НомерКолонкиДДС, "Б", РезБаланс, "1621", 4,,"-");
	ЗаполнитьПоказательПоДаннымФинОтчетности("3562", НомерКолонкиДДС, "Б", РезБаланс, "1621", 3);
	
	УстановитьЗначениеПоказателя("П" + "3562" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3562" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3562" + НомерКолонкиДДС, Результат);
	
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1620","550"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1620","550"), 3)
				  - ?(НЕ Отчет2013,
				  	  ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1621", 4) - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "1621", 3),
					   - (СККР2(Счет64_1_3) - СНКР2(Счет64_1_3)));
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3562", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1620","550"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3562", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1620","550"), 3,Истина,"-");
		Если НЕ Отчет2013 Тогда
			ЗаполнитьПоказательПоДаннымФинОтчетности("3562", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1621", 4,Истина,"-");
			ЗаполнитьПоказательПоДаннымФинОтчетности("3562", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "1621", 3,Истина);
		Иначе	
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3562" + НомерКолонкиДДС, "",	"-", "!СККР",СККР2(Счет64_1_3),Счет64_1_3,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П" + "3562" + НомерКолонкиДДС, "",	"+", "!СНКР",СНКР2(Счет64_1_3),Счет64_1_3,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		КонецЕсли;
		
		УстановитьЗначениеПоказателя("П" + "3562" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3562" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3562" + НомерКолонкиДДС, Результат);
	КонецЕсли;

	// рядок 3563 Збільшення (зменшення) поточної кредиторської заборгованості за розрахунками зі страхування
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1625", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1625", 3);
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3563", НомерКолонкиДДС, "Б", РезБаланс, "1625", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3563", НомерКолонкиДДС, "Б", РезБаланс, "1625", 3,,"-");
	
	УстановитьЗначениеПоказателя("П" + "3563" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3563" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3563" + НомерКолонкиДДС, Результат);
	
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1625","560"), 4)
       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1625","560"), 3)
			  + ?(Не Отчет2013,
			  	  0,
				  ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "570", 4) - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, "570", 3));
	
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3563", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1625","560"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3563", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1625","560"), 3,Истина,"-");
		Если НЕ Отчет2013 Тогда
		Иначе
			ЗаполнитьПоказательПоДаннымФинОтчетности("3563", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "570", 4,Истина);
			ЗаполнитьПоказательПоДаннымФинОтчетности("3563", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, "570", 3,Истина,"-");
		КонецЕсли;

		УстановитьЗначениеПоказателя("П" + "3563" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3563" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3563" + НомерКолонкиДДС, Результат);
	КонецЕсли;
	
	
	// рядок 3564 Збільшення (зменшення) поточної кредиторської заборгованості за розрахунками з оплати праці
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1630", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1630", 3);
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3564", НомерКолонкиДДС, "Б", РезБаланс, "1630", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3564", НомерКолонкиДДС, "Б", РезБаланс, "1630", 3,,"-");
	
	УстановитьЗначениеПоказателя("П" + "3564" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3564" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3564" + НомерКолонкиДДС, Результат);
	
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1630","580"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1630","580"), 3);
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3564", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1630","580"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3564", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1630","580"), 3,Истина,"-");

		УстановитьЗначениеПоказателя("П" + "3564" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3564" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3564" + НомерКолонкиДДС, Результат);	
	КонецЕсли;
	
	
	// рядок 3566 Збільшення (зменшення) поточної кредиторської заборгованості за розрахунками з оплати праці
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1665", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1665", 3);
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3566", НомерКолонкиДДС, "Б", РезБаланс, "1665", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3566", НомерКолонкиДДС, "Б", РезБаланс, "1665", 3,,"-");
	
	УстановитьЗначениеПоказателя("П" + "3566" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3566" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3566" + НомерКолонкиДДС, Результат);
	
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1665","630"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1665","630"), 3);
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3566", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1665","630"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3566", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1665","630"), 3,Истина,"-");

		УстановитьЗначениеПоказателя("П" + "3566" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3566" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3566" + НомерКолонкиДДС, Результат);	
	КонецЕсли;
	
	
	// рядок 3567 Збільшення (зменшення) інших поточних зобов'язань							
	Результат = ПолучитьПоказательФинОтчетности(РезБаланс, "1690", 4)
       		  - ПолучитьПоказательФинОтчетности(РезБаланс, "1690", 3);
	
	Если Результат>=0 Тогда
		НомерКолонкиДДС = 3;
	Иначе	
		Результат = - Результат;
		НомерКолонкиДДС = 4;
	КонецЕсли;
	
	ЗаполнитьПоказательПоДаннымФинОтчетности("3567", НомерКолонкиДДС, "Б", РезБаланс, "1690", 4);
	ЗаполнитьПоказательПоДаннымФинОтчетности("3567", НомерКолонкиДДС, "Б", РезБаланс, "1690", 3,,"-");
	
	УстановитьЗначениеПоказателя("П" + "3567" + 3, 0);	
	УстановитьЗначениеПоказателя("П" + "3567" + 4, 0);	
	УстановитьЗначениеПоказателя("П" + "3567" + НомерКолонкиДДС, Результат);
	
	
	// на конец периода
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1690","610"), 4)
	       		  - ПолучитьПоказательФинОтчетности(РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1690","610"), 3);
		
		Если Результат>=0 Тогда
			НомерКолонкиДДС = 5;
		Иначе	
			Результат = - Результат;
			НомерКолонкиДДС = 6;
		КонецЕсли;
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("3567", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1690","610"), 4,Истина);
		ЗаполнитьПоказательПоДаннымФинОтчетности("3567", НомерКолонкиДДС, "Б", РезБалансПрошлыйПериод, ?(НЕ Отчет2013,"1690","610"), 3,Истина,"-");

		УстановитьЗначениеПоказателя("П" + "3567" + 5, 0);	
		УстановитьЗначениеПоказателя("П" + "3567" + 6, 0);	
		УстановитьЗначениеПоказателя("П" + "3567" + НомерКолонкиДДС, Результат);	
	КонецЕсли;
	
	
	// рядок 3580 Сплачений податок на прибуток
	Результат = ОБ(Счет64_1_3,Счет31) + ОБ(Счет64_1_3,Счет30); 
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П35804", "Рядок 3580, Графа 4",	"+", "!ОБ",ОБ(Счет64_1_3,Счет31), Счет64_1_3,Счет31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П35804", "",	"+", "!ОБ",ОБ(Счет64_1_3,Счет30), Счет64_1_3,Счет30);
	УстановитьЗначениеПоказателя("П35804", Результат);
	
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ОБ2(Счет64_1_3,Счет31) + ОБ2(Счет64_1_3,Счет30); 
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П35806", "Рядок 3580, Графа 6",	"+", "!ОБ",ОБ2(Счет64_1_3,Счет31), Счет64_1_3,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П35806", "",	"+", "!ОБ",ОБ2(Счет64_1_3,Счет30), Счет64_1_3,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		УстановитьЗначениеПоказателя("П35806", Результат);
	КонецЕсли;
	
	
	// рядок 3585 Сплачені відсотки
	Результат = ОБ(Счет68_4,Счет31) + ОБ(Счет68_4,Счет30); 
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П35854", "Рядок 3585, Графа 4",	"+", "!ОБ",ОБ(Счет68_4,Счет31), Счет68_4,Счет31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П35854", "",	"+", "!ОБ",ОБ(Счет68_4,Счет30), Счет68_4,Счет30);
	УстановитьЗначениеПоказателя("П35854", Результат);
	
	Если флЗаполнятьПрошлыйПериод Тогда	
		Результат = ОБ2(Счет68_4,Счет31) + ОБ2(Счет68_4,Счет30); 
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П35856", "Рядок 3585, Графа 6",	"+", "!ОБ",ОБ2(Счет68_4,Счет31), Счет68_4,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П35856", "",	"+", "!ОБ",ОБ2(Счет68_4,Счет30), Счет68_4,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
		УстановитьЗначениеПоказателя("П35856", Результат);
	КонецЕсли;
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//// ІІ. Рух коштів у результаті інвестиційної діяльності
	//Реалізіція : фінансових інвестицій
	П32003 = КО(Счет74_1);
	УстановитьЗначениеПоказателя("П32003", П32003);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32003", "Рядок 3200, графа ""За звітний період""",	  "+", "!КО",П32003, Счет74_1);
	
	П32004 = КО2(Счет74_1);
	УстановитьЗначениеПоказателя("П32004", П32004);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32004", "Рядок 3200, графа ""За попередній період""", "+", "!КО",П32004, Счет74_1,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	//Реалізіція : необоротних активів
	П32053 = 0;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32053", "Рядок 3205, графа ""За звітний період""",	"+", "#",0);
	ПолучитьОборотНеОпреДеят(П32053, "П32053", "+", "Кт",  "Инвест",  Счет36, Счет68_1, Счет37_7_1, Счет37_7_2, Счет68_5);
	УстановитьЗначениеПоказателя("П32053", П32053);
	
	П32054 = 0;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32054", "Рядок 3205, графа ""За попередній період""",	"+", "#",0);
	ПолучитьОборотНеОпреДеят(П32054, "П32054", "+", "Кт",  "Инвест",  Счет36, Счет68_1, Счет37_7_1, Счет37_7_2, Счет68_5);
	УстановитьЗначениеПоказателя("П32054", П32054);

	
	// Отримано : відсотки
	П32153 = КО(Счет73_2);
	УстановитьЗначениеПоказателя("П32153", П32153);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32153", "Рядок 3215, графа ""За звітний період""",	"+", "!КО",П32153, Счет73_2);
	
	П32154 = КО2(Счет73_2);
	УстановитьЗначениеПоказателя("П32154", П32154);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32154", "Рядок 3215, графа ""За попередній період""",	"+", "!КО",П32154, Счет73_2,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	// Отримано : дивіденди
	П32203 = КО(Счет73_1);
	УстановитьЗначениеПоказателя("П32203", П32203);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32203", "Рядок 3220, графа ""За звітний період""",	"+", "!КО",П32203, Счет73_1);
	
	П32204 = КО2(Счет73_1);
	УстановитьЗначениеПоказателя("П32204", П32204);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32204", "Рядок 3220, графа ""За попередній період""",	"+", "!КО",П32204, Счет73_1,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	// Надходження від деривативів
	П32253 = ОБ(Счет30,Счет37_9) + ОБ(Счет31,Счет37_9);
	УстановитьЗначениеПоказателя("П32253", П32253);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П32253", "Рядок 3225, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет30,Счет37_9),Счет30,Счет37_9);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П32253", "","+", "!ОБ",ОБ(Счет31,Счет37_9),Счет31,Счет37_9);
	
	П32254 = ОБ2(Счет30,Счет37_9) + ОБ2(Счет31,Счет37_9);
	УстановитьЗначениеПоказателя("П32254", П32254);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П32254", "Рядок 3225, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет30,Счет37_9),Счет30,Счет37_9,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П32254", "","+", "!ОБ",ОБ2(Счет31,Счет37_9),Счет31,Счет37_9,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	//Надходження від погашення позик
	П32303 = 0;
	УстановитьЗначениеПоказателя("П32303", П32303);
	П32304 = 0;
	УстановитьЗначениеПоказателя("П32304", П32304);
	
	
	//Надходження від вибуття дочірнього підприємства та іншої господарської одиниці
	П32353 = 0;
	УстановитьЗначениеПоказателя("П32353", П32353);
	П32354 = 0;
	УстановитьЗначениеПоказателя("П32354", П32354);
	
	
	//Інші надходження
	П32503 = КО(Счет73) - П32203 - П32153;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32503", "Рядок 3250, графа ""За звітний період""",	"+", "!КО",КО(Счет73), Счет73);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32503", "0",	"-", "!КО",П32203, Счет73_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32503", "0",	"-", "!КО",П32153, Счет73_2);
	
	ПолучитьОборотНеОпреДеят(П32503, "П32503", "+", "Кт",  "Инвест",  Счет37_1, Счет63);	
	
	УстановитьЗначениеПоказателя("П32503", П32503);
	
	П32504 = КО2(Счет73) - П32204 - П32154;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32504", "Рядок 3250, графа ""За попередній період""",	"+", "!КО",КО2(Счет73), Счет73,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32504", "0",	"-", "!КО",П32204, Счет73_1,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32504", "0",	"-", "!КО",П32154, Счет73_2,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	ПолучитьОборотНеОпреДеят(П32504, "П32504", "+", "Кт",  "Инвест",  Счет37_1, Счет63);	
	
	УстановитьЗначениеПоказателя("П32504", П32504);
	
	
	//Придбання : фінансових інвестицій
	П32553 = ДО(Счет14) + ДО(Счет35_2);
	УстановитьЗначениеПоказателя("П32553", П32553);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32553", "Рядок 3255, графа ""За звітний період""",	"+", "!ДО",ДО(Счет14), Счет14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32553", "",	"+", "!ДО",ДО(Счет35_2), Счет35_2);
	
	П32554 = ДО2(Счет14) + ДО2(Счет35_2);
	УстановитьЗначениеПоказателя("П32554", П32554);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32554", "Рядок 3255, графа ""За попередній період""",	"+", "!ДО",ДО2(Счет14), Счет14,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32554", "",	"+", "!ДО",ДО2(Счет35_2), Счет35_2,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	//придбання необоротних активів
	П32603 = 0;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32603", "Рядок 3260, графа ""За звітний період""",	"+", "#",0);
	ПолучитьОборотНеОпреДеят(П32603, "П32603", "+", "Дт",  "Инвест",  Счет37_1, Счет63, Счет37_7_1, Счет37_7_2, Счет68_5);	
	УстановитьЗначениеПоказателя("П32603", П32603);
	
	П32604 = 0;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32604", "Рядок 3260, графа ""За попередній період""",	"+", "#",0);
	ПолучитьОборотНеОпреДеят(П32604, "П32604", "+", "Дт",  "Инвест",  Счет37_1, Счет63, Счет37_7_1, Счет37_7_2, Счет68_5);	
	УстановитьЗначениеПоказателя("П32604", П32604);
	
	
	// Виплати за деривативами
	П32703 = ОБ(Счет37_9, Счет30) + ОБ(Счет37_9, Счет31);
	УстановитьЗначениеПоказателя("П32703", П32703);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П32703", "Рядок 3270, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет37_9,Счет30),Счет37_9,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П32703", "","+", "!ОБ",ОБ(Счет37_9,Счет31),Счет37_9,Счет31);
	
	П32704 = ОБ2(Счет37_9, Счет30) + ОБ2(Счет37_9, Счет31);
	УстановитьЗначениеПоказателя("П32704", П32704);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П32704", "Рядок 3270, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет37_9,Счет30),Счет37_9,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П32704", "","+", "!ОБ",ОБ2(Счет37_9,Счет31),Счет37_9,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	// Витрачання на надання позик
	П32753 = 0;
	УстановитьЗначениеПоказателя("П32753", П32753);
	П32754 = 0;
	УстановитьЗначениеПоказателя("П32754", П32754);
	
	
	// Витрачання на придбання дочірнього підприємства та іншої господарської одиниці
	П32803 = 0;
	УстановитьЗначениеПоказателя("П32803", П32803);
	П32804 = 0;
	УстановитьЗначениеПоказателя("П32804", П32804);
	
	
	//Інші платежі  
	П32903 = 0;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32903", "Рядок 3290, графа ""За звітний період""",	"+", "#",0);
	ПолучитьОборотНеОпреДеят(П32903, "П32903", "+", "Дт",  "Инвест",  Счет36, Счет68_1);	
	УстановитьЗначениеПоказателя("П32903", П32903);
	
	П32904 = 0;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П32904", "Рядок 3290, графа ""За попередній період""",	"+", "#",0);
	ПолучитьОборотНеОпреДеят(П32904, "П32904", "+", "Дт",  "Инвест",  Счет36, Счет68_1);	
	УстановитьЗначениеПоказателя("П32904", П32904);
	
	//// III. Рух коштів у результаті фінансової діяльності
	//Надходження власного капіталу
	П33003 =  ОБ(Счет30,Счет41) + ОБ(Счет30,Счет42)+ ОБ(Счет30,Счет45) + ОБ(Счет30,Счет46)
			+ ОБ(Счет31,Счет41) + ОБ(Счет31,Счет42)+ ОБ(Счет31,Счет45) + ОБ(Счет31,Счет46);
	УстановитьЗначениеПоказателя("П33003", П33003);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33003", "Рядок 3300, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет30,Счет41), Счет30,Счет41);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33003", "",	"+", "!ОБ",ОБ(Счет30,Счет42),Счет30,Счет42);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33003", "",	"+", "!ОБ",ОБ(Счет30,Счет45),Счет30,Счет45);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33003", "",	"+", "!ОБ",ОБ(Счет30,Счет46),Счет30,Счет46);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33003", "",	"+", "!ОБ",ОБ(Счет31,Счет41),Счет31,Счет41);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33003", "",	"+", "!ОБ",ОБ(Счет31,Счет42),Счет31,Счет42);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33003", "",	"+", "!ОБ",ОБ(Счет31,Счет45),Счет31,Счет45);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33003", "",	"+", "!ОБ",ОБ(Счет31,Счет46),Счет31,Счет46);
	
	П33004 = ОБ2(Счет30,Счет41) + ОБ2(Счет30,Счет42)+ ОБ2(Счет30,Счет45) + ОБ2(Счет30,Счет46)
			+ ОБ2(Счет31,Счет41) + ОБ2(Счет31,Счет42)+ ОБ2(Счет31,Счет45) + ОБ2(Счет31,Счет46);
	УстановитьЗначениеПоказателя("П33004", П33004);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33004", "Рядок 3300, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет30,Счет41), Счет30,Счет41,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33004", "",	"+", "!ОБ",ОБ2(Счет30,Счет42),Счет30,Счет42,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33004", "",	"+", "!ОБ",ОБ2(Счет30,Счет45),Счет30,Счет45,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33004", "",	"+", "!ОБ",ОБ2(Счет30,Счет46),Счет30,Счет46,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33004", "",	"+", "!ОБ",ОБ2(Счет31,Счет41),Счет31,Счет41,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33004", "",	"+", "!ОБ",ОБ2(Счет31,Счет42),Счет31,Счет42,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33004", "",	"+", "!ОБ",ОБ2(Счет31,Счет45),Счет31,Счет45,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33004", "",	"+", "!ОБ",ОБ2(Счет31,Счет46),Счет31,Счет46,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	//Отримані позики
	П33053 = ОБ(Счет30,Счет50) + ОБ(Счет30,Счет60) + ОБ(Счет30,Счет52) 
		   + ОБ(Счет31,Счет50) + ОБ(Счет31,Счет60) + ОБ(Счет31,Счет52) ;
	УстановитьЗначениеПоказателя("П33053", П33053);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33053", "Рядок 3305, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет30,Счет50), Счет30,Счет50);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33053", "",	"+", "!ОБ", ОБ(Счет30,Счет60),Счет30,Счет60);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33053", "",	"+", "!ОБ",ОБ(Счет30,Счет52),Счет30,Счет52);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33053", "",	"+", "!ОБ",ОБ(Счет31,Счет50),Счет31,Счет50);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33053", "",	"+", "!ОБ",ОБ(Счет31,Счет60),Счет31,Счет60);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33053", "",	"+", "!ОБ", ОБ(Счет31,Счет52),Счет31,Счет52);
	
	П33054 = ОБ2(Счет30,Счет50) + ОБ2(Счет30,Счет60) + ОБ2(Счет30,Счет52) 
		   + ОБ2(Счет31,Счет50) + ОБ2(Счет31,Счет60) + ОБ2(Счет31,Счет52) ;
	УстановитьЗначениеПоказателя("П33054", П33054);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33054", "Рядок 3305, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет30,Счет50), Счет30,Счет50,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33054", "",	"+", "!ОБ",ОБ2(Счет30,Счет60),Счет30,Счет60,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33054", "",	"+", "!ОБ",ОБ2(Счет30,Счет52),Счет30,Счет52,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33054", "",	"+", "!ОБ",ОБ2(Счет31,Счет50),Счет31,Счет50,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33054", "",	"+", "!ОБ",ОБ2(Счет31,Счет60),Счет31,Счет60,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33054", "",	"+", "!ОБ",ОБ2(Счет31,Счет52),Счет31,Счет52,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	// Надходження від продажу частки в дочірньому підприємстві
	П33103 = 0;
	УстановитьЗначениеПоказателя("П33103", П33103);
	П33104 = 0;
	УстановитьЗначениеПоказателя("П33104", П33104);
	
	
	//Інші надходження
	П33403 = ОБ(Счет30,Счет55) + ОБ(Счет31,Счет55);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33403", "Рядок 3340, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет30,Счет55), Счет30,Счет55);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33403", "0",	"+", "!ОБ",ОБ(Счет31,Счет55),Счет31,Счет55);
	
	ПолучитьОборотНеОпреДеят(П33403, "П33403", "+", "Кт",  "Фин",  Счет36, Счет37_1, Счет37_7_1, Счет37_7_2, Счет63, Счет68_1, Счет68_5);
	
	УстановитьЗначениеПоказателя("П33403", П33403);
	
	П33404 = ОБ2(Счет30,Счет55) + ОБ2(Счет31,Счет55);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33404", "Рядок 3340, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет30,Счет55), Счет30,Счет55,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33404", "0",	"+", "!ОБ",ОБ2(Счет31,Счет55),Счет31,Счет55,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	ПолучитьОборотНеОпреДеят(П33404, "П33404", "+", "Кт",  "Фин",  Счет36, Счет37_1, Счет37_7_1, Счет37_7_2, Счет63, Счет68_1, Счет68_5);
	
	УстановитьЗначениеПоказателя("П33404", П33404);
	
	//   Викуп власних акцій
	П33453 = ОБ(Счет45,Счет30) + ОБ(Счет45,Счет31);
	УстановитьЗначениеПоказателя("П33453", П33453);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33453", "Рядок 3345, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет45,Счет30), Счет45,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33453", "",	"+", "!ОБ",ОБ(Счет45,Счет31),Счет45,Счет31);
	
	П33454 = ОБ2(Счет45,Счет30) + ОБ2(Счет45,Счет31);
	УстановитьЗначениеПоказателя("П33454", П33454);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33454", "Рядок 3345, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет45,Счет30), Счет45,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33454", "",	"+", "!ОБ",ОБ2(Счет45,Счет31),Счет45,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	//Погашення позик
	П33503 = ОБ(Счет50,Счет30) + ОБ(Счет52,Счет30) + ОБ(Счет55,Счет30) + ОБ(Счет60,Счет30) 
		   + ОБ(Счет50,Счет31) + ОБ(Счет52,Счет31) + ОБ(Счет55,Счет31) + ОБ(Счет60,Счет31);
	УстановитьЗначениеПоказателя("П33503", П33503);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33503", "Рядок 3350, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет50,Счет30), Счет50,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33503", "",	"+", "!ОБ",ОБ(Счет52,Счет30),Счет52,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33503", "",	"+", "!ОБ",ОБ(Счет55,Счет30),Счет55,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33503", "",	"+", "!ОБ",ОБ(Счет60,Счет30),Счет60,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33503", "",	"+", "!ОБ",ОБ(Счет50,Счет31),Счет50,Счет31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33503", "",	"+", "!ОБ",ОБ(Счет52,Счет31),Счет52,Счет31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33503", "",	"+", "!ОБ",ОБ(Счет55,Счет31),Счет55,Счет31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33503", "",	"+", "!ОБ",ОБ(Счет60,Счет31),Счет60,Счет31);
	
	П33504 = ОБ2(Счет50,Счет30) + ОБ2(Счет52,Счет30) + ОБ2(Счет55,Счет30) + ОБ2(Счет60,Счет30) 
		   + ОБ2(Счет50,Счет31) + ОБ2(Счет52,Счет31) + ОБ2(Счет55,Счет31) + ОБ2(Счет60,Счет31);
	УстановитьЗначениеПоказателя("П33504", П33504);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33504", "Рядок 3350, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет50,Счет30), Счет50,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33504", "",	"+", "!ОБ",ОБ2(Счет52,Счет30),Счет52,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33504", "",	"+", "!ОБ",ОБ2(Счет55,Счет30),Счет55,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33504", "",	"+", "!ОБ",ОБ2(Счет60,Счет30),Счет60,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33504", "",	"+", "!ОБ",ОБ2(Счет50,Счет31),Счет50,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33504", "",	"+", "!ОБ",ОБ2(Счет52,Счет31),Счет52,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33504", "",	"+", "!ОБ",ОБ2(Счет55,Счет31),Счет55,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33504", "",	"+", "!ОБ",ОБ2(Счет60,Счет31),Счет60,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	                                                                   	
	//Сплачені дивіденди
	П33553 = ОБ(Счет67_1,Счет30) + ОБ(Счет67_1,Счет31);
	УстановитьЗначениеПоказателя("П33553", П33553);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33553", "Рядок 3355, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет67_1,Счет30), Счет67_1,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33553", "",	"+", "!ОБ",ОБ(Счет67_1,Счет31),Счет67_1,Счет31);
	
	П33554 = ОБ2(Счет67_1,Счет30) + ОБ2(Счет67_1,Счет31);
	УстановитьЗначениеПоказателя("П33554", П33554);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33554", "Рядок 3355, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет67_1,Счет30), Счет67_1,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33554", "",	"+", "!ОБ",ОБ2(Счет67_1,Счет31),Счет67_1,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	// Витрачання на сплату відсотків
	П33603 = ОБ(Счет95_1,Счет30) + ОБ(Счет95_1,Счет31);
	УстановитьЗначениеПоказателя("П33603", П33603);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33603", "Рядок 3360, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет95_1,Счет30), Счет95_1,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33603", "",	"+", "!ОБ",ОБ(Счет95_1,Счет31),Счет95_1,Счет31);
	
	П33604 = ОБ2(Счет95_1,Счет30) + ОБ2(Счет95_1,Счет31);
	УстановитьЗначениеПоказателя("П33604", П33604);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33604", "Рядок 3360, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет95_1,Счет30), Счет95_1,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33604", "",	"+", "!ОБ",ОБ2(Счет95_1,Счет31),Счет95_1,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	// Витрачання на сплату заборгованості з фінансової оренди
	П33653 = ОБ(Счет95_2,Счет30) + ОБ(Счет95_2,Счет31);
	УстановитьЗначениеПоказателя("П33653", П33653);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33653", "Рядок 3365, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет95_2,Счет30), Счет95_2,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33653", "",	"+", "!ОБ",ОБ(Счет95_2,Счет31),Счет95_2,Счет31);
	
	П33654 = ОБ2(Счет95_2,Счет30) + ОБ2(Счет95_2,Счет31);
	УстановитьЗначениеПоказателя("П33654", П33654);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33654", "Рядок 3365, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет95_2,Счет30), Счет95_2,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33654", "",	"+", "!ОБ",ОБ2(Счет95_2,Счет31),Счет95_2,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	
	// Витрачання на придбання частки в дочірньому підприємстві
	П33703 = 0;
	УстановитьЗначениеПоказателя("П33703", П33703);
	П33704 = 0;
	УстановитьЗначениеПоказателя("П33704", П33704);
	
	
	// Витрачання на виплати неконтрольованим часткам у дочірніх підприємствах
	П33753 = 0;
	УстановитьЗначениеПоказателя("П33753", П33753);
	П33754 = 0;
	УстановитьЗначениеПоказателя("П33754", П33754);
	
	
	//Інші платежі
	П33903 = ОБ(Счет45,Счет30) + ОБ(Счет45,Счет31) + ОБ(Счет53,Счет30) + ОБ(Счет53,Счет31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33903", "Рядок 3390, графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет53,Счет30), Счет53,Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33903", "0",	"+", "!ОБ",ОБ(Счет53,Счет31),Счет53,Счет31);
	
	ПолучитьОборотНеОпреДеят(П33903, "П33903", "+", "Дт",  "Фин",  Счет36, Счет37_1, Счет37_7_1, Счет37_7_2, Счет63, Счет68_1, Счет68_5);
	
	УстановитьЗначениеПоказателя("П33903", П33903);
	
	П33904 = ОБ2(Счет45,Счет30) + ОБ2(Счет45,Счет31) + ОБ2(Счет53,Счет30) + ОБ2(Счет53,Счет31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33904", "Рядок 3390, графа ""За попередній період""",	"+", "!ОБ",ОБ2(Счет53,Счет30), Счет53,Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П33904", "0",	"+", "!ОБ",ОБ2(Счет53,Счет31),Счет53,Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	ПолучитьОборотНеОпреДеят(П33904, "П33904", "+", "Дт",  "Фин",  Счет36, Счет37_1, Счет37_7_1, Счет37_7_2, Счет63, Счет68_1, Счет68_5);
	
	УстановитьЗначениеПоказателя("П33904", П33904);
	
	//Залишок коштів на початок року
	П34053 = СНД(Счет30) + СНД(Счет31) + СНД(Счет33);
	УстановитьЗначениеПоказателя("П34053", П34053);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П34053", "Рядок 3405, графа 3",	"+", "!СНД",СНД(Счет30), Счет30);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П34053", "",	"+", "!СНД",СНД(Счет31),Счет31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П34053", "",	"+", "!СНД",СНД(Счет33),Счет33);
	
	П34054 = СНД2(Счет30) + СНД2(Счет31) + СНД2(Счет33);
	УстановитьЗначениеПоказателя("П34054", П34054);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П34054", "Рядок 3405, графа 5",	"+", "!СНД",СНД2(Счет30), Счет30,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П34054", "",	"+", "!СНД",СНД2(Счет31),Счет31,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П34054", "",	"+", "!СНД",СНД2(Счет33),Счет33,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)));
	
	Модифицированность = Истина;
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
	// скроем все пустые дополнительные строки
	Для каждого Строка Из мТаблицаСтрок Цикл
		Если ВРЕГ(Строка.ТипСтроки) = ВРЕГ("доп") Тогда
			Строка.ПоказатьСтроку = 	(СтруктураДанныхДДС.Свойство("П" + Строка.КодСтроки + "3") И ЗначениеЗаполнено(СтруктураДанныхДДС["П" + Строка.КодСтроки + "3"]))
									ИЛИ (СтруктураДанныхДДС.Свойство("П" + Строка.КодСтроки + "4") И ЗначениеЗаполнено(СтруктураДанныхДДС["П" + Строка.КодСтроки + "4"]))
									ИЛИ (СтруктураДанныхДДС.Свойство("П" + Строка.КодСтроки + "5") И ЗначениеЗаполнено(СтруктураДанныхДДС["П" + Строка.КодСтроки + "5"]))
									ИЛИ (СтруктураДанныхДДС.Свойство("П" + Строка.КодСтроки + "6") И ЗначениеЗаполнено(СтруктураДанныхДДС["П" + Строка.КодСтроки + "6"]));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогИзПредыдущейДекларации(ПараметрыЗаполненияЗвит1С)


КонецПроцедуры


&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
    Перем Ст8, Ст23;
	
	Если НЕ ТипЗнч(ПараметрыЗаполненияЗвит1С) = Тип("Структура") Тогда
		ПараметрыЗаполненияЗвит1С = Новый Структура;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		// данные текущего баланса и финреза получаем из Звита
		РезФинРез = неопределено;
		РезБаланс = неопределено;
		РезБалансПрошлыйПериод = неопределено;
		
		// получаем данные из Звита 
		НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета))/3;
		Если НомерКвартала = 1 Тогда
			ТипПериода = 10;
		ИначеЕсли НомерКвартала = 2 Тогда
			ТипПериода = 20;	
		ИначеЕсли НомерКвартала = 3 Тогда
			ТипПериода = 25;	
		ИначеЕсли НомерКвартала = 4 Тогда
			ТипПериода = 30;	
		КонецЕсли;
		
		НомерПериода = 1;
	
		// финрез
		Попытка
			ИмяСхемы = "S0100214";
			МножительФинРез = 1000;
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)= 2015 ИЛИ Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)= 2014 Тогда
				ИмяСхемы = "S0100212";
				МножительФинРез = 1;
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 2021 или 
				(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2021 и Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 9) Тогда
				ИмяСхемы = "S0100213";
			КонецЕсли;				
			РезФинРез = глКомпонентаЗвит1С.GetReport(ИмяСхемы, ТипПериода, 1, Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Если РезФинРез = Неопределено Тогда
				//сообщения всегда на украинском
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("За %1 не виявлено жодного збереженого звіту Звіт про фінансові результати!", ПредставлениеПериода( НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" ));
				глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
			КонецЕсли;	
		Исключение
			Если глМенеджерЗвит1С.ФлагОтладки Тогда
				Сообщить("FREDO Звіт. Виняток при отриманні даних з ""FREDO Звіт"" ("+ИмяСхемы+", "+ТипПериода+" , 1, " +Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)+")", СтатусСообщения.Важное);
				Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
			КонецЕсли;
		КонецПопытки;
		
		// баланс
		Попытка
			ИмяСхемы = "S0100114";
			МножительБаланс = 1000;
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)= 2015 ИЛИ Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)= 2014 Тогда
				ИмяСхемы = "S0100112";
				МножительБаланс = 1;
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 2021 или 
				(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2021 и Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 9) Тогда
				ИмяСхемы = "S0100113";
			КонецЕсли;				
			РезБаланс = глКомпонентаЗвит1С.GetReport(ИмяСхемы, ТипПериода, 1, Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Если РезБаланс = Неопределено Тогда
				//сообщения всегда на украинском
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("За %1 не виявлено жодного збереженого звіту %2!", ПредставлениеПериода( НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" ), "Баланс");
				глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
			КонецЕсли;
		Исключение
			Если глМенеджерЗвит1С.ФлагОтладки Тогда
				Сообщить("FREDO Звіт. Виняток при отриманні даних з ""FREDO Звіт"" ("+ИмяСхемы+", "+ТипПериода+" , 1, " +Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)+")", СтатусСообщения.Важное);
				Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
			КонецЕсли;
		КонецПопытки;
		
		// для баланса за прошлый год еще вопрос откуда брать данные из Звита или 1С....
		Если  ЗначениеЗаполнено(РегламентированнаяОтчетностьВызовСервера.ПолучитьДатаНачалаИспользованияЗвит1С(СтруктураРеквизитовФормы.Организация)) 
			И КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12)) < РегламентированнаяОтчетностьВызовСервера.ПолучитьДатаНачалаИспользованияЗвит1С(СтруктураРеквизитовФормы.Организация) Тогда
			// получаем данные из 1С за прошлый год
			РезБалансПрошлыйПериод = ПолучитьПоказателиИзТребуемогоОтчета(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12),"РегламентированныйОтчетБаланс", "Баланс");
		Иначе
			
			// получаем данные из Звит-1С
			Попытка
				
				ИмяСхемы = "S0100114";
				МножительБалансПрошлогоГода = 1000;
				Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1 = 2015 ИЛИ Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1 = 2014 Тогда
					ИмяСхемы = "S0100112";
					МножительБалансПрошлогоГода = 1;
				ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1 < 2021 или 
					(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1 = 2021 и Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 9) Тогда
					ИмяСхемы = "S0100113";
				КонецЕсли;				
				Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1 = 2013 Тогда
					ИмяСхемы = "S0100110";
					МножительБалансПрошлогоГода = 1;
				КонецЕсли;
				
				РезБалансПрошлыйПериод = глКомпонентаЗвит1С.GetReport(ИмяСхемы, ТипПериода, 1, Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)-1);
				Если РезБалансПрошлыйПериод = Неопределено Тогда
					//сообщения всегда на украинском
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("За %1 не виявлено жодного збереженого звіту %2!", ПредставлениеПериода( НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12)), "Л = ""uk_UA""; ФП = Истина" ), "Баланс");
					глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
				КонецЕсли;
			Исключение
				Если глМенеджерЗвит1С.ФлагОтладки Тогда
					Сообщить("FREDO Звіт. Виняток при отриманні даних з ""FREDO Звіт"" ("+ИмяСхемы+", "+ТипПериода+" , 1, " +Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)+")", СтатусСообщения.Важное);
					Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
				КонецЕсли;
			КонецПопытки;

		КонецЕсли;
		
		Если НЕ РезФинРез = Неопределено Тогда
			РезФинРез = ПолучитьПоказателиОтчетаИзЗвит(РезФинРез, 2000, 2650, МножительФинРез);		
		КонецЕсли;
		Если НЕ РезБаланс = Неопределено Тогда
			РезБаланс = ПолучитьПоказателиОтчетаИзЗвит(РезБаланс, 1000, 1900, МножительБаланс);		
		КонецЕсли;
		Если НЕ РезБалансПрошлыйПериод = Неопределено Тогда
			РезБалансПрошлыйПериод = ПолучитьПоказателиОтчетаИзЗвит(РезБалансПрошлыйПериод, 1000, 1900, МножительБалансПрошлогоГода);		
		КонецЕсли;
		
	Иначе
		// данные текущего баланса и финреза получаем из 1С
		РезФинРез 			   = ПолучитьПоказателиИзТребуемогоОтчета(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"РегламентированныйОтчетФинансовыйРезультат", НСтр("ru='Отчет о финансовых результатах';uk='Звіт про фінансові результати'"));
		РезБаланс 			   = ПолучитьПоказателиИзТребуемогоОтчета(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"РегламентированныйОтчетБаланс", "Баланс");
		РезБалансПрошлыйПериод = ПолучитьПоказателиИзТребуемогоОтчета(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12),"РегламентированныйОтчетБаланс", "Баланс");
	КонецЕсли;
	
	ПараметрыЗаполненияЗвит1С.Вставить("РезФинРез", РезФинРез);
	ПараметрыЗаполненияЗвит1С.Вставить("РезБаланс", РезБаланс);
	ПараметрыЗаполненияЗвит1С.Вставить("РезБалансПрошлыйПериод", РезБалансПрошлыйПериод);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПоказателиОтчетаИзЗвит(ОтчетЗвит1С, НачСтрока, КонСтрока, Множитель = 1)
	
	Результат = Новый Структура();
	
	Для Сч = НачСтрока По КонСтрока Цикл
		СчСтрока = Формат(Сч, "ЧГ=0");
		
		Попытка
			ТекЗначение = ОтчетЗвит1С.GetValue("MAIN", "A"+СчСтрока);
			Если ТекЗначение = Неопределено Тогда
				ТекЗначение = 0;
			КонецЕсли;
			ТекЗначение = ТекЗначение * Множитель;
			Результат.Вставить("A"+СчСтрока, ТекЗначение);
			
			
			ТекЗначение = ОтчетЗвит1С.GetValue("MAIN", "B"+СчСтрока);
			Если ТекЗначение = Неопределено Тогда
				ТекЗначение = 0;
			КонецЕсли;
			ТекЗначение = ТекЗначение * Множитель;
			Результат.Вставить("B"+СчСтрока, ТекЗначение);
		Исключение КонецПопытки;
	
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	_ИмяФормы = СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", "");
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(_ИмяФормы, Найти(_ИмяФормы, ".Форма.") - 1), 7), Сред(_ИмяФормы, Найти(_ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктурыКолонокМногострочныхЧастей()
	
	Если СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Неопределено Тогда
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Новый Структура;	
	КонецЕсли;
	
	Для каждого Многострочка Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяМногострочки = Многострочка.Ключ;
		
		ДанныеФормы 	= ЭтаФорма[Многострочка.Значение];
		Таблица 		= ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		
		СтруктураКолонок = Новый Массив;
		Для каждого Колонка Из Таблица.Колонки Цикл
			СтруктураКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов.Вставить(ИмяМногострочки, СтруктураКолонок);
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;
 	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции


&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
				
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	
	
	флЗаполнятьПрошлыйПериод = Истина;
	Если НЕ ЗначениеЗаполнено(ИспКлассыСчетовПрошлГода) Тогда
		флЗаполнятьПрошлыйПериод = Ложь;
	КонецЕсли;
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получене большего доп.параметров
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	// Заполнение зависит от формы реестра
	ПараметрыЗаполненияЗвит1С = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод);
	КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
  
КонецФункции	

#Область СкрываемыеДопСтроки


 &НаКлиенте
Процедура ОткрытьФормуНастроекОтображениеДополнительныхСтрок()

	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаНастройкиСтрок",, ЭтаФорма);
	
	КопироватьДанныеФормы(мТаблицаСтрок, ФормаНастройкиОтчета.ТаблицаСтрокОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуНастроекОтображениеДополнительныхСтрокЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекОтображениеДополнительныхСтрокЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		КопироватьДанныеФормы(РезультатВыбора, мТаблицаСтрок);
		ПоказатьСтрокиОтчета();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаКлиенте
// Открывает форму документа ФормаНастройкиСтраниц с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//  унифицирована и актуальна только при наличии таких разделов
Процедура ОткрытьФормуВыбораСтрок()

//	ФормаНастройкиСтрок = ПолучитьФорму("ФормаНастройкиСтрок", ЭтаФорма);

//	Если ФормаНастройкиСтрок.Открыта() Тогда
//		ФормаНастройкиСтрок.Активизировать();
//		Если Вопрос(НСтр("ru='Предыдущая операция настройки строк не завершена."
//"Завершить?';uk='Попередня операція настройки рядків не завершена."
//"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
//			ФормаНастройкиСтрок.Закрыть();
//		КонецЕсли;
//	КонецЕсли;

//	мДеревоВыбранныхСтраниц = "";

//	ТаблицаСтрок = мТаблицаСтрок.Скопировать();

//	ФормаНастройкиСтрок.НачальноеЗначениеВыбора = ТаблицаСтрок;

//	ВыбранноеЗначение = ФормаНастройкиСтрок.ОткрытьМодально();

//	Если ВыбранноеЗначение <> Неопределено Тогда
//		мТаблицаСтрок = ВыбранноеЗначение;
//		Модифицированность = Истина;
//	Иначе
//		мТаблицаСтрок = ТаблицаСтрок;
//	КонецЕсли;

КонецПроцедуры 

&НаСервере
// Управляет видимостью строк отчета
//
Процедура ПоказатьСтрокиОтчета()

	ТекПоле = ТабличныйДокумент;
	
	ИмеютсяСкрытые = Ложь;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;

	Для Каждого Строка Из мТаблицаСтрок Цикл
		
		КодСтроки = Строка.КодСтроки;
		
		Если НЕ ЗначениеЗаполнено(Строка.КодСтроки)
			ИЛИ ВРЕГ(Строка.ТипСтроки) = ВРЕГ("заг")
			ИЛИ ВРЕГ(Строка.ТипСтроки) = ВРЕГ("итог")
			ИЛИ ВРЕГ(Строка.ТипСтроки) = ВРЕГ("осн")
			Тогда
		    // видимостью таких строк мы не управляем
			Продолжить;	
		КонецЕсли;
		
		ТекущаяВидимость = ТекущаяВидимостьСтроки(КодСтроки);
		
		Если Строка.ПоказатьСтроку Тогда
			
			// открываем видимость без лишних вопросов
			Если ТекущаяВидимость = Ложь Тогда
				УстановитьВидимостьСтроки(КодСтроки, Строка.ПоказатьСтроку);	
			КонецЕсли;
			
		Иначе// строка должна быть скрыта
			
			ИмеютсяСкрытые = Истина;
			// если она содержит значение, то необходимо его обнулить в случае, если это не строка "в том. числе".
			// для строк "в том. числе" (ПризнакРасшифровки) мы оставляем заполненные в ней значение
			 
			Если ТекущаяВидимость = Ложь Тогда
				// строка и так скрыта	
			Иначе
				Если Строка.ПризнакРасшифровки Тогда
					УстановитьВидимостьСтроки(КодСтроки, Строка.ПоказатьСтроку);
				Иначе
					// это строка участвует в расчете	
					КодСтрокиРодителя = Строка.КодСтрокиРодителя;
					КодСтроки		  = Строка.КодСтроки;
					
					ЗначениеБылоПеренесеноВИтоговуюСтроку = Ложь;
					Для НомерКолонки = 3 По 6 Цикл
					
						// в некоторых строках есть только 4-я и 6-я колонки...
						Если НЕ СтруктураДанныхДДС.Свойство("П" + КодСтроки + НомерКолонки) Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПолучитьПоказательНаСервере("П" + КодСтроки + НомерКолонки, ЭтаФорма, "ДДС") = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						// переносим в итоговую строку
						ТекЗначение = ПолучитьПоказательНаСервере("П" + КодСтроки + НомерКолонки, ЭтаФорма, "ДДС");
						
						ПредставлениеСтрокиРодителя = "";
						Если НЕ ТекПоле.Области.Найти("R" + НомерСтрокиТаблицыПоКодуСтроки(КодСтрокиРодителя) + "|Представление") = Неопределено тогда
							ПредставлениеСтрокиРодителя = ТекПоле.Область("R" + НомерСтрокиТаблицыПоКодуСтроки(КодСтрокиРодителя) + "|Представление").Текст;
						КонецЕсли;
						
						ПредставлениеСтроки         = ТекПоле.Область("R" + НомерСтрокиТаблицыПоКодуСтроки(КодСтроки) 		  + "|Представление").Текст;
						
						Если ТекЗначение <> 0 Тогда
							
							ЗначениеБылоПеренесеноВИтоговуюСтроку = Истина;
							
							//переносим значение и сообщаем пользователю
							ЗаполнитьПоказательНаСервере("П" + КодСтрокиРодителя + НомерКолонки,
														 ТекЗначение + ПолучитьПоказательНаСервере("П" + КодСтрокиРодителя + НомерКолонки, ЭтаФорма, "ДДС"), ЭтаФорма, "ДДС");																					
																					
							Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Значение из строки %1 (%4) вместе с расшифровкой было перенесено в строку %2 (%5) /колонка ""%3""/! ';uk='Значення рядка %1 (%4) разом з розшифровкою було перенесено в рядок %2 (%5) /колонка ""%3""/! '")
														  , КодСтроки, КодСтрокиРодителя, НомерКолонки, ПредставлениеСтроки, ПредставлениеСтрокиРодителя));
														  
							ЗаполнитьПоказательНаСервере("П" + КодСтроки + НомерКолонки, 0, ЭтаФорма, "ДДС");							  
						КонецЕсли;
					
					КонецЦикла; 
					
					Если ЗначениеБылоПеренесеноВИтоговуюСтроку = Истина Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='     Внимание: при последующем включении в отчет дополнительной строки %1 суммы, и расшифровки, перенесенные в строку %2,  автоматически возвращены не будут!';uk='     Увага: при подальшому включенні в звіт додаткового рядка %1 суми, і розшифровки, перенесені в рядок %2, автоматично повернуті не будуть!'"), КодСтроки, КодСтрокиРодителя));
						
						// перенесем расшифровку
						Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
							
							Для каждого СтрокаРасшифровки Из ТаблицаРасшифровки Цикл
								
								Если Найти(СтрокаРасшифровки.ИмяПоказателя, КодСтроки) > 0 Тогда
									СтрокаРасшифровки.ИмяПоказателя = СтрЗаменить(СтрокаРасшифровки.ИмяПоказателя, КодСтроки, КодСтрокиРодителя);	
									СтрокаРасшифровки.НаименованиеПоказателя = "";
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;	
					
						
					УстановитьВидимостьСтроки(КодСтроки, Строка.ПоказатьСтроку);
					
				КонецЕсли;	
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетНаСервере();
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
	
		ТаблицаРасшифровки.Сортировать("ИмяПоказателя, НаименованиеПоказателя Убыв");
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
	КонецЕсли;
	
	КнопкиНастройки = Элементы.НастроитьОтображениеДополнительныхСтрок;
	ИсходныйТекст   = НСтр("ru='Настроить отображение дополнительных строк';uk='Налаштувати відображення додаткових рядків'");

	КнопкиНастройки.Заголовок = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка строк" доп. сммвол '*'.
		КнопкиНастройки.Заголовок = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуСтрок()

	ТекПоле = ТабличныйДокумент;
	ВысотаТаблицы = ТекПоле.ВысотаТаблицы;
	
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
		
		ТипСтроки = ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|ТипСтроки").Текст;
		Если НЕ ЗначениеЗаполнено(ТипСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление 			= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|Представление").Текст;
		КодСтроки	  			= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|КодСтроки").Текст;
		ПризнакРасшифровки 		= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|ПризнакРасшифровки").Текст;
		КодСтрокиРодителя	  	= ТекПоле.Область("R" + Формат(НомерСтроки,"ЧГ=") + "|КодСтрокиРодителя").Текст;
		
		Строка = мТаблицаСтрок.Добавить();
		Строка.Представление 	= Представление;
		Строка.КодСтроки 		= КодСтроки;
		Строка.ТипСтроки 	    = ТипСтроки;
		Строка.ПризнакРасшифровки 	= ЗначениеЗаполнено(ПризнакРасшифровки);
		Строка.КодСтрокиРодителя 	= КодСтрокиРодителя;
		
		Строка.ПоказатьСтроку 	= Истина;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ТекущаяВидимостьСтроки(КодСтроки)
	
	ТекПоле = ТабличныйДокумент;
	
	НомерСтрокиВТаблице = НомерСтрокиТаблицыПоКодуСтроки(КодСтроки);
	Если НомерСтрокиВТаблице = 0 Тогда
		Возврат Истина;	
	КонецЕсли;
	
	// видимость можно определить по ячейке строки, информация по строке - недоступна
	ТекВидимость = ТекПоле.Область(НомерСтрокиВТаблице,1,НомерСтрокиВТаблице,1).Видимость;
	
	Возврат ТекВидимость;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьСтроки(КодСтроки, Видимость)
	
	ТекПоле = ТабличныйДокумент;
	
	НомерСтрокиВТаблице = НомерСтрокиТаблицыПоКодуСтроки(КодСтроки);
	Если НомерСтрокиВТаблице = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ТекПоле.Область(НомерСтрокиВТаблице, ,НомерСтрокиВТаблице, ).Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Функция НомерСтрокиТаблицыПоКодуСтроки(КодСтроки)

	ТекПоле = ТабличныйДокумент;
	
	ЯчейкаСКодом = ТекПоле.Области.Найти("П" + КодСтроки + "3");
	
	// в некоторых строках есть только 4-я и 6-я колонки...
	Если НЕ ЗначениеЗаполнено(ЯчейкаСКодом) Тогда
		ЯчейкаСКодом = ТекПоле.Области.Найти("П" + КодСтроки + "4");
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(ЯчейкаСКодом), Формат(ЯчейкаСКодом.Верх, "ЧГ="), 0);	

КонецФункции

#КонецОбласти

&НаСервере
Функция ОпределитьУчетнуюПолитикуВПериоде(НачалоПериода, КонецПериода)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", СтруктураРеквизитовФормы.Организация); 
	Запрос.УстановитьПараметр("НачалоПериода", 		 НачалоПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.ИспользуемыеКлассыСчетовРасходов КАК ИспользуемыеКлассыСчетовРасходов
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация = &ГоловнаяОрганизация) КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Период >= &НачалоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетнаяПолитикаОрганизаций.Период";

		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат 	= Выборка.ИспользуемыеКлассыСчетовРасходов;
		Если Выборка.Период >= КонецПериода Тогда
			//период учетной политики не попадает в период отчета
			Результат 	= Неопределено;
		КонецЕсли;
	КонецЕсли;
    Возврат Результат;
КонецФункции

&НаСервере
// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

&НаСервере
// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД2(Счет)

	Перем Итог;

	Итог = мБухИтогиПрошлыйГод.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()


&НаСервере
// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ2(СчетД, СчетК)

	Перем Итог;

	Итог = мБухИтогиПрошлыйГод.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()


&НаСервере
// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ(СчетД, СчетК, СубконтоДт1 = Неопределено, СубконтоДт2 = Неопределено, СубконтоДт3 = Неопределено, СубконтоКт1 = Неопределено, СубконтоКт2 = Неопределено, СубконтоКт3 = Неопределено)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()

&НаСервере
// Функция вычисляет кредитовый оборот счета за текущий год
Функция КО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()

&НаСервере
// Функция вычисляет кредитовый оборот счета за прошлый год
Функция КО2(Счет)

	Перем Итог;

	Итог = мБухИтогиПрошлыйГод.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()

&НаСервере
// Функция вычисляет дебетовый оборот счета за текущий год
 Функция ДО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // ДО()

&НаСервере
// Функция вычисляет дебетовый оборот счета за прошлый год
Функция ДО2(Счет)

	Перем Итог;

	Итог = мБухИтогиПрошлыйГод.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // ДО2()

&НаСервере
//Функция вычисляет дебетовое сальдо счета 
Функция СКДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

&НаСервере
//Функция вычисляет дебетовое сальдо счета за прошлый год
Функция СКДР2(Счет)

	Перем Итог;

	Итог = мБухИтогиПрошлыйГод.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКДР()

&НаСервере
//Функция вычисляет дебетовое сальдо счета 
Функция СНДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНДР()

&НаСервере
//Функция вычисляет дебетовое сальдо счета за прошлый год
Функция СНДР2(Счет)

	Перем Итог;

	Итог = мБухИтогиПрошлыйГод.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНДР()

&НаСервере
//Функция вычисляет кредитовое сальдо счета 
Функция СККР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СККР()

&НаСервере
//Функция вычисляет кредитовое сальдо счета за прошлый год
Функция СККР2(Счет)

	Перем Итог;

	Итог = мБухИтогиПрошлыйГод.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СККР()

&НаСервере
//Функция вычисляет кредитовое сальдо счета 
Функция СНКР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНКР()

&НаСервере
//Функция вычисляет кредитовое сальдо счета за прошлый год
Функция СНКР2(Счет)

	Перем Итог;

	Итог = мБухИтогиПрошлыйГод.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНКР2()

&НаСервере
// Функция возвращает список нужных показателей из сохраненных отчетов "Баланс"
// и "Финансовые результаты"
Функция ПолучитьТаблицуРезультатов(ДатаОкончанияПериода,ИсточникОтчета, НаименованиеОтчета)
	
	перем ПоказателиОтчета;
	
	//сначала пытаемся найти сохраненный отчет в информационной базе
	ЗапросСохраненныйОтчет = Новый Запрос ("
	|ВЫБРАТЬ
	| РегламентированныйОтчет.ДанныеОтчета
	|
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|ГДЕ
	|	РегламентированныйОтчет.ПометкаУдаления = &ПометкаУдаления И
	|	РегламентированныйОтчет.Организация = &Организация И
	|	РегламентированныйОтчет.НаименованиеОтчета = &НаименованиеОтчета И
	|	РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания"
	);
	
	ЗапросСохраненныйОтчет.УстановитьПараметр ("ПометкаУдаления",ЛОЖЬ);
	ЗапросСохраненныйОтчет.УстановитьПараметр ("ДатаОкончания",ДатаОкончанияПериода);
	ЗапросСохраненныйОтчет.УстановитьПараметр ("Организация",СтруктураРеквизитовФормы.Организация);
	ЗапросСохраненныйОтчет.УстановитьПараметр ("НаименованиеОтчета",НаименованиеОтчета);
	
	РезультатЗапроса = ЗапросСохраненныйОтчет.Выполнить();
	
	СоответствиеРезультат = новый Соответствие;
	СоответствиеРезультат.Вставить("Результат");
	СоответствиеРезультат.Вставить("ПоказателиОтчета");
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		Если  ТаблицаРезультатов.Количество() > 1 Тогда
			СоответствиеРезультат["Результат"] = 2;
		Иначе 
			СоответствиеРезультат["Результат"] = 1;
			ДанныеОтчета = ТаблицаРезультатов[0].ДанныеОтчета.Получить();
			ДанныеОтчета.Свойство("ПоказателиОтчета",ПоказателиОтчета);
			
			Если НаименованиеОтчета = "Баланс" Тогда
				ИмяСтраницыПанели = "ПолеТабличногоДокументаБаланс";
			Иначе
				ИмяСтраницыПанели = "ПолеТабличногоДокументаФинРез";
			КонецЕсли;	
			
			ПоказателиОтчета.Свойство(ИмяСтраницыПанели,ПоказателиОтчета);
			СоответствиеРезультат["ПоказателиОтчета"] = ПоказателиОтчета;

		КонецЕсли;
				
	Иначе
		
		СоответствиеРезультат["Результат"] = 0;
		
	КонецЕсли;
	
	Возврат СоответствиеРезультат
	
КонецФункции

&НаКлиенте
// Функция возвращает список нужных показателей из сохраненных отчетов "Баланс"
// и "Финансовые результаты"
Функция ПолучитьПоказателиИзТребуемогоОтчета(ДатаОкончанияПериода,ИсточникОтчета, НаименованиеОтчета)
	
	перем ПоказателиОтчета;
	перем ПоказателиДекларации;
	перем ЗначениеПоказателя;
	перем СтруктураПоказателейСтраницы,ЗначениеВСтруктуре;  
	
	СоответствиеРезультат = ПолучитьТаблицуРезультатов(ДатаОкончанияПериода,ИсточникОтчета, НаименованиеОтчета);

	Если НЕ СоответствиеРезультат.Получить("Результат") = 0 Тогда
		
		Если  СоответствиеРезультат.Получить("Результат") = 2 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За %1обнаружено более одного сохраненного отчета %2  Корректное заполнение показателей из него невозможно!';uk='За %1виявлено більше одного збереженого звіту %2 Коректне заповнення показників з нього неможливе!'"), ПредставлениеПериода( НачалоДня(НачалоКвартала(ДатаОкончанияПериода)), КонецДня(ДатаОкончанияПериода), "Л = ""uk_UA""; ФП = Истина" ), НаименованиеОтчета); 
			Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
				глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з 1С");
			Иначе
				Сообщить(ТекстСообщения);
			КонецЕсли;
			
			Возврат ПоказателиОтчета;
			
		КонецЕсли;	
		
		Возврат СоответствиеРезультат.Получить("ПоказателиОтчета");
		
	Иначе
		
		//не обнаружено не одного требуемого сохраненного отчета	
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За %1 не обнаружено ни одного сохраненного отчета %2!';uk='За %1 не виявлено жодного збереженого звіту %2!'"), ПредставлениеПериода( НачалоДня(НачалоКвартала(ДатаОкончанияПериода)), КонецДня(ДатаОкончанияПериода), "Л = ""uk_UA""; ФП = Истина" ), НаименованиеОтчета, НаименованиеОтчета); 
		Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
			глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з 1С");
		Иначе
			Сообщить(ТекстСообщения);	
		КонецЕсли;
		
		Возврат ПоказателиОтчета;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// ТипОтчета - "Ф"  финрез, "Б" - баланс
Процедура ЗаполнитьПоказательПоДаннымФинОтчетности(КодСтрокиДДС, КодКолонкиДДС, ТипОтчета, ДанныеОтчета, КодСтрокиОтчета, КодКолонкиОтчета, ЗаПрошлыйГод = Ложь, Знак = "+");
	
	РезФинРез_Период 				= ПредставлениеПериода( НачалоДня(НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	РезБаланс_Период				= ПредставлениеПериода( НачалоДня(НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	РезБалансПрошлыйПериод_Период	= ПредставлениеПериода( НачалоДня(НачалоКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12))), КонецДня(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), "Л = ""uk_UA""; ФП = Истина" );
	
	ПолныйКодПоказателя = "П" + КодСтрокиДДС + КодКолонкиДДС;
	ИмяПоказателяЗвит1С = ?(КодКолонкиОтчета = 3, "A", "B") + КодСтрокиОтчета;
	
	НаименованиеОтчета = ?(ТипОтчета = "Ф", 
						   "Звіт про фінансові результати (Звіт про сукупний дохід)",
						   "Баланс");
						   
	ОписаниеПериода = ?(ТипОтчета = "Ф",
						РезФинРез_Период,
						?(ЗаПрошлыйГод,
						  РезБалансПрошлыйПериод_Период,
						  РезБаланс_Период)); 
	
	Значение = Неопределено;
	
	Если ДанныеОтчета.Свойство("П" + КодСтрокиОтчета + КодКолонкиОтчета, Значение) Тогда
		// данные из 1С
	Иначе	
		// данные из FREDO Звіт
		ДанныеОтчета.Свойство(ИмяПоказателяЗвит1С, Значение);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Если Значение = Неопределено Тогда
			Если (НЕ ТипОтчета = "Ф" И (КодСтрокиОтчета = "2290" ИЛИ КодСтрокиОтчета = "2295")) Тогда
				Сообщить("> Помилка при розрахунку рядка " + КодСтрокиДДС + "(графа " + КодКолонкиДДС + "): не вдалося отримати показник рядка " + КодСтрокиОтчета + "(графа " + КодКолонкиОтчета + ") звіту " + НаименованиеОтчета + " за " + ОписаниеПериода);	
			КонецЕсли;
		КонецЕсли;
		Значение = 0;
	КонецЕсли;
	
	// устанавливаем показатель
	УстановитьЗначениеПоказателя(ПолныйКодПоказателя, Значение);

	// добавляем расшифровку
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															ПолныйКодПоказателя,
															"Рядок " + КодСтрокиДДС +", графа " +КодКолонкиДДС,	
															Знак, 
															"Показник зі звіту """ + НаименованиеОтчета + """ за " + ОписаниеПериода + "
															   |(рядок " + КодСтрокиОтчета + " , графа " + КодКолонкиОтчета + ")", 
															Значение,,, 
															?(ЗаПрошлыйГод,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), Неопределено),
															?(ЗаПрошлыйГод,КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), Неопределено)
															);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоказательФинОтчетности(ДанныеОтчета, КодСтрокиОтчета, КодКолонкиОтчета)

	Значение = Неопределено;
	
	Если ДанныеОтчета.Свойство("П" + ("" + КодСтрокиОтчета) + ("" + КодКолонкиОтчета), Значение) Тогда
		// данные из 1С
	Иначе	
		// данные из FREDO Звіт
		ИмяПоказателяЗвит1С = ?(КодКолонкиОтчета = 3, "A", "B") + КодСтрокиОтчета;
		ДанныеОтчета.Свойство(ИмяПоказателяЗвит1С, Значение);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Значение = 0;
	КонецЕсли;
	
	Возврат Значение;
 
КонецФункции

&НаСервере
Процедура ДобавитьРасшифровкуПоИзменениюСтатейНеОперДеятельности(ИмяЯчейки, Таблица, ВидОборота = "Кт", Знак = "+")
	
	ДанныеПрошлогоГода = (Прав(ИмяЯчейки, 1) = "5") ИЛИ (Прав(ИмяЯчейки, 1) = "6");	
	
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяЯчейки, 
															"_92",
															Знак,
															"#Изменение " + ?(ВидОборота="Кт", "кредиторской", "дебеторской") + " задолженности по договорам c видом деятельности для отчета ДДС равным ""финансовая"" или ""инвестиционная""",
															0);
															
	ЕстьИзменения = Ложь;Сч = 0;															
	Для Каждого Строка из Таблица Цикл
		
		Сч = Сч + 1;
		
		Если Строка["КонечныйОстаток" + ВидОборота] - Строка["НачальныйОстаток" + ВидОборота] = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьИзменения = Истина;																
															
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяЯчейки, 
																"_8" + Сч + "2", 
																Знак,
																"!СК" + ВРЕГ(ЛЕВ(ВидОборота,1)) +"РС", 
																Строка["КонечныйОстаток" + ВидОборота],
																Строка.Счет,
																,
																?(ДанныеПрошлогоГода, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), Неопределено),
																?(ДанныеПрошлогоГода, КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), Неопределено),
																,,,,
																,Строка.Договор);
	
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяЯчейки, 
																"_8" + Сч + "1", 
																?(Знак = "+", "-", "+"),
																"!СН" + ВРЕГ(ЛЕВ(ВидОборота,1)) +"РС", 
																Строка["НачальныйОстаток" + ВидОборота],
																Строка.Счет,
																,
																?(ДанныеПрошлогоГода, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), Неопределено),
																?(ДанныеПрошлогоГода, КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), Неопределено),
																,,,,
																,Строка.Договор);
	КонецЦикла;															
															
	
	Если НЕ ЕстьИзменения Тогда
	
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяЯчейки, 
																"_91",
																Знак,
																"# <нет изменеий>",
																0);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьОборотНеОпреДеят(ЗначениеПоказателя, ИмяЯчейки, Знак = "+", ВидКорОборота = "Дт", ВидДеятельности = "Фин", Счет1, Счет2 = Неопределено, Счет3 = Неопределено, Счет4 = Неопределено, Счет5 = Неопределено, Счет6 = Неопределено, Счет7 = Неопределено, Счет8 = Неопределено, Счет9 = Неопределено)
	
	СчетаДС = Новый Массив;
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках);
	
	ТекстДляСортировкиРасшифровки = "_" + ВидДеятельности;
	
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяЯчейки, 
															ТекстДляСортировкиРасшифровки + "99",
															Знак,
															"#Данные по договорам, c видом деятельности для отчета ДДС равным " + ?( ВидДеятельности = "Фин", """финансовая""", """инвестиционная""")
															,
															0);
	
	ДанныеПрошлогоГода = Прав(ИмяЯчейки, 1) = "4";// это верно для второго и третьего раздела, который идентичен для прямого и не прямого метода.

	Если ДанныеПрошлогоГода Тогда
		ТекТаблица = ТаблицаПоИнвестФинансДеятПрошлыйГод;
	Иначе	
	    ТекТаблица = ТаблицаПоИнвестФинансДеят;
	КонецЕсли;
	
	Счета = Новый Массив;
	Счета.Добавить(Счет1);
	Если ЗначениеЗаполнено(Счет2) Тогда Счета.Добавить(Счет2) КонецЕсли;
	Если ЗначениеЗаполнено(Счет3) Тогда Счета.Добавить(Счет3) КонецЕсли;
	Если ЗначениеЗаполнено(Счет4) Тогда Счета.Добавить(Счет4) КонецЕсли;
	Если ЗначениеЗаполнено(Счет5) Тогда Счета.Добавить(Счет5) КонецЕсли;
	Если ЗначениеЗаполнено(Счет6) Тогда Счета.Добавить(Счет6) КонецЕсли;
	Если ЗначениеЗаполнено(Счет7) Тогда Счета.Добавить(Счет7) КонецЕсли;
	Если ЗначениеЗаполнено(Счет8) Тогда Счета.Добавить(Счет8) КонецЕсли;
	Если ЗначениеЗаполнено(Счет9) Тогда Счета.Добавить(Счет9) КонецЕсли;
	
	Для Каждого КорСчет Из СчетаДС Цикл
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, ИмяЯчейки, 
																ТекстДляСортировкиРасшифровки + КорСчет + "9",
																Знак,
																"# в корреспонденции со счетом " + КорСчет + ":",
																0);
		Для Каждого Счет Из Счета Цикл
			
			СуммаКорректировки = 0;
			
			СписокДоговоров = Новый СписокЗначений;
			Для каждого ИсключаемыйОборот Из ТекТаблица Цикл
				
				Если НЕ (ЗначениеЗаполнено(ИсключаемыйОборот.Счет) И (ИсключаемыйОборот.Счет = Счет ИЛИ ИсключаемыйОборот.Счет.ПринадлежитЭлементу(Счет))) Тогда
					Продолжить;
				КонецЕсли;
				Если НЕ (ЗначениеЗаполнено(ИсключаемыйОборот.КорСчет) И (ИсключаемыйОборот.КорСчет = КорСчет ИЛИ ИсключаемыйОборот.КорСчет.ПринадлежитЭлементу(КорСчет))) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОборот = ИсключаемыйОборот["Оборот" + ВидКорОборота + ВидДеятельности];
				Если ТекОборот = 0 Тогда
					Продолжить;	
				Иначе	
					СписокДоговоров.Добавить(ИсключаемыйОборот.Договор);
				КонецЕсли;
				
				СуммаКорректировки = СуммаКорректировки + ТекОборот;
				
			КонецЦикла;
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, ИмяЯчейки, 
																	ТекстДляСортировкиРасшифровки + КорСчет, 
																	Знак,
																	"!" + ВРЕГ(ЛЕВ(ВидКорОборота,1)) +"О", 
																	СуммаКорректировки,
																	Счет,
																	КорСчет,
																	?(ДанныеПрошлогоГода, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), Неопределено),
																	?(ДанныеПрошлогоГода, КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), Неопределено),
																	,,,,
																	,СписокДоговоров);
			
		    ЗначениеПоказателя = ЗначениеПоказателя +  ?(Знак = "+", +1, -1)*СуммаКорректировки;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры	

//Процедура заполняет значения в скобках по всему отчету  
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначенияВСкобках(Форма) Экспорт
	
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	Для Каждого ТекущаяОбласть Из ТекТабличноеПоле.Области Цикл 
		Если Сред(ТекущаяОбласть.Имя,1,1)= "_" Тогда 
			
			КодПоказателяБезСкобок = Сред(ТекущаяОбласть.Имя,2);
			ТекущаяОбласть.Значение = Формат(-ТекТабличноеПоле.Области[КодПоказателяБезСкобок].Значение, "ЧО=0" +Форма.СтруктураРеквизитовФормы.мСтрокаФормата);// формат отображения

		КонецЕсли;  	
	КонецЦикла 	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВводЧислаВСкобкахЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	
	ТабличныйДокумент.Области[ИмяЯчейки].Значение = РезультатВыбора; 
	ЗаполнитьПоказательНаСервере(ИмяЯчейки, РезультатВыбора, ЭтаФорма, "ДДС");
	
	// отобразим показатель "в скобках"
	ТабличныйДокумент.Области["_" +ИмяЯчейки].Значение = Формат(-РезультатВыбора,  "ЧО=0" + СтруктураРеквизитовФормы.мСтрокаФормата);// формат отображения
	
	Расчет(ЭтаФорма,,ИмяЯчейки);
		
КонецПроцедуры



&НаСервере
Процедура УстановитьЗначениеПоказателя(Имя, Значение)
	
	СтруктураДанныхДДС[Имя] = Значение;
	
КонецПроцедуры


&НаСервере
Процедура _ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено)
	
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНДРС", "!СНДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СКДРС", "!СКДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНКРС", "!СНКР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СККРС", "!СККР");
	
	ДополнительныеПараметры = НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, Счет);
	
	Если    Лев(ИмяСлагаемого, 5) = "!СНДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СКДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СНКР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СККР" Тогда
	
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);	
		
		
		ТабличнаяЧастьГруппировка = Новый Массив;
		СчВидовСубконто = 0;
		Для каждого СтрокаВидовСубконто Из Счет.ВидыСубконто Цикл
			
			СчВидовСубконто = СчВидовСубконто + 1;
			ОписаниеГруппировки = Новый Структура;
			ОписаниеГруппировки.Вставить("Использование", Истина);
			ОписаниеГруппировки.Вставить("Поле", "Субконто" + СчВидовСубконто);
			ОписаниеГруппировки.Вставить("Представление", СтрокаВидовСубконто.ВидСубконто);
			ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
			ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		КонецЦикла;
		
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
		
	КонецЕсли;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого + " " + ?(ЗначениеЗаполнено(Счет), Счет.Код, "") + " " + ?(ЗначениеЗаполнено(КорСчет) И ИмяСлагаемого = "!ОБ", КорСчет.Код, ""), Сумма, "ДДС", ДополнительныеПараметры);
	

КонецПроцедуры

&НаСервере
Функция НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры


&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции



&НаКлиенте
Процедура Выгрузить(Команда)
	Возврат;
КонецПроцедуры
