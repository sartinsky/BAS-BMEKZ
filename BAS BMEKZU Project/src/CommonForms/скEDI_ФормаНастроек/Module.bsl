
&НаСервере
Процедура УстановитьОтбор(ЭлементыОтбора, ИмяПоля, Значение)
	КоличествоИзменено = 0;
	Для Каждого ЭлементОтбора из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Значение;
				ЭлементОтбора.Использование = Истина;
				КоличествоИзменено = КоличествоИзменено + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоИзменено = 0 Тогда
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Значение;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыОрганизации(Организация, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_Организации.ИдентификаторПрограммы,
	               |	скEDI_Организации.ВыводитьИнформациюОПодписантах,
	               |	скEDI_Организации.АдресЭлектроннойПочты,
	               |	скEDI_Организации.СпособОтправкиНалоговыхДокументовКонтрагенту
	               |ИЗ
	               |	Справочник.скEDI_Организации КАК скEDI_Организации
	               |ГДЕ
	               |	скEDI_Организации.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Организация);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Если ВыборкаРезультатаЗапроса.ИдентификаторПрограммы = "" Тогда
			ИдентификаторПрограммы = "<" + НСтр("ru = 'не заполнен'; uk = 'не заповнено'") + ">";
		Иначе
			ИдентификаторПрограммы = ВыборкаРезультатаЗапроса.ИдентификаторПрограммы;
		КонецЕсли;
		ВыводитьИнформациюОПодписантах = ВыборкаРезультатаЗапроса.ВыводитьИнформациюОПодписантах;
		АдресЭлектроннойПочты = ВыборкаРезультатаЗапроса.АдресЭлектроннойПочты;
		СпособОтправкиНалоговыхДокументовКонтрагенту = ВыборкаРезультатаЗапроса.СпособОтправкиНалоговыхДокументовКонтрагенту;
	Иначе
		ИдентификаторПрограммы = "<" + НСтр("ru = 'Организация не выбрана'; uk = 'Організація не вибрана'") + ">";
		ВыводитьИнформациюОПодписантах = Ложь;
		АдресЭлектроннойПочты = "";
		СпособОтправкиНалоговыхДокументовКонтрагенту = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСписков()
	УстановитьОтбор(Подписи.Отбор.Элементы, "Владелец", Организация);
	УстановитьОтбор(ВидыЭлектронныхДокументов.Отбор.Элементы, "Владелец", Организация);
	УстановитьОтбор(СписокПравилаЗагрузки.Отбор.Элементы, "Организация", Организация);
	УстановитьОтбор(СписокПодпискиНаСобытия.Отбор.Элементы, "Организация", Организация);
	
	РеквизитыОрганизацииДоступны = не (Организация = ПредопределенноеЗначение("Справочник.скEDI_Организации.ПустаяСсылка"));
	Элементы.ИдентификаторПрограммы.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.ВыводитьИнформациюОПодписантах.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.АдресЭлектроннойПочты.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.СпособОтправкиНалоговыхДокументовКонтрагенту.Доступность = РеквизитыОрганизацииДоступны;
	
	Элементы.ОткрытьСтраницуНастроек.Доступность = РеквизитыОрганизацииДоступны;
	//Элементы.ИспользованиеПодсистемы.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.Подписи.Доступность = РеквизитыОрганизацииДоступны;        
	Элементы.ЗагрузитьСертификатыИзИнтернета.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.ЗагрузитьСертификатыИзФайла.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.ВидыЭлектронныхДокументов.Доступность = РеквизитыОрганизацииДоступны;    
	Элементы.ГруппыПодписей.Доступность = РеквизитыОрганизацииДоступны;    
	Элементы.ЗагрузитьСтандартныеНастройки.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.ВидыЭлектронныхДокументовКопироватьНастройки.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.СписокПравилаЗагрузки.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.СписокПравилаЗагрузкиОткрытьСхемуЗагрузки.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.СписокПравилаЗагрузки.Доступность = РеквизитыОрганизацииДоступны;
	Элементы.ЛицензииЗагрузитьЛицензиюИнтернет.Доступность = РеквизитыОрганизацииДоступны;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	тОрганизация = Неопределено;
	Если Параметры.Свойство("Организация", тОрганизация) Тогда
		Организация = тОрганизация;
	КонецЕсли; 
	УстановитьПараметрыСписков();
	ПолучитьРеквизитыОрганизации(Организация, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
	ИспользованиеПодсистемы = Константы.скEDI_ИспользованиеПодсистемы.Получить();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Рез = ЗагрузитьЛицензиюНаСервере(Организация);
		МассивЛицензий = Неопределено;
		Если Рез.Свойство("License", МассивЛицензий) Тогда
			Если ТипЗнч(МассивЛицензий) = Тип("Массив") Тогда
				Для Каждого СтрокаМассиваЛицензий из МассивЛицензий Цикл
					НоваяСтрока = Лицензии.Добавить();
					НоваяСтрока.ЕДРПОУ = СтрокаМассиваЛицензий.Edrpou;
					НоваяСтрока.КодФилиала = СтрокаМассиваЛицензий.Dept;
					НоваяСтрока.ДатаОкончания = СтрокаМассиваЛицензий.DateEnd;
					НоваяСтрока.Наименование = СтрокаМассиваЛицензий.Name;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбновитьТаблицуПользователейСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбрануюОрганизацию(тОрганизация) экспорт
	Организация = тОрганизация;
	УстановитьПараметрыСписков();
	ПолучитьРеквизитыОрганизации(Организация, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьПараметрыСписков();
	ПолучитьРеквизитыОрганизации(Организация, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
	ЗаполнитьСоставГруппыПодписейНаСервере();
	
	СтраницаНастроек = "";
	Элементы.СохранитьСтраницуНастроек.Доступность = Ложь;
	ДоступКСтраницеНастроекСостояние = "";
	
	Лицензии.Очистить();
	Если ЗначениеЗаполнено(Организация) Тогда
		Рез = ЗагрузитьЛицензиюНаСервере(Организация);
		МассивЛицензий = Неопределено;
		Если Рез.Свойство("License", МассивЛицензий) Тогда
			Если ТипЗнч(МассивЛицензий) = Тип("Массив") Тогда
				Для Каждого СтрокаМассиваЛицензий из МассивЛицензий Цикл
					НоваяСтрока = Лицензии.Добавить();
					НоваяСтрока.ЕДРПОУ = СтрокаМассиваЛицензий.Edrpou;
					НоваяСтрока.КодФилиала = СтрокаМассиваЛицензий.Dept;
					НоваяСтрока.ДатаОкончания = СтрокаМассиваЛицензий.DateEnd;
					НоваяСтрока.Наименование = СтрокаМассиваЛицензий.Name;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Элементы.Список.Обновить();
	ОбновитьТаблицуПодписиПользователейНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтандартныеНастройки(Команда)
	
	ОткрытьФормуЗагрузкиНастроекПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиНастроекПоШаблону() 

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить(НСтр("ru = 'Организация не выбрана'; uk = 'Організація не вибрана'"));
		Возврат;	
	КонецЕсли;
	
	ПараметрыЗагрузкиНастроекПоШаблону = Новый Структура("ОрганизацияEDI", Организация);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ОткрытьФормуМодально("Справочник.скEDI_ВидыЭлектронныхДокументов.Форма.ФормаЗагрузкиНастроекПоШаблону", ПараметрыЗагрузкиНастроекПоШаблону, ЭтаФорма);
		ПриЗакрытииФормыЗагрузкиНастроекПоШаблону();
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуЗагрузкиНастроекПоШаблону(ПараметрыЗагрузкиНастроекПоШаблону, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыЗагрузкиНастроекПоШаблону(ВыбранныеФайлы = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт 
	Элементы.ВидыЭлектронныхДокументов.Обновить();
	Элементы.СписокПравилаЗагрузки.Обновить();
		
	Если ДополнительныеПараметры <> Неопределено Тогда 
		Если ДополнительныеПараметры.Свойство("ОповеститьОЗавершении") И ДополнительныеПараметры.ОповеститьОЗавершении Тогда 
			Оповестить("скEDI_ЗагрузкаСертификатыИзФайлаЗавершена", ДополнительныеПараметры.ОрганизацияEDI);	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьСертификатыИзФайла(Команда)
	скEDI_ОбщегоНазначенияКлиент.ЗагрузитьСертификатыИзФайлаПоОрганизации(Организация, ЭтаФорма);	
	Элементы.ВидыЭлектронныхДокументов.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСхемуЗагрузки(Команда)
	ТекущиеДанные = Элементы.СписокПравилаЗагрузки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураОтбора = Новый Структура("Организация, ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, Приоритет", Организация, ТекущиеДанные.ЕДРПОУВладельцаШаблона, ТекущиеДанные.ИмяШаблона, ТекущиеДанные.ВерсияШаблона, ТекущиеДанные.Приоритет);
		СхемаЗагрузки = ПолучитьСхемуПравилЗагрузки(СтруктураОтбора);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация"				, Организация);
		ПараметрыФормы.Вставить("ВидДокумента1С"			, ТекущиеДанные.ВидДокумента1С);
		ПараметрыФормы.Вставить("ВидЭлектронногоДокумента"	, ТекущиеДанные.ВидЭлектронногоДокумента);
		ПараметрыФормы.Вставить("ЕДРПОУВладельцаШаблона"	, ТекущиеДанные.ЕДРПОУВладельцаШаблона);
		ПараметрыФормы.Вставить("ИмяШаблона"				, ТекущиеДанные.ИмяШаблона);
		ПараметрыФормы.Вставить("ВерсияШаблона"				, ТекущиеДанные.ВерсияШаблона);
		ПараметрыФормы.Вставить("Приоритет"					, ТекущиеДанные.Приоритет);
		ПараметрыФормы.Вставить("Настройки"					, СхемаЗагрузки);//ТекущиеДанные.Настройки);
		ПараметрыФормы.Вставить("Предопределенный"			, ТекущиеДанные.ЭтоПредопределенный);
		
		Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
			НастроенныеКолонки = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастроекСозданияДокументов", ПараметрыФормы, ЭтаФорма).ОткрытьМодально();
			ПослеЗакрытияФормыНастроекСозданияДокументов(НастроенныеКолонки, Неопределено);
		Иначе
			скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастроекСозданияДокументов(ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСхемуПравилЗагрузки(Отбор)
	ЗаписьРегистраСведений = РегистрыСведений.скEDI_ПравилаЗагрузки.Получить(Отбор);
	Если ЗаписьРегистраСведений <> Неопределено Тогда
		Схема = Неопределено;
		Если ЗаписьРегистраСведений.Свойство("Схема", Схема) Тогда
			Возврат Схема.Получить();
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроекСозданияДокументов(РезультатФормы, ДопПараметр) Экспорт
	Если ТипЗнч(РезультатФормы) = Тип("Структура") Тогда
		Если РезультатФормы.Результат Тогда
			ПослеЗакрытияФормыНастроекСозданияДокументовНаСервере(РезультатФормы);
			Элементы.СписокПравилаЗагрузки.Обновить();
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияФормыНастроекСозданияДокументовНаСервере(РезультатФормы) Экспорт
	МенеджерЗаписи = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = РезультатФормы.Организация;	
	МенеджерЗаписи.ЕДРПОУВладельцаШаблона  = РезультатФормы.ЕДРПОУВладельцаШаблона;
	МенеджерЗаписи.ИмяШаблона  = РезультатФормы.ИмяШаблона;
	МенеджерЗаписи.ВерсияШаблона  = РезультатФормы.ВерсияШаблона;
	МенеджерЗаписи.Приоритет = РезультатФормы.Приоритет;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Если Не МенеджерЗаписи.ЭтоПредопределенный Тогда
			МенеджерЗаписи.ВидЭлектронногоДокумента = РезультатФормы.ВидЭлектронногоДокумента;
			МенеджерЗаписи.ВидДокумента1С = РезультатФормы.ВидДокумента1С;
			МенеджерЗаписи.Схема = Новый ХранилищеЗначения(РезультатФормы.Настройки);
			//??? МенеджерЗаписи.Использование  = Истина;
			МенеджерЗаписи.ТиповаяСхемма = РезультатФормы.ТиповаяСхемма;
			
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьЕДРПОУ(ТекОрганизация, ТекЕДРПОУ)
	ТекЕДРПОУ = ТекОрганизация.Код;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатыИзИнтернета(Команда)
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить(НСтр("ru = 'Организация не выбрана'; uk = 'Організація не вибрана'"));
		Возврат;	
	КонецЕсли;
	ТекЕДРПОУ = "";
	ПолучитьЕДРПОУ(Организация, ТекЕДРПОУ);
	СтруктураПараметров = Новый Структура("Организация, Владелец, ОповеститьОЗавершении", Организация, ЭтаФорма, Ложь);
	скEDI_ОбщегоНазначенияКлиент.ПолучитьИОбработатьМассивСертификатовИзИнтернета(ТекЕДРПОУ, Организация, Истина, СтруктураПараметров);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставГруппыПодписейНаСервере()
	ГруппаПодписи = Элементы.ГруппыПодписей.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ГруппаПодписи) Тогда
		СоставГруппыПодписи.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_Подписи.Ссылка КАК Ссылка,
		               |	скEDI_Подписи.Владелец КАК Организация,
		               |	ВЫБОР
		               |		КОГДА скEDI_ГруппыПодписейРегистр.Подпись ЕСТЬ NULL
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ВходитВГруппу
		               |ИЗ
		               |	Справочник.скEDI_Подписи КАК скEDI_Подписи
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.скEDI_ГруппыПодписей КАК скEDI_ГруппыПодписейРегистр
		               |		ПО скEDI_Подписи.Ссылка = скEDI_ГруппыПодписейРегистр.Подпись
		               |			И (скEDI_ГруппыПодписейРегистр.ГруппаПодписи = &ГруппаПодписи)
		               |ГДЕ
		               |	скEDI_Подписи.Владелец = &Организация
		               |	И скEDI_Подписи.ИспользованиеКлюча = ЗНАЧЕНИЕ(Перечисление.скEDI_ИспользованиеКлючей.Подписание)
		               |	И (скEDI_ГруппыПодписейРегистр.ГруппаПодписи ЕСТЬ НЕ NULL 
		               |			ИЛИ НЕ скEDI_Подписи.Роль В (&РолиПодписейИсключение))
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	скEDI_Подписи.Наименование";
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ГруппаПодписи", ГруппаПодписи);
		
		РолиПодписей = Новый СписокЗначений;
		Если ГруппаПодписи = ПредопределенноеЗначение("Справочник.скEDI_ГруппыПодписей.Руководитель") Тогда
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПечатьОрганизации"));
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера"));
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица"));
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица"));
		ИначеЕсли ГруппаПодписи = ПредопределенноеЗначение("Справочник.скEDI_ГруппыПодписей.Бухгалтер") Тогда
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПечатьОрганизации"));
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьДиректора"));
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица"));
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица"));
		ИначеЕсли ГруппаПодписи = ПредопределенноеЗначение("Справочник.скEDI_ГруппыПодписей.Печать") Тогда
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера"));
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьДиректора"));
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица"));
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица"));
		ИначеЕсли ГруппаПодписи = ПредопределенноеЗначение("Справочник.скEDI_ГруппыПодписей.ОтветственноеЛицо") Тогда
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПечатьОрганизации"));
		ИначеЕсли ГруппаПодписи = ПредопределенноеЗначение("Справочник.скEDI_ГруппыПодписей.ДопДокументыДФС") Тогда
			РолиПодписей.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица"));
		Иначе
		КонецЕсли;
		Запрос.УстановитьПараметр("РолиПодписейИсключение", РолиПодписей);
		
		ВыборкаРезультатаЗапроса =  Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			НоваяСтрока = СоставГруппыПодписи.Добавить();
			НоваяСтрока.Подпись = ВыборкаРезультатаЗапроса.Ссылка;
			НоваяСтрока.Организация = ВыборкаРезультатаЗапроса.Организация;
			НоваяСтрока.ВходитВГруппу = ВыборкаРезультатаЗапроса.ВходитВГруппу;
			НоваяСтрока.ВходитВГруппуКеш = ВыборкаРезультатаЗапроса.ВходитВГруппу;
			НоваяСтрока.ГруппаПодписи = ГруппаПодписи;
		КонецЦикла;
	Иначе
		СоставГруппыПодписи.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПодписейПриАктивизацииСтроки(Элемент)
	ЗаполнитьСоставГруппыПодписейНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВхождениеВГруппуПодписейНаСервере(ГруппаПодписи, Подпись, ВходитВГруппу)
	ГруппыПодписейМенеджерЗаписи = РегистрыСведений.скEDI_ГруппыПодписей.СоздатьМенеджерЗаписи();
	ГруппыПодписейМенеджерЗаписи.Подпись = Подпись;
	ГруппыПодписейМенеджерЗаписи.ГруппаПодписи = ГруппаПодписи;
	Если ВходитВГруппу Тогда
		ГруппыПодписейМенеджерЗаписи.Записать(Истина);
	Иначе
		ГруппыПодписейМенеджерЗаписи.Удалить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставГруппыПодписиВходитВГруппуПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.СоставГруппыПодписи.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ТекущаяСтрока.ВходитВГруппуКеш <> ТекущаяСтрока.ВходитВГруппу Тогда
			ПараметрОповещения = Новый ФиксированнаяСтруктура(Новый Структура("ГруппаПодписи, Подпись, Организация", ТекущаяСтрока.ГруппаПодписи, ТекущаяСтрока.Подпись, ТекущаяСтрока.Организация));
			УстановитьВхождениеВГруппуПодписейНаСервере(ТекущаяСтрока.ГруппаПодписи, ТекущаяСтрока.Подпись, ТекущаяСтрока.ВходитВГруппу);
			ТекущаяСтрока.ВходитВГруппуКеш = ТекущаяСтрока.ВходитВГруппу;
			Оповестить("скEDI_ИзмененоЗначениеНастройкиВхожденияПодписиВГруппу", ПараметрОповещения, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуНастроек(Команда)
	Подписанты = Новый Структура;
	МассивПодписей = Новый Массив;
	МассивПодписей.Добавить(Неопределено);
	Подписанты.Вставить("МассивПодписей", МассивПодписей);
	
	МассивПодписей = Новый Массив;
	//МассивПодписей.Добавить(Новый Структура("ОрганизацияEDI, ПодписьШифрования", Организация, Неопределено));
	Подписанты.Вставить("МассивПодписейШифрования", МассивПодписей);
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить(НСтр("ru = 'Открыть страницу настроек'; uk = 'Відкрити сторінку налаштувань'"));
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", "", ВыполняемыеОперации, Организация, Подписанты);
	лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
	Результат = лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально();
	Флаг = Ложь;
	ДоступКСтраницеНастроекСостояние = "";
	Если Результат <> Неопределено Тогда
		Для Каждого П Из Результат.ТаблицаНеобходимыхПодписей Цикл
			ДоступКСтраницеНастроекСертификат = П.ТелоСертификата;
			ДоступКСтраницеНастроекКлючНаЗащищенномНосителе = П.КлючНаЗащищенномНосителе;
			ДоступКСтраницеНастроекКлюч = П.ТелоСекретногоКлюча;
			ДоступКСтраницеНастроекПароль = П.ПарольСекретногоКлюча;
			ДоступКСтраницеНастроекЗащищенныйНосительProviderName = П.ЗащищенныйНосительProviderName;
			ДоступКСтраницеНастроекЗащищенныйНосительSlotId = П.ЗащищенныйНосительSlotId;
			ДоступКСтраницеНастроекЗащищенныйНосительTokenSerialNumber = П.ЗащищенныйНосительTokenSerialNumber;
			ДоступКСтраницеНастроекЗащищенныйНосительЕстьНастройкаДоступаКСерверу = П.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу;
			ДоступКСтраницеНастроекЗащищенныйНосительСервер = П.ЗащищенныйНосительСервер;
			ДоступКСтраницеНастроекЗащищенныйНосительПорт = П.ЗащищенныйНосительПорт;
			Флаг = Истина;
		КонецЦикла;
	КонецЕсли;
	Если Флаг Тогда
		СтраницаНастроек = "https://sota-buh.com.ua/enterprise/docflowauth";
		ДоступКСтраницеНастроекСостояние = "ВводКлюча";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СоздатьСтрокуBase64(Строка)
	 ВременныйФайл = ПолучитьИмяВременногоФайла();
	 
	 ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл, "CESU-8");
	 ЗаписьТекста.Записать(Строка);
	 ЗаписьТекста.Закрыть();
	 
	 ДД_Файла = Новый ДвоичныеДанные(ВременныйФайл);
	 СтрокаBase64 = Base64Строка(ДД_Файла);
	 
	 УдалитьФайлы(ВременныйФайл);
	 
	 Возврат СтрокаBase64;
КонецФункции // СоздатьСтрокуBase64()

&НаКлиенте
Процедура СтраницаНастроекДокументСформирован(Элемент)
	Если ДоступКСтраницеНастроекСостояние = "ВводКлюча" Тогда
		Документ = Элементы.СтраницаНастроек.Документ;
		
		ДокЭлементы = Неопределено;
		Попытка
			ДокЭлементы = Документ.body.all;
			Если ДокЭлементы = Неопределено Тогда
				ДокЭлементы = Документ.body.firstElementChild;
			КонецЕсли;
		Исключение
			
		КонецПопытки;
		
		Если ДокЭлементы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		
		Токен = "";
		Subm = Неопределено;
		Для Каждого all Из ДокЭлементы Цикл
			Если all.id = "token" Тогда
				Токен = all.Value;
			КонецЕсли;
		КонецЦикла;
		Если Токен <> "" Тогда
			лДанныеПодписи = Новый Структура;
			лДанныеПодписи.Вставить("ТелоСертификата", ДоступКСтраницеНастроекСертификат);
			лДанныеПодписи.Вставить("КлючНаЗащищенномНосителе", ДоступКСтраницеНастроекКлючНаЗащищенномНосителе);
			лДанныеПодписи.Вставить("ТелоСекретногоКлюча", ДоступКСтраницеНастроекКлюч);
			лДанныеПодписи.Вставить("ПарольСекретногоКлюча", ДоступКСтраницеНастроекПароль);
			лДанныеПодписи.Вставить("ЗащищенныйНосительProviderName", ДоступКСтраницеНастроекЗащищенныйНосительProviderName);
			лДанныеПодписи.Вставить("ЗащищенныйНосительSlotId", ДоступКСтраницеНастроекЗащищенныйНосительSlotId);
			лДанныеПодписи.Вставить("ЗащищенныйНосительTokenSerialNumber", ДоступКСтраницеНастроекЗащищенныйНосительTokenSerialNumber);
			лДанныеПодписи.Вставить("ЗащищенныйНосительЕстьНастройкаДоступаКСерверу", ДоступКСтраницеНастроекЗащищенныйНосительЕстьНастройкаДоступаКСерверу);
			лДанныеПодписи.Вставить("ЗащищенныйНосительСервер", ДоступКСтраницеНастроекЗащищенныйНосительСервер);
			лДанныеПодписи.Вставить("ЗащищенныйНосительПорт", ДоступКСтраницеНастроекЗащищенныйНосительПорт);
			
			
			лПараметрыПодписиДокумента = Новый Структура;
			лПараметрыПодписиДокумента.Вставить("Body", СоздатьСтрокуBase64(Токен));
			СтрокаПодключенияEDI = Неопределено;
			СерверEDI = Неопределено;
			ПортEDI = Неопределено;
			скEDI_ОбщегоНазначения.ДобавитьПараметрыСекретногоКлюча(лПараметрыПодписиДокумента, лДанныеПодписи, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			//лПараметрыПодписиДокумента.Вставить("Cert", ДоступКСтраницеНастроекСертификат);
			//лПараметрыПодписиДокумента.Вставить("Key", ДоступКСтраницеНастроекКлюч);
			//лПараметрыПодписиДокумента.Вставить("Password", ДоступКСтраницеНастроекПароль);
			лРезультатПодписиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sign", лПараметрыПодписиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			пТокен = лРезультатПодписиДокумента.Body;
			
			Если лРезультатПодписиДокумента.Code = 0 Тогда
				Для Каждого all Из ДокЭлементы Цикл
					Если all.id = "sign" Тогда
						all.value = пТокен;
					КонецЕсли;
					Попытка
						Если Нрег(all.type) = "submit" Тогда
							Subm = all;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЦикла;
				Если Subm <> Неопределено Тогда
					ДоступКСтраницеНастроекСостояние = "КлючВведен";
					Subm.click();
				КонецЕсли;
			Иначе
				Сообщить(лРезультатПодписиДокумента.Message);
				Элементы.СохранитьСтраницуНастроек.Доступность = Истина;
				ДоступКСтраницеНастроекСостояние = "";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДоступКСтраницеНастроекСостояние = "КлючВведен" Тогда
		Элементы.СохранитьСтраницуНастроек.Доступность = Истина;
		ДоступКСтраницеНастроекСостояние = "";
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокИдентификаторовПрограммыНаСервере(Организация)
	Возврат скEDI_ОбщегоНазначения.ПолучитьСписокИдентификаторовПрограммы(Организация.Код);
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьИдентификаторПрограммыНаСервере(Организация, НовыйИдентификаторПрограммы, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту)
	ОрганизацияОбъект = Организация.ПолучитьОбъект();
	ОрганизацияОбъект.ИдентификаторПрограммы = НовыйИдентификаторПрограммы;
	ОрганизацияОбъект.Записать();
	ПолучитьРеквизитыОрганизации(Организация, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьАдресЭлектроннойПочтыНаСервере(Организация, НовыйАдресЭлектроннойПочты, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту)
	ОрганизацияОбъект = Организация.ПолучитьОбъект();
	ОрганизацияОбъект.АдресЭлектроннойПочты = НовыйАдресЭлектроннойПочты;
	ОрганизацияОбъект.Записать();
	ПолучитьРеквизитыОрганизации(Организация, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВыводитьИнформациюОПодписантахНаСервере(Организация, НовыйВыводитьИнформациюОПодписантах, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту)
	ОрганизацияОбъект = Организация.ПолучитьОбъект();
	ОрганизацияОбъект.ВыводитьИнформациюОПодписантах = НовыйВыводитьИнформациюОПодписантах;
	ОрганизацияОбъект.Записать();
	ПолучитьРеквизитыОрганизации(Организация, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСпособОтправкиНалоговыхДокументовКонтрагентуНаСервере(Организация, НовыйСпособОтправкиНалоговыхДокументовКонтрагенту, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту)
	ОрганизацияОбъект = Организация.ПолучитьОбъект();
	ОрганизацияОбъект.СпособОтправкиНалоговыхДокументовКонтрагенту = НовыйСпособОтправкиНалоговыхДокументовКонтрагенту;
	ОрганизацияОбъект.Записать();
	ПолучитьРеквизитыОрганизации(Организация, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПрограммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Организация = ПредопределенноеЗначение("Справочник.скEDI_Организации.ПустаяСсылка") Тогда
		Сообщить(НСтр("ru = 'Организация не выбрана'; uk = 'Організація не вибрана'"));
	Иначе
		ДанныеВыбора = ПолучитьСписокИдентификаторовПрограммыНаСервере(Организация);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПрограммыОчистка(Элемент, СтандартнаяОбработка)
	Если Организация = ПредопределенноеЗначение("Справочник.скEDI_Организации.ПустаяСсылка") Тогда
		Сообщить(НСтр("ru = 'Организация не выбрана'; uk = 'Організація не вибрана'"));
	Иначе
		УстановитьИдентификаторПрограммыНаСервере(Организация, "", ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПрограммыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьИдентификаторПрограммыНаСервере(Организация, ВыбранноеЗначение, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КопироватьНастройки(Команда)
	ТекущаяСтрока = Элементы.ВидыЭлектронныхДокументов.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПараметрыЗагрузкиНастроек = Новый Структура("ИсточникВидЭлектронногоДокумента, ИсточникОрганизация", ТекущаяСтрока, Организация);
		ОткрытьФорму("ОбщаяФорма.скEDI_ФормаКопированияНастроек", ПараметрыЗагрузкиНастроек, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьИнформациюОПодписантахПриИзменении(Элемент)
	УстановитьВыводитьИнформациюОПодписантахНаСервере(Организация, ВыводитьИнформациюОПодписантах, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
КонецПроцедуры


&НаКлиенте
Функция Проверить(Значение, ОбязательныйСимвол, ЗапретныеСимволы)
	ОбязательныйСимвол = ВРег(ОбязательныйСимвол);
	ЗапретныеСимволы = ВРег(ЗапретныеСимволы);
	ОбязательныйСимволНайден = Ложь;
	Для Н = 1 по СтрДлина(Значение) Цикл
		ТекСимвол = ВРег(Сред(Значение, Н, 1));
		Если ОбязательныйСимволНайден Тогда
			Если ТекСимвол = ОбязательныйСимвол Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если ТекСимвол = ОбязательныйСимвол Тогда
				ОбязательныйСимволНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Найти(ЗапретныеСимволы, ТекСимвол) > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ОбязательныйСимволНайден Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		Если Проверить(АдресЭлектроннойПочты, "@", "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦШЩЪЫЬЭЮЯҐЄІЇ") Тогда
			УстановитьАдресЭлектроннойПочтыНаСервере(Организация, АдресЭлектроннойПочты, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
		Иначе
			Сообщить(НСтр("ru = 'Адрес электронной почты не корректный.'; uk = 'Адреса електронної пошти не коректна.'"));
			ПолучитьРеквизитыОрганизации(Организация, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
		КонецЕсли;
	Иначе
		УстановитьАдресЭлектроннойПочтыНаСервере(Организация, АдресЭлектроннойПочты, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправкиНалоговыхДокументовКонтрагентуПриИзменении(Элемент)
	УстановитьСпособОтправкиНалоговыхДокументовКонтрагентуНаСервере(Организация, СпособОтправкиНалоговыхДокументовКонтрагенту, ИдентификаторПрограммы, ВыводитьИнформациюОПодписантах, АдресЭлектроннойПочты, СпособОтправкиНалоговыхДокументовКонтрагенту);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьЛицензиюНаСервере(Организация, ПоСерверамЗащищенныхНосителей = Ложь)
	ЕДРПОУ = Организация.Код;
	лПараметры = Новый Структура;
	лПараметры.Вставить("EDRPOU", ЕДРПОУ);
	
	Если ПоСерверамЗащищенныхНосителей Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСервер,
		               |	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительПорт
		               |ИЗ
		               |	РегистрСведений.скEDI_СохраненныеНастройкиПоПодписям КАК скEDI_СохраненныеНастройкиПоПодписям
		               |ГДЕ
		               |	скEDI_СохраненныеНастройкиПоПодписям.ОрганизацияEDI = &ОрганизацияEDI
		               |	И скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу
		               |	И НЕ(скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСервер = &ЗащищенныйНосительСервер
		               |				И скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительПорт = &ЗащищенныйНосительПорт)";
		Запрос.УстановитьПараметр("ОрганизацияEDI", Организация);
		Запрос.УстановитьПараметр("ЗащищенныйНосительСервер", Константы.скEDI_СерверEDIПровайдера.Получить());
		Запрос.УстановитьПараметр("ЗащищенныйНосительПорт", Константы.скEDI_ПортEDIПровайдера.Получить());
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/downloadlicense", лПараметры, , ВыборкаРезультатаЗапроса.ЗащищенныйНосительСервер, ВыборкаРезультатаЗапроса.ЗащищенныйНосительПорт);
		КонецЦикла;
	КонецЕсли;
	Возврат скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/downloadlicense", лПараметры);
КонецФункции

&НаКлиенте
Процедура ЗагрузитьЛицензиюИнтернет(Команда)
	Лицензии.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить(НСтр("ru = 'Организация не выбрана'; uk = 'Організація не вибрана'"));
		Возврат;	
	КонецЕсли;
	
	Рез = ЗагрузитьЛицензиюНаСервере(Организация, Истина);
	МассивЛицензий = Неопределено;
	Если Рез.Свойство("License", МассивЛицензий) Тогда
		Если ТипЗнч(МассивЛицензий) = Тип("Массив") Тогда
			Для Каждого СтрокаМассиваЛицензий из МассивЛицензий Цикл
				НоваяСтрока = Лицензии.Добавить();
				НоваяСтрока.ЕДРПОУ = СтрокаМассиваЛицензий.Edrpou;
				НоваяСтрока.КодФилиала = СтрокаМассиваЛицензий.Dept;
				НоваяСтрока.ДатаОкончания = СтрокаМассиваЛицензий.DateEnd;
				НоваяСтрока.Наименование = СтрокаМассиваЛицензий.Name;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИспользованиеПодсистемыНаСервере(Значение)
	Константы.скEDI_ИспользованиеПодсистемы.Установить(Значение);
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеПодсистемыПриИзменении(Элемент)
	УстановитьИспользованиеПодсистемыНаСервере(ИспользованиеПодсистемы);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСтраницуНастроек(Команда)
	Попытка
		doc = Элементы.СтраницаНастроек.Документ;
		Button = Неопределено;
		Для Каждого all Из doc.body.children Цикл
			Попытка
				Если all.Name = "sc_button_DocSave" Тогда
					Button = all;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
		Если Button = Неопределено Тогда
			head = doc.head;//Документ.GetElementsByTagName("head")[0];
			s = doc.CreateElement("script");
			s.SetAttribute("type", "text/javascript");
			s.innerText = "function docFlowSave()
			|{
			|	docFlow.save();
			|}";
			head.AppendChild(s);
			
			body = doc.body;//doc.GetElementsByTagName( "head" )[ 0 ];
			Button = doc.CreateElement("input");
			Button.SetAttribute("type", "button");
			Button.SetAttribute("style", "display:none");
			Button.SetAttribute("OnClick", "docFlowSave()" );
			Button.Name = "sc_button_DocSave";
			body.AppendChild(Button);
		КонецЕсли;
		Button.click();
		//doc.InvokeScript("docFlowSave");
		//doc.InvokeScript("alert('сообщение от 1c')");
	Исключение
		doc = Элементы.СтраницаНастроек.Документ;
		
		JSscript = "function docFlowSave()
							|{
							|	docFlow.save();
							|}";

		HTMLscript = doc.createElement("script");
		//HTMLscript.id=id;
		HTMLscript.setAttribute("type", "text/javascript"); 
		HTMLscript.setAttribute("async", Ложь);
		HTMLscript.innerText=JSscript;
		doc.head.appendChild(HTMLscript);
		doc.DefaultView.docFlowSave();
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПользователейСервере()
	ТаблицаПользователей.Очистить();
	ТекСтрока = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Ссылка,
	               |	Пользователи.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		НовыйЭлементТаблицыПользователей = ТаблицаПользователей.Добавить();
		НовыйЭлементТаблицыПользователей.Пользователь = ВыборкаРезультатаЗапроса.Ссылка;
		НовыйЭлементТаблицыПользователей.Контроль = ПланыВидовХарактеристик.скEDI_НастройкиПользователей.ПолучитьЗначениеНастройки(НовыйЭлементТаблицыПользователей.Пользователь, ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_НастройкиПользователей.ТолькоДоступныеПодписи"));
	КонецЦикла;
	Если ПланыВидовХарактеристик.скEDI_НастройкиПользователей.ЕстьДоступРедактироватьНастройку(ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_НастройкиПользователей.ТолькоДоступныеПодписи")) Тогда
		Элементы.ТаблицаПользователейКонтроль.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ТаблицаПользователейКонтроль.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПодписиПользователейСервере(ТекПользователь)
	ТаблицаПодписиПользователей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_Подписи.Ссылка КАК Ссылка,
	               |	скEDI_Подписи.Роль КАК Роль,
	               |	скEDI_Подписи.ИспользованиеКлюча КАК ИспользованиеКлюча,
	               |	ВЫБОР
	               |		КОГДА ПодписиПользователей.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьДоступ
	               |ИЗ
	               |	Справочник.скEDI_Подписи КАК скEDI_Подписи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			скEDI_ПодписиПользователи.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.скEDI_Подписи.Пользователи КАК скEDI_ПодписиПользователи
	               |		ГДЕ
	               |			скEDI_ПодписиПользователи.Пользователь = &Пользователь) КАК ПодписиПользователей
	               |		ПО скEDI_Подписи.Ссылка = ПодписиПользователей.Ссылка
	               |ГДЕ
	               |	скEDI_Подписи.Владелец = &Организация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_Подписи.Наименование";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		НовыйЭлементТаблицыПодписиПользователей = ТаблицаПодписиПользователей.Добавить();
		НовыйЭлементТаблицыПодписиПользователей.Пользователь = ТекПользователь;
		НовыйЭлементТаблицыПодписиПользователей.Подпись = ВыборкаРезультатаЗапроса.Ссылка;
		НовыйЭлементТаблицыПодписиПользователей.ЕстьДоступ = ВыборкаРезультатаЗапроса.ЕстьДоступ;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуПользователей(Команда)
	ОбновитьТаблицуПользователейСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуПодписиПользователейНаКлиенте()
	ТекПользователь = Неопределено;
	ТаблицаПользователейТекущиеДанные = Элементы.ТаблицаПользователей.ТекущиеДанные;
	Если ТаблицаПользователейТекущиеДанные <> Неопределено Тогда
		ТекПользователь = ТаблицаПользователейТекущиеДанные.Пользователь;
	КонецЕсли;
	ОбновитьТаблицуПодписиПользователейСервере(ТекПользователь);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейПриАктивизацииСтроки(Элемент)
	ОбновитьТаблицуПодписиПользователейНаКлиенте();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаблицаПользователейКонтрольИзмененитьНаСервере(Пользователь, Значение)
	ПланыВидовХарактеристик.скEDI_НастройкиПользователей.УстановитьЗначениеНастройки(Пользователь, ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_НастройкиПользователей.ТолькоДоступныеПодписи"), Значение);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейКонтрольПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПользователей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТаблицаПользователейКонтрольИзмененитьНаСервере(ТекущиеДанные.Пользователь, ТекущиеДанные.Контроль);
		Оповестить("скEDI_ИзмененоЗначениеНастройкиПользователя_ТолькоДоступныеПодписи", ТекущиеДанные.Пользователь, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейКонтрольОтметитьВсе(Команда)
	Для Каждого ТекущиеДанные Из ТаблицаПользователей Цикл
		Если не ТекущиеДанные.Контроль Тогда
			ТекущиеДанные.Контроль = Истина;
			ТаблицаПользователейКонтрольИзмененитьНаСервере(ТекущиеДанные.Пользователь, ТекущиеДанные.Контроль);
			Оповестить("скEDI_ИзмененоЗначениеНастройкиПользователя_ТолькоДоступныеПодписи", ТекущиеДанные.Пользователь, ЭтаФорма);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейКонтрольСнятьВсеОтметки(Команда)
	Для Каждого ТекущиеДанные Из ТаблицаПользователей Цикл
		Если ТекущиеДанные.Контроль Тогда
			ТекущиеДанные.Контроль = Ложь;
			ТаблицаПользователейКонтрольИзмененитьНаСервере(ТекущиеДанные.Пользователь, ТекущиеДанные.Контроль);
			Оповестить("скEDI_ИзмененоЗначениеНастройкиПользователя_ТолькоДоступныеПодписи", ТекущиеДанные.Пользователь, ЭтаФорма);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаблицаПодписиПользователейЕстьДоступИзмененитьНаСервере(Пользователь, Подпись, Значение)
	Если ЗначениеЗаполнено(Подпись) Тогда
		ПодписьОбъект = Подпись.ПолучитьОбъект();
		ПодписьОбъектПользователи = ПодписьОбъект.Пользователи;
		НайденыеПользователи = ПодписьОбъектПользователи.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
		Если Значение = Истина Тогда
			Если НайденыеПользователи.Количество() = 0 Тогда
				НоваяСтрока = ПодписьОбъектПользователи.Добавить();
				НоваяСтрока.Пользователь = Пользователь;
			КонецЕсли;
		Иначе
			Для Каждого ЭлементНайденыеПользователи Из НайденыеПользователи Цикл
				ПодписьОбъектПользователи.Удалить(ЭлементНайденыеПользователи.НомерСтроки - 1);
			КонецЦикла;
		КонецЕсли;
		ПодписьОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписиПользователейЕстьДоступПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПодписиПользователей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТаблицаПодписиПользователейЕстьДоступИзмененитьНаСервере(ТекущиеДанные.Пользователь, ТекущиеДанные.Подпись, ТекущиеДанные.ЕстьДоступ);
		ПараметрОповещения = Новый ФиксированнаяСтруктура(Новый Структура("Подпись, Организация", ТекущиеДанные.Подпись, Организация));
		Оповестить("скEDI_ИзмененоЭлементСправочникаПодписи", ПараметрОповещения, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписиПользователейЕстьДоступОтметитьВсе(Команда)
	Для Каждого ТекущиеДанные Из ТаблицаПодписиПользователей Цикл
		Если не ТекущиеДанные.ЕстьДоступ Тогда
			ТекущиеДанные.ЕстьДоступ = Истина;
			ТаблицаПодписиПользователейЕстьДоступИзмененитьНаСервере(ТекущиеДанные.Пользователь, ТекущиеДанные.Подпись, ТекущиеДанные.ЕстьДоступ);
			ПараметрОповещения = Новый ФиксированнаяСтруктура(Новый Структура("Подпись, Организация", ТекущиеДанные.Подпись, Организация));
			Оповестить("скEDI_ИзмененоЭлементСправочникаПодписи", ПараметрОповещения, ЭтаФорма);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписиПользователейЕстьДоступСнятьВсеОтметки(Команда)
	Для Каждого ТекущиеДанные Из ТаблицаПодписиПользователей Цикл
		Если ТекущиеДанные.ЕстьДоступ Тогда
			ТекущиеДанные.ЕстьДоступ = Ложь;
			ТаблицаПодписиПользователейЕстьДоступИзмененитьНаСервере(ТекущиеДанные.Пользователь, ТекущиеДанные.Подпись, ТекущиеДанные.ЕстьДоступ);
			ПараметрОповещения = Новый ФиксированнаяСтруктура(Новый Структура("Подпись, Организация", ТекущиеДанные.Подпись, Организация));
			Оповестить("скEDI_ИзмененоЭлементСправочникаПодписи", ПараметрОповещения, ЭтаФорма);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНастройкиПользователяТолькоДоступныеПодписиСервере(Пользователь)
	Если ЗначениеЗаполнено(Пользователь) Тогда
		МассивОтобраныхСтрок = ТаблицаПользователей.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
	Иначе
		МассивОтобраныхСтрок = ТаблицаПользователей;
	КонецЕсли;
	Для Каждого ЭлементМассиваОтобраныхСтрок из МассивОтобраныхСтрок Цикл
		ЭлементМассиваОтобраныхСтрок.Контроль = ПланыВидовХарактеристик.скEDI_НастройкиПользователей.ПолучитьЗначениеНастройки(ЭлементМассиваОтобраныхСтрок.Пользователь, ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_НастройкиПользователей.ТолькоДоступныеПодписи"));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Источник <> ЭтаФорма Тогда
		Если ИмяСобытия = "скEDI_ИзмененоЗначениеНастройкиПользователя_ТолькоДоступныеПодписи" Тогда
			ОбновитьЗначениеНастройкиПользователяТолькоДоступныеПодписиСервере(Параметр);
		ИначеЕсли ИмяСобытия = "скEDI_ИзмененоЭлементСправочникаПодписи" Тогда
			Если ТипЗнч(Параметр) = Тип("ФиксированнаяСтруктура") Тогда
				ОрганизацияПоОповещению = Неопределено;
				Если Параметр.Свойство("Организация", ОрганизацияПоОповещению) Тогда
					Если ОрганизацияПоОповещению = Организация Тогда
						ОбновитьТаблицуПодписиПользователейНаКлиенте();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяСобытия = "скEDI_ИзмененоЗначениеНастройкиВхожденияПодписиВГруппу" Тогда
			Если ТипЗнч(Параметр) = Тип("ФиксированнаяСтруктура") Тогда
				ОрганизацияПоОповещению = Неопределено;
				Если Параметр.Свойство("Организация", ОрганизацияПоОповещению) Тогда
					Если ОрганизацияПоОповещению = Организация Тогда
						ГруппаПодписиПоОповещению = Неопределено;
						Если Параметр.Свойство("ГруппаПодписи", ГруппаПодписиПоОповещению) Тогда
							ГруппаПодписи = Элементы.ГруппыПодписей.ТекущаяСтрока;
							Если ГруппаПодписиПоОповещению = ГруппаПодписи Тогда
								ЗаполнитьСоставГруппыПодписейНаСервере();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


