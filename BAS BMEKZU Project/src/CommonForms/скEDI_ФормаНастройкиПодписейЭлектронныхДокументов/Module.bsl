////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБЩЕГО НАЗНАЧЕНИЯ

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПолучитьИнформацияОбЭлектронноЦифровыхПодписях()
	
	лМассивПодписей = Новый Массив;
	Для Каждого лСтрокаПодписи Из ТаблицаПодписей Цикл
		лМассивПодписей.Добавить(лСтрокаПодписи.Подпись);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ПодписиСертификаты.Ссылка КАК Подпись,
	|	скEDI_ПодписиСертификаты.Ссылка.Роль КАК Роль,
	|	скEDI_ПодписиСертификаты.Ссылка.ИспользованиеКлюча КАК ИспользованиеКлюча,
	|	ВЫБОР
	|		КОГДА скEDI_ПодписиСертификаты.Ссылка.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица)
	|			ТОГДА """"
	|		ИНАЧЕ скEDI_ПодписиСертификаты.Ссылка.Владелец.Код
	|	КОНЕЦ КАК КодПоЕДРПОУ,
	|	ВЫБОР
	|		КОГДА скEDI_ПодписиСертификаты.Ссылка.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера)
	|				ИЛИ скEDI_ПодписиСертификаты.Ссылка.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора)
	|				ИЛИ скEDI_ПодписиСертификаты.Ссылка.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица)
	|				ИЛИ скEDI_ПодписиСертификаты.Ссылка.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица)
	|			ТОГДА скEDI_ПодписиСертификаты.Ссылка.Фамилия + "" "" + скEDI_ПодписиСертификаты.Ссылка.Имя
	|		ИНАЧЕ скEDI_ПодписиСертификаты.Ссылка.Владелец.Наименование
	|	КОНЕЦ КАК ВладелецПодписи,
	|	скEDI_ПодписиСертификаты.Ссылка.ДРФО КАК ДРФО,
	|	скEDI_ПодписиСертификаты.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	скEDI_ПодписиСертификаты.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	скEDI_ПодписиСертификаты.ИздательСертификата КАК ИздательСертификата,
	|	скEDI_ПодписиСертификаты.ТелоСертификата КАК ТелоСертификата,
	|	скEDI_ПодписиСертификаты.СерийныйНомер КАК СерийныйНомер,
	|	скEDI_ПодписиСертификаты.КлючНаЗащищенномНосителе КАК КлючНаЗащищенномНосителе,
	|	скEDI_ПодписиСертификаты.КлючНаСервисеCloudKey КАК КлючНаСервисеCloudKey,
	|	скEDI_ПодписиСертификаты.ИдентификаторСекретногоКлюча КАК ИдентификаторСекретногоКлюча
	|ИЗ
	|	Справочник.скEDI_Подписи.Сертификаты КАК скEDI_ПодписиСертификаты
	|ГДЕ
	|	скEDI_ПодписиСертификаты.Использовать
	|	И НЕ скEDI_ПодписиСертификаты.Ссылка.ПометкаУдаления
	|	И скEDI_ПодписиСертификаты.Ссылка В(&МассивПодписей)";
	Запрос.УстановитьПараметр("МассивПодписей", лМассивПодписей);
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого лСтрокаПодписи Из ТаблицаПодписей Цикл
		ИнформацияОПодписи = ТаблицаРезультатаЗапроса.Найти(лСтрокаПодписи.Подпись, "Подпись");
		Если ИнформацияОПодписи <> Неопределено Тогда
			лСтрокаПодписи.КодПоЕДРПОУ = ИнформацияОПодписи.КодПоЕДРПОУ;
			лСтрокаПодписи.ВладелецПодписи = ИнформацияОПодписи.ВладелецПодписи;
			лСтрокаПодписи.ДРФО = ИнформацияОПодписи.ДРФО;
			лСтрокаПодписи.ДатаНачалаДействия = ИнформацияОПодписи.ДатаНачалаДействия;
			лСтрокаПодписи.ДатаОкончанияДействия = ИнформацияОПодписи.ДатаОкончанияДействия;
			лСтрокаПодписи.ИздательСертификата = ИнформацияОПодписи.ИздательСертификата;
			лСтрокаПодписи.Роль = ИнформацияОПодписи.Роль;
			лСтрокаПодписи.ИспользованиеКлюча = ИнформацияОПодписи.ИспользованиеКлюча;
			лСтрокаПодписи.ТелоСертификата = ИнформацияОПодписи.ТелоСертификата;
			лСтрокаПодписи.СерийныйНомер = ИнформацияОПодписи.СерийныйНомер;
			лСтрокаПодписи.КлючНаЗащищенномНосителе = ИнформацияОПодписи.КлючНаЗащищенномНосителе;
			лСтрокаПодписи.КлючНаСервисеCloudKey = ИнформацияОПодписи.КлючНаСервисеCloudKey;
			лСтрокаПодписи.ИдентификаторСекретногоКлюча = ИнформацияОПодписи.ИдентификаторСекретногоКлюча;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПолучитьИнформацияОбЭлектронноЦифровыхПодписях()

&НаКлиенте
Процедура ОбновитьСостояниеЗащищенногоНосителяНаКлиенте(Команда)
	СуфиксРеквизитов = Сред(Команда.Имя, СтрДлина("ОбновитьСостояниеЗащищенногоНосителя_")+1);
	СуфиксРеквизитовПодписи = ПолучитьСуфиксРеквизитовПодписи(СуфиксРеквизитов);
	Если СуфиксРеквизитовПодписи <> "" Тогда
		Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_" + СуфиксРеквизитовПодписи] Тогда
			Если не ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_" + СуфиксРеквизитовПодписи] Тогда
				ЕстьНастройкаДоступаКСерверу = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_" + СуфиксРеквизитовПодписи];
				СтрокаПодключения = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_" + СуфиксРеквизитовПодписи];
				НужноИспользоватьТокеныUseNamedKeys = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys_" + СуфиксРеквизитовПодписи];
				ОбновитьСостояниеЗащищенныхНосителейПоНастройкеДоступаНаСервере(ЕстьНастройкаДоступаКСерверу, СтрокаПодключения, НужноИспользоватьТокеныUseNamedKeys);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлементаСпискаСлотов(ВыбранныйЭлементСпискаСлотов, СуфиксРеквизитовПодписи) Экспорт
    Если ВыбранныйЭлементСпискаСлотов = Неопределено Тогда
		//Сообщить("Слот не выбран.");
    Иначе
        ВыбранноеЗначение = ВыбранныйЭлементСпискаСлотов.Значение;
		
		//ЭтаФорма["ТаблицаПодписейИдентификаторСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов]);
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительProviderName_"+СуфиксРеквизитовПодписи] = ВыбранноеЗначение.ProviderName;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительSlotId_"+СуфиксРеквизитовПодписи] = ВыбранноеЗначение.SlotId;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenSerialNumber_"+СуфиксРеквизитовПодписи] = ВыбранноеЗначение.TokenSerialNumber;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenLabel_"+СуфиксРеквизитовПодписи] = ВыбранноеЗначение.TokenLabel;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenManufacturerID_"+СуфиксРеквизитовПодписи] = ВыбранноеЗначение.TokenManufacturerID;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительUseNamedKeys_"+СуфиксРеквизитовПодписи] = ВыбранноеЗначение.UseNamedKeys;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительIsRemoteSlot_"+СуфиксРеквизитовПодписи] = ВыбранноеЗначение.IsRemoteSlot;
		
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительДоступен_"+СуфиксРеквизитовПодписи] = Истина;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСлотВыбран_"+СуфиксРеквизитовПодписи] = Истина;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСостояние_"+СуфиксРеквизитовПодписи] = НСтр("ru = 'Защищенный носитель с секретным ключем '; uk = 'Захищений носій з секретним ключем '")
			+ " " + ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenManufacturerID_"+СуфиксРеквизитовПодписи]
			+ " " + ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenLabel_"+СуфиксРеквизитовПодписи];
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСлотЗащищенногоНосителяНаКлиенте(Команда)
	СуфиксРеквизитов = Сред(Команда.Имя, СтрДлина("ВыбратьСлотЗащищенногоНосителя_")+1);
	СуфиксРеквизитовПодписи = ПолучитьСуфиксРеквизитовПодписи(СуфиксРеквизитов);
	Если СуфиксРеквизитовПодписи <> "" Тогда
		Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_" + СуфиксРеквизитовПодписи] Тогда
			Если не ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_" + СуфиксРеквизитовПодписи] Тогда
				Если ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_" + СуфиксРеквизитовПодписи] Тогда
					ЕстьНастройкаДоступаКСерверу = Истина;
					СтрокаПодключения = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_" + СуфиксРеквизитовПодписи];
				Иначе
					ЕстьНастройкаДоступаКСерверу = Ложь;
					СтрокаПодключения = "";
				КонецЕсли;
				
				РезультатЗапросаПоТокенам = Неопределено;
				Если ЕстьНастройкаДоступаКСерверу Тогда
					Если ЗначениеЗаполнено(СтрокаПодключения) Тогда
						РезультатЗапросаПоТокенам = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gettokens", Новый Структура("IsRemoteSlot", Истина), , СтрокаПодключения);
					КонецЕсли;
				Иначе
					РезультатЗапросаПоТокенам = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gettokens", Новый Структура("IsRemoteSlot", Истина));
				КонецЕсли;
				Токены = Неопределено;
				Если РезультатЗапросаПоТокенам <> Неопределено Тогда
					РезультатЗапросаПоТокенам.Свойство("Tokens", Токены);
					Если ТипЗнч(Токены) = Тип("Массив") Тогда
						СписокСлотов = Новый СписокЗначений;
						
						ТекЭлемент = Неопределено;
						Для Каждого Токен Из Токены Цикл
							ЭлементСписка = Новый Структура;
							ЭлементСписка.Вставить("ProviderName", Токен.ProviderName);
							ЭлементСписка.Вставить("SlotId", Токен.SlotId);
							ЭлементСписка.Вставить("TokenSerialNumber", Токен.TokenSerialNumber);
							ЭлементСписка.Вставить("TokenLabel", Токен.TokenLabel);
							ЭлементСписка.Вставить("TokenManufacturerID", Токен.TokenManufacturerID);
							ЭлементСписка.Вставить("IsRemoteSlot", Токен.IsRemoteSlot);
							ЭлементСписка.Вставить("UseNamedKeys", Токен.UseNamedKeys);
							
							ПредставлениеЭлемента = Строка(Токен.SlotId) + ":"
								+ " " + Строка(Токен.TokenManufacturerID)
								+ " " + Строка(Токен.TokenLabel);
							Т = СписокСлотов.Добавить(ЭлементСписка, ПредставлениеЭлемента);
							
							Если ЭтаФорма["ТаблицаПодписейЗащищенныйНосительProviderName_" + СуфиксРеквизитовПодписи] = Токен.ProviderName
								и ЭтаФорма["ТаблицаПодписейЗащищенныйНосительSlotId_" + СуфиксРеквизитовПодписи] = Токен.SlotId
								и ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenSerialNumber_" + СуфиксРеквизитовПодписи] = Токен.TokenSerialNumber
								и ЭтаФорма["ТаблицаПодписейЗащищенныйНосительIsRemoteSlot_" + СуфиксРеквизитовПодписи] = Токен.IsRemoteSlot
								и ЭтаФорма["ТаблицаПодписейЗащищенныйНосительUseNamedKeys_" + СуфиксРеквизитовПодписи] = Токен.UseNamedKeys
							Тогда
								ТекЭлемент = Т;
							КонецЕсли;
						КонецЦикла;
						
						СписокСлотов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПослеВыбораЭлементаСпискаСлотов", ЭтаФорма, СуфиксРеквизитовПодписи), НСтр("ru = 'Выбор слота'; uk = 'Вибір слота'"), ТекЭлемент);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ОбновитьСостояниеВсехЗащищенныхНосителейНаСервере()
	ТЗДоступККлючамНаЗащищенномНосителе = Новый ТаблицаЗначений;
	ТЗДоступККлючамНаЗащищенномНосителе.Колонки.Добавить("ЕстьНастройкаДоступаКСерверу");
	ТЗДоступККлючамНаЗащищенномНосителе.Колонки.Добавить("СтрокаПодключения");
	//ТЗ.Колонки.Добавить("Сервер");
	//ТЗ.Колонки.Добавить("Порт");
	Для Каждого лСтрокаПодписи ИЗ ТаблицаПодписей Цикл
		Если лСтрокаПодписи.ЕстьОтображениеКлюча Тогда
			Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_"+лСтрокаПодписи.СуфиксРеквизитов] Тогда
				Если не ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_"+лСтрокаПодписи.СуфиксРеквизитов] Тогда
					НоваяСтрока = ТЗДоступККлючамНаЗащищенномНосителе.Добавить();
					Если ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_"+лСтрокаПодписи.СуфиксРеквизитов] Тогда
						НоваяСтрока.ЕстьНастройкаДоступаКСерверу = Истина;
						НоваяСтрока.СтрокаПодключения = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_"+лСтрокаПодписи.СуфиксРеквизитов];
					Иначе
						НоваяСтрока.ЕстьНастройкаДоступаКСерверу = Ложь;
						НоваяСтрока.СтрокаПодключения = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТЗДоступККлючамНаЗащищенномНосителе.Свернуть("ЕстьНастройкаДоступаКСерверу, СтрокаПодключения");
	
	Для Каждого Строка Из ТЗДоступККлючамНаЗащищенномНосителе Цикл
		ОбновитьСостояниеЗащищенныхНосителейПоНастройкеДоступаНаСервере(Строка.ЕстьНастройкаДоступаКСерверу, Строка.СтрокаПодключения);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЗащищенныхНосителейПоНастройкеДоступаНаСервере(ЕстьНастройкаДоступаКСерверу, СтрокаПодключения, ВыполнятьПоискНаНосителяхСПризнакомUseNamedKeys = Ложь)
	РезультатЗапросаПоТокенам = Неопределено;
	Если ЕстьНастройкаДоступаКСерверу Тогда
		Если ЗначениеЗаполнено(СтрокаПодключения) Тогда
			РезультатЗапросаПоТокенам = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gettokens", Новый Структура("IsRemoteSlot", Истина), , СтрокаПодключения);
		КонецЕсли;
	Иначе
		РезультатЗапросаПоТокенам = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gettokens", Новый Структура("IsRemoteSlot", Истина));
	КонецЕсли;
	Токены = Неопределено;
	Если РезультатЗапросаПоТокенам <> Неопределено Тогда
		РезультатЗапросаПоТокенам.Свойство("Tokens", Токены);
	КонецЕсли;
	
	МассивДанныхПоПодписям = Новый Массив;
	Для Каждого лСтрокаПодписи ИЗ ТаблицаПодписей Цикл
		Если лСтрокаПодписи.ЕстьОтображениеКлюча Тогда
			Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_"+лСтрокаПодписи.СуфиксРеквизитов] Тогда
				Если не ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_"+лСтрокаПодписи.СуфиксРеквизитов] Тогда
					Если ЕстьНастройкаДоступаКСерверу Тогда
						Если ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_"+лСтрокаПодписи.СуфиксРеквизитов] Тогда
							Если СтрокаПодключения <> ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_"+лСтрокаПодписи.СуфиксРеквизитов] Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Если ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_"+лСтрокаПодписи.СуфиксРеквизитов] Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
						
					ДанныеПоПодписи = Новый Структура;
					ДанныеПоПодписи.Вставить("СуфиксРеквизитов", лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаИдентификаторСекретногоКлюча", "ТаблицаПодписейИдентификаторСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительProviderName", "ТаблицаПодписейЗащищенныйНосительProviderName_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительSlotId", "ТаблицаПодписейЗащищенныйНосительSlotId_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительTokenSerialNumber", "ТаблицаПодписейЗащищенныйНосительTokenSerialNumber_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительTokenLabel", "ТаблицаПодписейЗащищенныйНосительTokenLabel_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительTokenManufacturerID", "ТаблицаПодписейЗащищенныйНосительTokenManufacturerID_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительUseNamedKeys", "ТаблицаПодписейЗащищенныйНосительUseNamedKeys_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительIsRemoteSlot", "ТаблицаПодписейЗащищенныйНосительIsRemoteSlot_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительСостояние", "ТаблицаПодписейЗащищенныйНосительСостояние_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительДоступен", "ТаблицаПодписейЗащищенныйНосительДоступен_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительTokenPassword", "ТаблицаПодписейЗащищенныйНосительTokenPassword_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys", "ТаблицаПодписейЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys_"+лСтрокаПодписи.СуфиксРеквизитов);
					ДанныеПоПодписи.Вставить("ИмяРеквизитаЗащищенныйНосительСлотВыбран", "ТаблицаПодписейЗащищенныйНосительСлотВыбран_"+лСтрокаПодписи.СуфиксРеквизитов);
					
					ДанныеПоПодписи.Вставить("КлючНайден", Ложь);
					ДанныеПоПодписи.Вставить("НужноИспользоватьТокеныUseNamedKeys", Ложь);
					МассивДанныхПоПодписям.Добавить(ДанныеПоПодписи);
					
					ЭтаФорма[ДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительСостояние] = "";
					ЭтаФорма[ДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительДоступен] = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	//Если ЗначениеЗаполнено(ЭтаФорма["ТаблицаПодписейИдентификаторСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов]) Тогда
	//	КлючНайден = Ложь;
	//	НужноИспользоватьТокеныUseNamedKeys = Ложь;
	
	ЕстьТокеныUseNamedKeys = Ложь;
	Если ТипЗнч(Токены) = Тип("Массив") Тогда
		// UseNamedKeys = Ложь
		Для Каждого Токен Из Токены Цикл
			ProviderName = Токен.ProviderName;
			SlotId = Токен.SlotId;
			TokenSerialNumber = Токен.TokenSerialNumber;
			TokenLabel = Токен.TokenLabel;
			TokenManufacturerID = Токен.TokenManufacturerID;
			IsRemoteSlot = Токен.IsRemoteSlot;
			UseNamedKeys = Токен.UseNamedKeys;
			
			ЕстьНенайденыеКлючи = Ложь;
			
			Если UseNamedKeys = Истина Тогда
				Если ВыполнятьПоискНаНосителяхСПризнакомUseNamedKeys Тогда
					ЕстьНенайденыеКлючи = Истина;
				Иначе
					Для Каждого ТекДанныеПоПодписи из МассивДанныхПоПодписям Цикл
						Если не ТекДанныеПоПодписи.КлючНайден Тогда
							Если ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительСлотВыбран] Тогда
								Если ProviderName = ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительProviderName]
									и SlotId = ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительSlotId]
									и TokenSerialNumber = ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenSerialNumber]
								Тогда
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenLabel] = TokenLabel;
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenManufacturerID] = TokenManufacturerID;
									
									//ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительСостояние]
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительДоступен] = Истина;
									
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительUseNamedKeys] = UseNamedKeys;
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys] = UseNamedKeys;
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительIsRemoteSlot] = IsRemoteSlot;
									ТекДанныеПоПодписи.КлючНайден = Истина;
									//ТекДанныеПоПодписи.НужноИспользоватьТокеныUseNamedKeys = Истина;
								Иначе
									ЕстьНенайденыеКлючи = Истина;
								КонецЕсли;
							Иначе
								ЕстьНенайденыеКлючи = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ЕстьТокеныUseNamedKeys = Истина;
			Иначе
				РезультатЗапросаПоКлючамТокена = Неопределено;
				Если ЕстьНастройкаДоступаКСерверу Тогда
					Если ЗначениеЗаполнено(СтрокаПодключения) Тогда
						РезультатЗапросаПоКлючамТокена = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getkeysontoken", Новый Структура("ProviderName,SlotId,TokenSerialNumber,IsRemoteSlot", ProviderName, SlotId, TokenSerialNumber, IsRemoteSlot), , СтрокаПодключения);
					КонецЕсли;
				Иначе
					РезультатЗапросаПоКлючамТокена = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getkeysontoken", Новый Структура("ProviderName,SlotId,TokenSerialNumber,IsRemoteSlot", ProviderName, SlotId, TokenSerialNumber, IsRemoteSlot));
				КонецЕсли;
				
				Если РезультатЗапросаПоКлючамТокена <> Неопределено Тогда
					КлючиТокена = Неопределено;
					РезультатЗапросаПоКлючамТокена.Свойство("Keys", КлючиТокена);
					Если ТипЗнч(КлючиТокена) = Тип("Массив") Тогда
						Для Каждого ТекДанныеПоПодписи из МассивДанныхПоПодписям Цикл
							Для Каждого КлючТокена Из КлючиТокена Цикл
								Если КлючТокена.KeyId = ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаИдентификаторСекретногоКлюча] Тогда
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительProviderName] = ProviderName;
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительSlotId] = SlotId;
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenSerialNumber] = TokenSerialNumber;
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenLabel] = TokenLabel;
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenManufacturerID] = TokenManufacturerID;
									//ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительСостояние] = "";
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительДоступен] = Истина;
									
									ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительIsRemoteSlot] = IsRemoteSlot;
									Если UseNamedKeys Тогда
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys] = Истина;
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительUseNamedKeys] = Истина;
									Иначе
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys] = Ложь;
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительUseNamedKeys] = Ложь;
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenPassword] = "";
									КонецЕсли;
									
									ТекДанныеПоПодписи.КлючНайден = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							Если не ТекДанныеПоПодписи.КлючНайден Тогда
								ЕстьНенайденыеКлючи = Истина;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ЗначениеЗаполнено(РезультатЗапросаПоКлючамТокена.Message) Тогда
						Сообщить(РезультатЗапросаПоКлючамТокена.Message);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЕстьНенайденыеКлючи Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Если ЕстьТокеныUseNamedKeys Тогда
		Для Каждого ТекДанныеПоПодписи из МассивДанныхПоПодписям Цикл
			Если не ТекДанныеПоПодписи.КлючНайден Тогда
				ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys] = ЕстьТокеныUseNamedKeys;
			КонецЕсли;
		КонецЦикла;
	//КонецЕсли;
	
	Если ВыполнятьПоискНаНосителяхСПризнакомUseNamedKeys И ЕстьТокеныUseNamedKeys Тогда
		Если ТипЗнч(Токены) = Тип("Массив") Тогда
			// UseNamedKeys = Истина
			Для Каждого Токен Из Токены Цикл
				ProviderName = Токен.ProviderName;
				SlotId = Токен.SlotId;
				TokenSerialNumber = Токен.TokenSerialNumber;
				TokenLabel = Токен.TokenLabel;
				TokenManufacturerID = Токен.TokenManufacturerID;
				IsRemoteSlot = Токен.IsRemoteSlot;
				UseNamedKeys = Токен.UseNamedKeys;
				
				ЕстьНенайденыеКлючи = Ложь;
				
				Если UseNamedKeys = Истина Тогда
					РезультатЗапросаПоКлючамТокена = Неопределено;
					Если ЕстьНастройкаДоступаКСерверу Тогда
						Если ЗначениеЗаполнено(СтрокаПодключения) Тогда
							//РезультатЗапросаПоКлючамТокена = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getkeysontoken", Новый Структура("ProviderName,SlotId,TokenSerialNumber,IsRemoteSlot,UseNamedKeys,TokenPassword", ProviderName, SlotId, TokenSerialNumber, IsRemoteSlot, UseNamedKeys, ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenPassword]), , СтрокаПодключения);
							//РезультатЗапросаПоКлючамТокена = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getkeysontoken", Новый Структура("ProviderName,SlotId,TokenSerialNumber,IsRemoteSlot,UseNamedKeys", ProviderName, SlotId, TokenSerialNumber, IsRemoteSlot, UseNamedKeys), , СтрокаПодключения);
							РезультатЗапросаПоКлючамТокена = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getkeysontoken", Новый Структура("ProviderName,SlotId,TokenSerialNumber,IsRemoteSlot,UseNamedKeys", ProviderName, SlotId, TokenSerialNumber, IsRemoteSlot, Ложь), , СтрокаПодключения);
						КонецЕсли;
					Иначе
						//РезультатЗапросаПоКлючамТокена = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getkeysontoken", Новый Структура("ProviderName,SlotId,TokenSerialNumber,IsRemoteSlot,UseNamedKeys,TokenPassword", ProviderName, SlotId, TokenSerialNumber, IsRemoteSlot, UseNamedKeys, ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenPassword]));
						//РезультатЗапросаПоКлючамТокена = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getkeysontoken", Новый Структура("ProviderName,SlotId,TokenSerialNumber,IsRemoteSlot,UseNamedKeys", ProviderName, SlotId, TokenSerialNumber, IsRemoteSlot, UseNamedKeys));
						РезультатЗапросаПоКлючамТокена = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getkeysontoken", Новый Структура("ProviderName,SlotId,TokenSerialNumber,IsRemoteSlot,UseNamedKeys", ProviderName, SlotId, TokenSerialNumber, IsRemoteSlot, Ложь));
					КонецЕсли;
					
					Если РезультатЗапросаПоКлючамТокена <> Неопределено Тогда
						КлючиТокена = Неопределено;
						РезультатЗапросаПоКлючамТокена.Свойство("Keys", КлючиТокена);
						Если ТипЗнч(КлючиТокена) = Тип("Массив") Тогда
							Для Каждого ТекДанныеПоПодписи из МассивДанныхПоПодписям Цикл
								Для Каждого КлючТокена Из КлючиТокена Цикл
									Если КлючТокена.KeyId = ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаИдентификаторСекретногоКлюча] Тогда
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительProviderName] = ProviderName;
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительSlotId] = SlotId;
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenSerialNumber] = TokenSerialNumber;
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenLabel] = TokenLabel;
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenManufacturerID] = TokenManufacturerID;
										//ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительСостояние] = "";
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительДоступен] = Истина;
										
										ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительIsRemoteSlot] = IsRemoteSlot;
										Если UseNamedKeys Тогда
											ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys] = Истина;
											ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительUseNamedKeys] = Истина;
											ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительСлотВыбран] = Истина;
										Иначе
											ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys] = Ложь;
											ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительUseNamedKeys] = Ложь;
											ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenPassword] = "";
										КонецЕсли;
										
										ТекДанныеПоПодписи.КлючНайден = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								Если не ТекДанныеПоПодписи.КлючНайден Тогда
									ЕстьНенайденыеКлючи = Истина;
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ЗначениеЗаполнено(РезультатЗапросаПоКлючамТокена.Message) Тогда
							Сообщить(РезультатЗапросаПоКлючамТокена.Message);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЕстьНенайденыеКлючи Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	Для Каждого ТекДанныеПоПодписи из МассивДанныхПоПодписям Цикл
		СуфиксРеквизитов = СуфиксРеквизитовПоСуфиксуРеквизитовПодписиНаСервере(ТекДанныеПоПодписи.СуфиксРеквизитов);
		Если СуфиксРеквизитов <> "" Тогда
			Элементы["ЗащищенныйНосительTokenPassword_" + СуфиксРеквизитов].Видимость = ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys];
			Элементы["КнопкаВыбратьСлотЗащищенногоНосителя_" + СуфиксРеквизитов].Видимость = ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys];
		КонецЕсли;
		
		Если ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительДоступен] Тогда
			ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительСостояние] = НСтр("ru = 'Защищенный носитель с секретным ключем '; uk = 'Захищений носій з секретним ключем '")
			+ " " + ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenManufacturerID]
			+ " " + ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительTokenLabel];
		Иначе
			ЭтаФорма[ТекДанныеПоПодписи.ИмяРеквизитаЗащищенныйНосительСостояние] = НСтр("ru = 'Защищенный носитель не найден. Пожалуйста, подключите носитель со своим секретным ключем.'; uk = 'Захищений носій не знайдено. Будь ласка, підключіть носій зі своїм секретним ключем.'");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗащищенныйНосительЕстьНастройкаДоступаКСерверуПриИзменении(Элемент)
	СуфиксРеквизитов = Сред(Элемент.Имя, СтрДлина("ЗащищенныйНосительЕстьНастройкаДоступаКСерверу_")+1);
	СуфиксРеквизитовПодписи = ПолучитьСуфиксРеквизитовПодписи(СуфиксРеквизитов);
	Если СуфиксРеквизитовПодписи <> "" Тогда
		Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_" + СуфиксРеквизитовПодписи] Тогда
			Если не ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_" + СуфиксРеквизитовПодписи] Тогда
				ЗначениеРеквизита = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_" + СуфиксРеквизитовПодписи];
				ЭтаФорма["ТаблицаПодписейЗащищенныйНосительДоступен_" + СуфиксРеквизитовПодписи] = Ложь;
				ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСостояние_" + СуфиксРеквизитовПодписи] = НСтр("ru = 'Выполните поиск носителя с секретным ключем.'; uk = 'Виконайте пошук носія із секретним ключем.'");
				
				
				Если ОграничениеЕдиныйАПИДляЗащищенныхНосителей Тогда
					Для Каждого СтрокаТаблицыПодписей Из ТаблицаПодписей Цикл
						Если СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов Тогда
						Иначе
							Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] Тогда
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = ЗначениеРеквизита;
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительДоступен_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = Ложь;
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСостояние_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = НСтр("ru = 'Выполните поиск носителя с секретным ключем.'; uk = 'Виконайте пошук носія із секретним ключем.'");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ФлагОбработкаПоследующихПодписей = Ложь;
					Для Каждого СтрокаТаблицыПодписей Из ТаблицаПодписей Цикл
						Если СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов Тогда
							ФлагОбработкаПоследующихПодписей = Истина;
						ИначеЕсли ФлагОбработкаПоследующихПодписей Тогда
							Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] Тогда
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = ЗначениеРеквизита;
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительДоступен_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = Ложь;
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСостояние_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = НСтр("ru = 'Выполните поиск носителя с секретным ключем.'; uk = 'Виконайте пошук носія із секретним ключем.'");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗащищенныйНосительСтрокаПодключенияПриИзменении(Элемент)
	СуфиксРеквизитов = Сред(Элемент.Имя, СтрДлина("ЗащищенныйНосительСтрокаПодключения_")+1);
	СуфиксРеквизитовПодписи = ПолучитьСуфиксРеквизитовПодписи(СуфиксРеквизитов);
	Если СуфиксРеквизитовПодписи <> "" Тогда
		Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_" + СуфиксРеквизитовПодписи] Тогда
			Если не ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_" + СуфиксРеквизитовПодписи] Тогда
				ЗначениеРеквизита = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_" + СуфиксРеквизитовПодписи];
				ЭтаФорма["ТаблицаПодписейЗащищенныйНосительДоступен_" + СуфиксРеквизитовПодписи] = Ложь;
				ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСостояние_" + СуфиксРеквизитовПодписи] = НСтр("ru = 'Выполните поиск носителя с секретным ключем.'; uk = 'Виконайте пошук носія із секретним ключем.'");
				Если ОграничениеЕдиныйАПИДляЗащищенныхНосителей Тогда
					Для Каждого СтрокаТаблицыПодписей Из ТаблицаПодписей Цикл
						Если СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов Тогда
						Иначе
							Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] Тогда
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = ЗначениеРеквизита;
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительДоступен_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = Ложь;
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСостояние_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = НСтр("ru = 'Выполните поиск носителя с секретным ключем.'; uk = 'Виконайте пошук носія із секретним ключем.'");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ФлагОбработкаПоследующихПодписей = Ложь;
					Для Каждого СтрокаТаблицыПодписей Из ТаблицаПодписей Цикл
						Если СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов Тогда
							ФлагОбработкаПоследующихПодписей = Истина;
						ИначеЕсли ФлагОбработкаПоследующихПодписей Тогда
							Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] Тогда
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = ЗначениеРеквизита;
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительДоступен_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = Ложь;
								ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСостояние_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = НСтр("ru = 'Выполните поиск носителя с секретным ключем.'; uk = 'Виконайте пошук носія із секретним ключем.'");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыДляПодписи_РежимОтправкиНаДоподписание(Подпись, ГруппаПодпись, НомерБлокаЭлементовФормы)
	// Группа
	лГруппаОписаниеПодписи = Элементы.Добавить("ГруппаОписаниеПодписи" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), ГруппаПодпись);
	лГруппаОписаниеПодписи.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	лГруппаОписаниеПодписи.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	лГруппаОписаниеПодписи.ОтображатьЗаголовок = Ложь;
	лГруппаОписаниеПодписи.Отображение         = ОтображениеОбычнойГруппы.Нет;
		// Группа
		лГруппаИнформацияОВладельцеПодписи = Элементы.Добавить("ИнформацияОВладельцеПодписи" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), лГруппаОписаниеПодписи);
		лГруппаИнформацияОВладельцеПодписи.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		лГруппаИнформацияОВладельцеПодписи.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		лГруппаИнформацияОВладельцеПодписи.ОтображатьЗаголовок = Ложь;
		лГруппаИнформацияОВладельцеПодписи.Отображение         = ОтображениеОбычнойГруппы.Нет;
			// Элементы
			лПолеКодПоЕДРПОУ = Элементы.Добавить("КодПоЕДРПОУ" + НомерБлокаЭлементовФормы, Тип("ПолеФормы"), лГруппаИнформацияОВладельцеПодписи);
			лПолеКодПоЕДРПОУ.Вид            = ВидПоляФормы.ПолеВвода;
			лПолеКодПоЕДРПОУ.ПутьКДанным    = "ТаблицаПодписейКодПоЕДРПОУ_" + Подпись.СуфиксРеквизитовПодписи;
			лПолеКодПоЕДРПОУ.Заголовок      = НСтр("ru = 'ЕДРПОУ'; uk = 'ЄДРПОУ'");
			лПолеКодПоЕДРПОУ.ТолькоПросмотр = Истина;
			лПолеКодПоЕДРПОУ.ПропускатьПриВводе = Истина;
			
			лПолеВладелецПодписи = Элементы.Добавить("ВладелецПодписи" + НомерБлокаЭлементовФормы, Тип("ПолеФормы"), лГруппаИнформацияОВладельцеПодписи);
			лПолеВладелецПодписи.Вид            = ВидПоляФормы.ПолеВвода;
			лПолеВладелецПодписи.ПутьКДанным    = "ТаблицаПодписейВладелецПодписи_" + Подпись.СуфиксРеквизитовПодписи;
			лПолеВладелецПодписи.Заголовок		= НСтр("ru = 'Владелец подписи'; uk = 'Власник підпису'");
			лПолеВладелецПодписи.ТолькоПросмотр = Истина;
			лПолеВладелецПодписи.ПропускатьПриВводе = Истина;
			
			ПодписьСсылка = ЭтаФорма["ТаблицаПодписейПодпись_"+Подпись.СуфиксРеквизитовПодписи];
			Если ПодписьСсылка.Роль = Перечисления.скEDI_РолиПодписей.ПодписьБухгалтера
				Или ПодписьСсылка.Роль = Перечисления.скEDI_РолиПодписей.ПодписьДиректора
				Или ПодписьСсылка.Роль = Перечисления.скEDI_РолиПодписей.ПодписьОтветственногоЛица
				Или ПодписьСсылка.Роль = Перечисления.скEDI_РолиПодписей.ПодписьФизическогоЛица
				Тогда
				
				лПолеДРФО = Элементы.Добавить("ДРФО" + НомерБлокаЭлементовФормы, Тип("ПолеФормы"), лГруппаИнформацияОВладельцеПодписи);
				лПолеДРФО.Вид            = ВидПоляФормы.ПолеВвода;
				лПолеДРФО.ПутьКДанным    = "ТаблицаПодписейДРФО_" + Подпись.СуфиксРеквизитовПодписи;
				лПолеДРФО.Заголовок		 = НСтр("ru = 'ДРФО'; uk = 'ДРФО'");
				лПолеДРФО.ТолькоПросмотр = Истина;
				лПолеДРФО.ПропускатьПриВводе = Истина;
			КонецЕсли;
		
	лГруппаВводимыеДанные = Элементы.Добавить("ГруппаВводимыеДанные" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), ГруппаПодпись);
	лГруппаВводимыеДанные.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	лГруппаВводимыеДанные.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;//Вертикальная;
	лГруппаВводимыеДанные.ОтображатьЗаголовок = Ложь;
	лГруппаВводимыеДанные.Отображение         = ОтображениеОбычнойГруппы.Нет;
	
	лПолеОтправлятьНаДоподписание = Элементы.Добавить("ОтправлятьНаДоподписание_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаВводимыеДанные);
	лПолеОтправлятьНаДоподписание.Вид         = ВидПоляФормы.ПолеФлажка;
	лПолеОтправлятьНаДоподписание.ПутьКДанным = "ТаблицаПодписейОтправлятьНаДоподписание_" + Подпись.СуфиксРеквизитовПодписи;
	лПолеОтправлятьНаДоподписание.Заголовок	 = НСтр("ru = 'Отправить'; uk = 'Відправити'");
	лПолеОтправлятьНаДоподписание.УстановитьДействие("ПриИзменении", "ТаблицаНеобходимыхПодписейОтправлятьНаДоподписаниеПриИзменении");
	лПолеОтправлятьНаДоподписание.ПропускатьПриВводе = Истина;
	
	лПолеEmail1 = Элементы.Добавить("Email1_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаВводимыеДанные);
	лПолеEmail1.Вид          = ВидПоляФормы.ПолеВвода;
	лПолеEmail1.ПутьКДанным  = "ТаблицаПодписейEmail1_" + Подпись.СуфиксРеквизитовПодписи;
	лПолеEmail1.Заголовок 	 = НСтр("ru = 'E-mail'; uk = 'E-mail'");
	//лПолеEmail1.УстановитьДействие("ПриИзменении", "ТаблицаНеобходимыхПодписейEmail1ПриИзменении");
	лПолеEmail1.ПропускатьПриВводе = Ложь;
	
	лПолеТелефон1 = Элементы.Добавить("Телефон1_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаВводимыеДанные);
	лПолеТелефон1.Вид          = ВидПоляФормы.ПолеВвода;
	лПолеТелефон1.ПутьКДанным  = "ТаблицаПодписейТелефон1_" + Подпись.СуфиксРеквизитовПодписи;
	лПолеТелефон1.Заголовок 	 = НСтр("ru = 'Телефон'; uk = 'Телефон'");
	лПолеТелефон1.ПропускатьПриВводе = Истина;
	
	лПолеЗаписатьEmail1 = Элементы.Добавить("ЗаписатьEmail1_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаВводимыеДанные);
	лПолеЗаписатьEmail1.Вид         = ВидПоляФормы.ПолеФлажка;
	лПолеЗаписатьEmail1.ПутьКДанным = "ТаблицаПодписейЗаписатьEmail1_" + Подпись.СуфиксРеквизитовПодписи;
	лПолеЗаписатьEmail1.Заголовок	 = НСтр("ru = 'Сохранить'; uk = 'Зберегти'");
	лПолеЗаписатьEmail1.Подсказка	 = НСтр("ru = 'Сохранить как значение по умолчанию'; uk = 'Зберегти як значення за замовчуванням'");
	лПолеЗаписатьEmail1.ПропускатьПриВводе = Истина;
	Если ПравоДоступа("Изменение", Метаданные.Справочники.скEDI_Подписи) Тогда
		лПолеЗаписатьEmail1.Доступность = Истина;
	Иначе
		лПолеЗаписатьEmail1.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыДляПодписи(Подпись, ГруппаПодпись, НомерБлокаЭлементовФормы)
	// Группа
	лГруппаОписаниеПодписи = Элементы.Добавить("ГруппаОписаниеПодписи" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), ГруппаПодпись);
	лГруппаОписаниеПодписи.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	лГруппаОписаниеПодписи.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	лГруппаОписаниеПодписи.ОтображатьЗаголовок = Ложь;
	лГруппаОписаниеПодписи.Отображение         = ОтображениеОбычнойГруппы.Нет;
		// Группа
		лГруппаИнформацияОВладельцеПодписи = Элементы.Добавить("ИнформацияОВладельцеПодписи" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), лГруппаОписаниеПодписи);
		лГруппаИнформацияОВладельцеПодписи.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		лГруппаИнформацияОВладельцеПодписи.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		лГруппаИнформацияОВладельцеПодписи.ОтображатьЗаголовок = Ложь;
		лГруппаИнформацияОВладельцеПодписи.Отображение         = ОтображениеОбычнойГруппы.Нет;
			// Элементы
			лПолеКодПоЕДРПОУ = Элементы.Добавить("КодПоЕДРПОУ" + НомерБлокаЭлементовФормы, Тип("ПолеФормы"), лГруппаИнформацияОВладельцеПодписи);
			лПолеКодПоЕДРПОУ.Вид            = ВидПоляФормы.ПолеВвода;
			лПолеКодПоЕДРПОУ.ПутьКДанным    = "ТаблицаПодписейКодПоЕДРПОУ_" + Подпись.СуфиксРеквизитовПодписи;
			лПолеКодПоЕДРПОУ.Заголовок      = НСтр("ru = 'ЕДРПОУ'; uk = 'ЄДРПОУ'");
			лПолеКодПоЕДРПОУ.ТолькоПросмотр = Истина;
			лПолеКодПоЕДРПОУ.ПропускатьПриВводе = Истина;
			
			лПолеВладелецПодписи = Элементы.Добавить("ВладелецПодписи" + НомерБлокаЭлементовФормы, Тип("ПолеФормы"), лГруппаИнформацияОВладельцеПодписи);
			лПолеВладелецПодписи.Вид            = ВидПоляФормы.ПолеВвода;
			лПолеВладелецПодписи.ПутьКДанным    = "ТаблицаПодписейВладелецПодписи_" + Подпись.СуфиксРеквизитовПодписи;
			лПолеВладелецПодписи.Заголовок		= НСтр("ru = 'Владелец подписи'; uk = 'Власник підпису'");
			лПолеВладелецПодписи.ТолькоПросмотр = Истина;
			лПолеВладелецПодписи.ПропускатьПриВводе = Истина;
			
			ПодписьСсылка = ЭтаФорма["ТаблицаПодписейПодпись_"+Подпись.СуфиксРеквизитовПодписи];
			Если ПодписьСсылка.Роль = Перечисления.скEDI_РолиПодписей.ПодписьБухгалтера
				Или ПодписьСсылка.Роль = Перечисления.скEDI_РолиПодписей.ПодписьДиректора
				Или ПодписьСсылка.Роль = Перечисления.скEDI_РолиПодписей.ПодписьОтветственногоЛица
				Или ПодписьСсылка.Роль = Перечисления.скEDI_РолиПодписей.ПодписьФизическогоЛица
				Тогда
				
				лПолеДРФО = Элементы.Добавить("ДРФО" + НомерБлокаЭлементовФормы, Тип("ПолеФормы"), лГруппаИнформацияОВладельцеПодписи);
				лПолеДРФО.Вид            = ВидПоляФормы.ПолеВвода;
				лПолеДРФО.ПутьКДанным    = "ТаблицаПодписейДРФО_" + Подпись.СуфиксРеквизитовПодписи;
				лПолеДРФО.Заголовок		 = НСтр("ru = 'ДРФО'; uk = 'ДРФО'");
				лПолеДРФО.ТолькоПросмотр = Истина;
				лПолеДРФО.ПропускатьПриВводе = Истина;
			КонецЕсли;
		
		// Группа
		лГруппаИнформацияОСертификате = Элементы.Добавить("ИнформацияОСертификате" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), лГруппаОписаниеПодписи);
		лГруппаИнформацияОСертификате.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		лГруппаИнформацияОСертификате.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		лГруппаИнформацияОСертификате.ОтображатьЗаголовок = Ложь;
		лГруппаИнформацияОСертификате.Отображение         = ОтображениеОбычнойГруппы.Нет;
		// Элементы
		лПолеДатаНачалаДействия = Элементы.Добавить("ДатаНачалаДействия" + НомерБлокаЭлементовФормы, Тип("ПолеФормы"), лГруппаИнформацияОСертификате);
		лПолеДатаНачалаДействия.Вид            = ВидПоляФормы.ПолеВвода;
		лПолеДатаНачалаДействия.ПутьКДанным    = "ТаблицаПодписейДатаНачалаДействия_" + Подпись.СуфиксРеквизитовПодписи;
		лПолеДатаНачалаДействия.Заголовок      = НСтр("ru = 'Действует с'; uk = 'Діє з'");
		лПолеДатаНачалаДействия.ТолькоПросмотр = Истина;
		лПолеДатаНачалаДействия.ПропускатьПриВводе = Истина;
		
		лПолеДатаОкончанияДействия = Элементы.Добавить("ДатаОкончанияДействия" + НомерБлокаЭлементовФормы, Тип("ПолеФормы"), лГруппаИнформацияОСертификате);
		лПолеДатаОкончанияДействия.Вид            = ВидПоляФормы.ПолеВвода;
		лПолеДатаОкончанияДействия.ПутьКДанным    = "ТаблицаПодписейДатаОкончанияДействия_" + Подпись.СуфиксРеквизитовПодписи;
		лПолеДатаОкончанияДействия.Заголовок      = НСтр("ru = 'Действует по'; uk = 'Діє по'");
		лПолеДатаОкончанияДействия.ТолькоПросмотр = Истина;
		лПолеДатаОкончанияДействия.ПропускатьПриВводе = Истина;
		
		лПолеИздательСертификата = Элементы.Добавить("ИздательСертификата" + НомерБлокаЭлементовФормы, Тип("ПолеФормы"), лГруппаИнформацияОСертификате);
		лПолеИздательСертификата.Вид            = ВидПоляФормы.ПолеВвода;
		лПолеИздательСертификата.ПутьКДанным    = "ТаблицаПодписейИздательСертификата_" + Подпись.СуфиксРеквизитовПодписи;
		лПолеИздательСертификата.Заголовок		= НСтр("ru = 'Издатель сертификата'; uk = 'Видавець сертифіката'");
		лПолеИздательСертификата.ТолькоПросмотр = Истина;
		лПолеИздательСертификата.ПропускатьПриВводе = Истина;

	// Группа
	лГруппаВводимыеДанные = Элементы.Добавить("ГруппаВводимыеДанные" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), ГруппаПодпись);
	лГруппаВводимыеДанные.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	лГруппаВводимыеДанные.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	лГруппаВводимыеДанные.ОтображатьЗаголовок = Ложь;
	лГруппаВводимыеДанные.Отображение         = ОтображениеОбычнойГруппы.Нет;
		// Элементы
		Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_"+Подпись.СуфиксРеквизитовПодписи] Тогда
			// Группа
			лГруппаКлючНаЗащищенномНосителе1 = Элементы.Добавить("ГруппаКлючНаЗащищенномНосителе1" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), лГруппаВводимыеДанные);
			лГруппаКлючНаЗащищенномНосителе1.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			лГруппаКлючНаЗащищенномНосителе1.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			лГруппаКлючНаЗащищенномНосителе1.ОтображатьЗаголовок = Ложь;
			лГруппаКлючНаЗащищенномНосителе1.Отображение         = ОтображениеОбычнойГруппы.Нет;
				// Элементы
				лКлючНаЗащищенномНосителе = Элементы.Добавить("КлючНаЗащищенномНосителе_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаКлючНаЗащищенномНосителе1);
				лКлючНаЗащищенномНосителе.Вид          = ВидПоляФормы.ПолеФлажка;
				лКлючНаЗащищенномНосителе.ПутьКДанным  = "ТаблицаПодписейКлючНаЗащищенномНосителе_" + Подпись.СуфиксРеквизитовПодписи;
				лКлючНаЗащищенномНосителе.Заголовок 	 = НСтр("ru = 'Ключ на защищенном носителе'; uk = 'Ключ на захищеному носії'");
				лКлючНаЗащищенномНосителе.Доступность = Ложь;
				лКлючНаЗащищенномНосителе.ПропускатьПриВводе = Истина;
				
			Если ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_"+Подпись.СуфиксРеквизитовПодписи] Тогда
				лКлючНаЗащищенномНосителе = Элементы.Добавить("КлючНаСервисеCloudKey_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаКлючНаЗащищенномНосителе1);
				лКлючНаЗащищенномНосителе.Вид          = ВидПоляФормы.ПолеФлажка;
				лКлючНаЗащищенномНосителе.ПутьКДанным  = "ТаблицаПодписейКлючНаСервисеCloudKey_" + Подпись.СуфиксРеквизитовПодписи;
				лКлючНаЗащищенномНосителе.Заголовок 	 = НСтр("ru = 'CloudKey'; uk = 'CloudKey'");
				лКлючНаЗащищенномНосителе.Доступность = Ложь;
				лКлючНаЗащищенномНосителе.ПропускатьПриВводе = Истина;
			Иначе
					// Элементы
					лЗащищенныйНосительЕстьНастройкаДоступаКСерверу = Элементы.Добавить("ЗащищенныйНосительЕстьНастройкаДоступаКСерверу_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаКлючНаЗащищенномНосителе1);
					лЗащищенныйНосительЕстьНастройкаДоступаКСерверу.Вид          = ВидПоляФормы.ПолеФлажка;
					лЗащищенныйНосительЕстьНастройкаДоступаКСерверу.ПутьКДанным  = "ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_" + Подпись.СуфиксРеквизитовПодписи;
					лЗащищенныйНосительЕстьНастройкаДоступаКСерверу.Заголовок 	 = НСтр("ru = 'Настроить доступ к серверу защищенных носителей'; uk = 'Налаштувати доступ до серверу захищених носіїв'");
					лЗащищенныйНосительЕстьНастройкаДоступаКСерверу.УстановитьДействие("ПриИзменении", "ЗащищенныйНосительЕстьНастройкаДоступаКСерверуПриИзменении");
					лЗащищенныйНосительЕстьНастройкаДоступаКСерверу.ПропускатьПриВводе = Истина;
					
					//лЗащищенныйНосительСервер = Элементы.Добавить("ЗащищенныйНосительСервер_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаКлючНаЗащищенномНосителе1);
					//лЗащищенныйНосительСервер.Вид         = ВидПоляФормы.ПолеВвода;
					//лЗащищенныйНосительСервер.ПутьКДанным = "ТаблицаПодписейЗащищенныйНосительСервер_" + Подпись.СуфиксРеквизитовПодписи;
					//лЗащищенныйНосительСервер.Заголовок 	 = НСтр("ru = 'Сервер'; uk = 'Сервер'");
					//лЗащищенныйНосительСервер.УстановитьДействие("ПриИзменении", "ЗащищенныйНосительСерверПриИзменении");
					//лЗащищенныйНосительСервер.ПропускатьПриВводе = Истина;
					//
					//лЗащищенныйНосительПорт = Элементы.Добавить("ЗащищенныйНосительПорт_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаКлючНаЗащищенномНосителе1);
					//лЗащищенныйНосительПорт.Вид         = ВидПоляФормы.ПолеВвода;
					//лЗащищенныйНосительПорт.ПутьКДанным = "ТаблицаПодписейЗащищенныйНосительПорт_" + Подпись.СуфиксРеквизитовПодписи;
					//лЗащищенныйНосительПорт.Заголовок 	 = НСтр("ru = 'Порт'; uk = 'Порт'");
					//лЗащищенныйНосительПорт.УстановитьДействие("ПриИзменении", "ЗащищенныйНосительПортПриИзменении");
					//лЗащищенныйНосительПорт.ПропускатьПриВводе = Истина;
					
					лЗащищенныйНосительСтрокаПодключения = Элементы.Добавить("ЗащищенныйНосительСтрокаПодключения_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаКлючНаЗащищенномНосителе1);
					лЗащищенныйНосительСтрокаПодключения.Вид         = ВидПоляФормы.ПолеВвода;
					лЗащищенныйНосительСтрокаПодключения.ПутьКДанным = "ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_" + Подпись.СуфиксРеквизитовПодписи;
					лЗащищенныйНосительСтрокаПодключения.Заголовок 	 = НСтр("ru = 'Сервер'; uk = 'Сервер'");
					лЗащищенныйНосительСтрокаПодключения.УстановитьДействие("ПриИзменении", "ЗащищенныйНосительСтрокаПодключенияПриИзменении");
					лЗащищенныйНосительСтрокаПодключения.ПропускатьПриВводе = Истина;
					
				// Группа
				лГруппаКлючНаЗащищенномНосителе2 = Элементы.Добавить("ГруппаКлючНаЗащищенномНосителе2" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), лГруппаВводимыеДанные);
				лГруппаКлючНаЗащищенномНосителе2.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				лГруппаКлючНаЗащищенномНосителе2.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				лГруппаКлючНаЗащищенномНосителе2.ОтображатьЗаголовок = Ложь;
				лГруппаКлючНаЗащищенномНосителе2.Отображение         = ОтображениеОбычнойГруппы.Нет;
					// Элементы
					лКомандаОбновитьСостояниеЗащищенногоНосителя = Команды.Добавить("ОбновитьСостояниеЗащищенногоНосителя_" + Подпись.СуфиксРеквизитов);
					лКомандаОбновитьСостояниеЗащищенногоНосителя.Действие = "ОбновитьСостояниеЗащищенногоНосителяНаКлиенте";
					лКомандаОбновитьСостояниеЗащищенногоНосителя.Заголовок = НСтр("ru = 'Найти защищенный носитель'; uk = 'Знайти захищений носій'");
					лКомандаОбновитьСостояниеЗащищенногоНосителя.Подсказка = НСтр("ru = 'Выполнить поиск защищенных носителей'; uk = 'Виконати пошук захищених носіїв'");
					лКомандаОбновитьСостояниеЗащищенногоНосителя.Картинка = БиблиотекаКартинок.скEDI_КартинкаНайтиЗащищенныйНоситель;
					
					лКнопкаОбновитьСостояниеЗащищенногоНосителя = Элементы.Добавить("КнопкаОбновитьСостояниеЗащищенногоНосителя_" + Подпись.СуфиксРеквизитов, Тип("КнопкаФормы"), лГруппаКлючНаЗащищенномНосителе2);
					лКнопкаОбновитьСостояниеЗащищенногоНосителя.ИмяКоманды = лКомандаОбновитьСостояниеЗащищенногоНосителя.Имя;
					лКнопкаОбновитьСостояниеЗащищенногоНосителя.Отображение = ОтображениеКнопки.Картинка;
					
					
					лКомандаВыбратьСлотЗащищенногоНосителя = Команды.Добавить("ВыбратьСлотЗащищенногоНосителя_" + Подпись.СуфиксРеквизитов);
					лКомандаВыбратьСлотЗащищенногоНосителя.Действие = "ВыбратьСлотЗащищенногоНосителяНаКлиенте";
					лКомандаВыбратьСлотЗащищенногоНосителя.Заголовок = НСтр("ru = 'Выбрать защищенный носитель'; uk = 'Вибрати захищений носій'");
					лКомандаВыбратьСлотЗащищенногоНосителя.Подсказка = НСтр("ru = 'Выбрать защищенный носитель из стиска'; uk = 'Вибрати захищений носій із списку'");
					лКомандаВыбратьСлотЗащищенногоНосителя.Картинка = БиблиотекаКартинок.скEDI_КартинкаВыбратьЗащищенныйНоситель;
					
					лКнопкаВыбратьСлотЗащищенногоНосителя = Элементы.Добавить("КнопкаВыбратьСлотЗащищенногоНосителя_" + Подпись.СуфиксРеквизитов, Тип("КнопкаФормы"), лГруппаКлючНаЗащищенномНосителе2);
					лКнопкаВыбратьСлотЗащищенногоНосителя.ИмяКоманды = лКомандаВыбратьСлотЗащищенногоНосителя.Имя;
					лКнопкаВыбратьСлотЗащищенногоНосителя.Отображение = ОтображениеКнопки.Картинка;
					
					
					лПолеЗащищенныйНосительСостояние = Элементы.Добавить("ЗащищенныйНосительСостояние_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаКлючНаЗащищенномНосителе2);
					лПолеЗащищенныйНосительСостояние.Вид         = ВидПоляФормы.ПолеНадписи;
					лПолеЗащищенныйНосительСостояние.ПутьКДанным = "ТаблицаПодписейЗащищенныйНосительСостояние_" + Подпись.СуфиксРеквизитовПодписи;
					лПолеЗащищенныйНосительСостояние.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
					лПолеЗащищенныйНосительСостояние.ТолькоПросмотр = Истина;
					лПолеЗащищенныйНосительСостояние.ПропускатьПриВводе = Истина;//Ложь;
					
					
					лЗащищенныйНосительTokenPassword = Элементы.Добавить("ЗащищенныйНосительTokenPassword_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаКлючНаЗащищенномНосителе2);
					лЗащищенныйНосительTokenPassword.Вид         = ВидПоляФормы.ПолеВвода;
					лЗащищенныйНосительTokenPassword.ПутьКДанным = "ТаблицаПодписейЗащищенныйНосительTokenPassword_" + Подпись.СуфиксРеквизитовПодписи;
					лЗащищенныйНосительTokenPassword.Заголовок 	 = НСтр("ru = 'Пароль пользователя криптомодуля ""Гряда 301""'; uk = 'Пароль користувача криптомодуля ""Гряда 301""'");
					//лЗащищенныйНосительTokenPassword.УстановитьДействие("ПриИзменении", "ЗащищенныйНосительTokenPasswordПриИзменении");
					лЗащищенныйНосительTokenPassword.ПропускатьПриВводе = Истина;
					лЗащищенныйНосительTokenPassword.РежимПароля = Истина;				
			КонецЕсли;		
		Иначе
			лПолеСкретногоКлюча = Элементы.Добавить("ПутьККаталогуСекретногоКлюча_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаВводимыеДанные);
			лПолеСкретногоКлюча.Вид          = ВидПоляФормы.ПолеВвода;
			лПолеСкретногоКлюча.ПутьКДанным  = "ТаблицаПодписейПутьККаталогуСекретногоКлюча_" + Подпись.СуфиксРеквизитовПодписи;
			лПолеСкретногоКлюча.Заголовок 	 = НСтр("ru = 'Путь к каталогу секретного ключа'; uk = 'Шлях до каталогу секретного ключа'");
			лПолеСкретногоКлюча.КнопкаВыбора = Истина;
			//лПолеСкретногоКлюча.УстановитьДействие("НачалоВыбора", Новый Действие("ТаблицаНеобходимыхПодписейПутьКСекретномуКлючуНачалоВыбора"));
			лПолеСкретногоКлюча.УстановитьДействие("НачалоВыбора", "ТаблицаНеобходимыхПодписейПутьКСекретномуКлючуНачалоВыбора");
			лПолеСкретногоКлюча.ПропускатьПриВводе = Ложь;
		КонецЕсли;
		// Группа
		лГруппаПароль = Элементы.Добавить("ГруппаПароль" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), лГруппаВводимыеДанные);
		лГруппаПароль.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		лГруппаПароль.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		лГруппаПароль.ОтображатьЗаголовок = Ложь;
		лГруппаПароль.Отображение         = ОтображениеОбычнойГруппы.Нет;
			// Элементы
			лПолеПароляСекретногоКлюча = Элементы.Добавить("ПарольСекретногоКлюча_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаПароль);
			лПолеПароляСекретногоКлюча.Вид         = ВидПоляФормы.ПолеВвода;
			лПолеПароляСекретногоКлюча.ПутьКДанным = "ТаблицаПодписейПарольСекретногоКлюча_" + Подпись.СуфиксРеквизитовПодписи;
			Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_"+Подпись.СуфиксРеквизитовПодписи] Тогда
				лПолеПароляСекретногоКлюча.Заголовок   = НСтр("ru = 'Пароль защищенного носителя'; uk = 'Пароль захищеного носія'");
			Иначе
				лПолеПароляСекретногоКлюча.Заголовок   = НСтр("ru = 'Пароль секретного ключа'; uk = 'Пароль секретного ключа'");
			КонецЕсли;
			лПолеПароляСекретногоКлюча.РежимПароля = Истина;
			лПолеПароляСекретногоКлюча.ПропускатьПриВводе = Ложь;
			
			лПолеХранитьПарольВТечениеСеанса = Элементы.Добавить("ХранитьПарольВТечениеСеанса_" + Подпись.СуфиксРеквизитов, Тип("ПолеФормы"), лГруппаПароль);
			лПолеХранитьПарольВТечениеСеанса.Вид         = ВидПоляФормы.ПолеФлажка;
			лПолеХранитьПарольВТечениеСеанса.ПутьКДанным = "ТаблицаПодписейХранитьПарольВТечениеСеанса_" + Подпись.СуфиксРеквизитовПодписи;
			лПолеХранитьПарольВТечениеСеанса.Заголовок	 = НСтр("ru = 'Хранить пароль в течении сеанса'; uk = 'Зберігати пароль протягом сеансу'");
			лПолеХранитьПарольВТечениеСеанса.УстановитьДействие("ПриИзменении", "ТаблицаНеобходимыхПодписейХранитьПарольВТечениеСеансаПриИзменении");
			Если ЭтаФорма[лПолеХранитьПарольВТечениеСеанса.ПутьКДанным] Тогда
				лПолеХранитьПарольВТечениеСеанса.ПропускатьПриВводе = Истина;
			Иначе
				лПолеХранитьПарольВТечениеСеанса.ПропускатьПриВводе = Ложь;
			КонецЕсли;
			
		Если ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_"+Подпись.СуфиксРеквизитовПодписи] Тогда
			Если не ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_"+Подпись.СуфиксРеквизитовПодписи] Тогда
				лИнформационнаяНадпись = Элементы.Добавить("ИнформационнаяНадпись_" + Подпись.СуфиксРеквизитов, Тип("ДекорацияФормы"), лГруппаВводимыеДанные);
				лИнформационнаяНадпись.Вид         = ВидДекорацииФормы.Надпись;
				//лИнформационнаяНадпись.ПутьКДанным = "ТаблицаПодписейПарольСекретногоКлюча_" + Подпись.СуфиксРеквизитовПодписи;
				лИнформационнаяНадпись.Шрифт = Новый Шрифт(лИнформационнаяНадпись.Шрифт, , , Истина);
				лИнформационнаяНадпись.Заголовок   = НСтр("ru = 'Количество попыток ввода пароля ограничено производителем.
	                                                       |В случае превышения лимита попыток, защищенный носитель будет заблокирован.
	                                                       |Будьте внимательны!'; uk = 'Кількість спроб вводу пароля обмежено виробником.
	                                                       |У разі перевищення ліміту спроб, захищений носій буде заблоковано.
	                                                       |Будьте уважними!'");
			КонецЕсли;
		КонецЕсли;
	
	СтрокиТаблицыПодписей = ТаблицаПодписей.НайтиСтроки(Новый Структура("СуфиксРеквизитов", Подпись.СуфиксРеквизитовПодписи));
	Для Каждого СтрокаТаблицыПодписей из СтрокиТаблицыПодписей Цикл
		СтрокаТаблицыПодписей.ЕстьОтображениеКлюча = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьЭлементыФормыДляПодписиНетДоступныхКлючей(ЭлементФормы, ВидГруппы, НомерБлокаЭлементовФормы)
	лГруппаИнформация = Элементы.Вставить("ГруппаИнформацияСтраница_" + НомерБлокаЭлементовФормы + "_", Тип("ГруппаФормы"), ЭлементФормы);//, Элементы.ЗапоминатьПутиКСекретнымКлючамИПароли);
	лГруппаИнформация.Вид = ВидГруппы;
	лГруппаИнформация.ОтображатьЗаголовок = Истина;
	лГруппаИнформация.Заголовок = НСтр("ru = 'Отсутствуют сертификаты или доступ к ним'; uk = 'Відсутні сертифікати або доступ до них'");
	
	лДекорацияИнформация = Элементы.Добавить("ДекорацияИнформация_" + НомерБлокаЭлементовФормы, Тип("ДекорацияФормы"), лГруппаИнформация);
	
	ТекстИнформации = НСтр("ru = 'Настройки находятся в форме ""Настройки ЭДО"" разделы ""Сертификаты"" (закладка ""Пользователи"") и ""Группы подписей""'; uk = 'Налаштування знаходяться в формі ""Налаштування ЕДО"" розділи ""Сертифікати"" (вкладка ""Користувачі"") та ""Групи підписів""'");
	лДекорацияИнформация.Заголовок = ТекстИнформации;
	//лДекорацияИнформация.Подсказка = ТекстИнформации;
	лДекорацияИнформация.Шрифт = Новый Шрифт(лДекорацияИнформация.Шрифт, , , Истина);
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыПоДеревуПодписей_РежимОтправкиНаДоподписание(Дерево, НомерБлокаЭлементовФормы)
	ИспользованиеКлючей = ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Подписание");
	Для Каждого лСтрокаПодписи Из Дерево.ПолучитьЭлементы() Цикл
		НомерБлокаЭлементовФормы = НомерБлокаЭлементовФормы + 1;
		
		Если лСтрокаПодписи.ЭтоГруппаПодписей Тогда
			лГруппаГруппаПодписей = Элементы.Вставить("ГруппаПодписей" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), ЭтаФорма);//, Элементы.ЗапоминатьПутиКСекретнымКлючамИПароли);
			лГруппаГруппаПодписей.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			лГруппаГруппаПодписей.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			лГруппаГруппаПодписей.ОтображатьЗаголовок = Истина;
			Если лСтрокаПодписи.Подпись = Неопределено Тогда
				Если ИспользованиеКлючей = ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Подписание") Тогда
					лГруппаГруппаПодписей.Заголовок = НСтр("ru = 'Сертификат подписания'; uk = 'Сертифікат підписання'");
				ИначеЕсли ИспользованиеКлючей = ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование") Тогда
					лГруппаГруппаПодписей.Заголовок = НСтр("ru = 'Сертификат шифрования'; uk = 'Сертифікат шифрування'");
				Иначе
					лГруппаГруппаПодписей.Заголовок = НСтр("ru = 'Любой сертификат'; uk = 'Будь який сертифікат'");
				КонецЕсли;
			Иначе
				лГруппаГруппаПодписей.Заголовок = лСтрокаПодписи.Подпись;
			КонецЕсли;
			Попытка
				лГруппаГруппаПодписей.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
			Исключение
				лГруппаГруппаПодписей.Отображение = ОтображениеОбычнойГруппы.Линия;
			КонецПопытки;
			
			лГруппаГруппаПодписейСтраницы = Элементы.Вставить("ГруппаПодписейСтраницы_" + лСтрокаПодписи.СуфиксРеквизитов, Тип("ГруппаФормы"), лГруппаГруппаПодписей);//, Элементы.ЗапоминатьПутиКСекретнымКлючамИПароли);
			лГруппаГруппаПодписейСтраницы.Вид                 = ВидГруппыФормы.Страницы;
			
			НомерСтраницы = 0;
			ТекущаяСтраница = Неопределено;
			ПодписьВГруппеДобавлена = Ложь;
			Для Каждого лСтрокаПодписиВГруппе Из лСтрокаПодписи.ПолучитьЭлементы() Цикл
				НомерБлокаЭлементовФормы = НомерБлокаЭлементовФормы + 1;
				
				ПодписьСсылка = ЭтаФорма["ТаблицаПодписейПодпись_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи];
				лГруппаПодпись = Элементы.Вставить("ГруппаПодписьСтраница_" + лСтрокаПодписи.СуфиксРеквизитов + "_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи, Тип("ГруппаФормы"), лГруппаГруппаПодписейСтраницы);//, Элементы.ЗапоминатьПутиКСекретнымКлючамИПароли);
				лГруппаПодпись.Вид                 = ВидГруппыФормы.Страница;
				лГруппаПодпись.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				лГруппаПодпись.ОтображатьЗаголовок = Истина;
				Если ЗначениеЗаполнено(ПодписьСсылка.Заголовок) Тогда
					лГруппаПодпись.Заголовок           = ПодписьСсылка.Заголовок;
				Иначе
					лГруппаПодпись.Заголовок           = "" + ПодписьСсылка.Роль + ?(ПодписьСсылка.ИспользованиеКлюча = Перечисления.скEDI_ИспользованиеКлючей.Шифрование, " (" + НСтр("ru = 'шифрование'; uk = 'шифрування'") + ")", "");
				КонецЕсли;
				
				СоздатьЭлементыФормыДляПодписи_РежимОтправкиНаДоподписание(лСтрокаПодписиВГруппе, лГруппаПодпись, НомерБлокаЭлементовФормы);
				лСтрокаПодписиВГруппе.ЕстьОтображение = Истина;
				
				ТекОтправлятьНаДоподписание_ = ЭтаФорма["ТаблицаПодписейОтправлятьНаДоподписание_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи];
				Если ТекОтправлятьНаДоподписание_ Тогда
					ТекущаяСтраница = лГруппаПодпись;
				КонецЕсли;
				НомерСтраницы = НомерСтраницы + 1;
				ПодписьВГруппеДобавлена = Истина;
			КонецЦикла;
			Если ПодписьВГруппеДобавлена Тогда
				лСтрокаПодписи.ЕстьОтображение = Истина;
			Иначе
				НомерБлокаЭлементовФормы = НомерБлокаЭлементовФормы + 1;
				СоздатьЭлементыФормыДляПодписиНетДоступныхКлючей(лГруппаГруппаПодписейСтраницы, ВидГруппыФормы.Страница, НомерБлокаЭлементовФормы);
			КонецЕсли;
			Если ТекущаяСтраница <> Неопределено Тогда
				лГруппаГруппаПодписейСтраницы.ТекущаяСтраница = ТекущаяСтраница;
			КонецЕсли;
		Иначе
			ПодписьСсылка = ЭтаФорма["ТаблицаПодписейПодпись_" + лСтрокаПодписи.СуфиксРеквизитовПодписи];
			лГруппаПодпись = Элементы.Вставить("ГруппаПодпись" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), ЭтаФорма);//, Элементы.ЗапоминатьПутиКСекретнымКлючамИПароли);
			лГруппаПодпись.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			лГруппаПодпись.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			лГруппаПодпись.ОтображатьЗаголовок = Истина;
			лГруппаПодпись.Заголовок           = "" + ПодписьСсылка.Роль + ?(ПодписьСсылка.ИспользованиеКлюча = Перечисления.скEDI_ИспользованиеКлючей.Шифрование, " (" + НСтр("ru = 'шифрование'; uk = 'шифрування'") + ")", "");
			Попытка
				лГруппаПодпись.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
			Исключение
				лГруппаПодпись.Отображение         = ОтображениеОбычнойГруппы.РамкаГруппы;
			КонецПопытки;
			СоздатьЭлементыФормыДляПодписи_РежимОтправкиНаДоподписание(лСтрокаПодписи, лГруппаПодпись, НомерБлокаЭлементовФормы);
			лСтрокаПодписи.ЕстьОтображение = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыПоДеревуПодписей(Дерево, НомерБлокаЭлементовФормы, ИспользованиеКлючей)
	Для Каждого лСтрокаПодписи Из Дерево.ПолучитьЭлементы() Цикл
		НомерБлокаЭлементовФормы = НомерБлокаЭлементовФормы + 1;
		
		Если лСтрокаПодписи.ЭтоГруппаПодписей Тогда
			лГруппаГруппаПодписей = Элементы.Вставить("ГруппаПодписей" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), ЭтаФорма);//, Элементы.ЗапоминатьПутиКСекретнымКлючамИПароли);
			лГруппаГруппаПодписей.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			лГруппаГруппаПодписей.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			лГруппаГруппаПодписей.ОтображатьЗаголовок = Истина;
			Если лСтрокаПодписи.Подпись = Неопределено Тогда
				Если ИспользованиеКлючей = ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Подписание") Тогда
					лГруппаГруппаПодписей.Заголовок = НСтр("ru = 'Сертификат подписания'; uk = 'Сертифікат підписання'");
				ИначеЕсли ИспользованиеКлючей = ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование") Тогда
					лГруппаГруппаПодписей.Заголовок = НСтр("ru = 'Сертификат шифрования'; uk = 'Сертифікат шифрування'");
				Иначе
					лГруппаГруппаПодписей.Заголовок = НСтр("ru = 'Любой сертификат'; uk = 'Будь який сертифікат'");
				КонецЕсли;
			Иначе
				лГруппаГруппаПодписей.Заголовок = лСтрокаПодписи.Подпись;
			КонецЕсли;
			Попытка
				лГруппаГруппаПодписей.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
			Исключение
				лГруппаГруппаПодписей.Отображение = ОтображениеОбычнойГруппы.Линия;
			КонецПопытки;
			
			лГруппаГруппаПодписейСтраницы = Элементы.Вставить("ГруппаПодписейСтраницы_" + лСтрокаПодписи.СуфиксРеквизитов, Тип("ГруппаФормы"), лГруппаГруппаПодписей);//, Элементы.ЗапоминатьПутиКСекретнымКлючамИПароли);
			лГруппаГруппаПодписейСтраницы.Вид                 = ВидГруппыФормы.Страницы;
			
			НомерСтраницы = 0;
			ТекущаяСтраница = Неопределено;
			ПодписьВГруппеДобавлена = Ложь;
			Для Каждого лСтрокаПодписиВГруппе Из лСтрокаПодписи.ПолучитьЭлементы() Цикл
				КлючДоступенПользователю = ЭтаФорма["ТаблицаПодписейКлючДоступенПользователю_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи];
				Если КлючДоступенПользователю Тогда
					НомерБлокаЭлементовФормы = НомерБлокаЭлементовФормы + 1;
					
					ПодписьСсылка = ЭтаФорма["ТаблицаПодписейПодпись_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи];
					лГруппаПодпись = Элементы.Вставить("ГруппаПодписьСтраница_" + лСтрокаПодписи.СуфиксРеквизитов + "_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи, Тип("ГруппаФормы"), лГруппаГруппаПодписейСтраницы);//, Элементы.ЗапоминатьПутиКСекретнымКлючамИПароли);
					лГруппаПодпись.Вид                 = ВидГруппыФормы.Страница;
					лГруппаПодпись.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					лГруппаПодпись.ОтображатьЗаголовок = Истина;
					Если ЗначениеЗаполнено(ПодписьСсылка.Заголовок) Тогда
						лГруппаПодпись.Заголовок           = ПодписьСсылка.Заголовок;
					Иначе
						лГруппаПодпись.Заголовок           = "" + ПодписьСсылка.Роль + ?(ПодписьСсылка.ИспользованиеКлюча = Перечисления.скEDI_ИспользованиеКлючей.Шифрование, " (" + НСтр("ru = 'шифрование'; uk = 'шифрування'") + ")", "");
					КонецЕсли;
					Если не лСтрокаПодписиВГруппе.Использовать Тогда
						ЗаголовокСуфикс = "";
						ДатаНачалаДействия = ЭтаФорма["ТаблицаПодписейДатаНачалаДействия_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи];
						ДатаОкончанияДействия = ЭтаФорма["ТаблицаПодписейДатаОкончанияДействия_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи];
						Если ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
							ЗаголовокСуфикс = ЗаголовокСуфикс + " " + НСтр("ru = 'с'; uk = 'з'") + " " + Формат(ДатаНачалаДействия, "ДФ=dd.MM.yyyy");
						КонецЕсли;
						Если ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
							ЗаголовокСуфикс = ЗаголовокСуфикс + " " + НСтр("ru = 'по'; uk = 'по'") + " " + Формат(ДатаОкончанияДействия, "ДФ=dd.MM.yyyy");
						КонецЕсли;
						Если ЗаголовокСуфикс = "" Тогда
							ЗаголовокСуфикс = "*";
						КонецЕсли;
						лГруппаПодпись.Заголовок = лГруппаПодпись.Заголовок + ЗаголовокСуфикс;
					КонецЕсли;
					
					СоздатьЭлементыФормыДляПодписи(лСтрокаПодписиВГруппе, лГруппаПодпись, НомерБлокаЭлементовФормы);
					
					лСтрокаПодписиВГруппе.ЕстьОтображение = Истина;
					
					ТекХранитьПарольВТечениеСеанса = ЭтаФорма["ТаблицаПодписейХранитьПарольВТечениеСеанса_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи];
					ТекПарольСекретногоКлюча = ЭтаФорма["ТаблицаПодписейПарольСекретногоКлюча_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи];
					Если ТекХранитьПарольВТечениеСеанса и ЗначениеЗаполнено(ТекПарольСекретногоКлюча) Тогда
						ТекущаяСтраница = лГруппаПодпись;
					КонецЕсли;
					НомерСтраницы = НомерСтраницы + 1;
					ПодписьВГруппеДобавлена = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ПодписьВГруппеДобавлена Тогда
				лСтрокаПодписи.ЕстьОтображение = Истина;
			Иначе
				НомерБлокаЭлементовФормы = НомерБлокаЭлементовФормы + 1;
				СоздатьЭлементыФормыДляПодписиНетДоступныхКлючей(лГруппаГруппаПодписейСтраницы, ВидГруппыФормы.Страница, НомерБлокаЭлементовФормы);
			КонецЕсли;
			Если ТекущаяСтраница <> Неопределено Тогда
				лГруппаГруппаПодписейСтраницы.ТекущаяСтраница = ТекущаяСтраница;
			КонецЕсли;
		Иначе
			КлючДоступенПользователю = ЭтаФорма["ТаблицаПодписейКлючДоступенПользователю_" + лСтрокаПодписи.СуфиксРеквизитовПодписи];
			ПодписьСсылка = ЭтаФорма["ТаблицаПодписейПодпись_" + лСтрокаПодписи.СуфиксРеквизитовПодписи];
			лГруппаПодпись = Элементы.Вставить("ГруппаПодпись" + НомерБлокаЭлементовФормы, Тип("ГруппаФормы"), ЭтаФорма);//, Элементы.ЗапоминатьПутиКСекретнымКлючамИПароли);
			лГруппаПодпись.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			лГруппаПодпись.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			лГруппаПодпись.ОтображатьЗаголовок = Истина;
			лГруппаПодпись.Заголовок           = "" + ПодписьСсылка.Роль + ?(ПодписьСсылка.ИспользованиеКлюча = Перечисления.скEDI_ИспользованиеКлючей.Шифрование, " (" + НСтр("ru = 'шифрование'; uk = 'шифрування'") + ")", "");
			Попытка
				лГруппаПодпись.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
			Исключение
				лГруппаПодпись.Отображение         = ОтображениеОбычнойГруппы.РамкаГруппы;
			КонецПопытки;
			Если КлючДоступенПользователю Тогда
				СоздатьЭлементыФормыДляПодписи(лСтрокаПодписи, лГруппаПодпись, НомерБлокаЭлементовФормы);
				лСтрокаПодписи.ЕстьОтображение = Истина;
			Иначе
				СоздатьЭлементыФормыДляПодписиНетДоступныхКлючей(лГруппаПодпись, ВидГруппыФормы.ОбычнаяГруппа, НомерБлокаЭлементовФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура СоздатьЭлементыФормы()
	ДобавляемыеРеквизиты = Новый Массив; 
	Для Каждого лСтрокаПодписи ИЗ ТаблицаПодписей Цикл
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейПодпись_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("СправочникСсылка.скEDI_Подписи"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейКодПоЕДРПОУ_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейВладелецПодписи_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит); 
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейДРФО_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит); 
        Реквизит = Новый РеквизитФормы("ТаблицаПодписейДатаНачалаДействия_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Дата")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит); 
        Реквизит = Новый РеквизитФормы("ТаблицаПодписейДатаОкончанияДействия_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Дата")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит); 		
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейИздательСертификата_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейПутьКСекретномуКлючу_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейПутьККаталогуСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейПарольСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейХранитьПарольВТечениеСеанса_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейКлючНаЗащищенномНосителе_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейКлючНаСервисеCloudKey_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейИдентификаторСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейТелоСертификата_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		//Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительСервер_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		//ДобавляемыеРеквизиты.Добавить(Реквизит);
		//Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительПорт_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Число")); 
		//ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительProviderName_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительSlotId_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Число")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительTokenSerialNumber_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительTokenLabel_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительTokenManufacturerID_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительСостояние_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительДоступен_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительIsRemoteSlot_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительUseNamedKeys_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительTokenPassword_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗащищенныйНосительСлотВыбран_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейОтправлятьНаДоподписание_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейEmail1_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейТелефон1_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейЗаписатьEmail1_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ТаблицаПодписейКлючДоступенПользователю_"+лСтрокаПодписи.СуфиксРеквизитов, Новый ОписаниеТипов("Булево")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты); 

	Для Каждого лСтрокаПодписи ИЗ ТаблицаПодписей Цикл
		ЭтаФорма["ТаблицаПодписейПодпись_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.Подпись;
		ЭтаФорма["ТаблицаПодписейКодПоЕДРПОУ_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.КодПоЕДРПОУ;
		ЭтаФорма["ТаблицаПодписейВладелецПодписи_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ВладелецПодписи;
		ЭтаФорма["ТаблицаПодписейДРФО_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ДРФО;
        ЭтаФорма["ТаблицаПодписейДатаНачалаДействия_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ДатаНачалаДействия;
        ЭтаФорма["ТаблицаПодписейДатаОкончанияДействия_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ДатаОкончанияДействия;
		ЭтаФорма["ТаблицаПодписейИздательСертификата_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ИздательСертификата;
		ЭтаФорма["ТаблицаПодписейПутьКСекретномуКлючу_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ПутьКСекретномуКлючу;
		ЭтаФорма["ТаблицаПодписейПутьККаталогуСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ПутьККаталогуСекретногоКлюча;
		ЭтаФорма["ТаблицаПодписейПарольСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ПарольСекретногоКлюча; 
		ЭтаФорма["ТаблицаПодписейХранитьПарольВТечениеСеанса_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ХранитьПарольВТечениеСеанса;
		ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.КлючНаЗащищенномНосителе;
		ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.КлючНаСервисеCloudKey;
		ЭтаФорма["ТаблицаПодписейИдентификаторСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ИдентификаторСекретногоКлюча;
		
		ЭтаФорма["ТаблицаПодписейТелоСертификата_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ТелоСертификата;
		
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу;
		//ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСервер_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительСервер;
		//ЭтаФорма["ТаблицаПодписейЗащищенныйНосительПорт_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительПорт;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительСтрокаПодключения;
		
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительНужноИспользоватьТокеныUseNamedKeys_"+лСтрокаПодписи.СуфиксРеквизитов] = Ложь;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСлотВыбран_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительСлотВыбран;
		
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительProviderName_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительProviderName;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительSlotId_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительSlotId;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenSerialNumber_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительTokenSerialNumber;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenLabel_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительTokenLabel;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenManufacturerID_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительTokenManufacturerID;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСостояние_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительСостояние;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительДоступен_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительДоступен;
		
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительIsRemoteSlot_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительIsRemoteSlot;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительUseNamedKeys_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительUseNamedKeys;
		ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenPassword_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.ЗащищенныйНосительTokenPassword;
		
		ЭтаФорма["ТаблицаПодписейEmail1_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.Подпись.email1;
		ЭтаФорма["ТаблицаПодписейТелефон1_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.Подпись.Телефон1;
		Если ЗначениеЗаполнено(ЭтаФорма["ТаблицаПодписейEmail1_"+лСтрокаПодписи.СуфиксРеквизитов]) Тогда
			ЭтаФорма["ТаблицаПодписейОтправлятьНаДоподписание_"+лСтрокаПодписи.СуфиксРеквизитов] = Истина;
		Иначе
			ЭтаФорма["ТаблицаПодписейОтправлятьНаДоподписание_"+лСтрокаПодписи.СуфиксРеквизитов] = Ложь;
		КонецЕсли;
		ЭтаФорма["ТаблицаПодписейКлючДоступенПользователю_"+лСтрокаПодписи.СуфиксРеквизитов] = лСтрокаПодписи.КлючДоступенПользователю;
	КонецЦикла;
	
	НомерБлокаЭлементовФормы = 0;
	Если РежимОтправкиНаДоподписание Тогда
		СоздатьЭлементыФормыПоДеревуПодписей_РежимОтправкиНаДоподписание(ДеревоПодписей, НомерБлокаЭлементовФормы);
	Иначе
		СоздатьЭлементыФормыПоДеревуПодписей(ДеревоПодписей, НомерБлокаЭлементовФормы, ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Подписание"));
	КонецЕсли;
	СоздатьЭлементыФормыПоДеревуПодписей(ДеревоПодписейШифрования, НомерБлокаЭлементовФормы, ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование"));
КонецПроцедуры // СоздатьЭлементыФормы()

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(ИмяРеквизита, СуфиксРеквизитовПодписи, ФильтрВыбораФайла = "", Заголовок = "")
	Если Не ЗначениеЗаполнено(ФильтрВыбораФайла) Тогда
		ФильтрВыбораФайла = НСтр("ru = 'Все (*.*)|*.*'; uk = 'Всі (*.*)|*.*'");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = НСтр("ru = 'Выберите папку'; uk = 'Оберіть папку'");
	КонецЕсли;
	лКаталог = ЭтаФорма[ИмяРеквизита];
	лДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	лДиалогВыбораФайла.Каталог = лКаталог;
	лДиалогВыбораФайла.Фильтр = ФильтрВыбораФайла;
	лДиалогВыбораФайла.МножественныйВыбор = Ложь;
	лДиалогВыбораФайла.Заголовок = Заголовок;
	
	Если лДиалогВыбораФайла.Выбрать() Тогда
		ЭтаФорма[ИмяРеквизита] = лДиалогВыбораФайла.Каталог;
		ФлагОбработкаПоследующихПодписей = Ложь;
		Для Каждого СтрокаТаблицыПодписей Из ТаблицаПодписей Цикл
			Если СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов Тогда
				ФлагОбработкаПоследующихПодписей = Истина;
			ИначеЕсли ФлагОбработкаПоследующихПодписей Тогда
				Если Не ЗначениеЗаполнено(ЭтаФорма["ТаблицаПодписейПарольСекретногоКлюча_" + СтрокаТаблицыПодписей.СуфиксРеквизитов]) Тогда
					Если ЭтаФорма["ТаблицаПодписейПутьККаталогуСекретногоКлюча_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = лКаталог Тогда
						ЭтаФорма["ТаблицаПодписейПутьККаталогуСекретногоКлюча_" + СтрокаТаблицыПодписей.СуфиксРеквизитов] = лДиалогВыбораФайла.Каталог;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаписатьНастройкиПодписейВКэш(МассивНастроекПодписей, МассивУдаляемыхНастроекПодписей)
	Перем лКэшНастроекПодписей;
	
	лКэшИзменился = Ложь;
	
	лСоответствиеКлючейЭлектронноЦифровымПодписям  = Новый Соответствие;
	ТекСоответствие = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеКлючейЭлектронноЦифровымПодписям");
	Если ТекСоответствие <> Неопределено Тогда
		Для Каждого ЭлементСоответствия Из ТекСоответствие Цикл
			лСоответствиеКлючейЭлектронноЦифровымПодписям.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
	КонецЕсли;
	
	лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям  = Новый Соответствие;
	ТекСоответствие = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеКаталоговКлючейЭлектронноЦифровымПодписям");
	Если ТекСоответствие <> Неопределено Тогда
		Для Каждого ЭлементСоответствия Из ТекСоответствие Цикл
			лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
	КонецЕсли;
	
	лСоответствиеПаролейЭлектронноЦифровымПодписям  = Новый Соответствие;
	ТекСоответствие = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеПаролейЭлектронноЦифровымПодписям");
	Если ТекСоответствие <> Неопределено Тогда
		Для Каждого ЭлементСоответствия Из ТекСоответствие Цикл
			лСоответствиеПаролейЭлектронноЦифровымПодписям.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
	КонецЕсли;
	
	лСоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей = Новый Соответствие;
	ТекСоответствие = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей");
	Если ТекСоответствие <> Неопределено Тогда
		Для Каждого ЭлементСоответствия Из ТекСоответствие Цикл
			лСоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
	КонецЕсли;
	
	лСоответствиеПаролейПользователейКриптомодуля  = Новый Соответствие;
	ТекСоответствие = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеПаролейПользователейКриптомодуля");
	Если ТекСоответствие <> Неопределено Тогда
		Для Каждого ЭлементСоответствия Из ТекСоответствие Цикл
			лСоответствиеПаролейПользователейКриптомодуля.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
	КонецЕсли;
	
	
	Для Каждого лСтруктураНастроекПодписи Из МассивНастроекПодписей Цикл
		Если ЗначениеЗаполнено(лСтруктураНастроекПодписи.Подпись) Тогда
			
			Если лСтруктураНастроекПодписи.КлючНаЗащищенномНосителе Тогда
				Если лСтруктураНастроекПодписи.КлючНаСервисеCloudKey Тогда
					Если ЗначениеЗаполнено(лСтруктураНастроекПодписи.ПарольСекретногоКлюча) Тогда
						Если ЗначениеЗаполнено(лСтруктураНастроекПодписи.СерийныйНомер) Тогда
							//лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.Подпись);
							лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.СерийныйНомер);
							Если лЗначениеИзКэша_Пароль = Неопределено Или лЗначениеИзКэша_Пароль <> лСтруктураНастроекПодписи.ПарольСекретногоКлюча Тогда
								//лСоответствиеПаролейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.Подпись, лСтруктураНастроекПодписи.ПарольСекретногоКлюча);
								лСоответствиеПаролейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.СерийныйНомер, лСтруктураНастроекПодписи.ПарольСекретногоКлюча);
								лКэшИзменился = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если лСтруктураНастроекПодписи.ЗащищенныйНосительДоступен и ЗначениеЗаполнено(лСтруктураНастроекПодписи.ПарольСекретногоКлюча) Тогда
						
						Если ЗначениеЗаполнено(лСтруктураНастроекПодписи.СерийныйНомер) Тогда
							//лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей = лСоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей.Получить(лСтруктураНастроекПодписи.Подпись);
							лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей = лСоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей.Получить(лСтруктураНастроекПодписи.СерийныйНомер);
							//Если лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей = Неопределено Или лЗначениеИзКэша_ПутьККлючу <> лСтруктураНастроекПодписи.ПутьКСекретномуКлючу Тогда
								НастройкиДоступаКСерверуДляЗащищенныхНосителей = Новый Структура;
								НастройкиДоступаКСерверуДляЗащищенныхНосителей.Вставить("ЕстьНастройкаДоступаКСерверу", лСтруктураНастроекПодписи.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу);
								//НастройкиДоступаКСерверуДляЗащищенныхНосителей.Вставить("Сервер", лСтруктураНастроекПодписи.ЗащищенныйНосительСервер);
								//НастройкиДоступаКСерверуДляЗащищенныхНосителей.Вставить("Порт", лСтруктураНастроекПодписи.ЗащищенныйНосительПорт);
								НастройкиДоступаКСерверуДляЗащищенныхНосителей.Вставить("СтрокаПодключения", лСтруктураНастроекПодписи.ЗащищенныйНосительСтрокаПодключения);
								//лСоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей.Вставить(лСтруктураНастроекПодписи.Подпись, Новый ФиксированнаяСтруктура(НастройкиДоступаКСерверуДляЗащищенныхНосителей));
								лСоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей.Вставить(лСтруктураНастроекПодписи.СерийныйНомер, Новый ФиксированнаяСтруктура(НастройкиДоступаКСерверуДляЗащищенныхНосителей));
								лКэшИзменился = Истина;
							//КонецЕсли;
						
							//лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.Подпись);
							лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.СерийныйНомер);
							Если лЗначениеИзКэша_Пароль = Неопределено Или лЗначениеИзКэша_Пароль <> лСтруктураНастроекПодписи.ПарольСекретногоКлюча Тогда
								//лСоответствиеПаролейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.Подпись, лСтруктураНастроекПодписи.ПарольСекретногоКлюча);
								лСоответствиеПаролейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.СерийныйНомер, лСтруктураНастроекПодписи.ПарольСекретногоКлюча);
								лКэшИзменился = Истина;
							КонецЕсли;
							
							//лЗначениеИзКэша_ПарольПользователейКриптомодуля = лСоответствиеПаролейПользователейКриптомодуля.Получить(лСтруктураНастроекПодписи.Подпись);
							лЗначениеИзКэша_ПарольПользователейКриптомодуля = лСоответствиеПаролейПользователейКриптомодуля.Получить(лСтруктураНастроекПодписи.СерийныйНомер);
							Если лЗначениеИзКэша_ПарольПользователейКриптомодуля = Неопределено Или лЗначениеИзКэша_ПарольПользователейКриптомодуля <> лСтруктураНастроекПодписи.ЗащищенныйНосительTokenPassword Тогда
								//лСоответствиеПаролейПользователейКриптомодуля.Вставить(лСтруктураНастроекПодписи.Подпись, лСтруктураНастроекПодписи.ЗащищенныйНосительTokenPassword);
								лСоответствиеПаролейПользователейКриптомодуля.Вставить(лСтруктураНастроекПодписи.СерийныйНомер, лСтруктураНастроекПодписи.ЗащищенныйНосительTokenPassword);
								лКэшИзменился = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(лСтруктураНастроекПодписи.ПутьКСекретномуКлючу)
				И ЗначениеЗаполнено(лСтруктураНастроекПодписи.ПутьККаталогуСекретногоКлюча)
				И ЗначениеЗаполнено(лСтруктураНастроекПодписи.ПарольСекретногоКлюча)
				Тогда
					Если ЗначениеЗаполнено(лСтруктураНастроекПодписи.СерийныйНомер) Тогда
						//лЗначениеИзКэша_ПутьККлючу = лСоответствиеКлючейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.Подпись);
						лЗначениеИзКэша_ПутьККлючу = лСоответствиеКлючейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.СерийныйНомер);
						Если лЗначениеИзКэша_ПутьККлючу = Неопределено Или лЗначениеИзКэша_ПутьККлючу <> лСтруктураНастроекПодписи.ПутьКСекретномуКлючу Тогда
							//лСоответствиеКлючейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.Подпись, лСтруктураНастроекПодписи.ПутьКСекретномуКлючу);
							лСоответствиеКлючейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.СерийныйНомер, лСтруктураНастроекПодписи.ПутьКСекретномуКлючу);
							лКэшИзменился = Истина;
						КонецЕсли;
						
						//лЗначениеИзКэша_ПутьККаталогуКлюча = лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.Подпись);
						лЗначениеИзКэша_ПутьККаталогуКлюча = лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.СерийныйНомер);
						Если лЗначениеИзКэша_ПутьККаталогуКлюча = Неопределено Или лЗначениеИзКэша_ПутьККаталогуКлюча <> лСтруктураНастроекПодписи.ПутьККаталогуСекретногоКлюча Тогда
							//лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.Подпись, лСтруктураНастроекПодписи.ПутьККаталогуСекретногоКлюча);
							лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.СерийныйНомер, лСтруктураНастроекПодписи.ПутьККаталогуСекретногоКлюча);
							лКэшИзменился = Истина;
						КонецЕсли;
						
						//лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.Подпись);
						лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.СерийныйНомер);
						Если лЗначениеИзКэша_Пароль = Неопределено Или лЗначениеИзКэша_Пароль <> лСтруктураНастроекПодписи.ПарольСекретногоКлюча Тогда
							//лСоответствиеПаролейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.Подпись, лСтруктураНастроекПодписи.ПарольСекретногоКлюча);
							лСоответствиеПаролейЭлектронноЦифровымПодписям.Вставить(лСтруктураНастроекПодписи.СерийныйНомер, лСтруктураНастроекПодписи.ПарольСекретногоКлюча);
							лКэшИзменился = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого лСтруктураНастроекПодписи Из МассивУдаляемыхНастроекПодписей Цикл
		//Если ЗначениеЗаполнено(лСтруктураНастроекПодписи.Подпись) Тогда
		Если ЗначениеЗаполнено(лСтруктураНастроекПодписи.СерийныйНомер) Тогда
			//лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.Подпись);
			лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтруктураНастроекПодписи.СерийныйНомер);
			Если лЗначениеИзКэша_Пароль <> Неопределено Тогда
				//лСоответствиеПаролейЭлектронноЦифровымПодписям.Удалить(лСтруктураНастроекПодписи.Подпись);
				лСоответствиеПаролейЭлектронноЦифровымПодписям.Удалить(лСтруктураНастроекПодписи.СерийныйНомер);
				лКэшИзменился = Истина;
			КонецЕсли;
			
			//лЗначениеИзКэша_ПарольПользователейКриптомодуля = лСоответствиеПаролейПользователейКриптомодуля.Получить(лСтруктураНастроекПодписи.Подпись);
			лЗначениеИзКэша_ПарольПользователейКриптомодуля = лСоответствиеПаролейПользователейКриптомодуля.Получить(лСтруктураНастроекПодписи.СерийныйНомер);
			Если лЗначениеИзКэша_ПарольПользователейКриптомодуля <> Неопределено Тогда
				//лСоответствиеПаролейПользователейКриптомодуля.Удалить(лСтруктураНастроекПодписи.Подпись);
				лСоответствиеПаролейПользователейКриптомодуля.Удалить(лСтруктураНастроекПодписи.СерийныйНомер);
				лКэшИзменился = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если лКэшИзменился Тогда
		скEDI_ОбщегоНазначения.УстановитьЗначениеПараметраСеанса("скEDI_СоответствиеКлючейЭлектронноЦифровымПодписям",  Новый ФиксированноеСоответствие(лСоответствиеКлючейЭлектронноЦифровымПодписям));
		скEDI_ОбщегоНазначения.УстановитьЗначениеПараметраСеанса("скEDI_СоответствиеКаталоговКлючейЭлектронноЦифровымПодписям",  Новый ФиксированноеСоответствие(лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям));
		скEDI_ОбщегоНазначения.УстановитьЗначениеПараметраСеанса("скEDI_СоответствиеПаролейЭлектронноЦифровымПодписям", Новый ФиксированноеСоответствие(лСоответствиеПаролейЭлектронноЦифровымПодписям));
		скEDI_ОбщегоНазначения.УстановитьЗначениеПараметраСеанса("скEDI_СоответствиеПаролейПользователейКриптомодуля", Новый ФиксированноеСоответствие(лСоответствиеПаролейПользователейКриптомодуля));
	КонецЕсли;
КонецПроцедуры // ЗаписатьНастройкиПодписейВКэш()

&НаСервере
Процедура ЗаписатьНастройкиПодписейВСохраненныеНстройкиПодписей()
	ТекущийПользователь = скEDI_НастройкиПодКонфигурацию.ПолучитьТекущегоПользователя();
	ИмяКомпьютера = ИмяКомпьютера();
	
	ЕстьНастройкаКаталога = Ложь;
	ЕстьНастройкаДоступаКЗащищенномуНосителю = Ложь;
	ПутьККаталогу = "";
	ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = Ложь;
	//ЗащищенныйНосительСервер = "";
	//ЗащищенныйНосительПорт = 0;
	ЗащищенныйНосительСтрокаПодключения = "";
	Для Каждого СтрокаТаблицаПодписей Из ТаблицаПодписей Цикл
		Если СтрокаТаблицаПодписей.КлючНаЗащищенномНосителе Тогда
			Если СтрокаТаблицаПодписей.КлючНаСервисеCloudKey Тогда
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицаПодписей.ПарольСекретногоКлюча) Тогда
					ЗаписьСохраненныеНастройки = РегистрыСведений.скEDI_СохраненныеНастройкиПоПодписям.СоздатьМенеджерЗаписи();
					ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
					ЗаписьСохраненныеНастройки.Пользователь	= ТекущийПользователь;
					ЗаписьСохраненныеНастройки.Подпись = СтрокаТаблицаПодписей.Подпись;
					ЗаписьСохраненныеНастройки.ИмяКомпьютера = ИмяКомпьютера;
					ЗаписьСохраненныеНастройки.Прочитать();
					ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
					ЗаписьСохраненныеНастройки.Пользователь	= ТекущийПользователь;
					ЗаписьСохраненныеНастройки.Подпись = СтрокаТаблицаПодписей.Подпись;
					ЗаписьСохраненныеНастройки.ИмяКомпьютера = ИмяКомпьютера;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = СтрокаТаблицаПодписей.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу;
						//ЗаписьСохраненныеНастройки.ЗащищенныйНосительСервер = ЗащищенныйНосительСервер;
						//ЗаписьСохраненныеНастройки.ЗащищенныйНосительПорт = ЗащищенныйНосительПорт;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСтрокаПодключения = СтрокаТаблицаПодписей.ЗащищенныйНосительСтрокаПодключения;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранProviderName = СтрокаТаблицаПодписей.ЗащищенныйНосительProviderName;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранSlotId = СтрокаТаблицаПодписей.ЗащищенныйНосительSlotId;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранTokenSerialNumber = СтрокаТаблицаПодписей.ЗащищенныйНосительTokenSerialNumber;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранUseNamedKeys = СтрокаТаблицаПодписей.ЗащищенныйНосительUseNamedKeys;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранIsRemoteSlot = СтрокаТаблицаПодписей.ЗащищенныйНосительIsRemoteSlot;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбран = СтрокаТаблицаПодписей.ЗащищенныйНосительСлотВыбран;
					ЗаписьСохраненныеНастройки.Записать(Истина);
					
					ЗаписьСохраненныеНастройки = РегистрыСведений.скEDI_СохраненныеНастройкиПоПодписям.СоздатьМенеджерЗаписи();
					ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
					ЗаписьСохраненныеНастройки.Пользователь	= ТекущийПользователь;
					ЗаписьСохраненныеНастройки.Подпись = СтрокаТаблицаПодписей.Подпись;
					ЗаписьСохраненныеНастройки.ИмяКомпьютера = "";
					ЗаписьСохраненныеНастройки.Прочитать();
					ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
					ЗаписьСохраненныеНастройки.Пользователь	= ТекущийПользователь;
					ЗаписьСохраненныеНастройки.Подпись = СтрокаТаблицаПодписей.Подпись;
					ЗаписьСохраненныеНастройки.ИмяКомпьютера = "";
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = СтрокаТаблицаПодписей.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу;
						//ЗаписьСохраненныеНастройки.ЗащищенныйНосительСервер = ЗащищенныйНосительСервер;
						//ЗаписьСохраненныеНастройки.ЗащищенныйНосительПорт = ЗащищенныйНосительПорт;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСтрокаПодключения = СтрокаТаблицаПодписей.ЗащищенныйНосительСтрокаПодключения;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранProviderName = СтрокаТаблицаПодписей.ЗащищенныйНосительProviderName;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранSlotId = СтрокаТаблицаПодписей.ЗащищенныйНосительSlotId;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранTokenSerialNumber = СтрокаТаблицаПодписей.ЗащищенныйНосительTokenSerialNumber;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранUseNamedKeys = СтрокаТаблицаПодписей.ЗащищенныйНосительUseNamedKeys;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбранIsRemoteSlot = СтрокаТаблицаПодписей.ЗащищенныйНосительIsRemoteSlot;
					ЗаписьСохраненныеНастройки.ЗащищенныйНосительСлотВыбран = СтрокаТаблицаПодписей.ЗащищенныйНосительСлотВыбран;
					ЗаписьСохраненныеНастройки.Записать(Истина);
				КонецЕсли;
				
				Если ЕстьНастройкаДоступаКЗащищенномуНосителю Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицаПодписей.ПарольСекретногоКлюча) Тогда
					Если СтрокаТаблицаПодписей.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу Тогда
						ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = СтрокаТаблицаПодписей.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу;
						//ЗащищенныйНосительСервер = СтрокаТаблицаПодписей.ЗащищенныйНосительСервер;
						//ЗащищенныйНосительПорт = СтрокаТаблицаПодписей.ЗащищенныйНосительПорт;
						ЗащищенныйНосительСтрокаПодключения = СтрокаТаблицаПодписей.ЗащищенныйНосительСтрокаПодключения;
					КонецЕсли;
					ЕстьНастройкаДоступаКЗащищенномуНосителю = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТаблицаПодписей.ПарольСекретногоКлюча) Тогда
				ЗаписьСохраненныеНастройки = РегистрыСведений.скEDI_СохраненныеНастройкиПоПодписям.СоздатьМенеджерЗаписи();
				ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
				ЗаписьСохраненныеНастройки.Пользователь	= ТекущийПользователь;
				ЗаписьСохраненныеНастройки.Подпись = СтрокаТаблицаПодписей.Подпись;
				ЗаписьСохраненныеНастройки.ИмяКомпьютера = ИмяКомпьютера;
				ЗаписьСохраненныеНастройки.Прочитать();
				ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
				ЗаписьСохраненныеНастройки.Пользователь	= ТекущийПользователь;
				ЗаписьСохраненныеНастройки.Подпись = СтрокаТаблицаПодписей.Подпись;
				ЗаписьСохраненныеНастройки.ИмяКомпьютера = ИмяКомпьютера;
				ЗаписьСохраненныеНастройки.ПутьККаталогуКлючей = СтрокаТаблицаПодписей.ПутьККаталогуСекретногоКлюча;
				ЗаписьСохраненныеНастройки.Записать(Истина);
				
				ЗаписьСохраненныеНастройки = РегистрыСведений.скEDI_СохраненныеНастройкиПоПодписям.СоздатьМенеджерЗаписи();
				ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
				ЗаписьСохраненныеНастройки.Пользователь	= ТекущийПользователь;
				ЗаписьСохраненныеНастройки.Подпись = СтрокаТаблицаПодписей.Подпись;
				ЗаписьСохраненныеНастройки.ИмяКомпьютера = "";
				ЗаписьСохраненныеНастройки.Прочитать();
				ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
				ЗаписьСохраненныеНастройки.Пользователь	= ТекущийПользователь;
				ЗаписьСохраненныеНастройки.Подпись = СтрокаТаблицаПодписей.Подпись;
				ЗаписьСохраненныеНастройки.ИмяКомпьютера = "";
				ЗаписьСохраненныеНастройки.ПутьККаталогуКлючей = СтрокаТаблицаПодписей.ПутьККаталогуСекретногоКлюча;
				ЗаписьСохраненныеНастройки.Записать(Истина);
			КонецЕсли;
			Если ЕстьНастройкаКаталога Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицаПодписей.ПарольСекретногоКлюча) Тогда
				ПутьККаталогу = СтрокаТаблицаПодписей.ПутьККаталогуСекретногоКлюча;
				ЕстьНастройкаКаталога = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьНастройкаКаталога и ЕстьНастройкаДоступаКЗащищенномуНосителю Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьНастройкаКаталога или ЕстьНастройкаДоступаКЗащищенномуНосителю Тогда
		ЗаписьСохраненныеНастройки = РегистрыСведений.скEDI_СохраненныеНастройкиПоПодписям.СоздатьМенеджерЗаписи();
		ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
		ЗаписьСохраненныеНастройки.Пользователь	   = ТекущийПользователь;
		ЗаписьСохраненныеНастройки.ИмяКомпьютера = ИмяКомпьютера;
		ЗаписьСохраненныеНастройки.Прочитать();
		ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
		ЗаписьСохраненныеНастройки.Пользователь	   = ТекущийПользователь;
		ЗаписьСохраненныеНастройки.ИмяКомпьютера = ИмяКомпьютера;
		Если ЕстьНастройкаКаталога Тогда
			ЗаписьСохраненныеНастройки.ПутьККаталогуКлючей = ПутьККаталогу;
		КонецЕсли;
		Если ЕстьНастройкаДоступаКЗащищенномуНосителю Тогда
			ЗаписьСохраненныеНастройки.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = ЗащищенныйНосительЕстьНастройкаДоступаКСерверу;
			//ЗаписьСохраненныеНастройки.ЗащищенныйНосительСервер = ЗащищенныйНосительСервер;
			//ЗаписьСохраненныеНастройки.ЗащищенныйНосительПорт = ЗащищенныйНосительПорт;
			ЗаписьСохраненныеНастройки.ЗащищенныйНосительСтрокаПодключения = ЗащищенныйНосительСтрокаПодключения;
		КонецЕсли;
		ЗаписьСохраненныеНастройки.Записать(Истина);
		
		ЗаписьСохраненныеНастройки = РегистрыСведений.скEDI_СохраненныеНастройкиПоПодписям.СоздатьМенеджерЗаписи();
		ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
		ЗаписьСохраненныеНастройки.Пользователь	   = ТекущийПользователь;
		ЗаписьСохраненныеНастройки.ИмяКомпьютера = "";
		ЗаписьСохраненныеНастройки.Прочитать();
		ЗаписьСохраненныеНастройки.ОрганизацияEDI = Организация;
		ЗаписьСохраненныеНастройки.Пользователь	   = ТекущийПользователь;
		ЗаписьСохраненныеНастройки.ИмяКомпьютера = "";
		Если ЕстьНастройкаКаталога Тогда
			ЗаписьСохраненныеНастройки.ПутьККаталогуКлючей = ПутьККаталогу;
		КонецЕсли;
		Если ЕстьНастройкаДоступаКЗащищенномуНосителю Тогда
			ЗаписьСохраненныеНастройки.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = ЗащищенныйНосительЕстьНастройкаДоступаКСерверу;
			//ЗаписьСохраненныеНастройки.ЗащищенныйНосительСервер = ЗащищенныйНосительСервер;
			//ЗаписьСохраненныеНастройки.ЗащищенныйНосительПорт = ЗащищенныйНосительПорт;
			ЗаписьСохраненныеНастройки.ЗащищенныйНосительСтрокаПодключения = ЗащищенныйНосительСтрокаПодключения;
		КонецЕсли;
		ЗаписьСохраненныеНастройки.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПрочитатьНастройкиПодписейИзКэша()
	ПервыйСохраненныйПутьККаталогуКлючей = "";
	
	лСоответствиеКлючейЭлектронноЦифровымПодписям  = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеКлючейЭлектронноЦифровымПодписям");
	лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям  = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеКаталоговКлючейЭлектронноЦифровымПодписям");
	лСоответствиеПаролейЭлектронноЦифровымПодписям = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеПаролейЭлектронноЦифровымПодписям");
	лСоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей");
	лСоответствиеПаролейПользователейКриптомодуля = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеПаролейПользователейКриптомодуля");
	
	Для Каждого лСтрокаПодписи Из ТаблицаПодписей Цикл
		Если лСтрокаПодписи.КлючНаЗащищенномНосителе Тогда
			Если лСтрокаПодписи.КлючНаСервисеCloudKey Тогда
				//лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.Подпись);
				Если ЗначениеЗаполнено(лСтрокаПодписи.СерийныйНомер) Тогда
					лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.СерийныйНомер);
					Если лЗначениеИзКэша_Пароль <> Неопределено Тогда
						лСтрокаПодписи.ПарольСекретногоКлюча       = лЗначениеИзКэша_Пароль;
						лСтрокаПодписи.ХранитьПарольВТечениеСеанса = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(лСтрокаПодписи.СерийныйНомер) Тогда
					//лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей = лСоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей.Получить(лСтрокаПодписи.Подпись);
					лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей = лСоответствиеНастроекДоступаКСерверуДляЗащищенныхНосителей.Получить(лСтрокаПодписи.СерийныйНомер);
					Если лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей <> Неопределено Тогда
						лСтрокаПодписи.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей.ЕстьНастройкаДоступаКСерверу;
						//лСтрокаПодписи.ЗащищенныйНосительСервер = лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей.Сервер;
						//лСтрокаПодписи.ЗащищенныйНосительПорт = лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей.Порт;
						лСтрокаПодписи.ЗащищенныйНосительСтрокаПодключения = лЗначениеИзКэша_НастройкиДоступаКСерверуДляЗащищенныхНосителей.СтрокаПодключения;
						лСтрокаПодписи.ЗащищенныйНосительДоступКСерверуНастроен = Истина;
					КонецЕсли;
				
					//лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.Подпись);
					лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.СерийныйНомер);
					Если лЗначениеИзКэша_Пароль <> Неопределено Тогда
						лСтрокаПодписи.ПарольСекретногоКлюча       = лЗначениеИзКэша_Пароль;
						лСтрокаПодписи.ХранитьПарольВТечениеСеанса = Истина;
					КонецЕсли;
					
					//лЗначениеИзКэша_ПарольПользователяКриптомодуля = лСоответствиеПаролейПользователейКриптомодуля.Получить(лСтрокаПодписи.Подпись);
					лЗначениеИзКэша_ПарольПользователяКриптомодуля = лСоответствиеПаролейПользователейКриптомодуля.Получить(лСтрокаПодписи.СерийныйНомер);
					Если лЗначениеИзКэша_ПарольПользователяКриптомодуля <> Неопределено Тогда
						лСтрокаПодписи.ЗащищенныйНосительTokenPassword = лЗначениеИзКэша_ПарольПользователяКриптомодуля;
						лСтрокаПодписи.ХранитьПарольВТечениеСеанса = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(лСтрокаПодписи.СерийныйНомер) Тогда
				//лЗначениеИзКэша_ПутьККлючу = лСоответствиеКлючейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.Подпись);
				лЗначениеИзКэша_ПутьККлючу = лСоответствиеКлючейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.СерийныйНомер);
				Если лЗначениеИзКэша_ПутьККлючу <> Неопределено Тогда
					лСтрокаПодписи.ПутьКСекретномуКлючу  = лЗначениеИзКэша_ПутьККлючу;
				КонецЕсли;
				
				//лЗначениеИзКэша_ПутьККаталогуКлюча = лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.Подпись);
				лЗначениеИзКэша_ПутьККаталогуКлюча = лСоответствиеКаталоговКлючейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.СерийныйНомер);
				Если лЗначениеИзКэша_ПутьККаталогуКлюча <> Неопределено Тогда
					лСтрокаПодписи.ПутьККаталогуСекретногоКлюча = лЗначениеИзКэша_ПутьККаталогуКлюча;
					Если ПервыйСохраненныйПутьККаталогуКлючей = "" Тогда
						ПервыйСохраненныйПутьККаталогуКлючей = лЗначениеИзКэша_ПутьККаталогуКлюча;
					КонецЕсли;
				КонецЕсли;
				
				//лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.Подпись);
				лЗначениеИзКэша_Пароль = лСоответствиеПаролейЭлектронноЦифровымПодписям.Получить(лСтрокаПодписи.СерийныйНомер);
				Если лЗначениеИзКэша_Пароль <> Неопределено Тогда
					лСтрокаПодписи.ПарольСекретногоКлюча       = лЗначениеИзКэша_Пароль;
					лСтрокаПодписи.ХранитьПарольВТечениеСеанса = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СохраненнаяНастройкаХранитьПарольВТечениеСеанса = ПолучитьНастройкуХранитьПарольВТечениеСеанса(лСтрокаПодписи.Подпись);
		Если СохраненнаяНастройкаХранитьПарольВТечениеСеанса Тогда
			лСтрокаПодписи.ХранитьПарольВТечениеСеанса = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйСохраненныйПутьККаталогуКлючей <> "" Тогда
		Для Каждого лСтрокаПодписи Из ТаблицаПодписей Цикл
			Если лСтрокаПодписи.ПутьККаталогуСекретногоКлюча = "" Тогда
				лСтрокаПодписи.ПутьККаталогуСекретногоКлюча = ПервыйСохраненныйПутьККаталогуКлючей;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ПрочитатьНастройкиПодписейИзКэша()

&НаСервере
Процедура ПрочитатьНастройкиПодписейИзСохраненныхНастроек()
	ТекущийПользователь = скEDI_НастройкиПодКонфигурацию.ПолучитьТекущегоПользователя();
	ИмяКомпьютера = ИмяКомпьютера();
	
	Для Каждого СтрокаТаблицаПодписей Из ТаблицаПодписей Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	скEDI_СохраненныеНастройкиПоПодписям.ПутьККаталогуКлючей КАК ПутьККаталогуКлючей,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу КАК ЗащищенныйНосительЕстьНастройкаДоступаКСерверу,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСтрокаПодключения КАК ЗащищенныйНосительСтрокаПодключения,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСервер КАК ЗащищенныйНосительСервер,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительПорт КАК ЗащищенныйНосительПорт,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСлотВыбранProviderName КАК ЗащищенныйНосительСлотВыбранProviderName,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСлотВыбранSlotId КАК ЗащищенныйНосительСлотВыбранSlotId,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСлотВыбранTokenSerialNumber КАК ЗащищенныйНосительСлотВыбранTokenSerialNumber,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСлотВыбранUseNamedKeys КАК ЗащищенныйНосительСлотВыбранUseNamedKeys,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСлотВыбранIsRemoteSlot КАК ЗащищенныйНосительСлотВыбранIsRemoteSlot,
			|	скEDI_СохраненныеНастройкиПоПодписям.ЗащищенныйНосительСлотВыбран КАК ЗащищенныйНосительСлотВыбран,
			|	ВЫБОР
			|		КОГДА скEDI_СохраненныеНастройкиПоПодписям.ИмяКомпьютера = &ИмяКомпьютера
			|			ТОГДА 1
			|		КОГДА скEDI_СохраненныеНастройкиПоПодписям.ИмяКомпьютера = """"
			|			ТОГДА 2
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК ДляУпорядочивания1,
			|	ВЫБОР
			|		КОГДА скEDI_СохраненныеНастройкиПоПодписям.Подпись = &Подпись
			|			ТОГДА 1
			|		КОГДА скEDI_СохраненныеНастройкиПоПодписям.Подпись = ЗНАЧЕНИЕ(Справочник.скEDI_Подписи.ПустаяСсылка)
			|			ТОГДА 2
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК ДляУпорядочивания2
			|ИЗ
			|	РегистрСведений.скEDI_СохраненныеНастройкиПоПодписям КАК скEDI_СохраненныеНастройкиПоПодписям
			|ГДЕ
			|	скEDI_СохраненныеНастройкиПоПодписям.ОрганизацияEDI = &ОрганизацияEDI
			|	И скEDI_СохраненныеНастройкиПоПодписям.Пользователь = &Пользователь
			|	И (скEDI_СохраненныеНастройкиПоПодписям.Подпись = &Подпись
			|			ИЛИ скEDI_СохраненныеНастройкиПоПодписям.Подпись = ЗНАЧЕНИЕ(Справочник.скEDI_Подписи.ПустаяСсылка))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДляУпорядочивания1,
			|	ДляУпорядочивания2";
		
		Запрос.УстановитьПараметр("ОрганизацияEDI", Организация);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("Подпись", СтрокаТаблицаПодписей.Подпись);
		Запрос.УстановитьПараметр("ИмяКомпьютера", ИмяКомпьютера);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если СтрокаТаблицаПодписей.КлючНаЗащищенномНосителе Тогда
				Если СтрокаТаблицаПодписей.КлючНаСервисеCloudKey Тогда
					
				Иначе
					Если Не СтрокаТаблицаПодписей.ЗащищенныйНосительДоступКСерверуНастроен Тогда
						СтрокаТаблицаПодписей.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = Выборка.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу;
						Если ЗначениеЗаполнено(Выборка.ЗащищенныйНосительСтрокаПодключения) Тогда
							СтрокаТаблицаПодписей.ЗащищенныйНосительСтрокаПодключения = Выборка.ЗащищенныйНосительСтрокаПодключения;
						Иначе
							Если ЗначениеЗаполнено(Выборка.ЗащищенныйНосительСервер) и ЗначениеЗаполнено(Выборка.ЗащищенныйНосительПорт) Тогда
								СтрокаТаблицаПодписей.ЗащищенныйНосительСтрокаПодключения = "https://" + СокрЛП(Выборка.ЗащищенныйНосительСервер) + ":" + Формат(Выборка.ЗащищенныйНосительПорт, "ЧГ=0");
							КонецЕсли;
						КонецЕсли;
						СтрокаТаблицаПодписей.ЗащищенныйНосительProviderName = Выборка.ЗащищенныйНосительСлотВыбранProviderName;
						СтрокаТаблицаПодписей.ЗащищенныйНосительSlotId = Выборка.ЗащищенныйНосительСлотВыбранSlotId;
						СтрокаТаблицаПодписей.ЗащищенныйНосительTokenSerialNumber = Выборка.ЗащищенныйНосительСлотВыбранTokenSerialNumber;
						СтрокаТаблицаПодписей.ЗащищенныйНосительUseNamedKeys = Выборка.ЗащищенныйНосительСлотВыбранUseNamedKeys;
						СтрокаТаблицаПодписей.ЗащищенныйНосительIsRemoteSlot = Выборка.ЗащищенныйНосительСлотВыбранIsRemoteSlot;
						СтрокаТаблицаПодписей.ЗащищенныйНосительСлотВыбран = Выборка.ЗащищенныйНосительСлотВыбран;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если Выборка.ПутьККаталогуКлючей <> "" Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицаПодписей.ПутьККаталогуСекретногоКлюча) Тогда
						СтрокаТаблицаПодписей.ПутьККаталогуСекретногоКлюча = Выборка.ПутьККаталогуКлючей;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ЗаполнитьДеревоПодписейПоПодписиГруппойСертификатовШифрования(ЭлементыДереваПодписей, СуфиксРеквизитовДерева, СуфиксРеквизитовТаблицыПодписей, ЕстьСертификатыСИспользоватьПриПриемеМассивомСертификатов)
	СтрокаГруппа = ЭлементыДереваПодписей.Добавить();
	СтрокаГруппа.Подпись = Неопределено;//Подпись;
	СтрокаГруппа.ЭтоГруппаПодписей = Истина;
	СуфиксРеквизитовДерева = СуфиксРеквизитовДерева + 1;
	СтрокаГруппа.СуфиксРеквизитов = Строка(СуфиксРеквизитовДерева);
	
	
	ЭлементыГруппыДереваПодписей = СтрокаГруппа.ПолучитьЭлементы();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_Подписи.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(ВложенныйЗапрос.Использовать, ЛОЖЬ) КАК Использовать,
	               |	ЕСТЬNULL(ВложенныйЗапрос.ИспользоватьПриПриемеМассивомСертификатов, ЛОЖЬ) КАК ИспользоватьПриПриемеМассивомСертификатов,
	               |	скEDI_Подписи.Роль КАК Роль,
	               |	скEDI_Подписи.ИспользованиеКлюча КАК ИспользованиеКлюча,
	               |	ВЫБОР
	               |		КОГДА скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица)
	               |			ТОГДА """"
	               |		ИНАЧЕ скEDI_Подписи.Владелец.Код
	               |	КОНЕЦ КАК КодПоЕДРПОУ,
	               |	ВЫБОР
	               |		КОГДА скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера)
	               |				ИЛИ скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора)
	               |				ИЛИ скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица)
	               |				ИЛИ скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица)
	               |			ТОГДА скEDI_Подписи.Фамилия + "" "" + скEDI_Подписи.Имя
	               |		ИНАЧЕ скEDI_Подписи.Владелец.Наименование
	               |	КОНЕЦ КАК ВладелецПодписи,
	               |	скEDI_Подписи.ДРФО КАК ДРФО,
	               |	скEDI_ПодписиСертификаты.ДатаНачалаДействия КАК ДатаНачалаДействия,
	               |	скEDI_ПодписиСертификаты.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	               |	скEDI_ПодписиСертификаты.ИздательСертификата КАК ИздательСертификата,
	               |	скEDI_ПодписиСертификаты.ТелоСертификата КАК ТелоСертификата,
	               |	скEDI_ПодписиСертификаты.СерийныйНомер КАК СерийныйНомер,
	               |	скEDI_ПодписиСертификаты.КлючНаЗащищенномНосителе КАК КлючНаЗащищенномНосителе,
	               |	скEDI_ПодписиСертификаты.КлючНаСервисеCloudKey КАК КлючНаСервисеCloudKey,
	               |	скEDI_ПодписиСертификаты.ИдентификаторСекретногоКлюча КАК ИдентификаторСекретногоКлюча
	               |ИЗ
	               |	Справочник.скEDI_Подписи КАК скEDI_Подписи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВложенныйЗапрос.Ссылка КАК Ссылка,
	               |			ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	               |			МАКСИМУМ(ВложенныйЗапрос.Использовать) КАК Использовать,
	               |			МАКСИМУМ(ВложенныйЗапрос.ИспользоватьПриПриемеМассивомСертификатов) КАК ИспользоватьПриПриемеМассивомСертификатов
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				скEDI_ПодписиСертификаты.Ссылка КАК Ссылка,
	               |				МАКСИМУМ(скEDI_ПодписиСертификаты.НомерСтроки) КАК НомерСтроки,
	               |				ИСТИНА КАК Использовать,
	               |				NULL КАК ИспользоватьПриПриемеМассивомСертификатов
	               |			ИЗ
	               |				Справочник.скEDI_Подписи.Сертификаты КАК скEDI_ПодписиСертификаты
	               |			ГДЕ
	               |				скEDI_ПодписиСертификаты.Использовать
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				скEDI_ПодписиСертификаты.Ссылка
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				скEDI_ПодписиСертификаты.Ссылка,
	               |				скEDI_ПодписиСертификаты.НомерСтроки,
	               |				NULL,
	               |				ИСТИНА
	               |			ИЗ
	               |				Справочник.скEDI_Подписи.Сертификаты КАК скEDI_ПодписиСертификаты
	               |			ГДЕ
	               |				скEDI_ПодписиСертификаты.ИспользоватьПриПриемеМассивомСертификатов) КАК ВложенныйЗапрос
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ВложенныйЗапрос.Ссылка,
	               |			ВложенныйЗапрос.НомерСтроки) КАК ВложенныйЗапрос
	               |		ПО скEDI_Подписи.Ссылка = ВложенныйЗапрос.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скEDI_Подписи.Сертификаты КАК скEDI_ПодписиСертификаты
	               |		ПО (ВложенныйЗапрос.Ссылка = скEDI_ПодписиСертификаты.Ссылка)
	               |			И (ВложенныйЗапрос.НомерСтроки = скEDI_ПодписиСертификаты.НомерСтроки)
	               |ГДЕ
	               |	скEDI_Подписи.Владелец = &Организация
	               |	И скEDI_Подписи.ИспользованиеКлюча = ЗНАЧЕНИЕ(Перечисление.скEDI_ИспользованиеКлючей.Шифрование)
	               |	И скEDI_Подписи.Роль В (ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица))
	               |	И НЕ скEDI_Подписи.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_Подписи.ОсновнаяПодписьШифрования УБЫВ,
	               |	ВЫБОР
	               |		КОГДА скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ УБЫВ,
	               |	Использовать УБЫВ";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_Подписи.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(скEDI_ПодписиСертификаты.Использовать, ЛОЖЬ) КАК Использовать,
	               |	ЕСТЬNULL(скEDI_ПодписиСертификаты.ИспользоватьПриПриемеМассивомСертификатов, ЛОЖЬ) КАК ИспользоватьПриПриемеМассивомСертификатов,
	               |	скEDI_Подписи.Роль КАК Роль,
	               |	скEDI_Подписи.ИспользованиеКлюча КАК ИспользованиеКлюча,
	               |	ВЫБОР
	               |		КОГДА скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица)
	               |			ТОГДА """"
	               |		ИНАЧЕ скEDI_Подписи.Владелец.Код
	               |	КОНЕЦ КАК КодПоЕДРПОУ,
	               |	ВЫБОР
	               |		КОГДА скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера)
	               |				ИЛИ скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора)
	               |				ИЛИ скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица)
	               |				ИЛИ скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица)
	               |			ТОГДА скEDI_Подписи.Фамилия + "" "" + скEDI_Подписи.Имя
	               |		ИНАЧЕ скEDI_Подписи.Владелец.Наименование
	               |	КОНЕЦ КАК ВладелецПодписи,
	               |	скEDI_Подписи.ДРФО КАК ДРФО,
	               |	скEDI_ПодписиСертификаты.ДатаНачалаДействия КАК ДатаНачалаДействия,
	               |	скEDI_ПодписиСертификаты.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	               |	скEDI_ПодписиСертификаты.ИздательСертификата КАК ИздательСертификата,
	               |	скEDI_ПодписиСертификаты.ТелоСертификата КАК ТелоСертификата,
	               |	скEDI_ПодписиСертификаты.СерийныйНомер КАК СерийныйНомер,
	               |	скEDI_ПодписиСертификаты.КлючНаЗащищенномНосителе КАК КлючНаЗащищенномНосителе,
	               |	скEDI_ПодписиСертификаты.КлючНаСервисеCloudKey КАК КлючНаСервисеCloudKey,
	               |	скEDI_ПодписиСертификаты.ИдентификаторСекретногоКлюча КАК ИдентификаторСекретногоКлюча,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоАльтернативныхСертификатов, 0) КАК КоличествоАльтернативныхСертификатов
	               |ИЗ
	               |	Справочник.скEDI_Подписи КАК скEDI_Подписи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скEDI_Подписи.Сертификаты КАК скEDI_ПодписиСертификаты
	               |		ПО скEDI_Подписи.Ссылка = скEDI_ПодписиСертификаты.Ссылка
	               |			И (скEDI_ПодписиСертификаты.Использовать
	               |				ИЛИ скEDI_ПодписиСертификаты.ИспользоватьПриПриемеМассивомСертификатов)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			скEDI_ПодписиСертификаты.Ссылка КАК Ссылка,
	               |			скEDI_ПодписиСертификаты.НомерСтроки КАК НомерСтроки,
	               |			СУММА(ВЫБОР
	               |					КОГДА скEDI_ПодписиСертификаты1.Ссылка ЕСТЬ NULL
	               |						ТОГДА 0
	               |					ИНАЧЕ 1
	               |				КОНЕЦ) КАК КоличествоАльтернативныхСертификатов
	               |		ИЗ
	               |			Справочник.скEDI_Подписи.Сертификаты КАК скEDI_ПодписиСертификаты
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скEDI_Подписи.Сертификаты КАК скEDI_ПодписиСертификаты1
	               |				ПО (скEDI_ПодписиСертификаты1.Ссылка.Владелец = &Организация)
	               |					И (скEDI_ПодписиСертификаты1.Ссылка.ИспользованиеКлюча = ЗНАЧЕНИЕ(Перечисление.скEDI_ИспользованиеКлючей.Шифрование))
	               |					И (скEDI_ПодписиСертификаты1.Ссылка.Роль В (ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица)))
	               |					И (НЕ скEDI_ПодписиСертификаты1.Ссылка.ПометкаУдаления)
	               |					И (скEDI_ПодписиСертификаты1.Использовать)
	               |					И (скEDI_ПодписиСертификаты.Ссылка <> скEDI_ПодписиСертификаты1.Ссылка
	               |						ИЛИ скEDI_ПодписиСертификаты.НомерСтроки <> скEDI_ПодписиСертификаты1.НомерСтроки)
	               |		ГДЕ
	               |			скEDI_ПодписиСертификаты.Ссылка.Владелец = &Организация
	               |			И скEDI_ПодписиСертификаты.Ссылка.ИспользованиеКлюча = ЗНАЧЕНИЕ(Перечисление.скEDI_ИспользованиеКлючей.Шифрование)
	               |			И скEDI_ПодписиСертификаты.Ссылка.Роль В (ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица))
	               |			И НЕ скEDI_ПодписиСертификаты.Ссылка.ПометкаУдаления
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			скEDI_ПодписиСертификаты.Ссылка,
	               |			скEDI_ПодписиСертификаты.НомерСтроки) КАК ВложенныйЗапрос
	               |		ПО скEDI_Подписи.Ссылка = ВложенныйЗапрос.Ссылка
	               |			И (скEDI_ПодписиСертификаты.НомерСтроки = ВложенныйЗапрос.НомерСтроки)
	               |ГДЕ
	               |	скEDI_Подписи.Владелец = &Организация
	               |	И скEDI_Подписи.ИспользованиеКлюча = ЗНАЧЕНИЕ(Перечисление.скEDI_ИспользованиеКлючей.Шифрование)
	               |	И скEDI_Подписи.Роль В (ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица))
	               |	И НЕ скEDI_Подписи.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_Подписи.ОсновнаяПодписьШифрования УБЫВ,
	               |	ВЫБОР
	               |		КОГДА скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ УБЫВ,
	               |	Использовать УБЫВ";
	Запрос.УстановитьПараметр("Организация", Организация);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		СтрокаТаблицыПодписей = ТаблицаПодписей.Добавить();
		СтрокаТаблицыПодписей.Подпись = ВыборкаРезультатаЗапроса.Ссылка;
		СтрокаТаблицыПодписей.ОрганизацияEDI = Организация;
		СтрокаТаблицыПодписей.КодПоЕДРПОУ = ВыборкаРезультатаЗапроса.КодПоЕДРПОУ;
		СтрокаТаблицыПодписей.ВладелецПодписи = ВыборкаРезультатаЗапроса.ВладелецПодписи;
		СтрокаТаблицыПодписей.ДРФО = ВыборкаРезультатаЗапроса.ДРФО;
		СтрокаТаблицыПодписей.ДатаНачалаДействия = ВыборкаРезультатаЗапроса.ДатаНачалаДействия;
		СтрокаТаблицыПодписей.ДатаОкончанияДействия = ВыборкаРезультатаЗапроса.ДатаОкончанияДействия;
		СтрокаТаблицыПодписей.ИздательСертификата = ВыборкаРезультатаЗапроса.ИздательСертификата;
		СтрокаТаблицыПодписей.Роль = ВыборкаРезультатаЗапроса.Роль;
		СтрокаТаблицыПодписей.ИспользованиеКлюча = ВыборкаРезультатаЗапроса.ИспользованиеКлюча;
		СтрокаТаблицыПодписей.ТелоСертификата = ВыборкаРезультатаЗапроса.ТелоСертификата;
		СтрокаТаблицыПодписей.СерийныйНомер = ВыборкаРезультатаЗапроса.СерийныйНомер;
		СтрокаТаблицыПодписей.КлючНаЗащищенномНосителе = ВыборкаРезультатаЗапроса.КлючНаЗащищенномНосителе;
		СтрокаТаблицыПодписей.КлючНаСервисеCloudKey = ВыборкаРезультатаЗапроса.КлючНаСервисеCloudKey;
		СтрокаТаблицыПодписей.ИдентификаторСекретногоКлюча = ВыборкаРезультатаЗапроса.ИдентификаторСекретногоКлюча;
		
		СуфиксРеквизитовТаблицыПодписей = СуфиксРеквизитовТаблицыПодписей + 1;
		СтрокаТаблицыПодписей.СуфиксРеквизитов = Строка(СуфиксРеквизитовТаблицыПодписей);
		
		Если ВыборкаРезультатаЗапроса.Использовать Тогда
			СтрокаПодпись = ЭлементыГруппыДереваПодписей.Добавить();
			СтрокаПодпись.Подпись = ВыборкаРезультатаЗапроса.Ссылка;
			СтрокаПодпись.ЭтоГруппаПодписей = Ложь;
			СтрокаПодпись.Использовать = ВыборкаРезультатаЗапроса.Использовать;
			СтрокаПодпись.ИспользоватьПриПриемеМассивомСертификатов = ВыборкаРезультатаЗапроса.ИспользоватьПриПриемеМассивомСертификатов;
			СуфиксРеквизитовДерева = СуфиксРеквизитовДерева + 1;
			СтрокаПодпись.СуфиксРеквизитов = Строка(СуфиксРеквизитовДерева);
			СтрокаПодпись.СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.Использовать Тогда
			Если ВыборкаРезультатаЗапроса.КоличествоАльтернативныхСертификатов = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ВыборкаРезультатаЗапроса.ИспользоватьПриПриемеМассивомСертификатов Тогда
			СтрокаПодпись = ЭлементыДереваПодписей.Добавить();
			СтрокаПодпись.Подпись = ВыборкаРезультатаЗапроса.Ссылка;
			СтрокаПодпись.ЭтоГруппаПодписей = Ложь;
			СтрокаПодпись.Использовать = ВыборкаРезультатаЗапроса.Использовать;
			СтрокаПодпись.ИспользоватьПриПриемеМассивомСертификатов = ВыборкаРезультатаЗапроса.ИспользоватьПриПриемеМассивомСертификатов;
			СуфиксРеквизитовДерева = СуфиксРеквизитовДерева + 1;
			СтрокаПодпись.СуфиксРеквизитов = Строка(СуфиксРеквизитовДерева);
			СтрокаПодпись.СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов;
			
			ЕстьСертификатыСИспользоватьПриПриемеМассивомСертификатов = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодписейПоПодписи(Подпись, ЭлементыДереваПодписей, СуфиксРеквизитовДерева, СуфиксРеквизитовТаблицыПодписей, ИспользованиеКлюча)
	Если Подпись = Неопределено Тогда
		СтрокаГруппа = ЭлементыДереваПодписей.Добавить();
		СтрокаГруппа.Подпись = Подпись;
		СтрокаГруппа.ЭтоГруппаПодписей = Истина;
		СуфиксРеквизитовДерева = СуфиксРеквизитовДерева + 1;
		СтрокаГруппа.СуфиксРеквизитов = Строка(СуфиксРеквизитовДерева);
		
		
		ЭлементыГруппыДереваПодписей = СтрокаГруппа.ПолучитьЭлементы();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_Подписи.Ссылка КАК Подпись
		               |ИЗ
		               |	Справочник.скEDI_Подписи КАК скEDI_Подписи
		               |ГДЕ
		               |	скEDI_Подписи.Владелец = &Организация
		               |	И скEDI_Подписи.ИспользованиеКлюча = &ИспользованиеКлюча
		               |	И скEDI_Подписи.Роль В (ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица))
		               |	И НЕ скEDI_Подписи.ПометкаУдаления";
		Если ИспользованиеКлюча = ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование") Тогда
			Запрос.Текст = Запрос.Текст + "
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	скEDI_Подписи.ОсновнаяПодписьШифрования УБЫВ,
		               |	ВЫБОР
		               |		КОГДА скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации)
		               |			ТОГДА 1
		               |		ИНАЧЕ 0
		               |	КОНЕЦ УБЫВ";
		КонецЕсли;
		Запрос.УстановитьПараметр("ИспользованиеКлюча", ИспользованиеКлюча);
		Запрос.УстановитьПараметр("Организация", Организация);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			СтрокаПодпись = ЭлементыГруппыДереваПодписей.Добавить();
			СтрокаПодпись.Подпись = ВыборкаРезультатаЗапроса.Подпись;
			СтрокаПодпись.ЭтоГруппаПодписей = Ложь;
			СтрокаПодпись.Использовать = Истина;
			СуфиксРеквизитовДерева = СуфиксРеквизитовДерева + 1;
			СтрокаПодпись.СуфиксРеквизитов = Строка(СуфиксРеквизитовДерева);
			НайденыеПодписи = ТаблицаПодписей.НайтиСтроки(Новый Структура("Подпись", ВыборкаРезультатаЗапроса.Подпись));
			Если НайденыеПодписи.Количество() = 0 Тогда
				СтрокаТаблицыПодписей = ТаблицаПодписей.Добавить();
				СтрокаТаблицыПодписей.Подпись = ВыборкаРезультатаЗапроса.Подпись;
				СтрокаТаблицыПодписей.ОрганизацияEDI = Организация;
				СуфиксРеквизитовТаблицыПодписей = СуфиксРеквизитовТаблицыПодписей + 1;
				СтрокаТаблицыПодписей.СуфиксРеквизитов = Строка(СуфиксРеквизитовТаблицыПодписей);
			Иначе
				СтрокаТаблицыПодписей = НайденыеПодписи[0];
			КонецЕсли;
			СтрокаПодпись.СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_ГруппыПодписей") Тогда
		СтрокаГруппа = ЭлементыДереваПодписей.Добавить();
		СтрокаГруппа.Подпись = Подпись;
		СтрокаГруппа.ЭтоГруппаПодписей = Истина;
		СуфиксРеквизитовДерева = СуфиксРеквизитовДерева + 1;
		СтрокаГруппа.СуфиксРеквизитов = Строка(СуфиксРеквизитовДерева);
		
		
		ЭлементыГруппыДереваПодписей = СтрокаГруппа.ПолучитьЭлементы();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ГруппыПодписей.Подпись
		               |ИЗ
		               |	РегистрСведений.скEDI_ГруппыПодписей КАК скEDI_ГруппыПодписей
		               |ГДЕ
		               |	скEDI_ГруппыПодписей.ГруппаПодписи = &ГруппаПодписи
		               |	И скEDI_ГруппыПодписей.Подпись.Владелец = &Организация
		               |	И скEDI_ГруппыПодписей.Подпись.ИспользованиеКлюча = &ИспользованиеКлюча";
		Если ИспользованиеКлюча = ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование") Тогда
			Запрос.Текст = Запрос.Текст + "
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	скEDI_Подписи.ОсновнаяПодписьШифрования УБЫВ,
		               |	ВЫБОР
		               |		КОГДА скEDI_Подписи.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации)
		               |			ТОГДА 1
		               |		ИНАЧЕ 0
		               |	КОНЕЦ УБЫВ";
		КонецЕсли;
		Запрос.УстановитьПараметр("ГруппаПодписи", Подпись);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ИспользованиеКлюча", ИспользованиеКлюча);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			СтрокаПодпись = ЭлементыГруппыДереваПодписей.Добавить();
			СтрокаПодпись.Подпись = ВыборкаРезультатаЗапроса.Подпись;
			СтрокаПодпись.ЭтоГруппаПодписей = Ложь;
			СтрокаПодпись.Использовать = Истина;
			СуфиксРеквизитовДерева = СуфиксРеквизитовДерева + 1;
			СтрокаПодпись.СуфиксРеквизитов = Строка(СуфиксРеквизитовДерева);
			НайденыеПодписи = ТаблицаПодписей.НайтиСтроки(Новый Структура("Подпись", ВыборкаРезультатаЗапроса.Подпись));
			Если НайденыеПодписи.Количество() = 0 Тогда
				СтрокаТаблицыПодписей = ТаблицаПодписей.Добавить();
				СтрокаТаблицыПодписей.Подпись = ВыборкаРезультатаЗапроса.Подпись;
				СтрокаТаблицыПодписей.ОрганизацияEDI = Организация;
				СуфиксРеквизитовТаблицыПодписей = СуфиксРеквизитовТаблицыПодписей + 1;
				СтрокаТаблицыПодписей.СуфиксРеквизитов = Строка(СуфиксРеквизитовТаблицыПодписей);
			Иначе
				СтрокаТаблицыПодписей = НайденыеПодписи[0];
			КонецЕсли;
			СтрокаПодпись.СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_Подписи") Тогда
		СтрокаПодпись = ЭлементыДереваПодписей.Добавить();
		СтрокаПодпись.Подпись = Подпись;
		СтрокаПодпись.ЭтоГруппаПодписей = Ложь;
		СтрокаПодпись.Использовать = Истина;
		СуфиксРеквизитовДерева = СуфиксРеквизитовДерева + 1;
		СтрокаПодпись.СуфиксРеквизитов = Строка(СуфиксРеквизитовДерева);
		НайденыеПодписи = ТаблицаПодписей.НайтиСтроки(Новый Структура("Подпись", Подпись));
		Если НайденыеПодписи.Количество() = 0 Тогда
			СтрокаТаблицыПодписей = ТаблицаПодписей.Добавить();
			СтрокаТаблицыПодписей.Подпись = Подпись;
			СтрокаТаблицыПодписей.ОрганизацияEDI = Подпись.Владелец;
			СуфиксРеквизитовТаблицыПодписей = СуфиксРеквизитовТаблицыПодписей + 1;
			СтрокаТаблицыПодписей.СуфиксРеквизитов = Строка(СуфиксРеквизитовТаблицыПодписей);
		Иначе
			СтрокаТаблицыПодписей = НайденыеПодписи[0];
		КонецЕсли;
		СтрокаПодпись.СуфиксРеквизитовПодписи = СтрокаТаблицыПодписей.СуфиксРеквизитов;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем лВыполняемыеОперации, лОрганизация, лПодписанты, лВерсияМассиваДанныхПоДокументам, лЖурналРабочегоСтола;
	
	Если Параметры.Свойство("ВерсияМассиваДанныхПоДокументам", лВерсияМассиваДанныхПоДокументам) Тогда
		ВерсияМассиваДанныхПоДокументам = лВерсияМассиваДанныхПоДокументам;
	КонецЕсли;
	Если Параметры.Свойство("ЖурналРабочегоСтола", лЖурналРабочегоСтола) Тогда
		ЖурналРабочегоСтола = лЖурналРабочегоСтола;
	КонецЕсли;
	
	ОграничениеВсеПодписиДолжныБытьЗаполнены = Ложь;
	ОграничениеЕдиныйАПИДляЗащищенныхНосителей = Ложь;
	РежимОтправкиНаДоподписание = Ложь;
	ОбрабатыватьГруппуСертификатовШифрования = Ложь;
	ОбрабатыватьГруппуСертификатовШифрованияДляПолученияВходящихСообщений = Ложь;
	
	Если Параметры.Свойство("ВыполняемыеОперации", лВыполняемыеОперации) Тогда
		ВыполняемыеОперации = Новый ФиксированныйМассив(лВыполняемыеОперации);
		ЗаголовокФормыПолный = "";
		ЗаголовокКомандыПолный = "";
		ЗаголовокФормыПолный2 = "";
		ЗаголовокКомандыПолный2 = "";
		Для Каждого ВыполняемаяОперация Из лВыполняемыеОперации Цикл
			ЗаголовокФормы = "";
			ЗаголовокКоманды = "";
			Если ВыполняемаяОперация = "СформироватьНовыйВариантЭлектронногоДокумента" Тогда
				ЗаголовокФормы = НСтр("ru = 'формироваие нового варианта Электронного документа'; uk = 'формування нового варіанта Електронного документа'");;
				ЗаголовокКоманды = НСтр("ru = 'сформировать новый вариант Электронного документа'; uk = 'сформувати новий варіант Електронного документа'");
			ИначеЕсли ВыполняемаяОперация = "ПовторноеУтверждение" Тогда
				ЗаголовокФормы = НСтр("ru = 'Повторное утверждение'; uk = 'повторне затвердження'");
				ЗаголовокКоманды = НСтр("ru = 'повторно утвердить'; uk = 'повторно затвердити'");
			ИначеЕсли ВыполняемаяОперация = "Подпись" Тогда
				ЗаголовокФормы = НСтр("ru = 'подписание'; uk = 'підпис'");
				ЗаголовокКоманды = НСтр("ru = 'подписать'; uk = 'підписати'");
			ИначеЕсли ВыполняемаяОперация = "ОтправитьНаДоподписание" Тогда
				ЗаголовокФормы = НСтр("ru = 'отправка на доподписание'; uk = 'відправка на допідписання'");
				ЗаголовокКоманды = НСтр("ru = 'отправить на доподписание'; uk = 'відправити на допідписання'");
				РежимОтправкиНаДоподписание = Истина;
			ИначеЕсли ВыполняемаяОперация = "Отправка" Тогда
				ЗаголовокФормы = НСтр("ru = 'отправка'; uk = 'відправка'");
				ЗаголовокКоманды = НСтр("ru = 'отправить'; uk = 'відправити'");
			ИначеЕсли ВыполняемаяОперация = "ОтправкаВДФС" Тогда
				ЗаголовокФормы = НСтр("ru = 'отправка в ГНС'; uk = 'відправка до ДПС'");
				ЗаголовокКоманды = НСтр("ru = 'отправить в ГНС'; uk = 'відправити до ДПС'");
			ИначеЕсли ВыполняемаяОперация = "ОтправкаКвитанций" Тогда
				ЗаголовокФормы = НСтр("ru = 'отправка квитанции'; uk = 'відправка квитанції'");
				ЗаголовокКоманды = НСтр("ru = 'отправить квитанции'; uk = 'відправити квитанції'");
			ИначеЕсли ВыполняемаяОперация = "ПовторнаяОтправка" Тогда
				ЗаголовокФормы = НСтр("ru = 'повторная отправка документа/квитанции'; uk = 'повторна відправка документу/квитанції'");
				ЗаголовокКоманды = НСтр("ru = 'отправить повторно'; uk = 'відправити повторно'");
			ИначеЕсли ВыполняемаяОперация = "ПолучениеВходящихСообщений" Тогда
				ЗаголовокФормы = НСтр("ru = 'Прийом входящих сообщений'; uk = 'Прийом вхідних повідомлень'");
				ЗаголовокКоманды = НСтр("ru = 'получить входящие сообщения'; uk = 'отримати вхідні повідомлення'");
				ОбрабатыватьГруппуСертификатовШифрованияДляПолученияВходящихСообщений = Истина;
			ИначеЕсли ВыполняемаяОперация = "Отклонение" Тогда
	            ЗаголовокФормы = НСтр("ru = 'отклонение'; uk = 'відхилення'");
	            ЗаголовокКоманды = НСтр("ru = 'отклонить'; uk = 'відхилити'");
			ИначеЕсли ВыполняемаяОперация = "Отзыв" Тогда
	            ЗаголовокФормы = НСтр("ru = 'Отзыв'; uk = 'Відкликання'");
	            ЗаголовокКоманды = НСтр("ru = 'заблокировать'; uk = 'заблокувати'");
			ИначеЕсли ВыполняемаяОперация = "ЗапроситьДанныеПоРасчетамСБюджетом" Тогда
	            ЗаголовокФормы = НСтр("ru = 'запрос данных по расчетам с бюджетом'; uk = 'запит даних по розрахункам з бюджетом'");
	            ЗаголовокКоманды = НСтр("ru = 'запросить данные по расчетам с бюджетом'; uk = 'запросити дані по розрахункам з бюджетом'");
			ИначеЕсли ВыполняемаяОперация = "Free" Тогда
	            ЗаголовокФормы = "";
	            ЗаголовокКоманды = "";
				ОграничениеВсеПодписиДолжныБытьЗаполнены = Истина;
				ОграничениеЕдиныйАПИДляЗащищенныхНосителей = Истина;
			ИначеЕсли ВыполняемаяОперация = "ДляРегламентногоЗадания" Тогда
	            ЗаголовокФормы = "";
	            ЗаголовокКоманды = "";
				ЗаголовокФормыПолный2 = НСтр("ru = 'Настройка подписей для регламентного задания'; uk = 'Налаштування підписів для регламентного завдання'");
				ЗаголовокКомандыПолный2 = НСтр("ru = 'Применить настройки'; uk = 'Застосувати налаштування'");
				ОграничениеВсеПодписиДолжныБытьЗаполнены = Истина;
			ИначеЕсли ВыполняемаяОперация = "OnlyHref" Тогда
	            ЗаголовокФормы = "";
	            ЗаголовокКоманды = "";
			Иначе
				ЗаголовокКоманды = ВыполняемаяОперация;
			КонецЕсли; 
			
			Если ЗаголовокФормы <> "" Тогда
				Если ЗаголовокФормыПолный = "" Тогда
					ЗаголовокФормыПолный = ВРег(Лев(ЗаголовокФормы, 1)) + Сред(ЗаголовокФормы, 2);
				Иначе
					ЗаголовокФормыПолный = ЗаголовокФормыПолный + ", " + ЗаголовокФормы;
				КонецЕсли; 
			КонецЕсли; 
			Если ЗаголовокКоманды <> "" Тогда
				Если ЗаголовокКомандыПолный = "" Тогда
					ЗаголовокКомандыПолный = ВРег(Лев(ЗаголовокКоманды, 1)) + Сред(ЗаголовокКоманды, 2);
				Иначе
					ЗаголовокКомандыПолный = ЗаголовокКомандыПолный + ", " + ЗаголовокКоманды;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		
		Если ЗаголовокФормыПолный2 <> "" Тогда
			ЭтаФорма.АвтоЗаголовок = Ложь;
			ЭтаФорма.Заголовок = ЗаголовокФормыПолный2 + ?(ЗаголовокФормыПолный = "", "", " (" + ЗаголовокФормыПолный + ")");
		ИначеЕсли ЗаголовокФормыПолный <> "" Тогда
			ЭтаФорма.АвтоЗаголовок = Ложь;
			ЭтаФорма.Заголовок = ЗаголовокФормыПолный;
		КонецЕсли;
		
		Если ЗаголовокКомандыПолный2 <> "" Тогда
			Элементы.ФормаПринятьНастройкиПодписей.Заголовок = ЗаголовокКомандыПолный2;
		ИначеЕсли ЗаголовокКомандыПолный <> "" Тогда
			Элементы.ФормаПринятьНастройкиПодписей.Заголовок = ЗаголовокКомандыПолный;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Параметры.Свойство("Организация", лОрганизация) Тогда
		Организация = лОрганизация;
	КонецЕсли;
	
	ЭлементыДереваПодписей = ДеревоПодписей.ПолучитьЭлементы();
	ЭлементыДереваПодписей.Очистить();
	ЭлементыДереваПодписейШифрования = ДеревоПодписейШифрования.ПолучитьЭлементы();
	ЭлементыДереваПодписейШифрования.Очистить();
	ТаблицаПодписей.Очистить();
	
	СуфиксРеквизитовДерева = 0;
	СуфиксРеквизитовТаблицыПодписей = 0;
	Если ОбрабатыватьГруппуСертификатовШифрованияДляПолученияВходящихСообщений Тогда
		ЕстьСертификатыСИспользоватьПриПриемеМассивомСертификатов = Ложь;
		ЗаполнитьДеревоПодписейПоПодписиГруппойСертификатовШифрования(ЭлементыДереваПодписейШифрования, СуфиксРеквизитовДерева, СуфиксРеквизитовТаблицыПодписей, ЕстьСертификатыСИспользоватьПриПриемеМассивомСертификатов);
		Если ЕстьСертификатыСИспользоватьПриПриемеМассивомСертификатов Тогда
			ОбрабатыватьГруппуСертификатовШифрования = Истина;
		КонецЕсли;
	Иначе
		Если Параметры.Свойство("Подписанты", лПодписанты) Тогда
			Для Каждого лПодпись Из лПодписанты.МассивПодписей Цикл
				ЗаполнитьДеревоПодписейПоПодписи(лПодпись, ЭлементыДереваПодписей, СуфиксРеквизитовДерева, СуфиксРеквизитовТаблицыПодписей, ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Подписание"));
			КонецЦикла;
			Для Каждого лПодписьШифрования Из лПодписанты.МассивПодписейШифрования Цикл
				лПодпись  = лПодписьШифрования.ПодписьШифрования;
				ЗаполнитьДеревоПодписейПоПодписи(лПодпись, ЭлементыДереваПодписейШифрования, СуфиксРеквизитовДерева, СуфиксРеквизитовТаблицыПодписей, ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование"));
			КонецЦикла;
		КонецЕсли;
		ПолучитьИнформацияОбЭлектронноЦифровыхПодписях();
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.скEDI_НастройкиПользователей.ПолучитьЗначениеНастройкиТекущегоПользователя(ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_НастройкиПользователей.ТолькоДоступныеПодписи")) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	скEDI_ПодписиПользователи.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.скEDI_Подписи.Пользователи КАК скEDI_ПодписиПользователи
		               |ГДЕ
		               |	скEDI_ПодписиПользователи.Пользователь = &Пользователь
		               |	И скEDI_ПодписиПользователи.Ссылка В(&МассивПодписей)";
		Запрос.УстановитьПараметр("Пользователь", скEDI_НастройкиПодКонфигурацию.ПолучитьТекущегоПользователя());
		Запрос.УстановитьПараметр("МассивПодписей", ТаблицаПодписей.Выгрузить(, "Подпись").ВыгрузитьКолонку("Подпись"));
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			НайденыеСтроки = ТаблицаПодписей.НайтиСтроки(Новый Структура("Подпись", ВыборкаРезультатаЗапроса.Ссылка));
			Для Каждого СтрокаТаблицыПодписей из НайденыеСтроки Цикл
				СтрокаТаблицыПодписей.КлючДоступенПользователю = Истина;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицыПодписей из ТаблицаПодписей Цикл
			СтрокаТаблицыПодписей.КлючДоступенПользователю = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ПрочитатьНастройкиПодписейИзКэша();
	ПрочитатьНастройкиПодписейИзСохраненныхНастроек();
	
	СоздатьЭлементыФормы();
	
	ОбновитьСостояниеВсехЗащищенныхНосителейНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Функция СуфиксРеквизитовПодписиПоСуфиксуРеквизитовНаКлиенте(СуфиксРеквизитов)
	СуфиксРеквизитовПодписи = "";
	Для Каждого Стр Из ДеревоПодписей.ПолучитьЭлементы() Цикл
		Если Стр.ЭтоГруппаПодписей Тогда
			Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
				Если Стр2.СуфиксРеквизитов = СуфиксРеквизитов Тогда
					СуфиксРеквизитовПодписи = Стр2.СуфиксРеквизитовПодписи;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СуфиксРеквизитовПодписи <> "" Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Если Стр.СуфиксРеквизитов = СуфиксРеквизитов Тогда
				СуфиксРеквизитовПодписи = Стр.СуфиксРеквизитовПодписи;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СуфиксРеквизитовПодписи = "" Тогда
		Для Каждого Стр Из ДеревоПодписейШифрования.ПолучитьЭлементы() Цикл
			Если Стр.ЭтоГруппаПодписей Тогда
				Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
					Если Стр2.СуфиксРеквизитов = СуфиксРеквизитов Тогда
						СуфиксРеквизитовПодписи = Стр2.СуфиксРеквизитовПодписи;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если СуфиксРеквизитовПодписи <> "" Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Если Стр.СуфиксРеквизитов = СуфиксРеквизитов Тогда
					СуфиксРеквизитовПодписи = Стр.СуфиксРеквизитовПодписи;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СуфиксРеквизитовПодписи;
КонецФункции

&НаСервере
Функция СуфиксРеквизитовПоСуфиксуРеквизитовПодписиНаСервере(СуфиксРеквизитовПодписи)
	СуфиксРеквизитов = "";
	Для Каждого Стр Из ДеревоПодписей.ПолучитьЭлементы() Цикл
		Если Стр.ЭтоГруппаПодписей Тогда
			Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
				Если Стр2.СуфиксРеквизитовПодписи = СуфиксРеквизитовПодписи Тогда
					СуфиксРеквизитов = Стр2.СуфиксРеквизитов;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СуфиксРеквизитов <> "" Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Если Стр.СуфиксРеквизитовПодписи = СуфиксРеквизитовПодписи Тогда
				СуфиксРеквизитов = Стр.СуфиксРеквизитов;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СуфиксРеквизитов = "" Тогда
		Для Каждого Стр Из ДеревоПодписейШифрования.ПолучитьЭлементы() Цикл
			Если Стр.ЭтоГруппаПодписей Тогда
				Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
					Если Стр2.СуфиксРеквизитовПодписи = СуфиксРеквизитовПодписи Тогда
						СуфиксРеквизитов = Стр2.СуфиксРеквизитов;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если СуфиксРеквизитов <> "" Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Если Стр.СуфиксРеквизитовПодписи = СуфиксРеквизитовПодписи Тогда
					СуфиксРеквизитов = Стр.СуфиксРеквизитов;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СуфиксРеквизитов;
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкуХранитьПарольВТечениеСеанса(Подпись, Значение)
	Если ЗначениеЗаполнено(Подпись) Тогда
		Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
			Возврат;
		КонецЕсли;
		ХранилищеНастроекДанныхФорм.Сохранить("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов.ХранитьПарольВТечениеСеанса", Подпись.УникальныйИдентификатор(), Значение);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкуХранитьПарольВТечениеСеанса(Подпись, ЗначениеПоУмолчанию = Ложь)
	Если ЗначениеЗаполнено(Подпись) Тогда
		Результат = Неопределено;
		Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
			Результат = ХранилищеНастроекДанныхФорм.Загрузить("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов.ХранитьПарольВТечениеСеанса", Подпись.УникальныйИдентификатор());
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Возврат ЗначениеПоУмолчанию;
		Иначе
			Возврат (Результат = Истина);
		КонецЕсли;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТаблицаНеобходимыхПодписейХранитьПарольВТечениеСеансаПриИзменении(Элемент, СтандартнаяОбработка)
	СуфиксРеквизитов = Сред(Элемент.Имя, СтрДлина("ХранитьПарольВТечениеСеанса_")+1);
	СуфиксРеквизитовПодписи = СуфиксРеквизитовПодписиПоСуфиксуРеквизитовНаКлиенте(СуфиксРеквизитов);
	Если СуфиксРеквизитовПодписи <> "" Тогда
		ТекЗначение = ЭтаФорма["ТаблицаПодписейХранитьПарольВТечениеСеанса_"+СуфиксРеквизитовПодписи];
		ТекПодпись = ЭтаФорма["ТаблицаПодписейПодпись_"+СуфиксРеквизитовПодписи];
		СохранитьНастройкуХранитьПарольВТечениеСеанса(ТекПодпись, ТекЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСуфиксРеквизитовПодписи(СуфиксРеквизитов)
	СуфиксРеквизитовПодписи = "";
	Для Каждого Стр Из ДеревоПодписей.ПолучитьЭлементы() Цикл
		Если Стр.ЭтоГруппаПодписей Тогда
			Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
				Если Стр2.СуфиксРеквизитов = СуфиксРеквизитов Тогда
					СуфиксРеквизитовПодписи = Стр2.СуфиксРеквизитовПодписи;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СуфиксРеквизитовПодписи <> "" Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Если Стр.СуфиксРеквизитов = СуфиксРеквизитов Тогда
				СуфиксРеквизитовПодписи = Стр.СуфиксРеквизитовПодписи;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СуфиксРеквизитовПодписи = "" Тогда
		Для Каждого Стр Из ДеревоПодписейШифрования.ПолучитьЭлементы() Цикл
			Если Стр.ЭтоГруппаПодписей Тогда
				Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
					Если Стр2.СуфиксРеквизитов = СуфиксРеквизитов Тогда
						СуфиксРеквизитовПодписи = Стр2.СуфиксРеквизитовПодписи;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если СуфиксРеквизитовПодписи <> "" Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Если Стр.СуфиксРеквизитов = СуфиксРеквизитов Тогда
					СуфиксРеквизитовПодписи = Стр.СуфиксРеквизитовПодписи;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуфиксРеквизитовПодписи;
КонецФункции

&НаКлиенте
Процедура ТаблицаНеобходимыхПодписейОтправлятьНаДоподписаниеПриИзменении(Элемент, СтандартнаяОбработка)
	СуфиксРеквизитов = Сред(Элемент.Имя, СтрДлина("ОтправлятьНаДоподписание_")+1);
	СуфиксРеквизитовПодписи = ПолучитьСуфиксРеквизитовПодписи(СуфиксРеквизитов);
	Если СуфиксРеквизитовПодписи <> "" Тогда
		ИмяРеквизитаАдрес = "ТаблицаПодписейEmail1_" + СуфиксРеквизитовПодписи;
		ИмяРеквизитаОтправлять = "ТаблицаПодписейОтправлятьНаДоподписание_" + СуфиксРеквизитовПодписи;
		
		Если Не ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаАдрес]) Тогда
			//ЭтаФорма[ИмяРеквизитаОтправлять] = Ложь;
			ЭтаФорма.ТекущийЭлемент = Элементы["Email1_" + СуфиксРеквизитов];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНеобходимыхПодписейEmail1ПриИзменении(Элемент, СтандартнаяОбработка)
	СуфиксРеквизитов = Сред(Элемент.Имя, СтрДлина("Email1_")+1);
	СуфиксРеквизитовПодписи = ПолучитьСуфиксРеквизитовПодписи(СуфиксРеквизитов);
	Если СуфиксРеквизитовПодписи <> "" Тогда
		ИмяРеквизитаАдрес = "ТаблицаПодписейEmail1_" + СуфиксРеквизитовПодписи;
		ИмяРеквизитаОтправлять = "ТаблицаПодписейОтправлятьНаДоподписание_" + СуфиксРеквизитовПодписи;
		
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаАдрес]) Тогда
			ЭтаФорма[ИмяРеквизитаОтправлять] = Истина;
			Если Элементы["ЗаписатьEmail1_" + СуфиксРеквизитов].Доступность Тогда
				ЭтаФорма["ТаблицаПодписейЗаписатьEmail1_" + СуфиксРеквизитовПодписи] = Истина;
			КонецЕсли;
		Иначе
			ЭтаФорма[ИмяРеквизитаОтправлять] = Ложь;
			ЭтаФорма["ТаблицаПодписейЗаписатьEmail1_" + СуфиксРеквизитовПодписи] = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНеобходимыхПодписейПутьКСекретномуКлючуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СуфиксРеквизитов = Сред(Элемент.Имя, СтрДлина("ПутьККаталогуСекретногоКлюча_")+1);
	СуфиксРеквизитовПодписи = ПолучитьСуфиксРеквизитовПодписи(СуфиксРеквизитов);
	Если СуфиксРеквизитовПодписи <> "" Тогда
		ИмяРеквизита = "ТаблицаПодписейПутьККаталогуСекретногоКлюча_" + СуфиксРеквизитовПодписи;
		ИмяФайлаНачалоВыбора(ИмяРеквизита, СуфиксРеквизитовПодписи, НСтр("ru = 'Ключи ЭЦП (*.ZS2;*.DAT)|*.ZS2;*.DAT'; uk = 'Ключі ЕЦП (*.ZS2;*.DAT)|*.ZS2;*.DAT'"), НСтр("ru = 'Выберите каталог з секретными ключами'; uk = 'Оберіть каталог секретними ключами'"));
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаСервере
Функция ПодобратьКлючи(СодержимоеФайлов, ВозвращаемыеДанные)
	ВсеКлючиПодобраны = Истина;
	Для Каждого СтрокаТаблицы Из ТаблицаНеобходимыхПодписей Цикл
		Если СтрокаТаблицы.ПарольСекретногоКлюча = "" Тогда
			СтрокаТаблицы.ПутьКСекретномуКлючу = "";
			СтрокаТаблицы.ТелоСекретногоКлюча = "";
		Иначе
			СтрокаТаблицы.ПутьКСекретномуКлючу = "";
			СтрокаТаблицы.ТелоСекретногоКлюча = "";
			КлючНайден = Ложь;
			КандидатВКлючиБыл = Ложь;
			Для Каждого СодержимоеФайла Из СодержимоеФайлов Цикл
				КандидатВКлючиБыл = Истина;
				лПараметрыПроверкиСоответствия = Новый Структура;
				лПараметрыПроверкиСоответствия.Вставить("Cert",     СтрокаТаблицы.ТелоСертификата);
				лПараметрыПроверкиСоответствия.Вставить("Key",      СодержимоеФайла.Значение);
				лПараметрыПроверкиСоответствия.Вставить("Password", СтрокаТаблицы.ПарольСекретногоКлюча);
				лРезультатПроверкиСоответствия = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("checkcertkey", лПараметрыПроверкиСоответствия);
				Если лРезультатПроверкиСоответствия.Code = 0 Тогда
					СтрокаТаблицы.ПутьКСекретномуКлючу = СодержимоеФайла.Ключ;
					СтрокаТаблицы.ТелоСекретногоКлюча = СодержимоеФайла.Значение;
					КлючНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не КандидатВКлючиБыл Тогда
				Сообщить("Для """ + Строка(СтрокаТаблицы.Подпись) + """ " +НСтр("ru = 'Ключи не обнаружены!'; uk = 'Ключі не знайдені!'"));
				ВсеКлючиПодобраны = Ложь;
			ИначеЕсли Не КлючНайден Тогда
				Сообщить("Для """ + Строка(СтрокаТаблицы.Подпись) + """ " +НСтр("ru = 'Ошибка подписания/шифрования, возможно указан неверный пароль!'; uk = 'Помилка підписання/шифрування, можливо вказано невірний пароль!'"));
				ВсеКлючиПодобраны = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ТаблицаНеобходимыхПодписейШифрования Цикл
		Если СтрокаТаблицы.ПарольСекретногоКлюча = "" Тогда
			СтрокаТаблицы.ПутьКСекретномуКлючу = "";
			СтрокаТаблицы.ТелоСекретногоКлюча = "";
		Иначе
			СтрокаТаблицы.ПутьКСекретномуКлючу = "";
			СтрокаТаблицы.ТелоСекретногоКлюча = "";
			КлючНайден = Ложь;
			КандидатВКлючиБыл = Ложь;
			Для Каждого СодержимоеФайла Из СодержимоеФайлов Цикл
				КандидатВКлючиБыл = Истина;
				лПараметрыПроверкиСоответствия = Новый Структура;
				лПараметрыПроверкиСоответствия.Вставить("Cert",     СтрокаТаблицы.ТелоСертификата);
				лПараметрыПроверкиСоответствия.Вставить("Key",      СодержимоеФайла.Значение);
				лПараметрыПроверкиСоответствия.Вставить("Password", СтрокаТаблицы.ПарольСекретногоКлюча);
				лРезультатПроверкиСоответствия = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("checkcertkey", лПараметрыПроверкиСоответствия);
				Если лРезультатПроверкиСоответствия.Code = 0 Тогда
					СтрокаТаблицы.ПутьКСекретномуКлючу = СодержимоеФайла.Ключ;
					СтрокаТаблицы.ТелоСекретногоКлюча = СодержимоеФайла.Значение;
					КлючНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не КандидатВКлючиБыл Тогда
				Сообщить("Для """ + Строка(СтрокаТаблицы.Подпись) + """ " +НСтр("ru = 'Ключи не обнаружены!'; uk = 'Ключі не знайдені!'"));
				ВсеКлючиПодобраны = Ложь;
			ИначеЕсли Не КлючНайден Тогда
				Сообщить("Для """ + Строка(СтрокаТаблицы.Подпись) + """ " +НСтр("ru = 'Ошибка подписания/шифрования, возможно указан неверный пароль!'; uk = 'Помилка підписання/шифрування, можливо вказано невірний пароль!'"));
				ВсеКлючиПодобраны = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ВсеКлючиПодобраны Тогда
		ВозвращаемыеДанные = Новый Структура;
		ВозвращаемыеДанные.Вставить("ТаблицаНеобходимыхПодписей",           РеквизитФормыВЗначение("ТаблицаНеобходимыхПодписей"));
		ВозвращаемыеДанные.Вставить("ТаблицаНеобходимыхПодписейШифрования", РеквизитФормыВЗначение("ТаблицаНеобходимыхПодписейШифрования"));
	КонецЕсли;
	Возврат ВсеКлючиПодобраны;
КонецФункции

&НаСервере
Функция ПодобратьКлюч(СодержимоеФайлов, ТелоСертификата, ПарольСекретногоКлюча, ТелоСекретногоКлюча, ПутьКСекретномуКлючу)
	//СтрокаТаблицыПодписей.ПутьКСекретномуКлючу = "";
	ТелоСекретногоКлюча = "";
	КлючНайден = Ложь;
	Для Каждого СодержимоеФайла Из СодержимоеФайлов Цикл
		КандидатВКлючиБыл = Истина;
		лПараметрыПроверкиСоответствия = Новый Структура;
		лПараметрыПроверкиСоответствия.Вставить("Cert",     ТелоСертификата);
		лПараметрыПроверкиСоответствия.Вставить("Key",      СодержимоеФайла.Значение);
		лПараметрыПроверкиСоответствия.Вставить("Password", ПарольСекретногоКлюча);
		лРезультатПроверкиСоответствия = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("checkcertkey", лПараметрыПроверкиСоответствия);
		Если лРезультатПроверкиСоответствия.Code = 0 Тогда
			ПутьКСекретномуКлючу = СодержимоеФайла.Ключ;
			ТелоСекретногоКлюча = СодержимоеФайла.Значение;
			КлючНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат КлючНайден;
КонецФункции

&НаКлиенте
Функция Проверить(Значение, ОбязательныйСимвол, ЗапретныеСимволы)
	ОбязательныйСимвол = ВРег(ОбязательныйСимвол);
	ЗапретныеСимволы = ВРег(ЗапретныеСимволы);
	ОбязательныйСимволНайден = Ложь;
	Для Н = 1 по СтрДлина(Значение) Цикл
		ТекСимвол = ВРег(Сред(Значение, Н, 1));
		Если ОбязательныйСимволНайден Тогда
			Если ТекСимвол = ОбязательныйСимвол Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если ТекСимвол = ОбязательныйСимвол Тогда
				ОбязательныйСимволНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Найти(ЗапретныеСимволы, ТекСимвол) > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ОбязательныйСимволНайден Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПринятьНастройкиПодписейДляСтрокиТаблицыПодписей_РежимОтправкиНаДоподписание(Подпись, СтрокаТаблицыПодписей, ТаблицаНеобходимыхПодписейРезультат, Обязательно, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо)
	Если СтрокаТаблицыПодписей.ОтправлятьНаДоподписание Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицыПодписей.Email1) Тогда
			Если Проверить(СтрокаТаблицыПодписей.Email1, "@", "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦШЩЪЫЬЭЮЯҐЄІЇ") Тогда
				НоваяСтрокаТаблицыРезультат = ТаблицаНеобходимыхПодписейРезультат.Добавить();
				НоваяСтрокаТаблицыРезультат.Подпись = Подпись;
				НоваяСтрокаТаблицыРезультат.ВыбранаяПодпись = СтрокаТаблицыПодписей.Подпись;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыРезультат, СтрокаТаблицыПодписей, , "Подпись");
			Иначе
				Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
					лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
				КонецЕсли;
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + "Для """ + Строка(СтрокаТаблицыПодписей.Подпись) + """ " + НСтр("ru = 'Адрес электронной почты не корректный.'; uk = 'Адреса електронної пошти не коректна.'");
			КонецЕсли;
		Иначе
			Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
			КонецЕсли;
			лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + "Для """ + Строка(СтрокаТаблицыПодписей.Подпись) + """ " + НСтр("ru = 'не указано e-mail!'; uk = 'не вказано e-mail!'");
		КонецЕсли;
	ИначеЕсли Обязательно Тогда
		Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
			лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
		КонецЕсли;
		лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
		+ "Для """
		+ Строка(СтрокаТаблицыПодписей.Подпись)
		+ """ "
		+ НСтр("ru = 'не настроены параметры отправки.'; uk = 'не налаштовано параметри відправки.'");;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьНастройкиПодписейДляСтрокиТаблицыПодписей(Подпись, СтрокаТаблицыПодписей, ТаблицаНеобходимыхПодписейРезультат, Обязательно, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо)
	Если СтрокаТаблицыПодписей.КлючНаЗащищенномНосителе и СтрокаТаблицыПодписей.КлючНаСервисеCloudKey Тогда
		Если СтрокаТаблицыПодписей.ЕстьОтображениеКлюча
		и ЗначениеЗаполнено(СтрокаТаблицыПодписей.ПарольСекретногоКлюча) Тогда
			ПараметрыПроверки = Новый Структура;
			СтрокаПодключения = Неопределено;

			ПараметрыПроверки.Вставить("Cert", СтрокаТаблицыПодписей.ТелоСертификата);
			ПараметрыПроверки.Вставить("Password", СтрокаТаблицыПодписей.ПарольСекретногоКлюча);
			Если СтрокаТаблицыПодписей.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу Тогда
				СтрокаПодключения = СтрокаТаблицыПодписей.ЗащищенныйНосительСтрокаПодключения;
			КонецЕсли;
			РезультатПроверки = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("checkcertkey", ПараметрыПроверки, , СтрокаПодключения);
			Если РезультатПроверки.Code = 0 Тогда
				СтрокаТаблицыПодписей.ПодписьНастроена = Истина;
				НоваяСтрокаТаблицыРезультат = ТаблицаНеобходимыхПодписейРезультат.Добавить();
				НоваяСтрокаТаблицыРезультат.Подпись = Подпись;
				НоваяСтрокаТаблицыРезультат.ВыбранаяПодпись = СтрокаТаблицыПодписей.Подпись;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыРезультат, СтрокаТаблицыПодписей, , "Подпись");
			Иначе
				Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
					лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
				КонецЕсли;
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
				+ "Для """
				+ Строка(СтрокаТаблицыПодписей.Подпись)
				+ """ "
				+ РезультатПроверки.Message;
			КонецЕсли;
		ИначеЕсли Обязательно или ОграничениеВсеПодписиДолжныБытьЗаполнены Тогда
			Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
			КонецЕсли;
			лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
			+ "Для """
			+ Строка(СтрокаТаблицыПодписей.Подпись)
			+ """ "
			+ НСтр("ru = 'Не указан пароль защищенного носителя.'; uk = 'Не вказано пароль захищеного носія.'");
		Иначе
			Если лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо <> "" Тогда
				лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо + Символы.ПС;
			КонецЕсли;
			лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо
			+ "Для """
			+ Строка(СтрокаТаблицыПодписей.Подпись)
			+ """ "
			+ НСтр("ru = 'Не указан пароль защищенного носителя.'; uk = 'Не вказано пароль захищеного носія.'");
		КонецЕсли;
	ИначеЕсли СтрокаТаблицыПодписей.КлючНаЗащищенномНосителе и не СтрокаТаблицыПодписей.КлючНаСервисеCloudKey Тогда
		Если СтрокаТаблицыПодписей.ЕстьОтображениеКлюча
		и ЗначениеЗаполнено(СтрокаТаблицыПодписей.ПарольСекретногоКлюча)
		и СтрокаТаблицыПодписей.ЗащищенныйНосительДоступен Тогда
		
			Если СтрокаТаблицыПодписей.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу Тогда
				ИспользоватьЗащищенноеСоединение = Истина;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ПрефиксЗапроса = "";
				Ошибка = "";
				Если скEDI_КомандыEDIПровайдеру.ПарсингСтрокиПодключения(СтрокаТаблицыПодписей.ЗащищенныйНосительСтрокаПодключения, ИспользоватьЗащищенноеСоединение, СерверEDI, ПортEDI, ПрефиксЗапроса, Ошибка) Тогда
					СтрокаТаблицыПодписей.ЗащищенныйНосительСервер = СерверEDI;
					СтрокаТаблицыПодписей.ЗащищенныйНосительПорт = ПортEDI;
				Иначе
					Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
						лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
					КонецЕсли;
					лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
					+ "Для """
					+ Строка(СтрокаТаблицыПодписей.Подпись)
					+ """ "
					+ Ошибка;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			СтрокаПодключения = Неопределено;

			ПараметрыПроверки.Вставить("Cert", СтрокаТаблицыПодписей.ТелоСертификата);

			лТокен = Новый Структура;
			лТокен.Вставить("ProviderName", СтрокаТаблицыПодписей.ЗащищенныйНосительProviderName);
			лТокен.Вставить("SlotId", СтрокаТаблицыПодписей.ЗащищенныйНосительSlotId);
			лТокен.Вставить("TokenSerialNumber", СтрокаТаблицыПодписей.ЗащищенныйНосительTokenSerialNumber);
			лТокен.Вставить("IsRemoteSlot", СтрокаТаблицыПодписей.ЗащищенныйНосительIsRemoteSlot);
			Если СтрокаТаблицыПодписей.ЗащищенныйНосительUseNamedKeys Тогда
				лТокен.Вставить("UseNamedKeys", СтрокаТаблицыПодписей.ЗащищенныйНосительUseNamedKeys);
				лТокен.Вставить("TokenPassword", СтрокаТаблицыПодписей.ЗащищенныйНосительTokenPassword);
			КонецЕсли;
			ПараметрыПроверки.Вставить("Token",    лТокен);
			ПараметрыПроверки.Вставить("Password", СтрокаТаблицыПодписей.ПарольСекретногоКлюча);
			Если СтрокаТаблицыПодписей.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу Тогда
				СтрокаПодключения = СтрокаТаблицыПодписей.ЗащищенныйНосительСтрокаПодключения;
			КонецЕсли;
			Если СтрокаТаблицыПодписей.ЗащищенныйНосительUseNamedKeys Тогда
				РезультатПроверки = Новый Структура("Code", 0);
			Иначе
				РезультатПроверки = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("checkcertkey", ПараметрыПроверки, , СтрокаПодключения);
			КонецЕсли;
			Если РезультатПроверки.Code = 0 Тогда
				СтрокаТаблицыПодписей.ПодписьНастроена = Истина;
				НоваяСтрокаТаблицыРезультат = ТаблицаНеобходимыхПодписейРезультат.Добавить();
				НоваяСтрокаТаблицыРезультат.Подпись = Подпись;
				НоваяСтрокаТаблицыРезультат.ВыбранаяПодпись = СтрокаТаблицыПодписей.Подпись;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыРезультат, СтрокаТаблицыПодписей, , "Подпись");
			Иначе
				Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
					лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
				КонецЕсли;
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
				+ "Для """
				+ Строка(СтрокаТаблицыПодписей.Подпись)
				+ """ "
				+ РезультатПроверки.Message;
			КонецЕсли;
		ИначеЕсли СтрокаТаблицыПодписей.ЕстьОтображениеКлюча
		и ЗначениеЗаполнено(СтрокаТаблицыПодписей.ПарольСекретногоКлюча)
		и не СтрокаТаблицыПодписей.ЗащищенныйНосительДоступен Тогда
		
			Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
			КонецЕсли;
			лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
			+ "Для """
			+ Строка(СтрокаТаблицыПодписей.Подпись)
			+ """ "
			+ НСтр("ru = 'Защищенный носитель не найден. Пожалуйста, подключите носитель со своим секретным ключем.'; uk = 'Захищений носій не знайдено. Будь ласка, підключіть носій зі своїм секретним ключем.'");;
		ИначеЕсли Обязательно или ОграничениеВсеПодписиДолжныБытьЗаполнены Тогда
			Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
			КонецЕсли;
			лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
			+ "Для """
			+ Строка(СтрокаТаблицыПодписей.Подпись)
			+ """ "
			+ НСтр("ru = 'Не указан пароль защищенного носителя.'; uk = 'Не вказано пароль захищеного носія.'");
		Иначе
			Если лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо <> "" Тогда
				лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо + Символы.ПС;
			КонецЕсли;
			лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо
			+ "Для """
			+ Строка(СтрокаТаблицыПодписей.Подпись)
			+ """ "
			+ НСтр("ru = 'Не указан пароль защищенного носителя.'; uk = 'Не вказано пароль захищеного носія.'");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтрокаТаблицыПодписей.ТелоСекретногоКлюча) и ЗначениеЗаполнено(СтрокаТаблицыПодписей.ПарольСекретногоКлюча) Тогда
			СтрокаТаблицыПодписей.ПодписьНастроена = Истина;
			НоваяСтрокаТаблицыРезультат = ТаблицаНеобходимыхПодписейРезультат.Добавить();
			НоваяСтрокаТаблицыРезультат.Подпись = Подпись;
			НоваяСтрокаТаблицыРезультат.ВыбранаяПодпись = СтрокаТаблицыПодписей.Подпись;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыРезультат, СтрокаТаблицыПодписей, , "Подпись");
		Иначе
			Если СтрокаТаблицыПодписей.ЕстьОтображениеКлюча
			и ЗначениеЗаполнено(СтрокаТаблицыПодписей.ПарольСекретногоКлюча)
			и ЗначениеЗаполнено(СтрокаТаблицыПодписей.ПутьККаталогуСекретногоКлюча) Тогда
				СодержимоеФайлов = Новый Соответствие;
				НайденыеФайлы = НайтиФайлы(СтрокаТаблицыПодписей.ПутьККаталогуСекретногоКлюча, "*.ZS2", Истина);
				Для Каждого НайденыйФайл Из НайденыеФайлы Цикл
					//Если СодержимоеФайлов.Получить(НайденыйФайл.ПолноеИмя) = Неопределено Тогда
						СодержимоеФайлов.Вставить(НайденыйФайл.ПолноеИмя, Base64Строка(Новый ДвоичныеДанные(НайденыйФайл.ПолноеИмя)));
					//КонецЕсли;
				КонецЦикла;				
				НайденыеФайлы = НайтиФайлы(СтрокаТаблицыПодписей.ПутьККаталогуСекретногоКлюча, "*.DAT", Истина);
				Для Каждого НайденыйФайл Из НайденыеФайлы Цикл
					//Если СодержимоеФайлов.Получить(НайденыйФайл.ПолноеИмя) = Неопределено Тогда
						СодержимоеФайлов.Вставить(НайденыйФайл.ПолноеИмя, Base64Строка(Новый ДвоичныеДанные(НайденыйФайл.ПолноеИмя)));
					//КонецЕсли;
				КонецЦикла;
				НайденыеФайлы = НайтиФайлы(СтрокаТаблицыПодписей.ПутьККаталогуСекретногоКлюча, "*.JKS", Истина);
				Для Каждого НайденыйФайл Из НайденыеФайлы Цикл
					//Если СодержимоеФайлов.Получить(НайденыйФайл.ПолноеИмя) = Неопределено Тогда
						СодержимоеФайлов.Вставить(НайденыйФайл.ПолноеИмя, Base64Строка(Новый ДвоичныеДанные(НайденыйФайл.ПолноеИмя)));
					//КонецЕсли;
				КонецЦикла;
				Если СодержимоеФайлов.Количество() = 0 Тогда
					Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
						лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
					КонецЕсли;
					лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + "Для """ + Строка(СтрокаТаблицыПодписей.Подпись) + """ " +НСтр("ru = 'Ключи не обнаружены!'; uk = 'Ключі не знайдені!'");
					//Сообщить("Для """ + Строка(СтрокаТаблицыПодписей.Подпись) + """ " +НСтр("ru = 'Ключи не обнаружены!'; uk = 'Ключі не знайдені!'"));
				Иначе
					Если ПодобратьКлюч(СодержимоеФайлов, СтрокаТаблицыПодписей.ТелоСертификата, СтрокаТаблицыПодписей.ПарольСекретногоКлюча, СтрокаТаблицыПодписей.ТелоСекретногоКлюча, СтрокаТаблицыПодписей.ПутьКСекретномуКлючу) Тогда
						СтрокаТаблицыПодписей.ПодписьНастроена = Истина;
						НоваяСтрокаТаблицыРезультат = ТаблицаНеобходимыхПодписейРезультат.Добавить();
						НоваяСтрокаТаблицыРезультат.Подпись = Подпись;
						НоваяСтрокаТаблицыРезультат.ВыбранаяПодпись = СтрокаТаблицыПодписей.Подпись;
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыРезультат, СтрокаТаблицыПодписей, , "Подпись");
					Иначе
						Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
							лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
						КонецЕсли;
						лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + "Для """ + Строка(СтрокаТаблицыПодписей.Подпись) + """ " +НСтр("ru = 'Ошибка подписания/шифрования, возможно указан неверный пароль!'; uk = 'Помилка підписання/шифрування, можливо вказано невірний пароль!'");
						//Сообщить("Для """ + Строка(СтрокаТаблицыПодписей.Подпись) + """ " +НСтр("ru = 'Ошибка подписания/шифрования, возможно указан неверный пароль!'; uk = 'Помилка підписання/шифрування, можливо вказано невірний пароль!'"));
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Обязательно или ОграничениеВсеПодписиДолжныБытьЗаполнены Тогда
				Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
					лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
				КонецЕсли;
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
				+ "Для """
				+ Строка(СтрокаТаблицыПодписей.Подпись)
				+ """ "
				+ НСтр("ru = 'Не указаны каталог/пароль секретного ключа.'; uk = 'Не вказано каталог/пароль секретного ключа.'");;
			Иначе
				Если лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо <> "" Тогда
					лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо + Символы.ПС;
				КонецЕсли;
				лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо
				+ "Для """
				+ Строка(СтрокаТаблицыПодписей.Подпись)
				+ """ "
				+ НСтр("ru = 'Не указаны каталог/пароль секретного ключа.'; uk = 'Не вказано каталог/пароль секретного ключа.'");;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьНастройкиПодписейДляДерева_РежимОтправкиНаДоподписание(ИспользованиеКлючей, Дерево, ТаблицаНеобходимыхПодписейРезультат, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо)
	Обязательно = Истина;
	Для Каждого лСтрокаПодписи Из Дерево.ПолучитьЭлементы() Цикл
		Если лСтрокаПодписи.ЭтоГруппаПодписей Тогда
			СтрокиТаблицыПодписей = ТаблицаПодписей.НайтиСтроки(Новый Структура("СуфиксРеквизитов", лСтрокаПодписи.СуфиксРеквизитовВыбранойПодписи));
		Иначе
			СтрокиТаблицыПодписей = ТаблицаПодписей.НайтиСтроки(Новый Структура("СуфиксРеквизитов", лСтрокаПодписи.СуфиксРеквизитовПодписи));
		КонецЕсли;
		Если СтрокиТаблицыПодписей.Количество() = 0 Тогда
			Если Обязательно или ОграничениеВсеПодписиДолжныБытьЗаполнены Тогда
				Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
					лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
				КонецЕсли;
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
				+ "Для """
				+ Строка(?(ЗначениеЗаполнено(лСтрокаПодписи.Подпись), лСтрокаПодписи.Подпись, ИспользованиеКлючей))
				+ """ "
				+ НСтр("ru = 'Отсутствуют настройки!'; uk = 'Відсутні налаштування!'");
			Иначе
				Если лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо <> "" Тогда
					лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо + Символы.ПС;
				КонецЕсли;
				лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо
				+ "Для """
				+ Строка(?(ЗначениеЗаполнено(лСтрокаПодписи.Подпись), лСтрокаПодписи.Подпись, ИспользованиеКлючей))
				+ """ "
				+ НСтр("ru = 'Отсутствуют настройки!'; uk = 'Відсутні налаштування!'");
			КонецЕсли;
		Иначе
			ПринятьНастройкиПодписейДляСтрокиТаблицыПодписей_РежимОтправкиНаДоподписание(лСтрокаПодписи.Подпись, СтрокиТаблицыПодписей[0], ТаблицаНеобходимыхПодписейРезультат, Обязательно, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо);
		КонецЕсли;
		Обязательно = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьНастройкиПодписейДляДерева(ИспользованиеКлючей, Дерево, ТаблицаНеобходимыхПодписейРезультат, Знач Обязательно1, Знач Обязательно, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо)
	Для Каждого лСтрокаПодписи Из Дерево.ПолучитьЭлементы() Цикл
		Если лСтрокаПодписи.ЭтоГруппаПодписей Тогда
			СтрокиТаблицыПодписей = ТаблицаПодписей.НайтиСтроки(Новый Структура("СуфиксРеквизитов", лСтрокаПодписи.СуфиксРеквизитовВыбранойПодписи));
		Иначе
			СтрокиТаблицыПодписей = ТаблицаПодписей.НайтиСтроки(Новый Структура("СуфиксРеквизитов", лСтрокаПодписи.СуфиксРеквизитовПодписи));
		КонецЕсли;
		Если СтрокиТаблицыПодписей.Количество() = 0 Тогда
			Если Обязательно1 или Обязательно или ОграничениеВсеПодписиДолжныБытьЗаполнены Тогда
				Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
					лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
				КонецЕсли;
				лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
				+ "Для """
				+ Строка(?(ЗначениеЗаполнено(лСтрокаПодписи.Подпись), лСтрокаПодписи.Подпись, ИспользованиеКлючей))
				+ """ "
				+ НСтр("ru = 'Отсутствуют настройки!'; uk = 'Відсутні налаштування!'");
			Иначе
				Если лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо <> "" Тогда
					лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо + Символы.ПС;
				КонецЕсли;
				лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо
				+ "Для """
				+ Строка(?(ЗначениеЗаполнено(лСтрокаПодписи.Подпись), лСтрокаПодписи.Подпись, ИспользованиеКлючей))
				+ """ "
				+ НСтр("ru = 'Отсутствуют настройки!'; uk = 'Відсутні налаштування!'");
			КонецЕсли;
		Иначе
			СтрокаТаблицыПодписей = СтрокиТаблицыПодписей[0];
			Если СтрокаТаблицыПодписей.ЕстьОтображениеКлюча Тогда
				ПринятьНастройкиПодписейДляСтрокиТаблицыПодписей(лСтрокаПодписи.Подпись, СтрокиТаблицыПодписей[0], ТаблицаНеобходимыхПодписейРезультат, (Обязательно1 или Обязательно), лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо);
			Иначе
				Если Обязательно1 или Обязательно или ОграничениеВсеПодписиДолжныБытьЗаполнены Тогда
					Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей <> "" Тогда
						лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей + Символы.ПС;
					КонецЕсли;
					лЖурналПроверкиСоответствияСертификатовПаролейКлючей = лЖурналПроверкиСоответствияСертификатовПаролейКлючей
					+ "Для """
					+ Строка(?(ЗначениеЗаполнено(лСтрокаПодписи.Подпись), лСтрокаПодписи.Подпись, ИспользованиеКлючей))
					+ """ "
					+ НСтр("ru = 'Отсутствуют настройки!'; uk = 'Відсутні налаштування!'");
				Иначе
					Если лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо <> "" Тогда
						лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо + Символы.ПС;
					КонецЕсли;
					лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо
					+ "Для """
					+ Строка(?(ЗначениеЗаполнено(лСтрокаПодписи.Подпись), лСтрокаПодписи.Подпись, ИспользованиеКлючей))
					+ """ "
					+ НСтр("ru = 'Отсутствуют настройки!'; uk = 'Відсутні налаштування!'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Обязательно1 = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	лМассивСохраняемыхНастроекПодписей = Новый Массив;
	лМассивУдаляемыхНастроекПодписей   = Новый Массив;
	
	Для Каждого лЭлементТаблицыПодписей Из ТаблицаПодписей Цикл
		лСтруктураНастроекПодписи = Новый Структура("Подпись, СерийныйНомер, КлючНаЗащищенномНосителе, КлючНаСервисеCloudKey, ПутьКСекретномуКлючу, ПутьККаталогуСекретногоКлюча, ПарольСекретногоКлюча, ЗащищенныйНосительДоступен, ЗащищенныйНосительЕстьНастройкаДоступаКСерверу, ЗащищенныйНосительСтрокаПодключения, ЗащищенныйНосительTokenPassword");
		ЗаполнитьЗначенияСвойств(лСтруктураНастроекПодписи, лЭлементТаблицыПодписей);
		Если лЭлементТаблицыПодписей.ХранитьПарольВТечениеСеанса Тогда
			Если лЭлементТаблицыПодписей.ПодписьНастроена Тогда
				лМассивСохраняемыхНастроекПодписей.Добавить(лСтруктураНастроекПодписи);
			КонецЕсли;
		Иначе
			лМассивУдаляемыхНастроекПодписей.Добавить(лСтруктураНастроекПодписи);
		КонецЕсли;
	КонецЦикла;
	ЗаписатьНастройкиПодписейВКэш(лМассивСохраняемыхНастроекПодписей, лМассивУдаляемыхНастроекПодписей);
	ЗаписатьНастройкиПодписейВСохраненныеНстройкиПодписей();
	
	Для Каждого лЭлементТаблицыПодписей Из ТаблицаПодписей Цикл
		Если лЭлементТаблицыПодписей.ЗаписатьEmail1 Тогда
			ПодписьОбъект = лЭлементТаблицыПодписей.Подпись.ПолучитьОбъект();
			ПодписьОбъект.email1 = лЭлементТаблицыПодписей.Email1;
			ПодписьОбъект.Телефон1 = лЭлементТаблицыПодписей.Телефон1;
			ПодписьОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьНастройкиПодписей(Команда)
	Для Каждого СтрокаТаблицыПодписей Из ТаблицаПодписей Цикл
		СтрокаТаблицыПодписей.ПодписьНастроена = Ложь;
	КонецЦикла;
	
	ТаблицаНеобходимыхПодписей.Очистить();
	ТаблицаНеобходимыхПодписейШифрования.Очистить();
	ПреобразоватьДобавленныеРеквизитыВТаблицу();
	
	лЖурналПроверкиСоответствияСертификатовПаролейКлючей = "";
	лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо = "";
	Если РежимОтправкиНаДоподписание Тогда
		ПринятьНастройкиПодписейДляДерева_РежимОтправкиНаДоподписание(ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Подписание"), ДеревоПодписей, ТаблицаНеобходимыхПодписей, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо);
		ПринятьНастройкиПодписейДляДерева(ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование"), ДеревоПодписейШифрования, ТаблицаНеобходимыхПодписейШифрования, Ложь, Истина, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо);
	ИначеЕсли ОбрабатыватьГруппуСертификатовШифрования Тогда
		ПринятьНастройкиПодписейДляДерева(ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование"), ДеревоПодписейШифрования, ТаблицаНеобходимыхПодписейШифрования, Истина, Истина, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо);
	Иначе
		ПринятьНастройкиПодписейДляДерева(ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Подписание"), ДеревоПодписей, ТаблицаНеобходимыхПодписей, Истина, Ложь, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо);
		ПринятьНастройкиПодписейДляДерева(ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование"), ДеревоПодписейШифрования, ТаблицаНеобходимыхПодписейШифрования, Ложь, Ложь, лЖурналПроверкиСоответствияСертификатовПаролейКлючей, лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо);
	КонецЕсли;
	Если лЖурналПроверкиСоответствияСертификатовПаролейКлючей = "" Тогда
		СохранитьНастройки();
		ВозвращаемыеДанные = Новый Структура;
		ВозвращаемыеДанные.Вставить("ВерсияМассиваДанныхПоДокументам", ВерсияМассиваДанныхПоДокументам);
		ВозвращаемыеДанные.Вставить("ВыполняемыеОперации", ВыполняемыеОперации);
		ВозвращаемыеДанные.Вставить("ТаблицаНеобходимыхПодписей",           ТаблицаНеобходимыхПодписей);
	    ВозвращаемыеДанные.Вставить("ТаблицаНеобходимыхПодписейШифрования", ТаблицаНеобходимыхПодписейШифрования);
		ВозвращаемыеДанные.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
		
		Если лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо <> "" Тогда
			//Сообщить(лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо);
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = лЖурналПроверкиСоответствияСертификатовПаролейКлючейИнфо;
			Сообщение.ИдентификаторНазначения = ОписаниеОповещенияОЗакрытии.Модуль.УникальныйИдентификатор;   
			Сообщение.Сообщить();
		КонецЕсли;
		
		Закрыть(ВозвращаемыеДанные);
	Иначе
		Сообщить(лЖурналПроверкиСоответствияСертификатовПаролейКлючей);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьАктивнуюСтраницуПоДеревоПодписейДляГруппПодписей(Дерево)
	Для Каждого лСтрокаПодписи Из Дерево.ПолучитьЭлементы() Цикл
		Если лСтрокаПодписи.ЭтоГруппаПодписей Тогда
			лГруппаГруппаПодписейСтраницы = Элементы["ГруппаПодписейСтраницы_" + лСтрокаПодписи.СуфиксРеквизитов];
			СуфиксРеквизитовВыбранойПодписи = "";
			Для Каждого лСтрокаПодписиВГруппе Из лСтрокаПодписи.ПолучитьЭлементы() Цикл
				Если лСтрокаПодписиВГруппе.ЕстьОтображение Тогда
					лПодписьСтраница = Элементы["ГруппаПодписьСтраница_" + лСтрокаПодписи.СуфиксРеквизитов + "_" + лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи];
					Если лГруппаГруппаПодписейСтраницы.ТекущаяСтраница = лПодписьСтраница Тогда
						СуфиксРеквизитовВыбранойПодписи = лСтрокаПодписиВГруппе.СуфиксРеквизитовПодписи;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			лСтрокаПодписи.СуфиксРеквизитовВыбранойПодписи = СуфиксРеквизитовВыбранойПодписи;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьДобавленныеРеквизитыВТаблицу()
	ПолучитьАктивнуюСтраницуПоДеревоПодписейДляГруппПодписей(ДеревоПодписей);
	ПолучитьАктивнуюСтраницуПоДеревоПодписейДляГруппПодписей(ДеревоПодписейШифрования);
	
	Для Каждого лСтрокаПодписи ИЗ ТаблицаПодписей Цикл
		//лСтрокаПодписи.КодПоЕДРПОУ 					= ЭтаФорма["ТаблицаПодписейКодПоЕДРПОУ_"+лСтрокаПодписи.СуфиксРеквизитов];
		//лСтрокаПодписи.ВладелецПодписи 				= ЭтаФорма["ТаблицаПодписейВладелецПодписи_"+лСтрокаПодписи.СуфиксРеквизитов];
		//лСтрокаПодписи.ДРФО 						= ЭтаФорма["ТаблицаПодписейДРФО_"+лСтрокаПодписи.СуфиксРеквизитов];
		//лСтрокаПодписи.ДатаНачалаДействия 			= ЭтаФорма["ТаблицаПодписейДатаНачалаДействия_"+лСтрокаПодписи.СуфиксРеквизитов];
		//лСтрокаПодписи.ДатаОкончанияДействия 		= ЭтаФорма["ТаблицаПодписейДатаОкончанияДействия_"+лСтрокаПодписи.СуфиксРеквизитов];
		//лСтрокаПодписи.ИздательСертификата 			= ЭтаФорма["ТаблицаПодписейИздательСертификата_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ПутьКСекретномуКлючу 		= ЭтаФорма["ТаблицаПодписейПутьКСекретномуКлючу_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ПутьККаталогуСекретногоКлюча = ЭтаФорма["ТаблицаПодписейПутьККаталогуСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ПарольСекретногоКлюча 		= ЭтаФорма["ТаблицаПодписейПарольСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов]; 
		лСтрокаПодписи.ХранитьПарольВТечениеСеанса 	= ЭтаФорма["ТаблицаПодписейХранитьПарольВТечениеСеанса_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ТелоСекретногоКлюча = "";
		
		лСтрокаПодписи.КлючНаЗащищенномНосителе = ЭтаФорма["ТаблицаПодписейКлючНаЗащищенномНосителе_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.КлючНаСервисеCloudKey = ЭтаФорма["ТаблицаПодписейКлючНаСервисеCloudKey_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ИдентификаторСекретногоКлюча = ЭтаФорма["ТаблицаПодписейИдентификаторСекретногоКлюча_"+лСтрокаПодписи.СуфиксРеквизитов];
		
		лСтрокаПодписи.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительЕстьНастройкаДоступаКСерверу_"+лСтрокаПодписи.СуфиксРеквизитов];
		//лСтрокаПодписи.ЗащищенныйНосительСервер = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСервер_"+лСтрокаПодписи.СуфиксРеквизитов];
		//лСтрокаПодписи.ЗащищенныйНосительПорт = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительПорт_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительСтрокаПодключения = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСтрокаПодключения_"+лСтрокаПодписи.СуфиксРеквизитов];
		
		лСтрокаПодписи.ЗащищенныйНосительProviderName = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительProviderName_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительSlotId = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительSlotId_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительTokenSerialNumber = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenSerialNumber_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительTokenLabel = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenLabel_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительTokenManufacturerID = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenManufacturerID_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительСлотВыбран = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСлотВыбран_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительСостояние = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительСостояние_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительДоступен = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительДоступен_"+лСтрокаПодписи.СуфиксРеквизитов];
		
		лСтрокаПодписи.ЗащищенныйНосительIsRemoteSlot = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительIsRemoteSlot_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительUseNamedKeys = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительUseNamedKeys_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗащищенныйНосительTokenPassword = ЭтаФорма["ТаблицаПодписейЗащищенныйНосительTokenPassword_"+лСтрокаПодписи.СуфиксРеквизитов];
		
		лСтрокаПодписи.ОтправлятьНаДоподписание = ЭтаФорма["ТаблицаПодписейОтправлятьНаДоподписание_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.Email1 = ЭтаФорма["ТаблицаПодписейEmail1_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.Телефон1 = ЭтаФорма["ТаблицаПодписейТелефон1_"+лСтрокаПодписи.СуфиксРеквизитов];
		лСтрокаПодписи.ЗаписатьEmail1 = ЭтаФорма["ТаблицаПодписейЗаписатьEmail1_"+лСтрокаПодписи.СуфиксРеквизитов];
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьКлючОткрытойФормыПриЗакрытииНаСервере(КлючУникальностиФормы)
	КлючОткрытойФормы = скEDI_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("скEDI_КлючОткрытойФормыНастройкиПодписи");
	Если КлючУникальностиФормы = КлючОткрытойФормы Тогда
		скEDI_ОбщегоНазначения.УстановитьЗначениеПараметраСеанса("скEDI_КлючОткрытойФормыНастройкиПодписи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не (ЗавершениеРаботы = Истина) Тогда
		ОчиститьКлючОткрытойФормыПриЗакрытииНаСервере(КлючУникальности);
	КонецЕсли;
КонецПроцедуры








