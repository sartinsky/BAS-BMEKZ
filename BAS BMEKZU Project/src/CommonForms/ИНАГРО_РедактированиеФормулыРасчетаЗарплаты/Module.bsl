#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Формула = Параметры.Формула;
	НаименованиеВидаРасчета = Параметры.НаименованиеВидаРасчета;
	ВидРасчета = Параметры.ВидРасчета;
	
	Заголовок = НСтр("ru = 'Редактирование формулы (%1)'");
	Если ПустаяСтрока(НаименованиеВидаРасчета) Тогда
		Заголовок = СтрЗаменить(Заголовок, "(%1)", "");
	КонецЕсли;
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, НаименованиеВидаРасчета);
	
	ПоказателиТекущие = Показатели.ВыгрузитьЗначения();
	
	ЗаполнитьТаблицуПоказателей(ВидРасчета);
	
	ОператорыИФункции				=  ".,+,-,/,*,ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,?,=,<,>,<=,>=,ОЦЕНИТЬПО,(,),И,ИЛИ,НЕ,OR,AND,NOT";
	ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)";
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекстВПозициюКурсора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если РезультатДиалога = "ПодтвердитьИзменения" Тогда
		ПроверкаИФормированиеФормулыРасчета(Отказ);
		// Нужно оставить возможность просто закрыть форму без сохранения изменений, даже если формула неправильная.
		Если Отказ Тогда
			РезультатДиалога = "";
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если РезультатДиалога = "ПодтвердитьИзменения" Тогда
		
		ПараметрыПередачи			= Новый Массив;
		ПарамПоказатели				= Новый Массив;
		ФормулаДляПроверки 			= Формула;
		ПараметрыПередачи.Добавить(ФормулаРасчетаХранение);
		Для Каждого Показатель Из Показатели Цикл
			Значение = Показатель.Значение;
			Идентификатор = ПолучитьИндентификаторЗначния(Значение);
			Если Найти(ФормулаДляПроверки, Идентификатор) <> 0 Тогда
				ПарамПоказатели.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;		
		ПараметрыПередачи.Добавить(ПарамПоказатели);

		Оповестить("ВводФормулыРасчета",ПараметрыПередачи, ЭтаФорма.ВладелецФормы);
	ИначеЕсли РезультатДиалога = "ОтменаРедактированияРасчета" Тогда
		Оповестить("ОтменаРедактированияРасчета");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказатели

&НаКлиенте
Процедура ПоказателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Показатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВФормулу(Элементы.Показатели.ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

&НаКлиенте                                             
Процедура ПоказателиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.Показатели.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = Элементы.Показатели.ТекущиеДанные.Идентификатор;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	
	ОчиститьСообщения();
	Результаты = РезультатыРедактирования(Формула, ВидРасчета, НедоступныеПоказатели, Ложь);
	Если Результаты <> Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Проверка формулы завершена успешно.';uk = 'Перевірка формули завершено успішно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказательВФормулу(Команда)
	
	Если Элементы.Показатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВФормулу(Элементы.Показатели.ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоказатель(Команда)
	
	Если Элементы.Показатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.Показатели.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Максимум(Команда)
	
	ВставитьТекстВФормулу(" Макс(,) ",,3);
	
КонецПроцедуры

&НаКлиенте
Процедура Минимум(Команда)
	
	ВставитьТекстВФормулу(" Мин(,) ",,3);
	
КонецПроцедуры

&НаКлиенте
Процедура Округлить(Команда)
	
	ВставитьТекстВФормулу(" Окр(,) ",,3);
	
КонецПроцедуры

&НаКлиенте
Процедура Целое(Команда)
	
	ВставитьТекстВФормулу(" Цел() ",,2);
	
КонецПроцедуры

&НаКлиенте
Процедура Условие(Команда)
	
	ВставитьТекстВФормулу(" ?(,,) ",,4);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) 
	
	РезультатДиалога = "ПодтвердитьИзменения";
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ПроверкаИФормированиеФормулыРасчета(Отказ = Ложь)
	
	// Алгоритм работы функции:
	// 	1. Сначала ищем все ";" если находим, то сообщаем, что это ошибка
	//	2. Потом проверяем знаком ли нам такой оператор, переменная или функция по принципу
	//		оставляем все числа
	//		оставляем все разрешенные нами функции процедуры и операторы, а также идентификаторы показателей
	//		подменяем все показатели на значения случайных числе 
	//	3. Обо всем неизвестном сообщаем как об ошибке
	//	4. Проверяем не привышает ли количество показателей 5, и является ли 4ый показатель предопределенным
	//	5. Пробуем выполнить, если не получается, сообщаем описание ошибке
	//	6. Назночаем базовым показателям последнии номера.
	
	ТекстФормулы = Формула;
	
	// ";" - вводить не разрешаем!
	Если Найти(ТекстФормулы, ";") <> 0 Тогда
		 ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке("В формуле не допустимо использование символа "";""", Отказ);
		 Отказ = Истина;
	КонецЕсли;
	
	Показатели.Очистить();

	// установим начальные значения
	НовыйТекст								= "";
	ДлинаСтроки								= СтрДлина(ТекстФормулы);
	ДляинаСтрокиБезПробелов					= СтрДлина(СокрП(ТекстФормулы));
	Слово									= "";
	СловоСобрано							= Ложь;
	КоличествоПоказателей					= 0;
	КоличествоНеПредопределенныхПоказателей	= 0;
	ФормулаРасчетаХранение							= "";
	
	// переменные для проверки правильности ввода показателей
	БылоОценитьПО			= Ложь;
	ОткрытыхСкобок			= 0;
	ЗакрытыхСкобок			= 0;
	КонечествоПарамОценитьПО= 0;
	
	СсылкаПоказатели		= Неопределено;
	
	МассивРазделителей = Новый Массив;
	
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	// разбор слов
	Для НомерАнализируемогоСимвола = 1 По ДлинаСтроки Цикл
		
		Символ = Сред(ТекстФормулы, НомерАнализируемогоСимвола, 1);
		
		Если  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СловоСобрано Тогда
			
			НомерПоказателя = 0;
			СловоВРег = ВРег(СокрЛ(Слово));
			Если Найти(ОператорыИФункции, СловоВРег) <> 0 Или ЭтоЧисло(Слово) Тогда
				
				Если СловоВРег = "ОЦЕНИТЬПО" Тогда
					Слово					= "ПроведениеРасчетов.ОценитьПо";
					БылоОценитьПО			= Истина;
				КонецЕсли;
				
				// функции и числа записываем 
				НовыйТекст = НовыйТекст + Слово;
				ФормулаРасчетаХранение	= ФормулаРасчетаХранение + Слово;
				
			ИначеЕсли Переменные.Получить(Слово) <> Неопределено Тогда
				
				СсылкаПоказатели = ПолучитьСсылкуПоказателя(Слово);
				Если СсылкаПоказатели = ПредопределенноеЗначение("Справочник.ИНАГРО_ПоказателиСхемМотивации.ПустаяСсылка") Тогда
					Отказ = Истина;
					Прервать;
				КонецЕсли;
				
				// В идентификаторы показателей подставляем случайные числа, чтобы Выполнить() не упала при делении на нули
				// или при операциях с разными типами данных. 				
				НовыйТекст				= НовыйТекст + СтрЗаменить(Строка(Переменные.Получить(Слово)),",",".");
				
				ПоказательИзСписка = Показатели.НайтиПоЗначению(СсылкаПоказатели);
				Если ПоказательИзСписка = Неопределено Тогда
					КоличествоПоказателей	= КоличествоПоказателей + 1;	
					Показатели.Добавить(СсылкаПоказатели);
					ФормулаРасчетаХранение			= ФормулаРасчетаХранение + "ИсходныеДанные.Показатель"+КоличествоПоказателей;
					
					Если Не СсылкаПоказатели.Предопределенный Тогда
						КоличествоНеПредопределенныхПоказателей = КоличествоНеПредопределенныхПоказателей + 1;
					КонецЕсли;
					
				Иначе
					ФормулаРасчетаХранение			= ФормулаРасчетаХранение + "ИсходныеДанные.Показатель"+Число(Показатели.Индекс(ПоказательИзСписка) + 1);
				КонецЕсли;
				
				НомерПоказателя			= КоличествоПоказателей;
				
				// проверим правильность ввода показателей
				Если КоличествоНеПредопределенныхПоказателей > 6 Тогда
					Отказ = Истина;
					Прервать;
				КонецЕсли;
				
			Иначе
				// а это уже что-то непонятное, такие вещи вводить мы не договаривались ...
				Отказ = Истина;
				Прервать;					
			КонецЕсли;
			
			Если МассивРазделителей.Найти(Символ) <> Неопределено или  Найти(ОператорыИФункцииОднойСтрокой, Символ) <> 0 Тогда	
							
				Если БылоОценитьПО Тогда
					Если Символ = "(" Тогда
						ОткрытыхСкобок = ОткрытыхСкобок + 1;
					ИначеЕсли Символ = ")" Тогда
						ЗакрытыхСкобок = ЗакрытыхСкобок + 1;
						Если ЗакрытыхСкобок = ОткрытыхСкобок Тогда			// Проверим, является ли показатель шкалой
							Если СсылкаПоказатели <> Неопределено Тогда
								Если СсылкаПоказатели.ТипПоказателя <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная") И
									СсылкаПоказатели.ТипПоказателя <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая") Тогда									
									Отказ = Истина;
									Прервать;
								КонецЕсли;
								Если ДляинаСтрокиБезПробелов <> НомерАнализируемогоСимвола Тогда
									БылоОценитьПО			= Ложь;
								КонецЕсли;
								ОткрытыхСкобок			= 0;
								ЗакрытыхСкобок			= 0;
								КонечествоПарамОценитьПО= 0;									
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли Символ = "," Тогда					
						КонечествоПарамОценитьПО = КонечествоПарамОценитьПО + 1;
						Если КонечествоПарамОценитьПО > 1 Тогда
							Отказ = Истина;
							Прервать;						
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли НомерПоказателя > 0 Тогда
					Если СсылкаПоказатели.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная") Или
						СсылкаПоказатели.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая") Тогда
						Отказ = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			
				НовыйТекст		= НовыйТекст + Символ;
				ФормулаРасчетаХранение	= ФормулаРасчетаХранение + Символ;
			КонецЕсли;
			
			// сбросим все флаги
			Слово			= "";
			СловоСобрано	= Ложь;
						
		КонецЕсли;
		
	КонецЦикла;
	
	// проверим не является ли последний показатель шкалой оценки 
	Если Не БылоОценитьПО И НовыйТекст <> "" И СсылкаПоказатели <> Неопределено Тогда
		Если СсылкаПоказатели.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная") Или
			СсылкаПоказатели.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая") Тогда									
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если Не Отказ Тогда		

		// Проверка формулы на прочие непредвиденные ошибки
		Если ЗначениеЗаполнено(НовыйТекст) Тогда
			Попытка
				Результат = Вычислить(НовыйТекст);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// подменим номера базовым показателям
	НомераПредопределенныхПоказателей	= Новый Массив;	
	НомераПоказателей					= Новый Массив;	
	Для Сч = 1 По Показатели.Количество() Цикл	
		Если Показатели[Сч-1].Значение.Предопределенный И (СсылкаПоказатели <> ПредопределенноеЗначение("Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф")) Тогда
			НомераПредопределенныхПоказателей.Добавить(Сч);
		Иначе
			НомераПоказателей.Добавить(Сч);
		КонецЕсли;
	КонецЦикла;
	ЗаменяемНаПоказатель		= Показатели.Количество() + 1;
	НомераПоказателейКоличество	= НомераПоказателей.Количество();
	Для Каждого НомерПредопределенногоПоказателя Из НомераПредопределенныхПоказателей Цикл
		Если НомераПоказателейКоличество > 0 Тогда
			
			НомераПоказателей_Минус1 = НомераПоказателей[НомераПоказателейКоличество-1]-1;
			
			Показатель 														= Показатели[НомераПоказателей_Минус1];
			Показатель_1													= Показатели[НомерПредопределенногоПоказателя-1];
			Показатели.Удалить(НомераПоказателей_Минус1);
			Показатели.Вставить(НомераПоказателей_Минус1, Показатель_1.Значение,Показатель_1.Значение);			
			Показатели.Удалить(НомерПредопределенногоПоказателя-1);						
			Показатели.Вставить(НомерПредопределенногоПоказателя-1, Показатель.Значение, Показатель.Значение);
			
			ФормулаРасчетаХранение = СтрЗаменить(ФормулаРасчетаХранение, "ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1],"ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель);
			ФормулаРасчетаХранение = СтрЗаменить(ФормулаРасчетаХранение, "ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя,"ИсходныеДанные.Показатель" + НомераПоказателей[НомераПоказателейКоличество-1]);
			ФормулаРасчетаХранение = СтрЗаменить(ФормулаРасчетаХранение, "ИсходныеДанные.Показатель" + ЗаменяемНаПоказатель,"ИсходныеДанные.Показатель" + НомерПредопределенногоПоказателя);
			НомераПоказателейКоличество = НомераПоказателейКоличество - 1;
		КонецЕсли;
	КонецЦикла;	
	
	// Проверем, не изменилась ли формула ПВР по которому есть движения в плановых регистрах.
	Если Показатели.Количество() < ПоказателиТекущие.Количество() Тогда
		ПроверитьИспользовалсяЛиЭтоПВР(Отказ);		
	Иначе
		Для СчПоказателей = 0 По ПоказателиТекущие.Количество() - 1 Цикл		
			Если ПоказателиТекущие[СчПоказателей] <> Показатели[СчПоказателей].Значение Тогда
				ПроверитьИспользовалсяЛиЭтоПВР(Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Отказ; 
	
КонецФункции // Проверка

&НаСервере
Процедура ПроверитьИспользовалсяЛиЭтоПВР(Отказ)
	
	Если ВидРасчета = "" Или ВидРасчета = "ПлановыеДополнительныеНачисленияРаботниковОрганизаций" Тогда
		Возврат
	КонецЕсли;
	
	МассивОшибок = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыйРегистр.Регистратор
	|ИЗ
	|	РегистрСведений."+ВидРасчета +" КАК ПлановыйРегистр
	|ГДЕ
	|	ПлановыйРегистр.ВидРасчета = &ВидРасчета");
	
	Запрос.УстановитьПараметр("ВидРасчета",ВидРасчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Если Выборка.Следующий() Тогда	 
		
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Строка(Выборка.Регистратор) + " ", Выборка.Регистратор));	
		Отказ = Истина;
		
		Пока Выборка.Следующий() Цикл
			
			Расшифровки = Новый Массив;
			Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Строка(Выборка.Регистратор) + " ", Выборка.Регистратор));			 
			                                                                 
		КонецЦикла;	 
	КонецЕсли;
	
КонецПроцедуры //ПроверитьИспользовалсяЛиЭтоПВР

&НаСервере
Функция ЭтоЧисло(Слово)
	
	Цифры = "1234567890";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

&НаСервереБезКонтекста
Функция РезультатыРедактирования(Формула, ВидРасчета, НедоступныеПоказатели, ДополнятьРезультаты = Истина)
	
	Результаты = Новый Структура;
	Результаты.Вставить("Формула", Формула);
	
	ПараметрыВыполненияФормулы = ИНАГРО_РасчетЗарплатыРасширенный.ПараметрыВыполненияФормулы(Формула, Истина, НедоступныеПоказатели);

	Если ПараметрыВыполненияФормулы = Неопределено Тогда
		Возврат Неопределено
	Иначе
		ПоказателиФормулы = ПараметрыВыполненияФормулы.ПоказателиФормулы;
		Если ДополнятьРезультаты Тогда
			Результаты.Вставить("СведенияОПоказателях", ИНАГРО_ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(ПоказателиФормулы));
		КонецЕсли;
		Возврат Результаты;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВФормулу(Идентификатор)
	УстановитьТекстВПозициюКурсора(Идентификатор)	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстВПозициюКурсора(Текст = "")
	
	НачальнаяСтрокаВыделения = 0; 
	НачальнаяКолонкаВыделения = 0; 
	КонечнаяСтрокаВыделения = 0; 
	КонечнаяКолонкаВыделения = 0;
	
	// Получим текущую позицию курсора.
	Элементы.Формула.ПолучитьГраницыВыделения(НачальнаяСтрокаВыделения, НачальнаяКолонкаВыделения, КонечнаяСтрокаВыделения, КонечнаяКолонкаВыделения);
	
	Если ПустаяСтрока(Текст) Тогда
		НачальнаяКолонкаВыделения = НачальнаяКолонкаВыделения + СтрДлина(Формула);
	Иначе
		Элементы.Формула.ВыделенныйТекст = Текст;
		Модифицированность = Истина;
		
		// Установим курсор после вставленного текста.
		НачальнаяКолонкаВыделения = НачальнаяКолонкаВыделения + СтрДлина(Текст);
	КонецЕсли;
	
	Элементы.Формула.УстановитьГраницыВыделения(НачальнаяСтрокаВыделения, НачальнаяКолонкаВыделения, НачальнаяСтрокаВыделения, НачальнаяКолонкаВыделения);
	
КонецПроцедуры

&НаКлиенте
// Процедура вставляет текст, передаваемый в качестве параметра в поле табличного документа
// ПолеТабличногоДокументаПроцедура.
Процедура ВставитьТекстВФормулу(Текст, Сдвиг=0, ПозицияКурсора=0)
	
	НачальнаяСтрокаВыделения = 0; 
	НачальнаяКолонкаВыделения = 0; 
	КонечнаяСтрокаВыделения = 0; 
	КонечнаяКолонкаВыделения = 0;
	
	// Получим текущую позицию курсора.
	Элементы.Формула.ПолучитьГраницыВыделения(НачальнаяСтрокаВыделения, НачальнаяКолонкаВыделения, КонечнаяСтрокаВыделения, КонечнаяКолонкаВыделения);
	
	Если ПустаяСтрока(Текст) Тогда
		НачальнаяКолонкаВыделения = НачальнаяКолонкаВыделения + СтрДлина(Формула);
	Иначе
		Элементы.Формула.ВыделенныйТекст = Текст;
		Модифицированность = Истина;
		
		// Установим курсор после вставленного текста.
		НачальнаяКолонкаВыделения = НачальнаяКолонкаВыделения + СтрДлина(Текст);
	КонецЕсли;
	
	Элементы.Формула.УстановитьГраницыВыделения(НачальнаяСтрокаВыделения, НачальнаяКолонкаВыделения, НачальнаяСтрокаВыделения, НачальнаяКолонкаВыделения);
	
КонецПроцедуры

Функция ПолучитьСсылкуПоказателя(Слово)
	
	Возврат Справочники.ИНАГРО_ПоказателиСхемМотивации.НайтиПоРеквизиту("Идентификатор",Слово);
	
КонецФункции

// Заполняет таблицу идентификаторов показателей схем мотивации
//
Процедура ЗаполнитьТаблицуПоказателей(ВидПВР)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Идентификатор КАК Идентификатор,
	|	ПоказателиСхемМотивации.ТипПоказателя
	|ИЗ
	|	Справочник.ИНАГРО_ПоказателиСхемМотивации КАК ПоказателиСхемМотивации");
	Если ВидПВР = "ИНАГРО_Удержания" Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ Не ПоказателиСхемМотивации.Ссылка В (&ПарамПоказатели)";
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить(Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВДнях);
		СписокПоказателей.Добавить(Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВЧасах);
		СписокПоказателей.Добавить(Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях);
		СписокПоказателей.Добавить(Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах);
		
		Запрос.УстановитьПараметр("ПарамПоказатели", СписокПоказателей);
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиСхемМотивации.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	СтрокВКолонке = Цел(Выборка.Количество()/3);
	Если СтрокВКолонке < Выборка.Количество()/3 Тогда
		СтрокВКолонке = СтрокВКолонке + 1;
	КонецЕсли;
	
	Счетчик = 0;
	ВыведеноСтрокВКолонку = 0;
	ИмяКолоки = "Идентификатор1";
	
	СоответствиеПоказателей = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		Идентификатор = Выборка.Идентификатор;		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			
			ГенераторЧисел = Новый ГенераторСлучайныхЧисел(546819);

			СоответствиеПоказателей.Вставить(Идентификатор,Окр(ГенераторЧисел.СлучайноеЧисло() /5189459139, 10));
		КонецЕсли;
	КонецЦикла;
	Переменные = Новый ФиксированноеСоответствие(СоответствиеПоказателей);
	
КонецПроцедуры //ЗаполнитьТаблицуПоказателей

Функция ПолучитьИндентификаторЗначния(Значение)
	
	Возврат Значение.Идентификатор;
	
КонецФункции

#КонецОбласти