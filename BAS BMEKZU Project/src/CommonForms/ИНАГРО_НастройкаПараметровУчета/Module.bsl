#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыУчетаБА = ОпределитьПараметрыУчета();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыУчетаБА);
	
	ОбновитьИсходныеЗначения(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыУчета = ПолучитьСтруктуруПараметровУчета(ЭтаФорма);
	ТекстВопроса = ПолучитьТекстВопросаПродолжитьЗапись(ПараметрыУчета);
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПропуститьПроверку") 
		И ПараметрыЗаписи.ПропуститьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ВопросПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыУчета = ПолучитьСтруктуруПараметровУчета(ЭтаФорма);
	ОбщегоНазначенияБПВызовСервера.ИНАГРО_ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВестиПартионныйУчетПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	
	Если (Форма.ВестиПартионныйУчет <> Форма.ВестиПартионныйУчетИсходноеЗначение) И Форма.ВестиПартионныйУчетИсходноеЗначение = Истина Тогда
		Форма.Элементы.ГруппаВестиПартионныйУчетПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаВестиПартионныйУчетПредупреждениеАктивно;
	Иначе
		Форма.Элементы.ГруппаВестиПартионныйУчетПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаВестиПартионныйУчетПредупреждениеОтсутствует;
	КонецЕсли;
	
	// Группа "Аренда земли"  и "БиологическиеАктивы"
	Форма.Элементы.СтраницаАрендаЗемли.Видимость = ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ();
	Форма.Элементы.СтраницаБиологическиеАктивы.Видимость = ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИсходныеЗначения(Форма);

	Форма.ВестиПартионныйУчетИсходноеЗначение = Форма.ВестиПартионныйУчет;

КонецПроцедуры

Функция ОпределитьПараметрыУчета()

	ПараметрыУчетаБА = ОбщегоНазначенияБПКлиентСервер.СтруктураПараметровУчета();

	// Запасы
	БУ = ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивы.ПолучитьОбъект();

	ПараметрыУчетаБА.ВестиПартионныйУчет = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") <> Неопределено;

	Возврат ПараметрыУчетаБА;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровУчета(Форма)
	
	ПараметрыУчета = ОбщегоНазначенияБПКлиентСервер.СтруктураПараметровУчета();
	ЗаполнитьЗначенияСвойств(ПараметрыУчета, Форма);
	ПараметрыУчета.СкладскойУчет = Истина;
	
	Возврат ПараметрыУчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстВопросаПродолжитьЗапись(Знач СтруктураПараметровУчета)
	
	ДействияИзмененияСубконто = ОбщегоНазначенияБПВызовСервера.ИНАГРО_ПолучитьДействияИзмененияСубконто(СтруктураПараметровУчета);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДействий", ДействияИзмененияСубконто);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Счет КАК Счет,
	|	ВЫРАЗИТЬ(Таблица.Субконто КАК ПланВидовХарактеристик.ВидыСубконтоХозрасчетные) КАК Субконто,
	|	-Таблица.Действие КАК Действие,
	|	-Таблица.Количественный КАК Количественный,
	|	-Таблица.Суммовой КАК Суммовой,
	|	Таблица.ТолькоОбороты КАК ТолькоОбороты,
	|	-Таблица.Валютный КАК Валютный
	|ПОМЕСТИТЬ СчетаСубконто
	|ИЗ
	|	&ТаблицаДействий КАК Таблица
	|ГДЕ
	|	(Таблица.Действие = -1
	|			ИЛИ Таблица.Количественный = -1
	|			ИЛИ Таблица.Суммовой = -1
	|			ИЛИ Таблица.ТолькоОбороты = 1
	|			ИЛИ Таблица.Валютный = -1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаСубконто.Субконто.Наименование КАК Субконто,
	|	МАКСИМУМ(СчетаСубконто.Действие) КАК Действие,
	|	МАКСИМУМ(СчетаСубконто.Количественный) КАК Количественный,
	|	МАКСИМУМ(СчетаСубконто.Суммовой) КАК Суммовой,
	|	МАКСИМУМ(СчетаСубконто.ТолькоОбороты) КАК ТолькоОбороты,
	|	МАКСИМУМ(СчетаСубконто.Валютный) КАК Валютный
	|ИЗ
	|	СчетаСубконто КАК СчетаСубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаСубконто.Субконто.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Субконто";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаДействий = РезультатЗапроса.Выгрузить();
	
	ВидыДействий = Новый Структура;
	ВидыДействий.Вставить("Действие", НСтр("ru='Будут удалены следующие субконто: %1';uk='Будуть вилучені наступні субконто: %1'"));
	ВидыДействий.Вставить("Количественный", НСтр("ru='Будут очищены количественные обороты по следующим субконто: %1';uk='Будуть очищені кількісні обороти за наступними субконто: %1'"));
	ВидыДействий.Вставить("Суммовой", НСтр("ru='Будут очищены суммовые обороты по следующим субконто: %1';uk='Будуть очищені сумові обороти за наступними субконто: %1'"));
	ВидыДействий.Вставить("ТолькоОбороты", НСтр("ru='Будут очищены остатки по следующим субконто: %1';uk='Будуть очищені залишки за наступними субконто: %1'"));
	ВидыДействий.Вставить("Валютный", НСтр("ru='Будут очищены валютные обороты по следующим субконто: %1';uk='Будуть очищені валютні обороти за наступними субконто: %1'"));
	
	ТекстВопроса = "";
	Для каждого ВидДействия Из ВидыДействий Цикл
		ИзменениеПризнакаСубконто = ВидДействия.Ключ <> "Действие";
		
		СписокСубконто = "";
		СтрокиСубконто = ТаблицаДействий.НайтиСтроки(Новый Структура(ВидДействия.Ключ, 1));
		Для каждого СтрокаСубконто Из СтрокиСубконто Цикл
			Если ИзменениеПризнакаСубконто И СтрокаСубконто.Действие <> 0 Тогда
				// При добавлении / удалении субконто других сообщений выводить не нужно
				Продолжить;
			КонецЕсли;
			
			СписокСубконто = СписокСубконто + ", " + СтрокаСубконто.Субконто;
		КонецЦикла;
		
		Если ПустаяСтрока(СписокСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС;
		КонецЕсли;
		
		ТекстДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВидДействия.Значение,
			Сред(СписокСубконто, 3));
		ТекстВопроса = ТекстВопроса + ТекстДействия;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонТекста = НСтр("ru='%1
|Продолжить?';uk='%1
|Продовжити?'");
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ТекстВопроса);
	
	Возврат ТекстВопроса;
	
КонецФункции

&НаКлиенте
Процедура ВопросПередЗаписьюЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
		Записать(ПараметрыЗаписи);
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



