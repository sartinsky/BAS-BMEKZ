////////////////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем мДанныеДляОтображенияЭлектронногоДокументаСоответствие;

&НаКлиенте
Перем ЗакрытиеРазрешеноКак;



&НаСервере
Процедура ЗаполнитьТаблицуКвитанцийПоЭлектронномуДокументу()
	СобытияПоЭлектронномуДокументу.Загрузить(скEDI_ОбщегоНазначения.ПолучитьТаблицуСобытийПоЭлектронномуДокументу(ЭлектронныйДокумент));
КонецПроцедуры // ЗаполнитьТаблицуКвитанцийПоЭлектронномуДокументу()

&НаСервере
Процедура ПолучитьДанныеПоНаличиюЛицензии()
	ЕДРПОУ = ОрганизацияEDI.Код;
	Филиал = ОрганизацияEDI.Филиал;
	Если ЗначениеЗаполнено(ЕДРПОУ) Тогда
		СрокДействияЛицензии = Неопределено;
		НаименованиеЛицензии = "";
		скEDI_ОбщегоНазначения.ПолучитьДанныеПоЛицензии(ЕДРПОУ, Филиал, СрокДействияЛицензии, НаименованиеЛицензии);
		Если ЗначениеЗаполнено(СрокДействияЛицензии) Тогда
			Если СрокДействияЛицензии < НачалоДня(ТекущаяДата()) Тогда
				БесплатнаяОтправка50 = Истина;
			Иначе
				БесплатнаяОтправка50 = Ложь;
			КонецЕсли;
		Иначе
			БесплатнаяОтправка50 = Истина;
		КонецЕсли;
	Иначе
		БесплатнаяОтправка50 = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРазмерФайлаТекст_НаСервере(Base64Длина34, ДоБайта = Ложь)
	Если Base64Длина34 <= 0 Тогда
		Возврат "0 байт";
	ИначеЕсли Base64Длина34 < 1024 Тогда
		Если ДоБайта Тогда
			Возврат Строка(Base64Длина34) + " байт";
		Иначе
			Возврат "1 КБ";
		КонецЕсли;
	ИначеЕсли Base64Длина34 < 1024*1024 Тогда
		Возврат Строка(Окр(Base64Длина34/1024)) + " КБ";
	ИначеЕсли Base64Длина34 < 1024*1024*1024 Тогда
		Возврат Строка(Окр(Base64Длина34/(1024*1024), 3)) + " МБ";
	Иначе
		Возврат Строка(Окр(Base64Длина34/(1024*1024*1024), 3)) + " ГБ";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьРазмерФайлаТекст_НаКлиенте(Base64Длина34, ДоБайта = Ложь)
	Если Base64Длина34 <= 0 Тогда
		Возврат "0 байт";
	ИначеЕсли Base64Длина34 < 1024 Тогда
		Если ДоБайта Тогда
			Возврат Строка(Base64Длина34) + " байт";
		Иначе
			Возврат "1 КБ";
		КонецЕсли;
	ИначеЕсли Base64Длина34 < 1024*1024 Тогда
		Возврат Строка(Окр(Base64Длина34/1024)) + " КБ";
	ИначеЕсли Base64Длина34 < 1024*1024*1024 Тогда
		Возврат Строка(Окр(Base64Длина34/(1024*1024), 3)) + " МБ";
	Иначе
		Возврат Строка(Окр(Base64Длина34/(1024*1024*1024), 3)) + " ГБ";
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОбновитьВложенияРазмерФайлов_НаСервере()
	ВложенияРазмерФайлов = Вложения.Итог("РазмерФайла");
	ВложенияРазмерФайловТекст = ПолучитьРазмерФайлаТекст_НаСервере(ВложенияРазмерФайлов, Истина);
	Если ВложенияРазмерФайлов > 20 * 1024 * 1024 Тогда
		Элементы.ОграничениеНаРазмерВложений.Видимость = Истина;
	Иначе
		Элементы.ОграничениеНаРазмерВложений.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВложенияРазмерФайлов_НаКлиенте()
	ВложенияРазмерФайлов = Вложения.Итог("РазмерФайла");
	ВложенияРазмерФайловТекст = ПолучитьРазмерФайлаТекст_НаКлиенте(ВложенияРазмерФайлов, Истина);
	Если ВложенияРазмерФайлов > 20 * 1024 * 1024 Тогда
		Элементы.ОграничениеНаРазмерВложений.Видимость = Истина;
	Иначе
		Элементы.ОграничениеНаРазмерВложений.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаршрутПоЭлектронномуДокументу_НаСервере(пЭлектронныйДокумент, лСоответствиеСДанными, пПараметрыДляСозданияЭлектронногоДокумента)
	Маршрут.Очистить();
	Если МаршрутОтображатьПоДаннымЭДТЧ Тогда
		Если ЗначениеЗаполнено(пЭлектронныйДокумент) Тогда
			Если пЭлектронныйДокумент.IsMultisided Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	скEDI_ЭлектронныйДокументМаршрут.ЕДРПОУКонтрагента КАК ЕДРПОУКонтрагента,
				               |	скEDI_ЭлектронныйДокументМаршрут.ФилиалКонтрагента КАК ФилиалКонтрагента,
				               |	скEDI_ЭлектронныйДокументМаршрут.ИНН КАК ИНН,
				               |	скEDI_ЭлектронныйДокументМаршрут.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
				               |	скEDI_ЭлектронныйДокументМаршрут.Состояние КАК Состояние
				               |ИЗ
				               |	Документ.скEDI_ЭлектронныйДокумент.Маршрут КАК скEDI_ЭлектронныйДокументМаршрут
				               |ГДЕ
				               |	скEDI_ЭлектронныйДокументМаршрут.Ссылка = &Ссылка
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	скEDI_ЭлектронныйДокументМаршрут.НомерСтроки";
				Запрос.УстановитьПараметр("Ссылка", пЭлектронныйДокумент);
				ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
				Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
					НоваяСтрокаМаршрут = Маршрут.Добавить();
					НоваяСтрокаМаршрут.ЕДРПОУКонтрагента = ВыборкаРезультатаЗапроса.ЕДРПОУКонтрагента;
					НоваяСтрокаМаршрут.ФилиалКонтрагента = ВыборкаРезультатаЗапроса.ФилиалКонтрагента;
					НоваяСтрокаМаршрут.ИНН = ВыборкаРезультатаЗапроса.ИНН;
					НоваяСтрокаМаршрут.НаименованиеКонтрагента = ВыборкаРезультатаЗапроса.НаименованиеКонтрагента;
					НоваяСтрокаМаршрут.Состояние = ВыборкаРезультатаЗапроса.Состояние;
				КонецЦикла;
				Элементы.МаршрутКонтрагент.Видимость = Ложь;
				Элементы.МаршрутКонтрагент1.Видимость = Ложь;
				Элементы.МаршрутСостояние.Видимость = Истина;
				Элементы.МаршрутСостояние1.Видимость = Истина;
				
				Элементы.ГруппаМаршрут.Видимость = Истина;
				Элементы.ГруппаМаршрут1.Видимость = Истина;
				Элементы.ГруппаМаршрут.ТолькоПросмотр = Истина;
				Элементы.ГруппаМаршрут1.ТолькоПросмотр = Истина;
				Элементы.МаршрутДобавить.Доступность = Ложь;
				Элементы.МаршрутДобавить1.Доступность = Ложь;
				Элементы.МаршрутУдалить.Доступность = Ложь;
				Элементы.МаршрутУдалить1.Доступность = Ложь;
				Элементы.МаршрутПереместитьВверх.Доступность = Ложь;
				Элементы.МаршрутПереместитьВниз.Доступность = Ложь;
				Элементы.Маршрут1ПереместитьВверх.Доступность = Ложь;
				Элементы.Маршрут1ПереместитьВниз.Доступность = Ложь;
			Иначе
				Элементы.ГруппаМаршрут.Видимость = Ложь;
				Элементы.ГруппаМаршрут1.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаМаршрут.Видимость = Ложь;
			Элементы.ГруппаМаршрут1.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли МаршрутОтображатьПоДаннымФЭД Тогда
		Если ТипЗнч(пПараметрыДляСозданияЭлектронногоДокумента) = Тип("Структура") Тогда
			IsMultisided = Неопределено;
			пПараметрыДляСозданияЭлектронногоДокумента.Свойство("IsMultisided", IsMultisided);
			Если IsMultisided = Истина Тогда
				ФлагОгрКонтр = Истина;
				Для Каждого ЭлементМаршрута Из пПараметрыДляСозданияЭлектронногоДокумента.Маршрут Цикл
					НовыйЭлементМаршрута = Маршрут.Добавить();
					НовыйЭлементМаршрута.ЕДРПОУКонтрагента = ЭлементМаршрута.ЕДРПОУКонтрагента;
					НовыйЭлементМаршрута.ФилиалКонтрагента = ЭлементМаршрута.ФилиалКонтрагента;
					Если ФлагОгрКонтр Тогда
						Если НовыйЭлементМаршрута.ЕДРПОУКонтрагента = ОрганизацияEDI.Код и НовыйЭлементМаршрута.ФилиалКонтрагента = ОрганизацияEDI.Филиал Тогда
							НовыйЭлементМаршрута.Контрагент = ОрганизацияEDI;
							Если ЗначениеЗаполнено(ОрганизацияEDI.Организация1С) Тогда
								ДанныеПоОгранизации = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияEDI.Организация1С);
								НовыйЭлементМаршрута.ИНН = ДанныеПоОгранизации.ИНН;
								НовыйЭлементМаршрута.НаименованиеКонтрагента = ДанныеПоОгранизации.Наименование;
							Иначе
								НовыйЭлементМаршрута.ИНН = "";
								НовыйЭлементМаршрута.НаименованиеКонтрагента = ОрганизацияEDI.Наименование;
							КонецЕсли;
						Иначе
							НовыйЭлементМаршрута.Контрагент = ПредопределенноеЗначение("Справочник.скEDI_Организации.ПустаяСсылка");
							НовыйЭлементМаршрута.ИНН = "";
							НовыйЭлементМаршрута.НаименованиеКонтрагента = "";
						КонецЕсли;
						ФлагОгрКонтр = Ложь;
					Иначе
						лКонтрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(НовыйЭлементМаршрута.ЕДРПОУКонтрагента, НовыйЭлементМаршрута.ФилиалКонтрагента, Истина);
						лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагента(лКонтрагент);
						НовыйЭлементМаршрута.Контрагент = лКонтрагент;
						НовыйЭлементМаршрута.ИНН = лСтруктураДанныхКонтрагента.ИНН;
						НовыйЭлементМаршрута.НаименованиеКонтрагента = лСтруктураДанныхКонтрагента.Наименование;
					КонецЕсли;
				КонецЦикла;
				Элементы.МаршрутКонтрагент.Видимость = Ложь;
				Элементы.МаршрутКонтрагент1.Видимость = Ложь;
				Элементы.МаршрутСостояние.Видимость = Ложь;
				Элементы.МаршрутСостояние1.Видимость = Ложь;
				
				Элементы.ГруппаМаршрут.Видимость = Истина;
				Элементы.ГруппаМаршрут1.Видимость = Истина;
				
				Элементы.ГруппаМаршрут.ТолькоПросмотр = Ложь;
				Элементы.ГруппаМаршрут1.ТолькоПросмотр = Ложь;
				Элементы.МаршрутПоДаннымФормыРучнаяУстановкаИнт.ТолькоПросмотр = Ложь;
				Элементы.МаршрутПоДаннымФормыРучнаяУстановкаИнт1.ТолькоПросмотр = Ложь;
				Элементы.Маршрут.ТолькоПросмотр = не МаршрутПоДаннымФормыРучнаяУстановка;
				Элементы.Маршрут1.ТолькоПросмотр = не МаршрутПоДаннымФормыРучнаяУстановка;
				Элементы.МаршрутДобавить.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
				Элементы.МаршрутДобавить1.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
				Элементы.МаршрутУдалить.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
				Элементы.МаршрутУдалить1.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
				Элементы.МаршрутПереместитьВверх.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
				Элементы.МаршрутПереместитьВниз.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
				Элементы.Маршрут1ПереместитьВверх.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
				Элементы.Маршрут1ПереместитьВниз.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
			Иначе
				Элементы.ГруппаМаршрут.Видимость = Ложь;
				Элементы.ГруппаМаршрут1.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаМаршрут.Видимость = Ложь;
			Элементы.ГруппаМаршрут1.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли МаршрутОтображатьПоДаннымХР Тогда
		Если ЭлектроннаяФорма_IsMultisided Тогда
			Если ТипЗнч(лСоответствиеСДанными) = Тип("Соответствие") Тогда
				МассивМаршрут = лСоответствиеСДанными.Получить("Маршрут");
				Если ТипЗнч(МассивМаршрут) = Тип("Массив") Тогда
					ФлагОгрКонтр = Истина;
					Для Каждого ЭлементМаршрута Из МассивМаршрут Цикл
						НовыйЭлементМаршрута = Маршрут.Добавить();
						НовыйЭлементМаршрута.ЕДРПОУКонтрагента = ЭлементМаршрута.Получить("Edrpou");
						НовыйЭлементМаршрута.ФилиалКонтрагента = ЭлементМаршрута.Получить("Dept");
						НовыйЭлементМаршрута.ИНН = ЭлементМаршрута.Получить("Inn");
						НовыйЭлементМаршрута.НаименованиеКонтрагента = ЭлементМаршрута.Получить("Name");
						Если ФлагОгрКонтр Тогда
							Если НовыйЭлементМаршрута.ЕДРПОУКонтрагента = ОрганизацияEDI.Код и НовыйЭлементМаршрута.ФилиалКонтрагента = ОрганизацияEDI.Филиал Тогда
								НовыйЭлементМаршрута.Контрагент = ОрганизацияEDI;
								Если Не ЗначениеЗаполнено(НовыйЭлементМаршрута.НаименованиеКонтрагента) или Не ЗначениеЗаполнено(НовыйЭлементМаршрута.ИНН) Тогда
									Если ЗначениеЗаполнено(ОрганизацияEDI.Организация1С) Тогда
										ДанныеПоОгранизации = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияEDI.Организация1С);
										Если Не ЗначениеЗаполнено(НовыйЭлементМаршрута.НаименованиеКонтрагента) Тогда
											НовыйЭлементМаршрута.НаименованиеКонтрагента = ДанныеПоОгранизации.Наименование;
										КонецЕсли;
										Если Не ЗначениеЗаполнено(НовыйЭлементМаршрута.ИНН) Тогда
											НовыйЭлементМаршрута.ИНН = ДанныеПоОгранизации.ИНН;
										КонецЕсли;
									Иначе
										Если Не ЗначениеЗаполнено(НовыйЭлементМаршрута.НаименованиеКонтрагента) Тогда
											НовыйЭлементМаршрута.НаименованиеКонтрагента = ОрганизацияEDI.Наименование;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							Иначе
								НовыйЭлементМаршрута.Контрагент = ПредопределенноеЗначение("Справочник.скEDI_Организации.ПустаяСсылка");
							КонецЕсли;
							ФлагОгрКонтр = Ложь;
						Иначе
							лКонтрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(НовыйЭлементМаршрута.ЕДРПОУКонтрагента, НовыйЭлементМаршрута.ФилиалКонтрагента, Истина);
							НовыйЭлементМаршрута.Контрагент = лКонтрагент;
							Если Не ЗначениеЗаполнено(НовыйЭлементМаршрута.НаименованиеКонтрагента) или Не ЗначениеЗаполнено(НовыйЭлементМаршрута.ИНН) Тогда
								лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагента(лКонтрагент);
								Если Не ЗначениеЗаполнено(НовыйЭлементМаршрута.НаименованиеКонтрагента) Тогда
									НовыйЭлементМаршрута.НаименованиеКонтрагента = лСтруктураДанныхКонтрагента.Наименование;
								КонецЕсли;
								Если Не ЗначениеЗаполнено(НовыйЭлементМаршрута.ИНН) Тогда
									НовыйЭлементМаршрута.ИНН = лСтруктураДанныхКонтрагента.ИНН;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Элементы.МаршрутКонтрагент.Видимость = Ложь;//МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.МаршрутКонтрагент1.Видимость = Ложь;//МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.МаршрутСостояние.Видимость = Ложь;
					Элементы.МаршрутСостояние1.Видимость = Ложь;
					
					Элементы.ГруппаМаршрут.Видимость = Истина;
					Элементы.ГруппаМаршрут1.Видимость = Истина;
					
					Элементы.ГруппаМаршрут.ТолькоПросмотр = Ложь;
					Элементы.ГруппаМаршрут1.ТолькоПросмотр = Ложь;
					Элементы.МаршрутПоДаннымФормыРучнаяУстановкаИнт.ТолькоПросмотр = Ложь;
					Элементы.МаршрутПоДаннымФормыРучнаяУстановкаИнт1.ТолькоПросмотр = Ложь;
					Элементы.Маршрут.ТолькоПросмотр = не МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.Маршрут1.ТолькоПросмотр = не МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.МаршрутДобавить.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.МаршрутДобавить1.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.МаршрутУдалить.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.МаршрутУдалить1.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.МаршрутПереместитьВверх.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.МаршрутПереместитьВниз.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.Маршрут1ПереместитьВверх.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
					Элементы.Маршрут1ПереместитьВниз.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
				Иначе
					Элементы.ГруппаМаршрут.Видимость = Ложь;
					Элементы.ГруппаМаршрут1.Видимость = Ложь;  
				КонецЕсли;
			Иначе
				Элементы.ГруппаМаршрут.Видимость = Ложь;
				Элементы.ГруппаМаршрут1.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаМаршрут.Видимость = Ложь;
			Элементы.ГруппаМаршрут1.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаМаршрут.Видимость = Ложь;
		Элементы.ГруппаМаршрут1.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенияПоЭлектронномуДокументу_НаСервере(пЭлектронныйДокумент, пДокумент1С, ПомещатьВоВременноеХранилище = Ложь)
	Вложения.Очистить();
	УдаленныеВложения.Очистить();
	ВложенияРазмерФайлов = 0;
	ВложенияРазмерФайловТекст = "";
	Элементы.ОграничениеНаРазмерВложений.Видимость = Ложь;
	
	ЕстьВложения = Ложь;
	
	Если ЗначениеЗаполнено(пЭлектронныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ВложенияЭлектронныхДокументов.НомерФайла КАК НомерФайла,
		               |	скEDI_ВложенияЭлектронныхДокументов.ВложениеДокумента КАК ВложениеДокумента,
		               |	скEDI_ВложенияЭлектронныхДокументов.ВложениеДокументаХЗ КАК ВложениеДокументаХЗ,
		               |	скEDI_ВложенияЭлектронныхДокументов.ИмяФайлаВложениеДокумента КАК ИмяФайлаВложениеДокумента,
		               |	скEDI_ВложенияЭлектронныхДокументов.Файл
		               |ИЗ
		               |	РегистрСведений.скEDI_ВложенияЭлектронныхДокументов КАК скEDI_ВложенияЭлектронныхДокументов
		               |ГДЕ
		               |	скEDI_ВложенияЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерФайла";
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", пЭлектронныйДокумент);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		ПорядковыйНомерФайла = 0;
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			ПорядковыйНомерФайла = ПорядковыйНомерФайла + 1;
			
			ВложениеДокумента = ВыборкаРезультатаЗапроса.ВложениеДокумента;
			ВложениеДокументаХЗ = ВыборкаРезультатаЗапроса.ВложениеДокументаХЗ.Получить();
			Если ВложениеДокументаХЗ <> Неопределено Тогда
				ВложениеДокумента = Base64Строка(ВложениеДокументаХЗ);
			КонецЕсли;
			НоваяСтрокаВложение = Вложения.Добавить();
			НоваяСтрокаВложение.ИмяФайлаВложениеДокумента = ВыборкаРезультатаЗапроса.ИмяФайлаВложениеДокумента;
			Если ПомещатьВоВременноеХранилище Тогда
				НоваяСтрокаВложение.ВложениеДокумента = ПоместитьВоВременноеХранилище(Base64Значение(ВложениеДокумента), УникальныйИдентификатор);
			Иначе
				НоваяСтрокаВложение.ВложениеДокумента = Формат(ВыборкаРезультатаЗапроса.НомерФайла, "ЧГ=0");
				НоваяСтрокаВложение.ПорядковыйНомерФайла = ПорядковыйНомерФайла;
			КонецЕсли;
			НоваяСтрокаВложение.РазмерФайла = СтрДлина(ВложениеДокумента) * 3 / 4;
			НоваяСтрокаВложение.РазмерФайлаТекст = ПолучитьРазмерФайлаТекст_НаСервере(НоваяСтрокаВложение.РазмерФайла);
			НоваяСтрокаВложение.Файл = ВыборкаРезультатаЗапроса.Файл;
			ЕстьВложения = Истина;
		КонецЦикла;
		ОбновитьВложенияРазмерФайлов_НаСервере();
	КонецЕсли;
	
	Если ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
		
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
		или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
				
				Элементы.ДобавитьВложение.Доступность = Истина;
				Элементы.ДобавитьВложение.Видимость = Истина;
				Элементы.ВложенияДобавитьВложение.Доступность = Истина;
				Элементы.ВложенияУдалитьВложение.Доступность = Истина;
				
				ПрикрепленныеФайлыПоДокументу1С = скEDI_НастройкиПодКонфигурацию.ПолучитьПрикрепленныеФайлы(пДокумент1С);
				Если ПрикрепленныеФайлыПоДокументу1С.Количество() > 0 Тогда
					Элементы.ДобавитьВложениеПоДокументу1С.Доступность = Истина;
					Элементы.ДобавитьВложениеПоДокументу1С.Видимость = Истина;
					Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Истина;
					Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Истина;
				Иначе
					Элементы.ДобавитьВложениеПоДокументу1С.Доступность = Ложь;
					Элементы.ДобавитьВложениеПоДокументу1С.Видимость = Ложь;
					Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Ложь;
					Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Ложь;
				КонецЕсли;
			Иначе
				Элементы.ДобавитьВложение.Доступность = Ложь;
				Элементы.ДобавитьВложение.Видимость = Ложь;
				Элементы.ВложенияДобавитьВложение.Доступность = Ложь;
				Элементы.ВложенияУдалитьВложение.Доступность = Ложь;
				Элементы.ДобавитьВложениеПоДокументу1С.Доступность = Ложь;
				Элементы.ДобавитьВложениеПоДокументу1С.Видимость = Ложь;
				Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Ложь;
				Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ДобавитьВложение.Доступность = Ложь;
			Элементы.ДобавитьВложение.Видимость = Ложь;
			Элементы.ДобавитьВложениеПоДокументу1С.Доступность = Ложь;
			Элементы.ДобавитьВложениеПоДокументу1С.Видимость = Ложь;
			Элементы.ВложенияДобавитьВложение.Доступность = Ложь;
			Элементы.ВложенияУдалитьВложение.Доступность = Ложь;
			Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Ложь;
			Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ДобавитьВложение.Доступность = Ложь;
		Элементы.ДобавитьВложение.Видимость = Ложь;
		Элементы.ДобавитьВложениеПоДокументу1С.Доступность = Ложь;
		Элементы.ДобавитьВложениеПоДокументу1С.Видимость = Ложь;
		Элементы.ВложенияДобавитьВложение.Доступность = Ложь;
		Элементы.ВложенияУдалитьВложение.Доступность = Ложь;
		Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Ложь;
		Элементы.ВложенияДобавитьВложениеПоДокументу1С.Доступность = Ложь;
	КонецЕсли;
	
	Если ЕстьВложения Тогда
		УстановитьСтраницуСтраницыВариантыОтображения_НаСервере(Элементы.СтраницаСВложенымиФайлами);
	Иначе
		УстановитьСтраницуСтраницыВариантыОтображения_НаСервере(Элементы.СтраницаБезВложеныхФайлов);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьЕДРПОУКонтрагентаДляОтправкиСсылки(ЕДРПОУКонтрагента, Контрагент)
	ЕДРПОУКонтрагента = "";
	Если ЭлектроннаяФорма_IsMultisided Тогда
		RoutePosition_ = 0;
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			RoutePosition_ = ЭлектронныйДокумент.RoutePosition;
		КонецЕсли;
		
		Если Маршрут.Количество() > RoutePosition_ + 1 Тогда
			ЕДРПОУКонтрагента = Маршрут.Получить(RoutePosition_ + 1).ЕДРПОУКонтрагента;
		ИначеЕсли ЭлектроннаяФорма_Route.Количество() > RoutePosition_ + 1 Тогда
			НаименованиеРеквизитаЕДРПОУКонтрагента = ЭлектроннаяФорма_Route.Получить(RoutePosition_ + 1).Edrpou;
			Для Каждого ЭлементЗначение Из ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(Новый Структура("ИмяПоля", НаименованиеРеквизитаЕДРПОУКонтрагента)) Цикл
				ЕДРПОУКонтрагента = ЭлементЗначение.ЗначениеПоля;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
		Для Каждого ЭлементЗначение Из ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(Новый Структура("ИмяПоля", "FIRM_EDRPOU")) Цикл
			ЕДРПОУКонтрагента = ЭлементЗначение.ЗначениеПоля;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
		Для Каждого ЭлементЗначение Из ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(Новый Структура("ИмяПоля", "SIDE_EDRPOU_K")) Цикл
			ЕДРПОУКонтрагента = ЭлементЗначение.ЗначениеПоля;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
			Если ЗначениеЗаполнено(Документ1С) Тогда
				ДанныеКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(Документ1С);
				ЕДРПОУКонтрагента = ДанныеКонтрагента.ЕДРПОУКонтрагента;
				Контрагент = ДанныеКонтрагента.Контрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОтправкиСсылкиНаДокумент_НаСервере()
	ОтправкаСсылкиНаДокументНастроено = Ложь;
	ОтправкаСсылкиНаДокументОписаниеНастройки = "";
	ОтправкаСсылкиНаДокументТаблица.Очистить();
	
	Если ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
		или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			
			Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
				Тогда

				ЕстьСсылки = Ложь;
				СписокНастроеныхАдресов = Новый СписокЗначений;
				Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
					Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
						НоваяСтрокаОтправкаСсылкиНаДокументТаблица = ОтправкаСсылкиНаДокументТаблица.Добавить();
						НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта = СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
						НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий = СтрокаОтправкаСсылкиНаДокумент.Комментарий;
						СписокНастроеныхАдресов.Добавить(НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта);
						
						Если ОтправкаСсылкиНаДокументОписаниеНастройки = "" Тогда
							ОтправкаСсылкиНаДокументОписаниеНастройки = НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
						Иначе
							ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + Символы.ПС + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
						КонецЕсли;
						Если ЗначениеЗаполнено(НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий) Тогда
							ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + " - " + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий;
						КонецЕсли;
						ЕстьСсылки = Истина;
					КонецЦикла;
				КонецЕсли;
				
				Контрагент = Неопределено;
				ЕДРПОУКонтрагента = "";
				ПолучитьЕДРПОУКонтрагентаДляОтправкиСсылки(ЕДРПОУКонтрагента, Контрагент);
				
				Если ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
					               |	скEDI_КонтактныеДанныеКонтрагентов.Комментарий КАК Комментарий
					               |ИЗ
					               |	РегистрСведений.скEDI_КонтактныеДанныеКонтрагентов КАК скEDI_КонтактныеДанныеКонтрагентов
					               |ГДЕ
					               |	скEDI_КонтактныеДанныеКонтрагентов.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
					               |	И НЕ скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта В (&ЭлектроннаяПочтаСписок)
					               |	И скEDI_КонтактныеДанныеКонтрагентов.ОтправлятьСсылкуНаДокументАвтоматически";
					Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", ЕДРПОУКонтрагента);
					Запрос.УстановитьПараметр("ЭлектроннаяПочтаСписок", СписокНастроеныхАдресов);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						НоваяСтрокаОтправкаСсылкиНаДокументТаблица = ОтправкаСсылкиНаДокументТаблица.Добавить();
						НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта = ВыборкаРезультатаЗапроса.ЭлектроннаяПочта;
						НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий = ВыборкаРезультатаЗапроса.Комментарий;
						
						Если ОтправкаСсылкиНаДокументОписаниеНастройки = "" Тогда
							ОтправкаСсылкиНаДокументОписаниеНастройки = НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
						Иначе
							ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + Символы.ПС + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
						КонецЕсли;
						Если ЗначениеЗаполнено(НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий) Тогда
							ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + " - " + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий;
						КонецЕсли;
						ЕстьСсылки = Истина;
					КонецЦикла;
				КонецЕсли;
				
				Если Не ЕстьСсылки Тогда
					ОтправкаСсылкиНаДокументОписаниеНастройки = НСтр("ru = 'Отправка ссылки на документ не настроена.'; uk = 'Відправка посилання на документ не налаштована.'");
				КонецЕсли;
				
				Элементы.ГруппаОтправкаСсылкиНаДокумент.Видимость = Истина;
				Элементы.ОтправкаСсылкиНаДокументОписаниеНастроить.Доступность = Истина;
			Иначе
				Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
					ЕстьСсылки = Ложь;
					Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
						НоваяСтрокаОтправкаСсылкиНаДокументТаблица = ОтправкаСсылкиНаДокументТаблица.Добавить();
						НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта = СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
						НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий = СтрокаОтправкаСсылкиНаДокумент.Комментарий;
						
						Если ОтправкаСсылкиНаДокументОписаниеНастройки = "" Тогда
							ОтправкаСсылкиНаДокументОписаниеНастройки = НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
						Иначе
							ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + Символы.ПС + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
						КонецЕсли;
						Если ЗначениеЗаполнено(НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий) Тогда
							ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + " - " + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий;
						КонецЕсли;
						ЕстьСсылки = Истина;
					КонецЦикла;
					Если Не ЕстьСсылки Тогда
						ОтправкаСсылкиНаДокументОписаниеНастройки = НСтр("ru = 'Отправка ссылки на документ не настроена.'; uk = 'Відправка посилання на документ не налаштована.'");
					КонецЕсли;
				КонецЕсли;
				Элементы.ГруппаОтправкаСсылкиНаДокумент.Видимость = Истина;
				Элементы.ОтправкаСсылкиНаДокументОписаниеНастроить.Доступность = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаОтправкаСсылкиНаДокумент.Видимость = Ложь;
			Элементы.ОтправкаСсылкиНаДокументОписаниеНастроить.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтправкаСсылкиНаДокумент.Видимость = Ложь;
		Элементы.ОтправкаСсылкиНаДокументОписаниеНастроить.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерезаписатьВложенияПоЭлектронномуДокументу_НаСервере(пЭлектронныйДокумент)
	Для Каждого УдаленноеВложениеСтрока Из УдаленныеВложения Цикл
		ВложенияЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_ВложенияЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		ВложенияЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = УдаленноеВложениеСтрока.ЭлектронныйДокумент;
		ВложенияЭлектронныхДокументовМенеджерЗаписи.НомерФайла = УдаленноеВложениеСтрока.НомерФайла;
		ВложенияЭлектронныхДокументовМенеджерЗаписи.Удалить();
	КонецЦикла;
	УдаленныеВложения.Очистить();
	
	Если ЗначениеЗаполнено(пЭлектронныйДокумент) Тогда
		ТекНомерФайла = Неопределено;
		Для Каждого СтрокаВложения Из Вложения Цикл
			Если ЭтоАдресВременногоХранилища(СтрокаВложения.ВложениеДокумента) Тогда
				Если ТекНомерФайла = Неопределено Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	МАКСИМУМ(скEDI_ВложенияЭлектронныхДокументов.НомерФайла) КАК НомерФайла
					               |ИЗ
					               |	РегистрСведений.скEDI_ВложенияЭлектронныхДокументов КАК скEDI_ВложенияЭлектронныхДокументов
					               |ГДЕ
					               |	скEDI_ВложенияЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", пЭлектронныйДокумент);
					ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
					Если ВыборкаЗапроса.Следующий() Тогда
						Если ВыборкаЗапроса.НомерФайла = Null Тогда
							ТекНомерФайла = 1;
						Иначе
							ТекНомерФайла = ВыборкаЗапроса.НомерФайла + 1;
						КонецЕсли;
					Иначе
						ТекНомерФайла = 1;
					КонецЕсли;
				КонецЕсли;
				
				ВложениеДокумента = Base64Строка(ПолучитьИзВременногоХранилища(СтрокаВложения.ВложениеДокумента));
				скEDI_ОбщегоНазначения.СохранитьВложениеЭлектронногоДокумента(пЭлектронныйДокумент, ТекНомерФайла, ВложениеДокумента, СтрокаВложения.ИмяФайлаВложениеДокумента, СтрокаВложения.Файл);
				
				СтрокаВложения.ВложениеДокумента = Формат(ТекНомерФайла, "ЧГ=0");
				ТекНомерФайла = ТекНомерФайла + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы, ТаблицаШаблона, НеДобавлятьСлужебныеПоля, ПризнакОтображать, УстанавливатьИмяРеквизита, ПрефиксИмениРеквизита = "", КорректироватьПризнакОтображать = Ложь)
	Для Каждого Поле Из ТаблицаШаблона.Fields Цикл
		тПризнакОтображать = ПризнакОтображать;
		Если КорректироватьПризнакОтображать Тогда
			Если ВРег(Поле.Name) = "SUMWITHOUTPDV" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "SUMWITHOUTPDV_TEXT" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "SUMPDV" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "SUMPDV_TEXT" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "DOCSUM" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "DOCSUM_TEXT" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "DOCDATE" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "FIRM_EDRPOU" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "FIRM_DEPT" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "SIDE_EDRPOU_K" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "SIDE_DEPT_K" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "SIDE_CD_K" Тогда
				тПризнакОтображать = Истина;
			ИначеЕсли ВРег(Поле.Name) = "SIDE_SHORTNAME_K" Тогда
				тПризнакОтображать = Истина;
			КонецЕсли;
		КонецЕсли;
		Если НеДобавлятьСлужебныеПоля Тогда
			Если ВРег(Поле.Name) = "SIGNERINFO" Тогда
				Продолжить;
			ИначеЕсли ВРег(Лев(Поле.Name, 10)) = "IMAGEFIELD" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТипДанныхПВХ = скEDI_ОбщегоНазначения.ПолучитьПВХТипаДанных(Поле.DataType);
		Если тПризнакОтображать Тогда
			Если Не ЗначениеЗаполнено(ТипДанныхПВХ) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", Поле.Name);
		МассивНайденыхСтрок = ЭлектроннаяФорма_ПоляТаблицы.НайтиСтроки(ПараметрыПоиска);
		Если МассивНайденыхСтрок.Количество() = 0 Тогда
			НоваяСтрокаПоляТаблицы = ЭлектроннаяФорма_ПоляТаблицы.Добавить();
			НоваяСтрокаПоляТаблицы.ИмяПоля = Поле.Name;
			НоваяСтрокаПоляТаблицы.Заголовок = Поле.Description;
			НоваяСтрокаПоляТаблицы.ТипДанныхКод = Поле.DataType;
			MaxLength = Неопределено;
			Если Поле.Свойство("MaxLength", MaxLength) Тогда
				НоваяСтрокаПоляТаблицы.МаксимальнаяДлина = MaxLength;
			КонецЕсли;
			НоваяСтрокаПоляТаблицы.ТипДанныхПВХ = ТипДанныхПВХ;
			НоваяСтрокаПоляТаблицы.Отображать = тПризнакОтображать;
			Если тПризнакОтображать и УстанавливатьИмяРеквизита Тогда
				НоваяСтрокаПоляТаблицы.ИмяРеквизита = ПрефиксИмениРеквизита + Поле.Name;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПоляТаблицЭлектроннойФормы_НаСервере()
	ЭлектроннаяФорма_ПоляТаблицы0.Очистить();
	ЭлектроннаяФорма_ПоляТаблицы1.Очистить();
	ЭлектроннаяФорма_ПоляТаблицы2.Очистить();
	ЭлектроннаяФорма_ПоляТаблицы3.Очистить();
	ЭлектроннаяФорма_ПоляТаблицы4.Очистить();
	ЭлектроннаяФорма_ПоляТаблицы5.Очистить();
	ЭлектроннаяФорма_IsMultisided = Ложь;
	ЭлектроннаяФорма_SidesCount = 0;
	ЭлектроннаяФорма_Route.Очистить();
	
	Если ИмяШаблона = "" Тогда
		Возврат;
	КонецЕсли;
	
	лпПараметры = Новый Структура;
	//Если ИмяШаблона <> "" Тогда
		лпПараметры.Вставить("CharCode", ИмяШаблона);
	//КонецЕсли;
	Если ЕДРПОУВладельцаШаблона <> "" Тогда
		лпПараметры.Вставить("TmplOwnerCode", ЕДРПОУВладельцаШаблона);
	КонецЕсли;
	Если ВерсияШаблона <> "" Тогда
		лпПараметры.Вставить("TmplVersion", ВерсияШаблона);
	КонецЕсли;
	лпПараметры.Вставить("AllFields", Ложь);
	СтруктураТаблицыДокументов = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/getdocrk", лпПараметры);
	
	КодОшибки = Неопределено;
	Если СтруктураТаблицыДокументов.Свойство("Code", КодОшибки) Тогда
		Если КодОшибки <> 0 Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка получения данных по шаблону.'; uk = 'Помилка отримання данних по шаблону.'");
			ТекстСообщения = Неопределено;
			Если СтруктураТаблицыДокументов.Свойство("Message", ТекстСообщения) Тогда
				Если ЗначениеЗаполнено(ТекстСообщения) Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Строка(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицыШаблона = Неопределено;
	Если СтруктураТаблицыДокументов.Свойство("Tables", ТаблицыШаблона) Тогда
		Если ТипЗнч(ТаблицыШаблона) = Тип("Массив") Тогда
			Для Каждого ТаблицаШаблона Из ТаблицыШаблона Цикл
				Если ТаблицаШаблона.Num = 0 Тогда
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы0, ТаблицаШаблона, Истина, Истина, Ложь);
				ИначеЕсли ТаблицаШаблона.Num = 1 Тогда
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы1, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица1_");
				ИначеЕсли ТаблицаШаблона.Num = 2 Тогда
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы2, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица2_");
				ИначеЕсли ТаблицаШаблона.Num = 3 Тогда
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы3, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица3_");
				ИначеЕсли ТаблицаШаблона.Num = 4 Тогда
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы4, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица4_");
				ИначеЕсли ТаблицаШаблона.Num = 5 Тогда
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы5, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица5_");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	лпПараметры = Новый Структура;
	//Если ИмяШаблона <> "" Тогда
		лпПараметры.Вставить("CharCode", ИмяШаблона);
	//КонецЕсли;
	Если ЕДРПОУВладельцаШаблона <> "" Тогда
		лпПараметры.Вставить("TmplOwnerCode", ЕДРПОУВладельцаШаблона);
	КонецЕсли;
	Если ВерсияШаблона <> "" Тогда
		лпПараметры.Вставить("TmplVersion", ВерсияШаблона);
	КонецЕсли;
	лпПараметры.Вставить("AllFields", Истина);
	СтруктураТаблицыДокументов = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/getdocrk", лпПараметры);
	Если СтруктураТаблицыДокументов.Свойство("Tables", ТаблицыШаблона) Тогда
		Если ТипЗнч(ТаблицыШаблона) = Тип("Массив") Тогда
			Для Каждого ТаблицаШаблона Из ТаблицыШаблона Цикл
				Если ТаблицаШаблона.Num = 0 Тогда
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы0, ТаблицаШаблона, Ложь, Ложь, Ложь, , Истина);
				ИначеЕсли ТаблицаШаблона.Num = 1 Тогда
					//ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы1, ТаблицаШаблона, Ложь, Ложь, Ложь);
					//??? Пока нет инструментов для получения информации, работаем так
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы1, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица1_");
				ИначеЕсли ТаблицаШаблона.Num = 2 Тогда
					//ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы2, ТаблицаШаблона, Ложь, Ложь, Ложь);
					//??? Пока нет инструментов для получения информации, работаем так
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы2, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица2_");
				ИначеЕсли ТаблицаШаблона.Num = 3 Тогда
					//ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы3, ТаблицаШаблона, Ложь, Ложь, Ложь);
					//??? Пока нет инструментов для получения информации, работаем так
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы3, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица3_");
				ИначеЕсли ТаблицаШаблона.Num = 4 Тогда
					//ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы4, ТаблицаШаблона, Ложь, Ложь, Ложь);
					//??? Пока нет инструментов для получения информации, работаем так
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы4, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица4_");
				ИначеЕсли ТаблицаШаблона.Num = 5 Тогда
					//ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы5, ТаблицаШаблона, Ложь, Ложь, Ложь);
					//??? Пока нет инструментов для получения информации, работаем так
					ДобавитьПоляТаблицыЭлектроннойФормы_НаСервере(ЭлектроннаяФорма_ПоляТаблицы5, ТаблицаШаблона, Ложь, Истина, Истина, "ЭлектроннаяФорма_Таблица5_");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Массив_Route = Неопределено;
	скEDI_ОбщегоНазначения.ПрочитатьСтруктуруТаблицыДокументовДляМногостороннихДокументов(СтруктураТаблицыДокументов, ЭлектроннаяФорма_IsMultisided, ЭлектроннаяФорма_SidesCount, Массив_Route);
	Если ТипЗнч(Массив_Route) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива_Route Из Массив_Route Цикл
			НоваяСтрокаRoute = ЭлектроннаяФорма_Route.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаRoute, ЭлементМассива_Route);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПризнакиПолейНалоговогоДокумента();
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиПолейНалоговогоДокумента()
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
		СписокОсновныхРеквизитов = Новый СписокЗначений;
		СписокОсновныхРеквизитов.Добавить("R01G1");
		СписокОсновныхРеквизитов.Добавить("R03G10S");
		СписокОсновныхРеквизитов.Добавить("HORIG1");
		СписокОсновныхРеквизитов.Добавить("HTYPR");
		СписокОсновныхРеквизитов.Добавить("HFILL");
		СписокОсновныхРеквизитов.Добавить("HNUM");
		СписокОсновныхРеквизитов.Добавить("HNUM1");
		СписокОсновныхРеквизитов.Добавить("HNAMESEL");
		СписокОсновныхРеквизитов.Добавить("HNAMEBUY");
		СписокОсновныхРеквизитов.Добавить("HKSEL");
		СписокОсновныхРеквизитов.Добавить("HNUM2");
		СписокОсновныхРеквизитов.Добавить("HTINSEL");
		СписокОсновныхРеквизитов.Добавить("HKS");
		СписокОсновныхРеквизитов.Добавить("HKBUY");
		СписокОсновныхРеквизитов.Добавить("HFBUY");
		СписокОсновныхРеквизитов.Добавить("HTINBUY");
		СписокОсновныхРеквизитов.Добавить("HKB");
		СписокОсновныхРеквизитов.Добавить("R04G11");
		СписокОсновныхРеквизитов.Добавить("R03G11");
		СписокОсновныхРеквизитов.Добавить("R03G7");
		СписокОсновныхРеквизитов.Добавить("R03G109");
		СписокОсновныхРеквизитов.Добавить("R03G14");
		СписокОсновныхРеквизитов.Добавить("R01G7");
		СписокОсновныхРеквизитов.Добавить("R01G109");
		СписокОсновныхРеквизитов.Добавить("R01G14");
		СписокОсновныхРеквизитов.Добавить("R01G9");
		СписокОсновныхРеквизитов.Добавить("R01G8");
		СписокОсновныхРеквизитов.Добавить("R01G10");
		СписокОсновныхРеквизитов.Добавить("R02G11");
		СписокОсновныхРеквизитов.Добавить("HBOS");
		СписокОсновныхРеквизитов.Добавить("HKBOS");
		СписокОсновныхРеквизитов.Добавить("R003G10S");
	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		СписокОсновныхРеквизитов = Новый СписокЗначений;
		СписокОсновныхРеквизитов.Добавить("HERPN0");
		СписокОсновныхРеквизитов.Добавить("HERPN");
		СписокОсновныхРеквизитов.Добавить("R01G1");
		СписокОсновныхРеквизитов.Добавить("R03G10S");
		СписокОсновныхРеквизитов.Добавить("HORIG1");
		СписокОсновныхРеквизитов.Добавить("HTYPR");
		СписокОсновныхРеквизитов.Добавить("HFILL");
		СписокОсновныхРеквизитов.Добавить("HNUM");
		СписокОсновныхРеквизитов.Добавить("HNUM1");
		СписокОсновныхРеквизитов.Добавить("HPODFILL");
		СписокОсновныхРеквизитов.Добавить("HPODNUM");
		СписокОсновныхРеквизитов.Добавить("HPODNUM1");
		СписокОсновныхРеквизитов.Добавить("HPODNUM2");
		СписокОсновныхРеквизитов.Добавить("HNAMESEL");
		СписокОсновныхРеквизитов.Добавить("HNAMEBUY");
		СписокОсновныхРеквизитов.Добавить("HKSEL");
		СписокОсновныхРеквизитов.Добавить("HNUM2");
		СписокОсновныхРеквизитов.Добавить("HTINSEL");
		СписокОсновныхРеквизитов.Добавить("HKS");
		СписокОсновныхРеквизитов.Добавить("HKBUY");
		СписокОсновныхРеквизитов.Добавить("HFBUY");
		СписокОсновныхРеквизитов.Добавить("HTINBUY");
		СписокОсновныхРеквизитов.Добавить("HKB");
		СписокОсновныхРеквизитов.Добавить("R001G03");
		СписокОсновныхРеквизитов.Добавить("R02G9");
		СписокОсновныхРеквизитов.Добавить("R02G111");
		СписокОсновныхРеквизитов.Добавить("R03G14");
		СписокОсновныхРеквизитов.Добавить("R01G9");
		СписокОсновныхРеквизитов.Добавить("R01G111");
		СписокОсновныхРеквизитов.Добавить("R01G14");
		СписокОсновныхРеквизитов.Добавить("R006G03");
		СписокОсновныхРеквизитов.Добавить("R007G03");
		СписокОсновныхРеквизитов.Добавить("R01G11");
		СписокОсновныхРеквизитов.Добавить("R0301G1D");
		СписокОсновныхРеквизитов.Добавить("R0301G2");
		СписокОсновныхРеквизитов.Добавить("R0301G3");
		СписокОсновныхРеквизитов.Добавить("R0301G4");
		СписокОсновныхРеквизитов.Добавить("R0301G5");
		СписокОсновныхРеквизитов.Добавить("R0302G1D");
		СписокОсновныхРеквизитов.Добавить("R0302G2");
		СписокОсновныхРеквизитов.Добавить("R0302G3");
		СписокОсновныхРеквизитов.Добавить("R0302G4");
		СписокОсновныхРеквизитов.Добавить("R0302G5");
		СписокОсновныхРеквизитов.Добавить("HBOS");
		СписокОсновныхРеквизитов.Добавить("HKBOS");
		СписокОсновныхРеквизитов.Добавить("R003G10S");
	Иначе
		Возврат;
	КонецЕсли;
	Для Каждого ПолеТаблицы Из ЭлектроннаяФорма_ПоляТаблицы0 Цикл
		Если СписокОсновныхРеквизитов.НайтиПоЗначению(ПолеТаблицы.ИмяПоля) = Неопределено Тогда
			ПолеТаблицы.НДСлужебный = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеЭлектроннойФормыИзХранилищаРеквизитовЭлектронногоДокумента_НаСервере(ХранилищеРеквизитовЭлектронногоДокумента)
	лСоответствиеСДанными = ХранилищеРеквизитовЭлектронногоДокумента.Получить();
	УстановитьДанныеЭлектроннойФормыИзСоответствияСДаннымиTablesЭлектронногоДокумента_НаСервере(лСоответствиеСДанными);
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеЭлектроннойФормыИзСоответствияСДаннымиTablesЭлектронногоДокумента_НаСервере(СоответствиеСДаннымиTables)
	ПрочитатьПоляТаблицЭлектроннойФормы_НаСервере();
	
	ЭлектроннаяФорма_Таблица0Строка0.Очистить();
	ЭлектроннаяФорма_Таблица1.Очистить();
	ЭлектроннаяФорма_Таблица2.Очистить();
	ЭлектроннаяФорма_Таблица3.Очистить();
	ЭлектроннаяФорма_Таблица4.Очистить();
	ЭлектроннаяФорма_Таблица5.Очистить();
	
	ЭлектроннаяФорма_НалоговаяНакладнаяТаблица0Строка0.Очистить();
	ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица0Строка0.Очистить();
	ЭлектроннаяФорма_НДСлужебныеДанныеТаблица0Строка0.Очистить();
	ЭлектроннаяФорма_НалоговаяНакладнаяТаблица1.Очистить();
	ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица1.Очистить();
	
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы0 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			НовоеЗначениеПоля = ЭлектроннаяФорма_Таблица0Строка0.Добавить();
			НовоеЗначениеПоля.ИмяПоля = ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля;
			НовоеЗначениеПоля.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
			НовоеЗначениеПоля.ТипДанныхПВХ = ЭлементМассиваПолейШаблонаТаблицы.ТипДанныхПВХ;
			//НовоеЗначениеПоля.ЗначениеПоля = ;
		КонецЕсли;
		
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			Если ЭлементМассиваПолейШаблонаТаблицы.НДСлужебный Тогда
				НовоеЗначениеПоля = ЭлектроннаяФорма_НДСлужебныеДанныеТаблица0Строка0.Добавить();
				НовоеЗначениеПоля.ИмяПоля = ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля;
				НовоеЗначениеПоля.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
			Иначе
				НовоеЗначениеПоля = ЭлектроннаяФорма_НалоговаяНакладнаяТаблица0Строка0.Добавить();
				НовоеЗначениеПоля.ИмяПоля = ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля;
				НовоеЗначениеПоля.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
			КонецЕсли;
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			Если ЭлементМассиваПолейШаблонаТаблицы.НДСлужебный Тогда
				НовоеЗначениеПоля = ЭлектроннаяФорма_НДСлужебныеДанныеТаблица0Строка0.Добавить();
				НовоеЗначениеПоля.ИмяПоля = ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля;
				НовоеЗначениеПоля.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
			Иначе
				НовоеЗначениеПоля = ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица0Строка0.Добавить();
				НовоеЗначениеПоля.ИмяПоля = ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля;
				НовоеЗначениеПоля.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив; 
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого Реквизит из ПолучитьРеквизиты("ЭлектроннаяФорма_Таблица1") Цикл
		УдаляемыеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит из ПолучитьРеквизиты("ЭлектроннаяФорма_Таблица2") Цикл
		УдаляемыеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит из ПолучитьРеквизиты("ЭлектроннаяФорма_Таблица3") Цикл
		УдаляемыеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит из ПолучитьРеквизиты("ЭлектроннаяФорма_Таблица4") Цикл
		УдаляемыеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит из ПолучитьРеквизиты("ЭлектроннаяФорма_Таблица5") Цикл
		УдаляемыеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
	КонецЦикла;
	
	
	Для Каждого ПодчиненныйЭлемент из Элементы.ЭлектроннаяФорма_Таблица1.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для Каждого ПодчиненныйЭлемент из Элементы.ЭлектроннаяФорма_Таблица2.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для Каждого ПодчиненныйЭлемент из Элементы.ЭлектроннаяФорма_Таблица3.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для Каждого ПодчиненныйЭлемент из Элементы.ЭлектроннаяФорма_Таблица4.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для Каждого ПодчиненныйЭлемент из Элементы.ЭлектроннаяФорма_Таблица5.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы1 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			Реквизит = Новый РеквизитФормы("ЭлектроннаяФорма_Таблица1_"+ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля, ЭлементМассиваПолейШаблонаТаблицы.ТипДанныхПВХ.ТипЗначения, "ЭлектроннаяФорма_Таблица1", ЭлементМассиваПолейШаблонаТаблицы.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
		МассивРеквизитовНалоговаяНакладнаяТаблица1 = ПолучитьРеквизиты("ЭлектроннаяФорма_НалоговаяНакладнаяТаблица1");
		
		Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы1 Цикл
			ПолеСуществует = Ложь;
			Для Каждого ЭлементМассиваРеквизитовНалоговаяНакладнаяТаблица1 Из МассивРеквизитовНалоговаяНакладнаяТаблица1 Цикл
				Если ВРег(ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля) = ВРег(ЭлементМассиваРеквизитовНалоговаяНакладнаяТаблица1.Имя) Тогда
					ПолеСуществует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПолеСуществует Тогда
				Реквизит = Новый РеквизитФормы(ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля, Новый ОписаниеТипов("Строка"), "ЭлектроннаяФорма_НалоговаяНакладнаяТаблица1", ЭлементМассиваПолейШаблонаТаблицы.Заголовок);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		МассивРеквизитовПриложение2КНалоговойНакладнойТаблица1 = ПолучитьРеквизиты("ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица1");
		
		Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы1 Цикл
			ПолеСуществует = Ложь;
			Для Каждого ЭлементМассиваРеквизитовПриложение2КНалоговойНакладнойТаблица1 Из МассивРеквизитовПриложение2КНалоговойНакладнойТаблица1 Цикл
				Если ВРег(ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля) = ВРег(ЭлементМассиваРеквизитовПриложение2КНалоговойНакладнойТаблица1.Имя) Тогда
					ПолеСуществует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПолеСуществует Тогда
				Реквизит = Новый РеквизитФормы(ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля, Новый ОписаниеТипов("Строка"), "ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица1", ЭлементМассиваПолейШаблонаТаблицы.Заголовок);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы2 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			Реквизит = Новый РеквизитФормы(ЭлементМассиваПолейШаблонаТаблицы.ИмяРеквизита, ЭлементМассиваПолейШаблонаТаблицы.ТипДанныхПВХ.ТипЗначения, "ЭлектроннаяФорма_Таблица2", ЭлементМассиваПолейШаблонаТаблицы.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы3 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			Реквизит = Новый РеквизитФормы(ЭлементМассиваПолейШаблонаТаблицы.ИмяРеквизита, ЭлементМассиваПолейШаблонаТаблицы.ТипДанныхПВХ.ТипЗначения, "ЭлектроннаяФорма_Таблица3", ЭлементМассиваПолейШаблонаТаблицы.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы4 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			Реквизит = Новый РеквизитФормы(ЭлементМассиваПолейШаблонаТаблицы.ИмяРеквизита, ЭлементМассиваПолейШаблонаТаблицы.ТипДанныхПВХ.ТипЗначения, "ЭлектроннаяФорма_Таблица4", ЭлементМассиваПолейШаблонаТаблицы.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы5 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			Реквизит = Новый РеквизитФормы(ЭлементМассиваПолейШаблонаТаблицы.ИмяРеквизита, ЭлементМассиваПолейШаблонаТаблицы.ТипДанныхПВХ.ТипЗначения, "ЭлектроннаяФорма_Таблица5", ЭлементМассиваПолейШаблонаТаблицы.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты); 
	
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы1 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			лПолеОтображенияРеквизита = Элементы.Добавить("ЭлектроннаяФорма_Таблица1_"+ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля, Тип("ПолеФормы"), Элементы.ЭлектроннаяФорма_Таблица1);
			лПолеОтображенияРеквизита.Вид = ВидПоляФормы.ПолеВвода;
			лПолеОтображенияРеквизита.ПутьКДанным = "ЭлектроннаяФорма_Таблица1."+ЭлементМассиваПолейШаблонаТаблицы.ИмяРеквизита;
			лПолеОтображенияРеквизита.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы2 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			лПолеОтображенияРеквизита = Элементы.Добавить("ЭлектроннаяФорма_Таблица2_"+ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля, Тип("ПолеФормы"), Элементы.ЭлектроннаяФорма_Таблица2);
			лПолеОтображенияРеквизита.Вид = ВидПоляФормы.ПолеВвода;
			лПолеОтображенияРеквизита.ПутьКДанным = "ЭлектроннаяФорма_Таблица2."+ЭлементМассиваПолейШаблонаТаблицы.ИмяРеквизита;
			лПолеОтображенияРеквизита.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы3 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			лПолеОтображенияРеквизита = Элементы.Добавить("ЭлектроннаяФорма_Таблица3_"+ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля, Тип("ПолеФормы"), Элементы.ЭлектроннаяФорма_Таблица3);
			лПолеОтображенияРеквизита.Вид = ВидПоляФормы.ПолеВвода;
			лПолеОтображенияРеквизита.ПутьКДанным = "ЭлектроннаяФорма_Таблица3."+ЭлементМассиваПолейШаблонаТаблицы.ИмяРеквизита;
			лПолеОтображенияРеквизита.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы4 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			лПолеОтображенияРеквизита = Элементы.Добавить("ЭлектроннаяФорма_Таблица4_"+ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля, Тип("ПолеФормы"), Элементы.ЭлектроннаяФорма_Таблица4);
			лПолеОтображенияРеквизита.Вид = ВидПоляФормы.ПолеВвода;
			лПолеОтображенияРеквизита.ПутьКДанным = "ЭлектроннаяФорма_Таблица4."+ЭлементМассиваПолейШаблонаТаблицы.ИмяРеквизита;
			лПолеОтображенияРеквизита.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассиваПолейШаблонаТаблицы из ЭлектроннаяФорма_ПоляТаблицы5 Цикл
		Если ЭлементМассиваПолейШаблонаТаблицы.Отображать Тогда
			лПолеОтображенияРеквизита = Элементы.Добавить("ЭлектроннаяФорма_Таблица5_"+ЭлементМассиваПолейШаблонаТаблицы.ИмяПоля, Тип("ПолеФормы"), Элементы.ЭлектроннаяФорма_Таблица5);
			лПолеОтображенияРеквизита.Вид = ВидПоляФормы.ПолеВвода;
			лПолеОтображенияРеквизита.ПутьКДанным = "ЭлектроннаяФорма_Таблица5."+ЭлементМассиваПолейШаблонаТаблицы.ИмяРеквизита;
			лПолеОтображенияРеквизита.Заголовок = ЭлементМассиваПолейШаблонаТаблицы.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	
	Если СоответствиеСДаннымиTables = Неопределено Тогда
		Таблица0 = Неопределено;
	Иначе
		Таблица0 = СоответствиеСДаннымиTables.Получить("0");
	КонецЕсли;
	Таблица0ПерваяСтрока = Неопределено;
	Если ТипЗнч(Таблица0) = Тип("Массив") Тогда
		Если Таблица0.Количество() >= 1 Тогда
			Таблица0ПерваяСтрока = Таблица0[0];
		КонецЕсли;
	КонецЕсли;
	
	
	Если Таблица0ПерваяСтрока = Неопределено Тогда
		Для Каждого СтрокаЭлектроннаяФорма_Таблица0Строка0 из ЭлектроннаяФорма_Таблица0Строка0 Цикл
			СтрокаЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля = Неопределено;
		КонецЦикла;
		
		ЭлектронныйДокумент_Дата = ТекущаяДата();
		ЭлектронныйДокумент_Номер = "";
		ЭлектронныйДокумент_НаименованиеДокумента = "";
		Если ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
			ЭлектронныйДокумент_ЕДРПОУОрганизации = ОрганизацияEDI.Код;
			ЭлектронныйДокумент_ФилиалОрганизации = ОрганизацияEDI.Филиал;
			ЭлектронныйДокумент_НаименованиеОрганизации = ОрганизацияEDI.Наименование;//?
			
			ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_EDRPOU");
			МассивСтрокЗначения = ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ЭлементМассиваСтрокЗначения из МассивСтрокЗначения Цикл
				ЭлементМассиваСтрокЗначения.ЗначениеПоля =ЭлектронныйДокумент_ЕДРПОУОрганизации;
			КонецЦикла;
			ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_DEPT");
			МассивСтрокЗначения = ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ЭлементМассиваСтрокЗначения из МассивСтрокЗначения Цикл
				ЭлементМассиваСтрокЗначения.ЗначениеПоля =ЭлектронныйДокумент_ФилиалОрганизации;
			КонецЦикла;
			ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_NAME");
			МассивСтрокЗначения = ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ЭлементМассиваСтрокЗначения из МассивСтрокЗначения Цикл
				ЭлементМассиваСтрокЗначения.ЗначениеПоля =ЭлектронныйДокумент_НаименованиеОрганизации;
			КонецЦикла;
		ИначеЕсли ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
			ЭлектронныйДокумент_ЕДРПОУОрганизации = "";
			ЭлектронныйДокумент_ФилиалОрганизации = "";
			ЭлектронныйДокумент_НаименованиеОрганизации = "";
		Иначе
			ЭлектронныйДокумент_ЕДРПОУОрганизации = "";
			ЭлектронныйДокумент_ФилиалОрганизации = "";
			ЭлектронныйДокумент_НаименованиеОрганизации = "";
		КонецЕсли;
		
		ЭлектронныйДокумент_Контрагент = Неопределено;
		ЭлектронныйДокумент_ЕДРПОУКонтрагента = "";
		ЭлектронныйДокумент_НаименованиеКонтрагента = "";
		ЭлектронныйДокумент_ФилиалКонтрагента = "";
		
		ЭлектронныйДокумент_ОтветственныйНаименование = "";
		ЭлектронныйДокумент_СуммаДокумента = 0;
		ЭлектронныйДокумент_ОтветственныйНаименование = скEDI_НастройкиПодКонфигурацию.ТекущийПользовательНаименование();
	Иначе
		Для Каждого ЭлементТаблицы0ПерваяСтрока Из Таблица0ПерваяСтрока Цикл
			ПараметрыПоиска = Новый Структура("ИмяПоля", ЭлементТаблицы0ПерваяСтрока.Ключ);
			МассивСтрокЗначения = ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ЭлементМассиваСтрокЗначения из МассивСтрокЗначения Цикл
				ЭлементМассиваСтрокЗначения.ЗначениеПоля = ЭлементТаблицы0ПерваяСтрока.Значение;
			КонецЦикла;
			
			//Таблица
			Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
				ТекЗначение = ЭлементТаблицы0ПерваяСтрока.Значение;
				Если ТипЗнч(ТекЗначение) = Тип("Число") Тогда
					ТекЗначение = Формат(ТекЗначение, "ЧН=0; ЧГ=0");
				КонецЕсли;
				МассивСтрокЗначения = ЭлектроннаяФорма_НДСлужебныеДанныеТаблица0Строка0.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ЭлементМассиваСтрокЗначения из МассивСтрокЗначения Цикл
					ЭлементМассиваСтрокЗначения.ЗначениеПоля = ТекЗначение;//ЭлементТаблицы0ПерваяСтрока.Значение;
				КонецЦикла;
				МассивСтрокЗначения = ЭлектроннаяФорма_НалоговаяНакладнаяТаблица0Строка0.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ЭлементМассиваСтрокЗначения из МассивСтрокЗначения Цикл
					ЭлементМассиваСтрокЗначения.ЗначениеПоля = ТекЗначение;//ЭлементТаблицы0ПерваяСтрока.Значение;
				КонецЦикла;
			ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
				ТекЗначение = ЭлементТаблицы0ПерваяСтрока.Значение;
				Если ТипЗнч(ТекЗначение) = Тип("Число") Тогда
					ТекЗначение = Формат(ТекЗначение, "ЧН=0; ЧГ=0");
				КонецЕсли;
				МассивСтрокЗначения = ЭлектроннаяФорма_НДСлужебныеДанныеТаблица0Строка0.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ЭлементМассиваСтрокЗначения из МассивСтрокЗначения Цикл
					ЭлементМассиваСтрокЗначения.ЗначениеПоля = ТекЗначение;//ЭлементТаблицы0ПерваяСтрока.Значение;
				КонецЦикла;
				МассивСтрокЗначения = ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица0Строка0.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ЭлементМассиваСтрокЗначения из МассивСтрокЗначения Цикл
					ЭлементМассиваСтрокЗначения.ЗначениеПоля = ТекЗначение;//ЭлементТаблицы0ПерваяСтрока.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
			или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
			или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			
			ЭлектронныйДокумент_Дата = скEDI_СозданиеДокументовСервер.мПривестиКДате(Таблица0ПерваяСтрока.Получить("DOCDATE"), Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
			
			//лРезультат.Вставить("НаименованиеКонтрагента", Строка(Таблица0ПерваяСтрока.Получить("FIRM_NAME")));;
			лНомерЭлектронногоДокумента = Таблица0ПерваяСтрока.Получить("NUM");
			Если лНомерЭлектронногоДокумента = Неопределено Тогда
				ЭлектронныйДокумент_Номер = "";
			Иначе
				ЭлектронныйДокумент_Номер = СокрЛП(лНомерЭлектронногоДокумента);
			КонецЕсли;
			
			Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента") Тогда
				лНаименованиеЭлектронногоДокумента = Таблица0ПерваяСтрока.Получить("NAME_DOC");
			Иначе
				лНаименованиеЭлектронногоДокумента = Таблица0ПерваяСтрока.Получить("DOC_NAME");
			КонецЕсли;
			Если лНаименованиеЭлектронногоДокумента = Неопределено Тогда
				ЭлектронныйДокумент_НаименованиеДокумента = "";
			Иначе
				ЭлектронныйДокумент_НаименованиеДокумента = СокрЛП(лНаименованиеЭлектронногоДокумента);
			КонецЕсли;
			
			лFIRM_EDRPOU = Таблица0ПерваяСтрока.Получить("FIRM_EDRPOU");
			Если лFIRM_EDRPOU = Неопределено Тогда
				ЭлектронныйДокумент_ЕДРПОУОрганизации = "";
			Иначе
				ЭлектронныйДокумент_ЕДРПОУОрганизации = лFIRM_EDRPOU;
			КонецЕсли;
			лFIRM_DEPT = Таблица0ПерваяСтрока.Получить("FIRM_DEPT");
			Если лFIRM_DEPT = Неопределено Тогда
				ЭлектронныйДокумент_ФилиалОрганизации = "";
			Иначе
				ЭлектронныйДокумент_ФилиалОрганизации = лFIRM_DEPT;
			КонецЕсли;
			лFIRM_NAME = Таблица0ПерваяСтрока.Получить("FIRM_NAME");
			Если лFIRM_NAME = Неопределено Тогда
				ЭлектронныйДокумент_НаименованиеОрганизации = "";
			Иначе
				ЭлектронныйДокумент_НаименованиеОрганизации = лFIRM_NAME;
			КонецЕсли;
			
			лSIDE_EDRPOU_K = Таблица0ПерваяСтрока.Получить("SIDE_EDRPOU_K");
			Если лSIDE_EDRPOU_K = Неопределено Тогда
				ЭлектронныйДокумент_ЕДРПОУКонтрагента = "";
			Иначе
				ЭлектронныйДокумент_ЕДРПОУКонтрагента = лSIDE_EDRPOU_K;
			КонецЕсли;
			лSIDE_DEPT_K = Таблица0ПерваяСтрока.Получить("SIDE_DEPT_K");
			Если лSIDE_DEPT_K = Неопределено Тогда
				ЭлектронныйДокумент_ФилиалКонтрагента = "";
			Иначе
				ЭлектронныйДокумент_ФилиалКонтрагента = лSIDE_DEPT_K;
			КонецЕсли;
			лSIDE_SHORTNAME_K = Таблица0ПерваяСтрока.Получить("SIDE_SHORTNAME_K");
			Если лSIDE_SHORTNAME_K = Неопределено Тогда
				лSIDE_CD_K = Таблица0ПерваяСтрока.Получить("SIDE_CD_K");
				Если лSIDE_CD_K = Неопределено Тогда
					ЭлектронныйДокумент_НаименованиеКонтрагента = "";
				Иначе
					ЭлектронныйДокумент_НаименованиеКонтрагента = лSIDE_CD_K;
				КонецЕсли;
			Иначе
				ЭлектронныйДокумент_НаименованиеКонтрагента = лSIDE_SHORTNAME_K;
			КонецЕсли;
			ЭлектронныйДокумент_Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлектронныйДокумент_ЕДРПОУКонтрагента, ЭлектронныйДокумент_ФилиалКонтрагента, Истина);

			
			Попытка
				ЭлектронныйДокумент_СуммаДокумента = Число(Таблица0ПерваяСтрока.Получить("DOCSUM"));
			Исключение
				ЭлектронныйДокумент_СуммаДокумента = 0;
			КонецПопытки;
			лVO_NAME = Таблица0ПерваяСтрока.Получить("VO_NAME");
			Если лVO_NAME = Неопределено Тогда
				ЭлектронныйДокумент_ОтветственныйНаименование = "";
			Иначе
				ЭлектронныйДокумент_ОтветственныйНаименование = лVO_NAME;
			КонецЕсли;
			
			ЭлектронныйДокумент_CDATEDOC = скEDI_СозданиеДокументовСервер.мПривестиКДате(Таблица0ПерваяСтрока.Получить("CDATEDOC"), Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
			лCNUMDOC = Таблица0ПерваяСтрока.Получить("CNUMDOC");
			Если лCNUMDOC = Неопределено Тогда
				ЭлектронныйДокумент_CNUMDOC = "";
			Иначе
				ЭлектронныйДокумент_CNUMDOC = лCNUMDOC;
			КонецЕсли;
			лCNAMEDOC = Таблица0ПерваяСтрока.Получить("CNAMEDOC");
			Если лCNAMEDOC = Неопределено Тогда
				ЭлектронныйДокумент_CNAMEDOC = "";
			Иначе
				ЭлектронныйДокумент_CNAMEDOC = лCNAMEDOC;
			КонецЕсли;
			
			лCEDRPOU_ORG = Таблица0ПерваяСтрока.Получить("CEDRPOU_ORG");
			Если лCEDRPOU_ORG = Неопределено Тогда
				ЭлектронныйДокумент_CEDRPOU_ORG = "";
			Иначе
				ЭлектронныйДокумент_CEDRPOU_ORG = лCEDRPOU_ORG;
			КонецЕсли;
			
			лCDEPT_ORG = Таблица0ПерваяСтрока.Получить("CDEPT_ORG");
			Если лCDEPT_ORG = Неопределено Тогда
				ЭлектронныйДокумент_CDEPT_ORG = "";
			Иначе
				ЭлектронныйДокумент_CDEPT_ORG = лCDEPT_ORG;
			КонецЕсли;
			
			лCNAME_ORG = Таблица0ПерваяСтрока.Получить("CNAME_ORG");
			Если лCNAME_ORG = Неопределено Тогда
				ЭлектронныйДокумент_CNAME_ORG = "";
			Иначе
				ЭлектронныйДокумент_CNAME_ORG = лCNAME_ORG;
			КонецЕсли;
			
			лCSIDE_EDRPOU_ORG = Таблица0ПерваяСтрока.Получить("CSIDE_EDRPOU_ORG");
			Если лCSIDE_EDRPOU_ORG = Неопределено Тогда
				ЭлектронныйДокумент_CSIDE_EDRPOU_ORG = "";
			Иначе
				ЭлектронныйДокумент_CSIDE_EDRPOU_ORG = лCSIDE_EDRPOU_ORG;
			КонецЕсли;
			
			лCSIDE_DEPT_ORG = Таблица0ПерваяСтрока.Получить("CSIDE_DEPT_ORG");
			Если лCSIDE_DEPT_ORG = Неопределено Тогда
				ЭлектронныйДокумент_CSIDE_DEPT_ORG = "";
			Иначе
				ЭлектронныйДокумент_CSIDE_DEPT_ORG = лCSIDE_DEPT_ORG;
			КонецЕсли;
			
			лCSIDE_NAME_ORG = Таблица0ПерваяСтрока.Получить("CSIDE_NAME_ORG");
			Если лCSIDE_NAME_ORG = Неопределено Тогда
				ЭлектронныйДокумент_CSIDE_NAME_ORG = "";
			Иначе
				ЭлектронныйДокумент_CSIDE_NAME_ORG = лCSIDE_NAME_ORG;
			КонецЕсли;
			
			лCDOCID = Таблица0ПерваяСтрока.Получить("CDOCID");
			Если лCDOCID = Неопределено Тогда
				ЭлектронныйДокумент_CDOCID = "";
			Иначе
				ЭлектронныйДокумент_CDOCID = лCDOCID;
			КонецЕсли;
			
			лCFILENAME = Таблица0ПерваяСтрока.Получить("CFILENAME");
			Если лCFILENAME = Неопределено Тогда
				ЭлектронныйДокумент_CFILENAME = "";
			Иначе
				ЭлектронныйДокумент_CFILENAME = лCFILENAME;
			КонецЕсли;
			
			лCTEXT = Таблица0ПерваяСтрока.Получить("CTEXT");
			Если лCTEXT = Неопределено Тогда
				ЭлектронныйДокумент_CTEXT = "";
			Иначе
				ЭлектронныйДокумент_CTEXT = лCTEXT;
			КонецЕсли;

			лSIDE_CDSHR_K = Таблица0ПерваяСтрока.Получить("SIDE_CDSHR_K");
			Если лSIDE_CDSHR_K = Неопределено Тогда
				ЭлектронныйДокумент_SIDE_CDSHR_K = "";
			Иначе
				ЭлектронныйДокумент_SIDE_CDSHR_K = лSIDE_CDSHR_K;
			КонецЕсли;
			
			лSIDE_CDADR_K = Таблица0ПерваяСтрока.Получить("SIDE_CDADR_K");
			Если лSIDE_CDADR_K = Неопределено Тогда
				ЭлектронныйДокумент_SIDE_CDADR_K = "";
			Иначе
				ЭлектронныйДокумент_SIDE_CDADR_K = лSIDE_CDADR_K;
			КонецЕсли;
			
			лSIDE_BANK_K = Таблица0ПерваяСтрока.Получить("SIDE_BANK_K");
			Если лSIDE_BANK_K = Неопределено Тогда
				ЭлектронныйДокумент_SIDE_BANK_K = "";
			Иначе
				ЭлектронныйДокумент_SIDE_BANK_K = лSIDE_BANK_K;
			КонецЕсли;
			
			лFIRM_RS = Таблица0ПерваяСтрока.Получить("FIRM_RS");
			Если лFIRM_RS = Неопределено Тогда
				ЭлектронныйДокумент_FIRM_RS = "";
			Иначе
				ЭлектронныйДокумент_FIRM_RS = лFIRM_RS;
			КонецЕсли;
			
			лFIRM_NMBANK = Таблица0ПерваяСтрока.Получить("FIRM_NMBANK");
			Если лFIRM_NMBANK = Неопределено Тогда
				ЭлектронныйДокумент_FIRM_NMBANK = "";
			Иначе
				ЭлектронныйДокумент_FIRM_NMBANK = лFIRM_NMBANK;
			КонецЕсли;
			
			лFIRM_ADR = Таблица0ПерваяСтрока.Получить("FIRM_ADR");
			Если лFIRM_ADR = Неопределено Тогда
				ЭлектронныйДокумент_FIRM_ADR = "";
			Иначе
				ЭлектронныйДокумент_FIRM_ADR = лFIRM_ADR;
			КонецЕсли;
			
			лCSIDE_POS = Таблица0ПерваяСтрока.Получить("CSIDE_POS");
			Если лCSIDE_POS = Неопределено Тогда
				ЭлектронныйДокумент_CSIDE_POS = "";
			Иначе
				ЭлектронныйДокумент_CSIDE_POS = лCSIDE_POS;
			КонецЕсли;
			
			лCSIDE_FIO = Таблица0ПерваяСтрока.Получить("CSIDE_FIO");
			Если лCSIDE_FIO = Неопределено Тогда
				ЭлектронныйДокумент_CSIDE_FIO = "";
			Иначе
				ЭлектронныйДокумент_CSIDE_FIO = лCSIDE_FIO;
			КонецЕсли;
			
			лCFIRM_POS = Таблица0ПерваяСтрока.Получить("CFIRM_POS");
			Если лCFIRM_POS = Неопределено Тогда
				ЭлектронныйДокумент_CFIRM_POS = "";
			Иначе
				ЭлектронныйДокумент_CFIRM_POS = лCFIRM_POS;
			КонецЕсли;
			
			лCFIRM_FIO = Таблица0ПерваяСтрока.Получить("CFIRM_FIO");
			Если лCFIRM_FIO = Неопределено Тогда
				ЭлектронныйДокумент_CFIRM_FIO = "";
			Иначе
				ЭлектронныйДокумент_CFIRM_FIO = лCFIRM_FIO;
			КонецЕсли;
			
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			ЭлектронныйДокумент_НаименованиеДокумента = "";
			ЭлектронныйДокумент_Контрагент = Неопределено;
			ЭлектронныйДокумент_ЕДРПОУКонтрагента = "";
			ЭлектронныйДокумент_НаименованиеКонтрагента = "";
			ЭлектронныйДокумент_ФилиалКонтрагента = "";
			
			лНомерЭлектронногоДокумента = "";
			лНомерДокумента = "";
			лДатаЭлектронногоДокумента = "";
			лДатаДокумента = "";
			лЕДРПОУПродавца = "";
			лИННПродавца = "";
			лКодФилиалаПродавца = "";
			лНаименованиеПродавца = "";
			лЕДРПОУПокупателя = "";
			лИННПокупателя = "";
			лКодФилиалаПокупателя = "";
			лНаименованиеПокупателя = "";
			лСуммаЭлектронногоДокумента = 0;
			лСуммаБезНДСЭлектронногоДокумента = 0;
			лСуммаНДСЭлектронногоДокумента = 0;
				
			скEDI_ОбщегоНазначения.ПолучитьРеквизитыНалоговойНакладнойИзРеквизитовШапкиЭлектронногоДокумента(Таблица0ПерваяСтрока, лНомерЭлектронногоДокумента, лНомерДокумента,
				лДатаЭлектронногоДокумента, лДатаДокумента,
				лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя,
				лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
			
			Если ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				ЭлектронныйДокумент_ЕДРПОУКонтрагента = лЕДРПОУПродавца;
				ЭлектронныйДокумент_ФилиалКонтрагента = лКодФилиалаПродавца;
				ЭлектронныйДокумент_НаименованиеКонтрагента = лНаименованиеПродавца;
				ЭлектронныйДокумент_Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлектронныйДокумент_ЕДРПОУКонтрагента, ЭлектронныйДокумент_ФилиалКонтрагента, Истина);
			ИначеЕсли ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ЗначениеЗаполнено(лЕДРПОУПокупателя) Тогда
					ЭлектронныйДокумент_ЕДРПОУКонтрагента = лЕДРПОУПокупателя;
					ЭлектронныйДокумент_ФилиалКонтрагента = лКодФилиалаПокупателя;
					ЭлектронныйДокумент_НаименованиеКонтрагента = лНаименованиеПокупателя;
					ЭлектронныйДокумент_Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлектронныйДокумент_ЕДРПОУКонтрагента, ЭлектронныйДокумент_ФилиалКонтрагента, Истина);
				Иначе
					Если ЗначениеЗаполнено(Документ1С) Тогда
						лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(Документ1С);
						ЭлектронныйДокумент_ЕДРПОУКонтрагента = лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента;
						ЭлектронныйДокумент_ФилиалКонтрагента = лСтруктураДанныхКонтрагента.ФилиалКонтрагента;
						ЭлектронныйДокумент_НаименованиеКонтрагента = лСтруктураДанныхКонтрагента.НаименованиеКонтрагента;
						ЭлектронныйДокумент_Контрагент = лСтруктураДанныхКонтрагента.Контрагент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			ЭлектронныйДокумент_НаименованиеДокумента = "";
			ЭлектронныйДокумент_Контрагент = Неопределено;
			ЭлектронныйДокумент_ЕДРПОУКонтрагента = "";
			ЭлектронныйДокумент_НаименованиеКонтрагента = "";
			ЭлектронныйДокумент_ФилиалКонтрагента = "";
			
			лНомерЭлектронногоДокумента = "";
			лНомерДокумента = "";
			лДатаЭлектронногоДокумента = "";
			лДатаДокумента = "";
			лЕДРПОУПродавца = "";
			лИННПродавца = "";
			лКодФилиалаПродавца = "";
			лНаименованиеПродавца = "";
			лЕДРПОУПокупателя = "";
			лИННПокупателя = "";
			лКодФилиалаПокупателя = "";
			лНаименованиеПокупателя = "";
			лРегистрируетсяВЕРННПокупателем = Ложь;
			лСуммаЭлектронногоДокумента = 0;
			лСуммаБезНДСЭлектронногоДокумента = 0;
			лСуммаНДСЭлектронногоДокумента = 0;
				
			скEDI_ОбщегоНазначения.ПолучитьРеквизитыПриложения2ИзРеквизитовШапкиЭлектронногоДокумента(Таблица0ПерваяСтрока, лНомерЭлектронногоДокумента, лНомерДокумента,
				лДатаЭлектронногоДокумента, лДатаДокумента,
				лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя, лРегистрируетсяВЕРННПокупателем,
				лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
			
			Если ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				ЭлектронныйДокумент_ЕДРПОУКонтрагента = лЕДРПОУПродавца;
				ЭлектронныйДокумент_ФилиалКонтрагента = лКодФилиалаПродавца;
				ЭлектронныйДокумент_НаименованиеКонтрагента = лНаименованиеПродавца;
				ЭлектронныйДокумент_Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлектронныйДокумент_ЕДРПОУКонтрагента, ЭлектронныйДокумент_ФилиалКонтрагента, Истина);
			ИначеЕсли ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ЗначениеЗаполнено(лЕДРПОУПокупателя) Тогда
					ЭлектронныйДокумент_ЕДРПОУКонтрагента = лЕДРПОУПокупателя;
					ЭлектронныйДокумент_ФилиалКонтрагента = лКодФилиалаПокупателя;
					ЭлектронныйДокумент_НаименованиеКонтрагента = лНаименованиеПокупателя;
					ЭлектронныйДокумент_Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлектронныйДокумент_ЕДРПОУКонтрагента, ЭлектронныйДокумент_ФилиалКонтрагента, Истина);
				Иначе
					Если ЗначениеЗаполнено(Документ1С) Тогда
						лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(Документ1С);
						ЭлектронныйДокумент_ЕДРПОУКонтрагента = лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента;
						ЭлектронныйДокумент_ФилиалКонтрагента = лСтруктураДанныхКонтрагента.ФилиалКонтрагента;
						ЭлектронныйДокумент_НаименованиеКонтрагента = лСтруктураДанныхКонтрагента.НаименованиеКонтрагента;
						ЭлектронныйДокумент_Контрагент = лСтруктураДанныхКонтрагента.Контрагент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СоответствиеСДаннымиTables = Неопределено Тогда
		Таблица1 = Неопределено;
	Иначе
		Таблица1 = СоответствиеСДаннымиTables.Получить("1");
	КонецЕсли;
	Если ТипЗнч(Таблица1) = Тип("Массив") Тогда
		Для Каждого СтрокаТаблицы Из Таблица1 Цикл
			НоваяСтрокаТаблицы = ЭлектроннаяФорма_Таблица1.Добавить();
			Если ТипЗнч(СтрокаТаблицы) = Тип("Соответствие") Тогда
				Для Каждого ПолеСтрокиТаблицы из СтрокаТаблицы Цикл
					ПараметрыПоиска = Новый Структура("ИмяПоля", ПолеСтрокиТаблицы.Ключ);
					МассивСтрокаТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы1.НайтиСтроки(ПараметрыПоиска);
					Для Каждого ЭлементМассиваСтрокТаблицыПолей из МассивСтрокаТаблицыПолей Цикл
						Если ЗначениеЗаполнено(ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита) Тогда
							НоваяСтрокаТаблицы[ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита] = ПолеСтрокиТаблицы.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
				НоваяСтрокаТаблицы = ЭлектроннаяФорма_НалоговаяНакладнаяТаблица1.Добавить();
				Если ТипЗнч(СтрокаТаблицы) = Тип("Соответствие") Тогда
					Для Каждого ПолеСтрокиТаблицы из СтрокаТаблицы Цикл
						ПараметрыПоиска = Новый Структура("ИмяПоля", ПолеСтрокиТаблицы.Ключ);
						МассивСтрокаТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы1.НайтиСтроки(ПараметрыПоиска);
						Если МассивСтрокаТаблицыПолей.Количество() > 0 Тогда
							НоваяСтрокаТаблицы[ПолеСтрокиТаблицы.Ключ] = ПолеСтрокиТаблицы.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
				НоваяСтрокаТаблицы = ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица1.Добавить();
				Если ТипЗнч(СтрокаТаблицы) = Тип("Соответствие") Тогда
					Для Каждого ПолеСтрокиТаблицы из СтрокаТаблицы Цикл
						ПараметрыПоиска = Новый Структура("ИмяПоля", ПолеСтрокиТаблицы.Ключ);
						МассивСтрокаТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы1.НайтиСтроки(ПараметрыПоиска);
						Если МассивСтрокаТаблицыПолей.Количество() > 0 Тогда
							НоваяСтрокаТаблицы[ПолеСтрокиТаблицы.Ключ] = ПолеСтрокиТаблицы.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеСДаннымиTables = Неопределено Тогда
		Таблица2 = Неопределено;
	Иначе
		Таблица2 = СоответствиеСДаннымиTables.Получить("2");
	КонецЕсли;
	Если ТипЗнч(Таблица2) = Тип("Массив") Тогда
		Для Каждого СтрокаТаблицы Из Таблица2 Цикл
			НоваяСтрокаТаблицы = ЭлектроннаяФорма_Таблица2.Добавить();
			Если ТипЗнч(СтрокаТаблицы) = Тип("Соответствие") Тогда
				Для Каждого ПолеСтрокиТаблицы из СтрокаТаблицы Цикл
					ПараметрыПоиска = Новый Структура("ИмяПоля", ПолеСтрокиТаблицы.Ключ);
					МассивСтрокаТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы2.НайтиСтроки(ПараметрыПоиска);
					Для Каждого ЭлементМассиваСтрокТаблицыПолей из МассивСтрокаТаблицыПолей Цикл
						Если ЗначениеЗаполнено(ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита) Тогда
							НоваяСтрокаТаблицы[ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита] = ПолеСтрокиТаблицы.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеСДаннымиTables = Неопределено Тогда
		Таблица3 = Неопределено;
	Иначе
		Таблица3 = СоответствиеСДаннымиTables.Получить("3");
	КонецЕсли;
	Если ТипЗнч(Таблица3) = Тип("Массив") Тогда
		Для Каждого СтрокаТаблицы Из Таблица3 Цикл
			НоваяСтрокаТаблицы = ЭлектроннаяФорма_Таблица3.Добавить();
			Если ТипЗнч(СтрокаТаблицы) = Тип("Соответствие") Тогда
				Для Каждого ПолеСтрокиТаблицы из СтрокаТаблицы Цикл
					ПараметрыПоиска = Новый Структура("ИмяПоля", ПолеСтрокиТаблицы.Ключ);
					МассивСтрокаТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы3.НайтиСтроки(ПараметрыПоиска);
					Для Каждого ЭлементМассиваСтрокТаблицыПолей из МассивСтрокаТаблицыПолей Цикл
						Если ЗначениеЗаполнено(ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита) Тогда
							НоваяСтрокаТаблицы[ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита] = ПолеСтрокиТаблицы.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеСДаннымиTables = Неопределено Тогда
		Таблица4 = Неопределено;
	Иначе
		Таблица4 = СоответствиеСДаннымиTables.Получить("4");
	КонецЕсли;
	Если ТипЗнч(Таблица4) = Тип("Массив") Тогда
		Для Каждого СтрокаТаблицы Из Таблица4 Цикл
			НоваяСтрокаТаблицы = ЭлектроннаяФорма_Таблица4.Добавить();
			Если ТипЗнч(СтрокаТаблицы) = Тип("Соответствие") Тогда
				Для Каждого ПолеСтрокиТаблицы из СтрокаТаблицы Цикл
					ПараметрыПоиска = Новый Структура("ИмяПоля", ПолеСтрокиТаблицы.Ключ);
					МассивСтрокаТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы4.НайтиСтроки(ПараметрыПоиска);
					Для Каждого ЭлементМассиваСтрокТаблицыПолей из МассивСтрокаТаблицыПолей Цикл
						Если ЗначениеЗаполнено(ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита) Тогда
							НоваяСтрокаТаблицы[ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита] = ПолеСтрокиТаблицы.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеСДаннымиTables = Неопределено Тогда
		Таблица5 = Неопределено;
	Иначе
		Таблица5 = СоответствиеСДаннымиTables.Получить("5");
	КонецЕсли;
	Если ТипЗнч(Таблица5) = Тип("Массив") Тогда
		Для Каждого СтрокаТаблицы Из Таблица5 Цикл
			НоваяСтрокаТаблицы = ЭлектроннаяФорма_Таблица5.Добавить();
			Если ТипЗнч(СтрокаТаблицы) = Тип("Соответствие") Тогда
				Для Каждого ПолеСтрокиТаблицы из СтрокаТаблицы Цикл
					ПараметрыПоиска = Новый Структура("ИмяПоля", ПолеСтрокиТаблицы.Ключ);
					МассивСтрокаТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы5.НайтиСтроки(ПараметрыПоиска);
					Для Каждого ЭлементМассиваСтрокТаблицыПолей из МассивСтрокаТаблицыПолей Цикл
						Если ЗначениеЗаполнено(ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита) Тогда
							НоваяСтрокаТаблицы[ЭлементМассиваСтрокТаблицыПолей.ИмяРеквизита] = ПолеСтрокиТаблицы.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеСДаннымиTables = Неопределено Тогда
		МаршрутПоСоответствиюСДанными = Неопределено;
		МаршрутРучнаяНастройка = Ложь;
	Иначе
		МаршрутРучнаяНастройка = СоответствиеСДаннымиTables.Получить("РучнаяНастройкаМаршрута") = Истина;
		Если МаршрутРучнаяНастройка Тогда
			МаршрутПоРучнойНастройке = СоответствиеСДаннымиTables.Получить("Маршрут");
			Если ТипЗнч(МаршрутПоРучнойНастройке) <> Тип("Массив") Тогда
				МаршрутРучнаяНастройка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПоЭлектроннойФорме(СтруктураДанныхДокумента, ЗаполнятьРеквизити, ЗаполнятьМаршрут, КонтролироватьЗаполнениеОбязательныхРеквизитов, ИнформацияПоЗаполнениюОбязательныхРеквизитов)
	СоответствиеСДанными = Неопределено;
	ПараметрыСозданияДокументов = Новый Структура;
	МассивДанныхПоСвязаннымДокументам = Неопределено;
	
	Если ЗначениеЗаполнено(СвязанныйЭлектронныйДокумент) Тогда
		МассивДанныхПоСвязаннымДокументам = Новый Массив;
		ЭлементМассиваПоСвязаннымДокументам = Новый Структура;
		ЭлементМассиваПоСвязаннымДокументам.Вставить("ЭлектронныйДокумент", СвязанныйЭлектронныйДокумент);
		ЭлементМассиваПоСвязаннымДокументам.Вставить("ТипСвязи", СвязанныйЭлектронныйДокументТипСвязи);
		МассивДанныхПоСвязаннымДокументам.Добавить(ЭлементМассиваПоСвязаннымДокументам);
	КонецЕсли;
	
	IsMultisided = Ложь;
	Route = Неопределено;
	SidesCount = 0;
	Если ЗаполнятьРеквизити Тогда
		Если ПрочитатьДанныеЭлектроннойФормыВХранилищеРеквизитовЭлектронногоДокумента_НаСервере(СоответствиеСДанными, ПараметрыСозданияДокументов, КонтролироватьЗаполнениеОбязательныхРеквизитов, ИнформацияПоЗаполнениюОбязательныхРеквизитов, IsMultisided, Route, SidesCount) Тогда
			DocId = "";
			OutId = "";
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				Если ЭлектронныйДокумент.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПустаяСсылка") Тогда
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокумента) Тогда
						DocId = ЭлектронныйДокумент.ИдентификаторДокумента;
					Иначе
						DocId = ВРег(Строка(Новый УникальныйИдентификатор));
					КонецЕсли;
				ИначеЕсли ЭлектронныйДокумент.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокумента) Тогда
						DocId = ЭлектронныйДокумент.ИдентификаторДокумента;
					Иначе
						DocId = ВРег(Строка(Новый УникальныйИдентификатор));
					КонецЕсли;
				Иначе
					
				КонецЕсли;
			Иначе
				DocId = ВРег(Строка(Новый УникальныйИдентификатор));
			КонецЕсли;
			Если ТипЗнч(НаОсновании) = Тип("ДокументСсылка.скEDI_ЭлектронныйДокумент") Тогда
				Если ЗначениеЗаполнено(НаОсновании) Тогда
					Если НаОсновании.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
						OutId = НаОсновании.ИдентификаторДокументаВБазеДанныхКонтрагента;
					КонецЕсли;
					ПараметрыСозданияДокументов.Вставить("ДокументСозданНаОсновании", НаОсновании);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(МассивДанныхПоСвязаннымДокументам) Тогда
				ПараметрыСозданияДокументов.Вставить("МассивДанныхПоСвязаннымДокументам", МассивДанныхПоСвязаннымДокументам);
			КонецЕсли;
			
			СоответствиеСДанными.Вставить("РеквизитиПоДаннымЭлектроннойФормы", Истина);
					
			Если ЗаполнятьМаршрут Тогда
			//Если Истина Тогда
				Если ПрочитатьДанныеМаршрутаВХранилищеРеквизитовЭлектронногоДокумента_НаСервере(СоответствиеСДанными, ПараметрыСозданияДокументов, КонтролироватьЗаполнениеОбязательныхРеквизитов, ИнформацияПоЗаполнениюОбязательныхРеквизитов, ЭлектроннаяФорма_IsMultisided, ЭлектроннаяФорма_SidesCount, ЭлектроннаяФорма_Route, IsMultisided, Route, SidesCount) Тогда
					СоответствиеСДанными.Вставить("МаршрутПоДаннымЭлектроннойФормы", Истина);
					СоответствиеСДанными.Вставить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка", МаршрутПоДаннымФормыРучнаяУстановка);
				Иначе
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Таблица0 = СоответствиеСДанными.Получить("0");
				Если ТипЗнч(Таблица0) = Тип("Массив") Тогда
					Если Таблица0.Количество() >= 0 Тогда
						СтрокаТаблицы0 = Таблица0[0];
						скEDI_ОбщегоНазначения.ПрочитатьДанныеМногостороннегоДокументаПоУмолчанию(СтрокаТаблицы0, ЭлектроннаяФорма_IsMultisided, ЭлектроннаяФорма_SidesCount, ЭлектроннаяФорма_Route, ОрганизацияEDI, IsMultisided, Route, SidesCount);
						
						Если IsMultisided Тогда 
							Если ТипЗнч(Route) = Тип("Массив") Тогда 
								СоответствиеСДанными.Вставить("Маршрут", Route);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			скEDI_ОбщегоНазначения.ДополнитьСтруктуруДаннымиСхемыВыгрузки(ПараметрыСозданияДокументов, ВидЭлектронногоДокумента, ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, СоответствиеСДанными, Документ1С, DocId, OutId, ПримечаниеЭлектронногоДокумента, ВхИсх, IsMultisided, Route, SidesCount);
			ПараметрыСозданияДокументов.Вставить("ПоДаннымХранилищаРеквизитов", Истина);
			
			СтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов", ПараметрыСозданияДокументов);
			СтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов", СоответствиеСДанными);
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ЗаполнятьМаршрут Тогда
		СоответствиеСДанными = Новый Соответствие;
		Если ПрочитатьДанныеМаршрутаВХранилищеРеквизитовЭлектронногоДокумента_НаСервере(СоответствиеСДанными, ПараметрыСозданияДокументов, КонтролироватьЗаполнениеОбязательныхРеквизитов, ИнформацияПоЗаполнениюОбязательныхРеквизитов, ЭлектроннаяФорма_IsMultisided, ЭлектроннаяФорма_SidesCount, ЭлектроннаяФорма_Route, IsMultisided, Route, SidesCount) Тогда
			СоответствиеСДанными.Вставить("РеквизитиПоДаннымЭлектроннойФормы", Ложь);
			СоответствиеСДанными.Вставить("МаршрутПоДаннымЭлектроннойФормы", Истина);
			СоответствиеСДанными.Вставить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка", МаршрутПоДаннымФормыРучнаяУстановка);
			
			ПараметрыСозданияДокументов.Вставить("ПоДаннымХранилищаРеквизитов", Истина);
			Если ЗначениеЗаполнено(МассивДанныхПоСвязаннымДокументам) Тогда
				ПараметрыСозданияДокументов.Вставить("МассивДанныхПоСвязаннымДокументам", МассивДанныхПоСвязаннымДокументам);
			КонецЕсли;
			
			СтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов", ПараметрыСозданияДокументов);
			СтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов", СоответствиеСДанными);
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеРеквизитаВСтрокуМассиваЗначений(СтрокаМассиваЗначений, ЭлементНастройки, ЗначениеПоля)
	Если ЭлементНастройки.ТипДанныхПВХ = ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Date") Тогда
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Если ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
				СтрокаМассиваЗначений.Вставить(ЭлементНастройки.ИмяПоля, Формат(ЗначениеПоля, "ДФ=dd.MM.yyyy"));
			Иначе
				СтрокаМассиваЗначений.Вставить(ЭлементНастройки.ИмяПоля, ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭлементНастройки.ТипДанныхПВХ = ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.DateTime") Тогда
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Если ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
				СтрокаМассиваЗначений.Вставить(ЭлементНастройки.ИмяПоля, Формат(ЗначениеПоля, "ДФ='dd.MM.yyyy hh:mm:ss'"));
			Иначе
				СтрокаМассиваЗначений.Вставить(ЭлементНастройки.ИмяПоля, ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
	//ИначеЕсли ЭлементНастройки.ТипДанныхПВХ = ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Time") Тогда
	//ИначеЕсли ЭлементНастройки.ТипДанныхПВХ = ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Float") Тогда
	//ИначеЕсли ЭлементНастройки.ТипДанныхПВХ = ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Long") Тогда
	//ИначеЕсли ЭлементНастройки.ТипДанныхПВХ = ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Text") Тогда
	//ИначеЕсли ЭлементНастройки.ТипДанныхПВХ = ПредопределенноеЗначение("ПланВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Bool") Тогда
	Иначе
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			СтрокаМассиваЗначений.Вставить(ЭлементНастройки.ИмяПоля, ЗначениеПоля);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПрочитатьДанныеМаршрутаВХранилищеРеквизитовЭлектронногоДокумента_НаСервере(РезультатСоответствиеСДанными, ПараметрыСозданияДокументов, КонтролироватьЗаполнениеОбязательныхРеквизитов, ИнформацияПоЗаполнениюОбязательныхРеквизитов, Признак_IsMultisided, Признак_SidesCount, Признак_Route, IsMultisided, Route, SidesCount)
	IsMultisided = Ложь;
	Route = Неопределено;
	SidesCount = 0;
	Если Признак_IsMultisided = Истина Тогда
		IsMultisided = Истина;
		Route = Новый Массив;
		МассивМаршрут = Новый Массив;
		Для Каждого ЭлементМаршрута Из Маршрут Цикл
			ЭлементМассиваМаршрут = Новый Соответствие;
			ЭлементМассиваМаршрут.Вставить("Edrpou", ЭлементМаршрута.ЕДРПОУКонтрагента);
			ЭлементМассиваМаршрут.Вставить("Dept", ЭлементМаршрута.ФилиалКонтрагента);
			ЭлементМассиваМаршрут.Вставить("Inn", ЭлементМаршрута.ИНН);
			ЭлементМассиваМаршрут.Вставить("Name", ЭлементМаршрута.НаименованиеКонтрагента);
			ЭлементМассиваМаршрут.Вставить("Ссылка", ЭлементМаршрута.Контрагент);
			МассивМаршрут.Добавить(ЭлементМассиваМаршрут);
			
			ЭлементRoute = Новый Структура;
			ЭлементRoute.Вставить("Edrpou", ЭлементМаршрута.ЕДРПОУКонтрагента);
			ЭлементRoute.Вставить("Dept", ЭлементМаршрута.ФилиалКонтрагента);
			ЭлементRoute.Вставить("Inn", ЭлементМаршрута.ИНН);
			ЭлементRoute.Вставить("Name", ЭлементМаршрута.НаименованиеКонтрагента);
			Route.Добавить(ЭлементRoute);
			
			SidesCount = SidesCount + 1;
		КонецЦикла;
		РезультатСоответствиеСДанными.Вставить("Маршрут", МассивМаршрут);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПрочитатьДанныеЭлектроннойФормыВХранилищеРеквизитовЭлектронногоДокумента_НаСервере(РезультатСоответствиеСДанными, ПараметрыСозданияДокументов, КонтролироватьЗаполнениеОбязательныхРеквизитов, ИнформацияПоЗаполнениюОбязательныхРеквизитов, IsMultisided, Route, SidesCount)
	ИнформацияПоЗаполнениюОбязательныхРеквизитов = "";
	
	Если ЭлектроннаяФорма_ПоляТаблицы0.Количество() = 0 Тогда
		ИнформацияПоЗаполнениюОбязательныхРеквизитов = НСтр("ru = 'Нет информации по полям Шаблона электронного документа.'; uk = 'Нема інформації по полям шаблону електронного документу.'");
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементОтображенияРежимаЭлектроннаяФорма = ПолучитьЭлементОтображенияРежимаЭлектроннаяФорма();
	Если ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФормаMULTIDOC Тогда
		ЗначенияТаблицы0 = Новый Массив;
		СтрокаМассиваЗначений = Новый Соответствие;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "DOCDATE");
		МассивСтрокТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("DOCDATE", Формат(ЭлектронныйДокумент_Дата, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "NUM");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("NUM", СокрЛП(ЭлектронныйДокумент_Номер));
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "DOC_NAME");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("DOC_NAME", СокрЛП(ЭлектронныйДокумент_НаименованиеДокумента));
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_EDRPOU");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(ЭлектронныйДокумент_ЕДРПОУОрганизации) Тогда
				СтрокаМассиваЗначений.Вставить("FIRM_EDRPOU", ЭлектронныйДокумент_ЕДРПОУОрганизации);
			Иначе
				Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
					ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов + Символы.ПС;
				КонецЕсли;
				ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов
				//+ НСтр("ru = 'Не заполнено поле'; uk = 'Не заповнено поле'") + """FIRM_EDRPOU""";
				+ НСтр("ru = 'Не заполнено поле ""ЕДРПОУ отправителя""'; uk = 'Не заповнено поле ""ЄДРПОУ відправника""'");
				Если КонтролироватьЗаполнениеОбязательныхРеквизитов Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_DEPT");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("FIRM_DEPT", ЭлектронныйДокумент_ФилиалОрганизации);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_NAME");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("FIRM_NAME", ЭлектронныйДокумент_НаименованиеОрганизации);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_NM");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("FIRM_NM", ЭлектронныйДокумент_НаименованиеОрганизации);
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_EDRPOU_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(ЭлектронныйДокумент_ЕДРПОУКонтрагента) Тогда
				СтрокаМассиваЗначений.Вставить("SIDE_EDRPOU_K", ЭлектронныйДокумент_ЕДРПОУКонтрагента);
			Иначе
				Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
					ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов + Символы.ПС;
				КонецЕсли;
				ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов
				//+ НСтр("ru = 'Не заполнено поле'; uk = 'Не заповнено поле'") + """SIDE_EDRPOU_K""";
				+ НСтр("ru = 'Не заполнено поле ""ЕДРПОУ получателя""'; uk = 'Не заповнено поле ""ЄДРПОУ отримувача""'");
				Если КонтролироватьЗаполнениеОбязательныхРеквизитов Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_DEPT_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("SIDE_DEPT_K", ЭлектронныйДокумент_ФилиалКонтрагента);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_SHORTNAME_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("SIDE_SHORTNAME_K", ЭлектронныйДокумент_НаименованиеКонтрагента);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_CD_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("SIDE_CD_K", ЭлектронныйДокумент_НаименованиеКонтрагента);
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "DOCSUM");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("DOCSUM", ЭлектронныйДокумент_СуммаДокумента);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "VO_NAME");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("VO_NAME", ЭлектронныйДокумент_ОтветственныйНаименование);
		КонецЕсли;
		
		ЗначенияТаблицы0.Добавить(СтрокаМассиваЗначений);
		РезультатСоответствиеСДанными = Новый Соответствие;
		РезультатСоответствиеСДанными.Вставить("0", ЗначенияТаблицы0);
				
		Возврат Истина;
	ИначеЕсли ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФормаZERODOC Тогда
		//Обновить данные по Организации/Контрагенту
		Если ЗначениеЗаполнено(ОрганизацияEDI.Организация1С) Тогда
			Если не ЗначениеЗаполнено(ЭлектронныйДокумент_FIRM_RS)
				и не ЗначениеЗаполнено(ЭлектронныйДокумент_FIRM_NMBANK)
				и не ЗначениеЗаполнено(ЭлектронныйДокумент_FIRM_ADR) Тогда
				
				ДанныеПоОрганизаци = скEDI_НастройкиПодКонфигурацию.ПолучитьРекквизитыОгранизацииДляПФ(ОрганизацияEDI.Организация1С);
				
				ЭлектронныйДокумент_НаименованиеОрганизации = ДанныеПоОрганизаци.ПолноеНаименование;
				ЭлектронныйДокумент_FIRM_RS = ДанныеПоОрганизаци.НомерСчета;
				ЭлектронныйДокумент_FIRM_NMBANK = ДанныеПоОрганизаци.Банк;
				ЭлектронныйДокумент_FIRM_ADR = ДанныеПоОрганизаци.ЮридическийАдрес;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронныйДокумент_Контрагент) Тогда
			Если не ЗначениеЗаполнено(ЭлектронныйДокумент_SIDE_CDSHR_K)
				и не ЗначениеЗаполнено(ЭлектронныйДокумент_SIDE_BANK_K)
				и не ЗначениеЗаполнено(ЭлектронныйДокумент_SIDE_CDADR_K) Тогда
				
				ДанныеПоКонтрагенту = скEDI_НастройкиПодКонфигурацию.ПолучитьРекквизитыКонтрагентаДляПФ(ЭлектронныйДокумент_Контрагент);
				
				ЭлектронныйДокумент_НаименованиеКонтрагента = ДанныеПоКонтрагенту.ПолноеНаименование;
				ЭлектронныйДокумент_SIDE_CDSHR_K = ДанныеПоКонтрагенту.НомерСчета;
				ЭлектронныйДокумент_SIDE_BANK_K = ДанныеПоКонтрагенту.Банк;
				ЭлектронныйДокумент_SIDE_CDADR_K = ДанныеПоКонтрагенту.ЮридическийАдрес;
			КонецЕсли;
		КонецЕсли;
		//...Обновить данные по Организации/Контрагенту
		
		ЗначенияТаблицы0 = Новый Массив;
		СтрокаМассиваЗначений = Новый Соответствие;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "DOCDATE");
		МассивСтрокТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("DOCDATE", Формат(ЭлектронныйДокумент_Дата, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "NUM");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("NUM", СокрЛП(ЭлектронныйДокумент_Номер));
		КонецЕсли;
		//ПараметрыПоиска = Новый Структура("ИмяПоля", "DOC_NAME");
		//МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		//Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
		//	СтрокаМассиваЗначений.Вставить("DOC_NAME", СокрЛП(ЭлектронныйДокумент_НаименованиеДокумента));
		//КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "NAME_DOC");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("NAME_DOC", СокрЛП(ЭлектронныйДокумент_НаименованиеДокумента));
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_EDRPOU");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(ЭлектронныйДокумент_ЕДРПОУОрганизации) Тогда
				СтрокаМассиваЗначений.Вставить("FIRM_EDRPOU", ЭлектронныйДокумент_ЕДРПОУОрганизации);
			Иначе
				Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
					ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов + Символы.ПС;
				КонецЕсли;
				ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов
				//+ НСтр("ru = 'Не заполнено поле'; uk = 'Не заповнено поле'") + """FIRM_EDRPOU""";
				+ НСтр("ru = 'Не заполнено поле ""ЕДРПОУ отправителя""'; uk = 'Не заповнено поле ""ЄДРПОУ відправника""'");
				Если КонтролироватьЗаполнениеОбязательныхРеквизитов Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_DEPT");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("FIRM_DEPT", ЭлектронныйДокумент_ФилиалОрганизации);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_NAME");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("FIRM_NAME", ЭлектронныйДокумент_НаименованиеОрганизации);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_NM");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("FIRM_NM", ЭлектронныйДокумент_НаименованиеОрганизации);
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_EDRPOU_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(ЭлектронныйДокумент_ЕДРПОУКонтрагента) Тогда
				СтрокаМассиваЗначений.Вставить("SIDE_EDRPOU_K", ЭлектронныйДокумент_ЕДРПОУКонтрагента);
			Иначе
				Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
					ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов + Символы.ПС;
				КонецЕсли;
				ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов
				//+ НСтр("ru = 'Не заполнено поле'; uk = 'Не заповнено поле'") + """SIDE_EDRPOU_K""";
				+ НСтр("ru = 'Не заполнено поле ""ЕДРПОУ получателя""'; uk = 'Не заповнено поле ""ЄДРПОУ отримувача""'");
				Если КонтролироватьЗаполнениеОбязательныхРеквизитов Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_DEPT_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("SIDE_DEPT_K", ЭлектронныйДокумент_ФилиалКонтрагента);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_SHORTNAME_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("SIDE_SHORTNAME_K", ЭлектронныйДокумент_НаименованиеКонтрагента);
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_CD_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("SIDE_CD_K", ЭлектронныйДокумент_НаименованиеКонтрагента);
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CDATEDOC");
		МассивСтрокТаблицыПолей = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CDATEDOC", Формат(ЭлектронныйДокумент_CDATEDOC, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CNUMDOC");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CNUMDOC", СокрЛП(ЭлектронныйДокумент_CNUMDOC));
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CNAMEDOC");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CNAMEDOC", СокрЛП(ЭлектронныйДокумент_CNAMEDOC));
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CFILENAME");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CFILENAME", ЭлектронныйДокумент_CFILENAME);
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CDOCID");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CDOCID", ЭлектронныйДокумент_CDOCID);
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CTEXT");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(ЭлектронныйДокумент_CTEXT) Тогда
				СтрокаМассиваЗначений.Вставить("CTEXT", ЭлектронныйДокумент_CTEXT);
			Иначе
				Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
					ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов + Символы.ПС;
				КонецЕсли;
				ИнформацияПоЗаполнениюОбязательныхРеквизитов = ИнформацияПоЗаполнениюОбязательныхРеквизитов
				//+ НСтр("ru = 'Не заполнено поле'; uk = 'Не заповнено поле'") + """SIDE_EDRPOU_K""";
				+ НСтр("ru = 'Не заполнено поле ""Причина аннулирования""'; uk = 'Не заповнено поле ""Причина анулювання""'");
				Если КонтролироватьЗаполнениеОбязательныхРеквизитов Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CDEPT_ORG");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CDEPT_ORG", ЭлектронныйДокумент_CDEPT_ORG);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CEDRPOU_ORG");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CEDRPOU_ORG", ЭлектронныйДокумент_CEDRPOU_ORG);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CNAME_ORG");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CNAME_ORG", ЭлектронныйДокумент_CNAME_ORG);
		КонецЕсли;
 
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CSIDE_EDRPOU_ORG");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CSIDE_EDRPOU_ORG", ЭлектронныйДокумент_CSIDE_EDRPOU_ORG);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CSIDE_DEPT_ORG");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CSIDE_DEPT_ORG", ЭлектронныйДокумент_CSIDE_DEPT_ORG);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CSIDE_NAME_ORG");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CSIDE_NAME_ORG", ЭлектронныйДокумент_CSIDE_NAME_ORG);
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_CDSHR_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("SIDE_CDSHR_K", ЭлектронныйДокумент_SIDE_CDSHR_K);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_CDADR_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("SIDE_CDADR_K", ЭлектронныйДокумент_SIDE_CDADR_K);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "SIDE_BANK_K");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("SIDE_BANK_K", ЭлектронныйДокумент_SIDE_BANK_K);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_RS");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("FIRM_RS", ЭлектронныйДокумент_FIRM_RS);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_NMBANK");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("FIRM_NMBANK", ЭлектронныйДокумент_FIRM_NMBANK);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "FIRM_ADR");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("FIRM_ADR", ЭлектронныйДокумент_FIRM_ADR);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CSIDE_POS");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CSIDE_POS", ЭлектронныйДокумент_CSIDE_POS);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CSIDE_FIO");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CSIDE_FIO", ЭлектронныйДокумент_CSIDE_FIO);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CFIRM_POS");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CFIRM_POS", ЭлектронныйДокумент_CFIRM_POS);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "CFIRM_FIO");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("CFIRM_FIO", ЭлектронныйДокумент_CFIRM_FIO);
		КонецЕсли;

		ПараметрыПоиска = Новый Структура("ИмяПоля", "DOCSUM");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("DOCSUM", ЭлектронныйДокумент_СуммаДокумента);
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ИмяПоля", "VO_NAME");
		МассивСтрокЗначения = ЭлектроннаяФорма_ПоляТаблицы0.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрокТаблицыПолей.Количество() > 0 Тогда
			СтрокаМассиваЗначений.Вставить("VO_NAME", ЭлектронныйДокумент_ОтветственныйНаименование);
		КонецЕсли;
		
		ЗначенияТаблицы0.Добавить(СтрокаМассиваЗначений);
		РезультатСоответствиеСДанными = Новый Соответствие;
		РезультатСоответствиеСДанными.Вставить("0", ЗначенияТаблицы0);
		
		Возврат Истина;
	ИначеЕсли ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФорма Тогда
		РезультатСоответствиеСДанными = Новый Соответствие;
		
		ЗначенияТаблицы0 = Новый Массив;
		СтрокаМассиваЗначений = Новый Соответствие;
		Для Каждого ЭлементЭлектроннаяФорма_Таблица0Строка0 Из ЭлектроннаяФорма_Таблица0Строка0 Цикл
			ДобавитьЗначениеРеквизитаВСтрокуМассиваЗначений(СтрокаМассиваЗначений, ЭлементЭлектроннаяФорма_Таблица0Строка0, ЭлементЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля);
		КонецЦикла;
		ЗначенияТаблицы0.Добавить(СтрокаМассиваЗначений);
		РезультатСоответствиеСДанными.Вставить("0", ЗначенияТаблицы0);
		//скEDI_ОбщегоНазначения.ПрочитатьДанныеМногостороннегоДокументаДляХранилищаРеквизитовЭлектронногоДокумента(СтрокаМассиваЗначений, ЭлектроннаяФорма_IsMultisided, ЭлектроннаяФорма_SidesCount, ЭлектроннаяФорма_Route, IsMultisided, Route, SidesCount);
		
		Если ЭлектроннаяФорма_ПоляТаблицы1.Количество() > 0 Тогда
			ЗначенияТаблицы1 = Новый Массив;
			Для Каждого ЭлементЭлектроннаяФорма_Таблица1 Из ЭлектроннаяФорма_Таблица1 Цикл
				СтрокаМассиваЗначений = Новый Соответствие;
				Для Каждого ЭлементЭлектроннаяФорма_ПоляТаблицы1 Из ЭлектроннаяФорма_ПоляТаблицы1 Цикл
					Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_ПоляТаблицы1.ИмяРеквизита) Тогда
						ДобавитьЗначениеРеквизитаВСтрокуМассиваЗначений(СтрокаМассиваЗначений, ЭлементЭлектроннаяФорма_ПоляТаблицы1, ЭлементЭлектроннаяФорма_Таблица1[ЭлементЭлектроннаяФорма_ПоляТаблицы1.ИмяРеквизита]);
					КонецЕсли;
				КонецЦикла;
				ЗначенияТаблицы1.Добавить(СтрокаМассиваЗначений);
			КонецЦикла;
			РезультатСоответствиеСДанными.Вставить("1", ЗначенияТаблицы1);
		КонецЕсли;
		Если ЭлектроннаяФорма_ПоляТаблицы2.Количество() > 0 Тогда
			ЗначенияТаблицы2 = Новый Массив;
			Для Каждого ЭлементЭлектроннаяФорма_Таблица2 Из ЭлектроннаяФорма_Таблица2 Цикл
				СтрокаМассиваЗначений = Новый Соответствие;
				Для Каждого ЭлементЭлектроннаяФорма_ПоляТаблицы2 Из ЭлектроннаяФорма_ПоляТаблицы2 Цикл
					Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_ПоляТаблицы2.ИмяРеквизита) Тогда
						ДобавитьЗначениеРеквизитаВСтрокуМассиваЗначений(СтрокаМассиваЗначений, ЭлементЭлектроннаяФорма_ПоляТаблицы2, ЭлементЭлектроннаяФорма_Таблица2[ЭлементЭлектроннаяФорма_ПоляТаблицы2.ИмяРеквизита]);
					КонецЕсли;
				КонецЦикла;
				ЗначенияТаблицы2.Добавить(СтрокаМассиваЗначений);
			КонецЦикла;
			РезультатСоответствиеСДанными.Вставить("2", ЗначенияТаблицы2);
		КонецЕсли;
		Если ЭлектроннаяФорма_ПоляТаблицы3.Количество() > 0 Тогда
			ЗначенияТаблицы3 = Новый Массив;
			Для Каждого ЭлементЭлектроннаяФорма_Таблица3 Из ЭлектроннаяФорма_Таблица3 Цикл
				СтрокаМассиваЗначений = Новый Соответствие;
				Для Каждого ЭлементЭлектроннаяФорма_ПоляТаблицы3 Из ЭлектроннаяФорма_ПоляТаблицы3 Цикл
					Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_ПоляТаблицы3.ИмяРеквизита) Тогда
						ДобавитьЗначениеРеквизитаВСтрокуМассиваЗначений(СтрокаМассиваЗначений, ЭлементЭлектроннаяФорма_ПоляТаблицы3, ЭлементЭлектроннаяФорма_Таблица3[ЭлементЭлектроннаяФорма_ПоляТаблицы3.ИмяРеквизита]);
					КонецЕсли;
				КонецЦикла;
				ЗначенияТаблицы3.Добавить(СтрокаМассиваЗначений);
			КонецЦикла;
			РезультатСоответствиеСДанными.Вставить("3", ЗначенияТаблицы3);
		КонецЕсли;
		Если ЭлектроннаяФорма_ПоляТаблицы4.Количество() > 0 Тогда
			ЗначенияТаблицы4 = Новый Массив;
			Для Каждого ЭлементЭлектроннаяФорма_Таблица4 Из ЭлектроннаяФорма_Таблица4 Цикл
				СтрокаМассиваЗначений = Новый Соответствие;
				Для Каждого ЭлементЭлектроннаяФорма_ПоляТаблицы4 Из ЭлектроннаяФорма_ПоляТаблицы4 Цикл
					Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_ПоляТаблицы4.ИмяРеквизита) Тогда
						ДобавитьЗначениеРеквизитаВСтрокуМассиваЗначений(СтрокаМассиваЗначений, ЭлементЭлектроннаяФорма_ПоляТаблицы4, ЭлементЭлектроннаяФорма_Таблица4[ЭлементЭлектроннаяФорма_ПоляТаблицы4.ИмяРеквизита]);
					КонецЕсли;
				КонецЦикла;
				ЗначенияТаблицы4.Добавить(СтрокаМассиваЗначений);
			КонецЦикла;
			РезультатСоответствиеСДанными.Вставить("4", ЗначенияТаблицы4);
		КонецЕсли;
		Если ЭлектроннаяФорма_ПоляТаблицы5.Количество() > 0 Тогда
			ЗначенияТаблицы5 = Новый Массив;
			Для Каждого ЭлементЭлектроннаяФорма_Таблица5 Из ЭлектроннаяФорма_Таблица5 Цикл
				СтрокаМассиваЗначений = Новый Соответствие;
				Для Каждого ЭлементЭлектроннаяФорма_ПоляТаблицы5 Из ЭлектроннаяФорма_ПоляТаблицы5 Цикл
					Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_ПоляТаблицы5.ИмяРеквизита) Тогда
						ДобавитьЗначениеРеквизитаВСтрокуМассиваЗначений(СтрокаМассиваЗначений, ЭлементЭлектроннаяФорма_ПоляТаблицы5, ЭлементЭлектроннаяФорма_Таблица5[ЭлементЭлектроннаяФорма_ПоляТаблицы5.ИмяРеквизита]);
					КонецЕсли;
				КонецЦикла;
				ЗначенияТаблицы5.Добавить(СтрокаМассиваЗначений);
			КонецЦикла;
			РезультатСоответствиеСДанными.Вставить("5", ЗначенияТаблицы5);
		КонецЕсли;
		
		Возврат Истина;
	ИначеЕсли ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФормаНалоговаяНакладная Тогда
		РезультатСоответствиеСДанными = Новый Соответствие;
		
		ЗначенияТаблицы0 = Новый Массив;
		СтрокаМассиваЗначений = Новый Соответствие;
		Для Каждого ЭлементЭлектроннаяФорма_Таблица0Строка0 Из ЭлектроннаяФорма_НалоговаяНакладнаяТаблица0Строка0 Цикл
			Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля) Тогда
				СтрокаМассиваЗначений.Вставить(ЭлементЭлектроннаяФорма_Таблица0Строка0.ИмяПоля, ЭлементЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементЭлектроннаяФорма_Таблица0Строка0 Из ЭлектроннаяФорма_НДСлужебныеДанныеТаблица0Строка0 Цикл
			Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля) Тогда
				СтрокаМассиваЗначений.Вставить(ЭлементЭлектроннаяФорма_Таблица0Строка0.ИмяПоля, ЭлементЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля);
			КонецЕсли;
		КонецЦикла;
		ЗначенияТаблицы0.Добавить(СтрокаМассиваЗначений);
		РезультатСоответствиеСДанными.Вставить("0", ЗначенияТаблицы0);
		//скEDI_ОбщегоНазначения.ПрочитатьДанныеМногостороннегоДокументаДляХранилищаРеквизитовЭлектронногоДокумента(СтрокаМассиваЗначений, ЭлектроннаяФорма_IsMultisided, ЭлектроннаяФорма_SidesCount, ЭлектроннаяФорма_Route, IsMultisided, Route, SidesCount);
		
		Если ЗначениеЗаполнено(ЭлектронныйДокумент_Контрагент) Тогда
			ДанныеКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагента(ЭлектронныйДокумент_Контрагент);
			ПараметрыСозданияДокументов.Вставить("ЕДРПОУКонтрагента", ДанныеКонтрагента.КодПоЕДРПОУ);
			ПараметрыСозданияДокументов.Вставить("ФилиалКонтрагента", ДанныеКонтрагента.КодФилиала);
			ПараметрыСозданияДокументов.Вставить("НаименованиеКонтрагента", ДанныеКонтрагента.Наименование);
		Иначе
			ПараметрыСозданияДокументов.Вставить("ЕДРПОУКонтрагента", "");
			ПараметрыСозданияДокументов.Вставить("ФилиалКонтрагента", "");
			ПараметрыСозданияДокументов.Вставить("НаименованиеКонтрагента", "");
		КонецЕсли;
		
		Если ЭлектроннаяФорма_ПоляТаблицы1.Количество() > 0 Тогда
			ЗначенияТаблицы1 = Новый Массив;
			Для Каждого ЭлементЭлектроннаяФорма_Таблица1 Из ЭлектроннаяФорма_НалоговаяНакладнаяТаблица1 Цикл
				СтрокаМассиваЗначений = Новый Соответствие;
				Для Каждого ЭлементЭлектроннаяФорма_ПоляТаблицы1 Из ЭлектроннаяФорма_ПоляТаблицы1 Цикл
					//Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_ПоляТаблицы1.ИмяРеквизита) Тогда
					ЗначениеПоля = ЭлементЭлектроннаяФорма_Таблица1[ЭлементЭлектроннаяФорма_ПоляТаблицы1.ИмяПоля];
					Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
						СтрокаМассиваЗначений.Вставить(ЭлементЭлектроннаяФорма_ПоляТаблицы1.ИмяПоля, ЗначениеПоля);
					КонецЕсли;
					//КонецЕсли;
				КонецЦикла;
				ЗначенияТаблицы1.Добавить(СтрокаМассиваЗначений);
			КонецЦикла;
			РезультатСоответствиеСДанными.Вставить("1", ЗначенияТаблицы1);
		КонецЕсли;
		
		Возврат Истина;
	ИначеЕсли ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФормаПриложение2КНалоговойНакладной Тогда
		РезультатСоответствиеСДанными = Новый Соответствие;
		
		ЗначенияТаблицы0 = Новый Массив;
		СтрокаМассиваЗначений = Новый Соответствие;
		Для Каждого ЭлементЭлектроннаяФорма_Таблица0Строка0 Из ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица0Строка0 Цикл
			Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля) Тогда
				СтрокаМассиваЗначений.Вставить(ЭлементЭлектроннаяФорма_Таблица0Строка0.ИмяПоля, ЭлементЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементЭлектроннаяФорма_Таблица0Строка0 Из ЭлектроннаяФорма_НДСлужебныеДанныеТаблица0Строка0 Цикл
			Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля) Тогда
				СтрокаМассиваЗначений.Вставить(ЭлементЭлектроннаяФорма_Таблица0Строка0.ИмяПоля, ЭлементЭлектроннаяФорма_Таблица0Строка0.ЗначениеПоля);
			КонецЕсли;
		КонецЦикла;
		ЗначенияТаблицы0.Добавить(СтрокаМассиваЗначений);
		РезультатСоответствиеСДанными.Вставить("0", ЗначенияТаблицы0);
		//скEDI_ОбщегоНазначения.ПрочитатьДанныеМногостороннегоДокументаДляХранилищаРеквизитовЭлектронногоДокумента(СтрокаМассиваЗначений, ЭлектроннаяФорма_IsMultisided, ЭлектроннаяФорма_SidesCount, ЭлектроннаяФорма_Route, IsMultisided, Route, SidesCount);
		
		Если ЗначениеЗаполнено(ЭлектронныйДокумент_Контрагент) Тогда
			ДанныеКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагента(ЭлектронныйДокумент_Контрагент);
			ПараметрыСозданияДокументов.Вставить("ЕДРПОУКонтрагента", ДанныеКонтрагента.КодПоЕДРПОУ);
			ПараметрыСозданияДокументов.Вставить("ФилиалКонтрагента", ДанныеКонтрагента.КодФилиала);
			ПараметрыСозданияДокументов.Вставить("НаименованиеКонтрагента", ДанныеКонтрагента.Наименование);
		Иначе
			ПараметрыСозданияДокументов.Вставить("ЕДРПОУКонтрагента", "");
			ПараметрыСозданияДокументов.Вставить("ФилиалКонтрагента", "");
			ПараметрыСозданияДокументов.Вставить("НаименованиеКонтрагента", "");
		КонецЕсли;
		
		Если ЭлектроннаяФорма_ПоляТаблицы1.Количество() > 0 Тогда
			ЗначенияТаблицы1 = Новый Массив;
			Для Каждого ЭлементЭлектроннаяФорма_Таблица1 Из ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица1 Цикл
				СтрокаМассиваЗначений = Новый Соответствие;
				Для Каждого ЭлементЭлектроннаяФорма_ПоляТаблицы1 Из ЭлектроннаяФорма_ПоляТаблицы1 Цикл
					//Если ЗначениеЗаполнено(ЭлементЭлектроннаяФорма_ПоляТаблицы1.ИмяРеквизита) Тогда
					ЗначениеПоля = ЭлементЭлектроннаяФорма_Таблица1[ЭлементЭлектроннаяФорма_ПоляТаблицы1.ИмяПоля];
					Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
						СтрокаМассиваЗначений.Вставить(ЭлементЭлектроннаяФорма_ПоляТаблицы1.ИмяПоля, ЗначениеПоля);
					КонецЕсли;
					//КонецЕсли;
				КонецЦикла;
				ЗначенияТаблицы1.Добавить(СтрокаМассиваЗначений);
			КонецЦикла;
			РезультатСоответствиеСДанными.Вставить("1", ЗначенияТаблицы1);
		КонецЕсли;
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСерверебезКонтекста
Функция ПолучитьПредставлениеЭлектронногоДокумента(ВидЭлектронногоДокументаНаименование, Номер, Дата, Состояние, ПоследняяОперация)
	Возврат ВидЭлектронногоДокументаНаименование
		+ " №"
		+ Номер
		+ " " + НСтр("ru = 'от'; uk = 'від'")
		+ Формат(Дата, "ДФ=dd.MM.yyyy")
		+ " "
		+ Состояние
		+ ?(ЗначениеЗаполнено(ПоследняяОперация), " (" + Формат(ПоследняяОперация, "ДФ=dd.MM.yyyy") + ")", "");
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораДляЭлектронныйДокумент(ТекДокумент1С, ТекОрганизацияEDI, ТекВидЭлектронногоДокумента, ДобавитьНовый, ЕстьПодтвержденныйДокумент)
	ЕстьПодтвержденныйДокумент = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныйДокумент.Ссылка КАК Ссылка,
	               |	скEDI_ЭлектронныйДокумент.Номер КАК Номер,
	               |	скEDI_ЭлектронныйДокумент.Дата КАК Дата,
	               |	скEDI_ЭлектронныйДокумент.Состояние КАК Состояние,
	               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование КАК ВидЭлектронногоДокументаНаименование,
	               |	скEDI_ЭлектронныйДокумент.ПоследняяОперация КАК ПоследняяОперация
	               |ИЗ
	               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	               |ГДЕ
	               |	скEDI_ЭлектронныйДокумент.Документ1С = &Документ1С
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПоследняяОперация УБЫВ";
	Запрос.УстановитьПараметр("Документ1С", Документ1С);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Элементы.ЭлектронныйДокумент.СписокВыбора.Очистить();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		ПредставлениеЭлектронногоДокумента = ПолучитьПредставлениеЭлектронногоДокумента(ВыборкаРезультатаЗапроса.ВидЭлектронногоДокументаНаименование, ВыборкаРезультатаЗапроса.Номер, ВыборкаРезультатаЗапроса.Дата, ВыборкаРезультатаЗапроса.Состояние, ВыборкаРезультатаЗапроса.ПоследняяОперация);
		Элементы.ЭлектронныйДокумент.СписокВыбора.Добавить(ВыборкаРезультатаЗапроса.Ссылка, ПредставлениеЭлектронногоДокумента);
		Если ВыборкаРезультатаЗапроса.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
			Если ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента = ТекВидЭлектронногоДокумента Тогда
				ЕстьПодтвержденныйДокумент = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	Если ДобавитьНовый Тогда
		Элементы.ЭлектронныйДокумент.СписокВыбора.Добавить(Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка(), "Новый...");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьАннулироватьЭлектронныйДокументСервере()
	ЕстьНастройкиСоглашениеОАнулированииДокумента = скEDI_ОбщегоНазначения.ПолучитьНаличиеВидаЭлектронногоСоглашениеОАнулированииДокумента(ОрганизацияEDI);
	Если ЕстьНастройкиСоглашениеОАнулированииДокумента Тогда
		Элементы.ФормаАннулироватьЭлектронныйДокумент.Видимость = Истина;
	Иначе
		Элементы.ФормаАннулироватьЭлектронныйДокумент.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаСервере(пДокумент1С, пОрганизацияПоУмолчанию = Неопределено, пВидЭлектронногоДокументаПоУмолчанию = Неопределено, пОснование = Неопределено)
	ДоступноОтменитьРедактированиеЭлектронногоДокумента = Ложь;
	ДоступноОтменитьЗаполнениеПоЭлектроннойФормеЭлектронногоДокумента = Ложь;
	МаршрутОтображатьПоДаннымФЭД = Ложь;
	МаршрутВозможноОтображатьПоДаннымФЭД = Ложь;
	МаршрутОтображатьПоДаннымХР = Ложь;
	МаршрутОтображатьПоДаннымЭДТЧ = Ложь;
	МаршрутПоДаннымФормы = Ложь;
	МаршрутПоДаннымФормыРучнаяУстановка = Ложь;
	МаршрутПоДаннымФормыРучнаяУстановкаИнт = Ложь;
	ЭлектронныйДокументОснование = Неопределено;
	Документ1С = пДокумент1С;
	
	ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
	ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе;
	Если ЗначениеЗаполнено(Документ1С) Тогда
		СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С");
	Иначе
		СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка");
		//СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
	КонецЕсли;
	СостояниеЭлектронногоДокументаРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПустаяСсылка");
	ЕстьФинальнаяКвитанцияДФС = Ложь;
	ЭтоОсновнойВариант = Ложь;
	ОшибкаШифрованияПриОтправке = Ложь;
	ИнформацияДляРегистрацииДокумента = Неопределено;	
	ХранилищеРеквизитовЭлектронногоДокумента = Неопределено;
	СоответствиеРеквизитовЭлектронногоДокумента = Неопределено;
	
	Если ТипЗнч(пОснование) = Тип("ПеречислениеСсылка.скEDI_ТипыЭлектронныхДокументов") Тогда
		ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
		ЭлектронныйДокумент_ТекЗнач = ЭлектронныйДокумент;
		
		пЕДРПОУВладельцаШаблона = "";
		пКодШаблона = "";
		пВерсияШаблона = "";
		
		Если ТипДокументаЗаполняетсяПоЭлектроннойФорме(пОснование, пЕДРПОУВладельцаШаблона, пКодШаблона, пВерсияШаблона) Тогда
			ТипДокумента = пОснование;
			ЖурналРабочегоСтола = скEDI_ОбщегоНазначения.ПолучитьЖурналРабочегоСтолаПоТипуЭлектронныхДокументов(ТипДокумента);
			ЕДРПОУВладельцаШаблона = пЕДРПОУВладельцаШаблона;
			ИмяШаблона = пКодШаблона;
			ВерсияШаблона = пВерсияШаблона;
			
			Элементы.ЭлектронныйДокумент.СписокВыбора.Очистить();
			ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
			ЭлектронныйДокумент_ТекЗнач = ЭлектронныйДокумент;
			
			Элементы.СоздатьНовыйЭлектронныйДокумент.Доступность = Ложь;//Не ЕстьПодтвержденныйДокумент;
			
			
			Элементы.ОрганизацияEDI.СписокВыбора.Очистить();
			Элементы.ОрганизацияEDI.РежимВыбораИзСписка = Ложь;
			Элементы.ОрганизацияEDI.ТолькоПросмотр = Истина;
			ОрганизацияEDI = пОрганизацияПоУмолчанию;
			ОрганизацияEDI_ТекЗнач = ОрганизацияEDI;
			ПолучитьДанныеПоНаличиюЛицензии();
			
			
			Элементы.ВидЭлектронногоДокумента.СписокВыбора.Очистить();
			лВидЭлектронногоДокумента = Неопределено;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	скEDI_ВидыЭлектронныхДокументов.Ссылка КАК Ссылка,
			               |	скEDI_ВидыЭлектронныхДокументов.Наименование КАК Наименование
			               |ИЗ
			               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
			               |ГДЕ
			               |	скEDI_ВидыЭлектронныхДокументов.Владелец = &Владелец
			               |	И скEDI_ВидыЭлектронныхДокументов.ТипДокумента = &ТипДокумента
			               |	И НЕ скEDI_ВидыЭлектронныхДокументов.ПометкаУдаления";
			Запрос.УстановитьПараметр("Владелец", ОрганизацияEDI);
			Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
			ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
			Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
				Если лВидЭлектронногоДокумента = Неопределено Тогда
					лВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.Ссылка;
				КонецЕсли;
				Если ВыборкаРезультатаЗапроса.Ссылка = пВидЭлектронногоДокументаПоУмолчанию Тогда
					лВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.Ссылка;
				КонецЕсли;
				Элементы.ВидЭлектронногоДокумента.СписокВыбора.Добавить(ВыборкаРезультатаЗапроса.Ссылка);
			КонецЦикла;
			Элементы.ВидЭлектронногоДокумента.РежимВыбораИзСписка = Истина;
			Элементы.ВидЭлектронногоДокумента.ТолькоПросмотр = Ложь;
			ВидЭлектронногоДокумента = лВидЭлектронногоДокумента;
			ВидЭлектронногоДокумента_ТекЗнач = ВидЭлектронногоДокумента;
			
			//ТипДокумента = ВидЭлектронногоДокумента.ТипДокумента;
			//ИнформацияДляРегистрацииДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьИнформациюДляРегистрацииДокумента(Документ1С);
			РегистрируетсяВЕРННПокупателем = Ложь;//ИнформацияДляРегистрацииДокумента.РегистрируетсяВЕРННПокупателем;
			
			РежимЕстьЭлектроннаяФорма = Истина;
			РежимЭлектроннаяФорма = Истина;
			РежимЭлектроннаяФормаТолькоПросмотр = Ложь;
			РежимЭлектроннаяФормаМожноРедактировать = Истина;
			ХранилищеРеквизитовЭлектронногоДокумента = ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента;
			
			Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента") Тогда
				ПерваяСтрокаТаблицы0 = Неопределено;
				СоответствиеРеквизитовЭлектронногоДокумента = ХранилищеРеквизитовЭлектронногоДокумента.Получить();
				Если ТипЗнч(СоответствиеРеквизитовЭлектронногоДокумента) = Тип("Соответствие") Тогда
					Таблица0 = СоответствиеРеквизитовЭлектронногоДокумента.Получить("0");
					Если ТипЗнч(Таблица0) = Тип("Массив") Тогда
						Если Таблица0.Количество() >= 1 Тогда
							ПерваяСтрокаТаблицы0 = Таблица0[0];
						КонецЕсли;
					КонецЕсли;
				Иначе
					СоответствиеРеквизитовЭлектронногоДокумента = Новый Соответствие;
				КонецЕсли;
				Если ТипЗнч(ПерваяСтрокаТаблицы0) = Тип("Соответствие") Тогда
				Иначе
					ПерваяСтрокаТаблицы0 = Новый Соответствие;
				КонецЕсли;
				
				ПерваяСтрокаТаблицы0.Вставить("DOCDATE", ТекущаяДата());
				ЭлектронныйДокумент_Номер = "";
				ЭлектронныйДокумент_НаименованиеДокумента = "Угода про анулювання документа";
				ПерваяСтрокаТаблицы0.Вставить("NAME_DOC", "Угода про анулювання документа");
				ПерваяСтрокаТаблицы0.Вставить("FIRM_EDRPOU", ОрганизацияEDI.Код);
				ПерваяСтрокаТаблицы0.Вставить("FIRM_DEPT", ОрганизацияEDI.Филиал);
				
				ПерваяСтрокаТаблицы0.Вставить("CDOCID", СвязанныйЭлектронныйДокумент.DocId);
				ПерваяСтрокаТаблицы0.Вставить("CFILENAME", СвязанныйЭлектронныйДокумент.ИмяФайла);
				//СвязанныйЭлектронныйДокумент.DOCNAME
				
				мМаршрут = Новый Массив;
				ЭлементМаршрута = Новый Соответствие;
				ЭлементМаршрута.Вставить("Edrpou", ОрганизацияEDI.Код);
				ЭлементМаршрута.Вставить("Dept", ОрганизацияEDI.Филиал);
				ЭлементМаршрута.Вставить("Ссылка", ОрганизацияEDI);
				//ДанныеПоОрганизаци = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияEDI.Организация1С);
				Если ЗначениеЗаполнено(ОрганизацияEDI.Организация1С) Тогда
					ДанныеПоОрганизаци = скEDI_НастройкиПодКонфигурацию.ПолучитьРекквизитыОгранизацииДляПФ(ОрганизацияEDI.Организация1С);
					ЭлементМаршрута.Вставить("Inn", ДанныеПоОрганизаци.ИНН);
					ЭлементМаршрута.Вставить("Name", ДанныеПоОрганизаци.ПолноеНаименование);
					
					ПерваяСтрокаТаблицы0.Вставить("FIRM_NAME", ДанныеПоОрганизаци.ПолноеНаименование);//?
					ПерваяСтрокаТаблицы0.Вставить("FIRM_RS", ДанныеПоОрганизаци.НомерСчета);
					ПерваяСтрокаТаблицы0.Вставить("FIRM_NMBANK", ДанныеПоОрганизаци.Банк);
					ПерваяСтрокаТаблицы0.Вставить("FIRM_ADR", ДанныеПоОрганизаци.ЮридическийАдрес);
					//ПерваяСтрокаТаблицы0.Вставить("CFIRM_POS", "");
					//ПерваяСтрокаТаблицы0.Вставить("CFIRM_FIO", "");
				Иначе
					ЭлементМаршрута.Вставить("Inn", "");
					ЭлементМаршрута.Вставить("Name", ОрганизацияEDI.Наименование);
					
					ПерваяСтрокаТаблицы0.Вставить("FIRM_NAME", ОрганизацияEDI.Наименование);//?
				КонецЕсли;
				мМаршрут.Добавить(ЭлементМаршрута);
				
				Контрагент1 = Неопределено;
				Если СвязанныйЭлектронныйДокумент.IsMultisided Тогда
					Котрагент1Добавлен = Ложь;
					//Котрагент2Добавлен = Ложь;
					Для Каждого ЭлементМаршрутаСвязанногоДокумента из СвязанныйЭлектронныйДокумент.Маршрут Цикл
						Если ЭлементМаршрутаСвязанногоДокумента.ЕДРПОУКонтрагента = ОрганизацияEDI.Код и ЭлементМаршрутаСвязанногоДокумента.ФилиалКонтрагента = ОрганизацияEDI.Филиал Тогда
							Продолжить;
						КонецЕсли;
						
						ЭлементМаршрута = Новый Соответствие;
						ЭлементМаршрута.Вставить("Edrpou", ЭлементМаршрутаСвязанногоДокумента.ЕДРПОУКонтрагента);
						ЭлементМаршрута.Вставить("Dept",  ЭлементМаршрутаСвязанногоДокумента.ФилиалКонтрагента);
						Если Не Котрагент1Добавлен Тогда
							ПерваяСтрокаТаблицы0.Вставить("SIDE_EDRPOU_K", ЭлементМаршрутаСвязанногоДокумента.ЕДРПОУКонтрагента);
							ПерваяСтрокаТаблицы0.Вставить("SIDE_DEPT_K", ЭлементМаршрутаСвязанногоДокумента.ФилиалКонтрагента);
							Контрагент1 = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлементМаршрутаСвязанногоДокумента.ЕДРПОУКонтрагента, ЭлементМаршрутаСвязанногоДокумента.ФилиалКонтрагента, Истина);
							
							ДанныеКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагента(Контрагент1);
							ПерваяСтрокаТаблицы0.Вставить("SIDE_SHORTNAME_K", ДанныеКонтрагента.Наименование);
							ПерваяСтрокаТаблицы0.Вставить("SIDE_CD_K", ДанныеКонтрагента.Наименование);
							
							Котрагент1Добавлен = Истина;
						//ИначеЕсли Не Котрагент2Добавлен Тогда
						//	
						//	Котрагент2Добавлен = Истина;
						Иначе
							ДанныеКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагентаПоЕДРПОУ(ЭлементМаршрутаСвязанногоДокумента.ЕДРПОУКонтрагента, ЭлементМаршрутаСвязанногоДокумента.ФилиалКонтрагента, Истина);
						КонецЕсли;
						ЭлементМаршрута.Вставить("Inn", ДанныеКонтрагента.ИНН);
						ЭлементМаршрута.Вставить("Name", ДанныеКонтрагента.Наименование);
						мМаршрут.Добавить(ЭлементМаршрута);
					КонецЦикла;
				Иначе
					Если СвязанныйЭлектронныйДокумент.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
						ПерваяСтрокаТаблицы0.Вставить("SIDE_EDRPOU_K", СвязанныйЭлектронныйДокумент.ЕДРПОУКонтрагента);
						ПерваяСтрокаТаблицы0.Вставить("SIDE_DEPT_K", СвязанныйЭлектронныйДокумент.ФилиалКонтрагента);
						Контрагент1 = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(СвязанныйЭлектронныйДокумент.ЕДРПОУКонтрагента, СвязанныйЭлектронныйДокумент.ФилиалКонтрагента, Истина);
						
						ЭлементМаршрута = Новый Соответствие;
						ЭлементМаршрута.Вставить("Edrpou", СвязанныйЭлектронныйДокумент.ЕДРПОУКонтрагента);
						ЭлементМаршрута.Вставить("Dept",  СвязанныйЭлектронныйДокумент.ФилиалКонтрагента);
					ИначеЕсли СвязанныйЭлектронныйДокумент.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
						ПерваяСтрокаТаблицы0.Вставить("SIDE_EDRPOU_K", СвязанныйЭлектронныйДокумент.ЕДРПОУКонтрагента);
						ПерваяСтрокаТаблицы0.Вставить("SIDE_DEPT_K", СвязанныйЭлектронныйДокумент.ФилиалКонтрагента);
						Контрагент1 = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(СвязанныйЭлектронныйДокумент.ЕДРПОУКонтрагента, СвязанныйЭлектронныйДокумент.ФилиалКонтрагента, Истина);
						
						ЭлементМаршрута = Новый Соответствие;
						ЭлементМаршрута.Вставить("Edrpou", СвязанныйЭлектронныйДокумент.ЕДРПОУКонтрагента);
						ЭлементМаршрута.Вставить("Dept",  СвязанныйЭлектронныйДокумент.ФилиалКонтрагента);
					КонецЕсли;
					ДанныеКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагента(Контрагент1);
					ПерваяСтрокаТаблицы0.Вставить("SIDE_SHORTNAME_K", ДанныеКонтрагента.Наименование);
					ПерваяСтрокаТаблицы0.Вставить("SIDE_CD_K", ДанныеКонтрагента.Наименование);
					
					ЭлементМаршрута.Вставить("Inn", ДанныеКонтрагента.ИНН);
					ЭлементМаршрута.Вставить("Name", ДанныеКонтрагента.Наименование);
					мМаршрут.Добавить(ЭлементМаршрута);
				КонецЕсли;
				Если ЗначениеЗаполнено(Контрагент1) Тогда
					ДанныеПоКонтрагенту = скEDI_НастройкиПодКонфигурацию.ПолучитьРекквизитыКонтрагентаДляПФ(Контрагент1);
					ПерваяСтрокаТаблицы0.Вставить("SIDE_SHORTNAME_K", ДанныеПоКонтрагенту.ПолноеНаименование);
					ПерваяСтрокаТаблицы0.Вставить("SIDE_CD_K", ДанныеПоКонтрагенту.ПолноеНаименование);
					ПерваяСтрокаТаблицы0.Вставить("SIDE_CDSHR_K", ДанныеПоКонтрагенту.НомерСчета);
					ПерваяСтрокаТаблицы0.Вставить("SIDE_BANK_K", ДанныеПоКонтрагенту.Банк);
					ПерваяСтрокаТаблицы0.Вставить("SIDE_CDADR_K", ДанныеПоКонтрагенту.ЮридическийАдрес);
				КонецЕсли;
				
				ХранилищеРеквизитовСвязанногоЭлектронногоДокумента = СвязанныйЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента;
				СоответствиеРеквизитовСвязанногоЭлектронногоДокумента = ХранилищеРеквизитовСвязанногоЭлектронногоДокумента.Получить();
				Если ТипЗнч(СоответствиеРеквизитовСвязанногоЭлектронногоДокумента) = Тип("Соответствие") Тогда
					Таблица0Связанного = СоответствиеРеквизитовСвязанногоЭлектронногоДокумента.Получить("0");
					Если ТипЗнч(Таблица0Связанного) = Тип("Массив") Тогда
						Если Таблица0Связанного.Количество() >= 1 Тогда
							ПерваяСтрокаТаблицы0Связанного = Таблица0Связанного[0];
							Если ТипЗнч(ПерваяСтрокаТаблицы0Связанного) = Тип("Соответствие") Тогда
								лНомерЭлектронногоДокумента = ПерваяСтрокаТаблицы0Связанного.Получить("NUM");
								Если лНомерЭлектронногоДокумента = Неопределено Тогда
									СвязанныйДокумент_Номер = "";
								Иначе
									СвязанныйДокумент_Номер = СокрЛП(лНомерЭлектронногоДокумента);
								КонецЕсли;
								ПерваяСтрокаТаблицы0.Вставить("CNUMDOC", СвязанныйДокумент_Номер);

								//ЭлектронныйДокумент_Дата = скEDI_СозданиеДокументовСервер.мПривестиКДате(Таблица0ПерваяСтрока.Получить("DOCDATE"), Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
								лДатаЭлектронногоДокумента = ПерваяСтрокаТаблицы0Связанного.Получить("DOCDATE");
								Если лДатаЭлектронногоДокумента = Неопределено Тогда
									СвязанныйДокумент_Дата = "";//'00010101';
								Иначе
									СвязанныйДокумент_Дата = лДатаЭлектронногоДокумента;
								КонецЕсли;
								ПерваяСтрокаТаблицы0.Вставить("CDATEDOC", СвязанныйДокумент_Дата);
								
								лНаименованиеЭлектронногоДокумента = ПерваяСтрокаТаблицы0Связанного.Получить("DOC_NAME");
								Если лНаименованиеЭлектронногоДокумента = Неопределено Тогда
									СвязанныйДокумент_НаименованиеДокумента = СвязанныйЭлектронныйДокумент.DOCNAME;//"";
								Иначе
									СвязанныйДокумент_НаименованиеДокумента = СокрЛП(лНаименованиеЭлектронногоДокумента);
								КонецЕсли;
								Если не ЗначениеЗаполнено(СвязанныйДокумент_НаименованиеДокумента) Тогда
									СвязанныйДокумент_НаименованиеДокумента = СвязанныйЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + СвязанныйЭлектронныйДокумент.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(СвязанныйЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
								КонецЕсли;
								
								ПерваяСтрокаТаблицы0.Вставить("CNAMEDOC", СвязанныйДокумент_НаименованиеДокумента);
								
								//ПерваяСтрокаТаблицы0.Вставить("SIDE_EDRPOU_K", СвязанныйЭлектронныйДокумент.ЕДРПОУКонтрагента);
								//ПерваяСтрокаТаблицы0.Вставить("SIDE_DEPT_K", СвязанныйЭлектронныйДокумент.ФилиалКонтрагента);
								Если СвязанныйЭлектронныйДокумент.IsMultisided Тогда
									Если СвязанныйЭлектронныйДокумент.Маршрут.Количество() >= 1 Тогда
										ЭлементМаршрутаСвязанногоДокумента = СвязанныйЭлектронныйДокумент.Маршрут.Получить(0);
										ПерваяСтрокаТаблицы0.Вставить("CEDRPOU_ORG", ЭлементМаршрутаСвязанногоДокумента.ЕДРПОУКонтрагента);
										ПерваяСтрокаТаблицы0.Вставить("CDEPT_ORG", ЭлементМаршрутаСвязанногоДокумента.ФилиалКонтрагента);
										ПерваяСтрокаТаблицы0.Вставить("CNAME_ORG", ЭлементМаршрутаСвязанногоДокумента.НаименованиеКонтрагента);
									КонецЕсли;
									Если СвязанныйЭлектронныйДокумент.Маршрут.Количество() >= 2 Тогда
										ЭлементМаршрутаСвязанногоДокумента = СвязанныйЭлектронныйДокумент.Маршрут.Получить(1);
										ПерваяСтрокаТаблицы0.Вставить("CSIDE_EDRPOU_ORG", ЭлементМаршрутаСвязанногоДокумента.ЕДРПОУКонтрагента);
										ПерваяСтрокаТаблицы0.Вставить("CSIDE_DEPT_ORG", ЭлементМаршрутаСвязанногоДокумента.ФилиалКонтрагента);
										ПерваяСтрокаТаблицы0.Вставить("CSIDE_NAME_ORG", ЭлементМаршрутаСвязанногоДокумента.НаименованиеКонтрагента);
									КонецЕсли;
								Иначе
									лFIRM_EDRPOU = ПерваяСтрокаТаблицы0Связанного.Получить("FIRM_EDRPOU");
									Если лFIRM_EDRPOU = Неопределено Тогда
										СвязанныйДокумент_ЕДРПОУОрганизации = "";
									Иначе
										СвязанныйДокумент_ЕДРПОУОрганизации = лFIRM_EDRPOU;
									КонецЕсли;
									ПерваяСтрокаТаблицы0.Вставить("CEDRPOU_ORG", СвязанныйДокумент_ЕДРПОУОрганизации);
									
									лFIRM_DEPT = ПерваяСтрокаТаблицы0Связанного.Получить("FIRM_DEPT");
									Если лFIRM_DEPT = Неопределено Тогда
										СвязанныйДокумент_ФилиалОрганизации = "";
									Иначе
										СвязанныйДокумент_ФилиалОрганизации = лFIRM_DEPT;
									КонецЕсли;
									ПерваяСтрокаТаблицы0.Вставить("CDEPT_ORG", СвязанныйДокумент_ФилиалОрганизации);
									
									лFIRM_NAME = ПерваяСтрокаТаблицы0Связанного.Получить("FIRM_NAME");
									Если лFIRM_NAME = Неопределено Тогда
										СвязанныйДокумент_НаименованиеОрганизации = "";
									Иначе
										СвязанныйДокумент_НаименованиеОрганизации = лFIRM_NAME;
									КонецЕсли;
									ПерваяСтрокаТаблицы0.Вставить("CNAME_ORG", СвязанныйДокумент_НаименованиеОрганизации);
									
									
									лSIDE_EDRPOU_K = ПерваяСтрокаТаблицы0Связанного.Получить("SIDE_EDRPOU_K");
									Если лSIDE_EDRPOU_K = Неопределено Тогда
										СвязанныйДокумент_ЕДРПОУКонтрагента = "";
									Иначе
										СвязанныйДокумент_ЕДРПОУКонтрагента = лSIDE_EDRPOU_K;
									КонецЕсли;
									ПерваяСтрокаТаблицы0.Вставить("CSIDE_EDRPOU_ORG", СвязанныйДокумент_ЕДРПОУКонтрагента);
									
									лSIDE_DEPT_K = ПерваяСтрокаТаблицы0Связанного.Получить("SIDE_DEPT_K");
									Если лSIDE_DEPT_K = Неопределено Тогда
										СвязанныйДокумент_ФилиалКонтрагента = "";
									Иначе
										СвязанныйДокумент_ФилиалКонтрагента = лSIDE_DEPT_K;
									КонецЕсли;
									ПерваяСтрокаТаблицы0.Вставить("CSIDE_DEPT_ORG", СвязанныйДокумент_ФилиалКонтрагента);
									
									лSIDE_SHORTNAME_K = ПерваяСтрокаТаблицы0Связанного.Получить("SIDE_SHORTNAME_K");
									Если лSIDE_SHORTNAME_K = Неопределено Тогда
										лSIDE_CD_K = ПерваяСтрокаТаблицы0Связанного.Получить("SIDE_CD_K");
										Если лSIDE_CD_K = Неопределено Тогда
											СвязанныйДокумент_НаименованиеКонтрагента = "";
										Иначе
											СвязанныйДокумент_НаименованиеКонтрагента = лSIDE_CD_K;
										КонецЕсли;
									Иначе
										СвязанныйДокумент_НаименованиеКонтрагента = лSIDE_SHORTNAME_K;
									КонецЕсли;
									ПерваяСтрокаТаблицы0.Вставить("CSIDE_NAME_ORG", СвязанныйДокумент_НаименованиеКонтрагента);
								КонецЕсли;
								
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Таблица0 = Новый Массив;
				Таблица0.Добавить(ПерваяСтрокаТаблицы0);
				СоответствиеРеквизитовЭлектронногоДокумента.Вставить("0", Таблица0);
				СоответствиеРеквизитовЭлектронногоДокумента.Вставить("РеквизитиПоДаннымЭлектроннойФормы", Истина);
				СоответствиеРеквизитовЭлектронногоДокумента.Вставить("МаршрутПоДаннымЭлектроннойФормы", Истина);
				СоответствиеРеквизитовЭлектронногоДокумента.Вставить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка", Ложь);
				СоответствиеРеквизитовЭлектронногоДокумента.Вставить("Маршрут", мМаршрут);
				ХранилищеРеквизитовЭлектронногоДокумента = Новый ХранилищеЗначения(СоответствиеРеквизитовЭлектронногоДокумента);
				
				МаршрутОтображатьПоДаннымХР = Истина;
				МаршрутПоДаннымФормы = Истина;
				МаршрутПоДаннымФормыРучнаяУстановка = Ложь;
			Иначе
				МаршрутОтображатьПоДаннымФЭД = Истина;
				МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
			КонецЕсли;
		Иначе
			МаршрутОтображатьПоДаннымФЭД = Истина;
			МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
		КонецЕсли;
		ЗаполнитьВложенияПоЭлектронномуДокументу_НаСервере(Неопределено, Документ1С);
	ИначеЕсли ТипЗнч(пОснование) = Тип("ДокументСсылка.скEDI_ЭлектронныйДокумент") Тогда
		ЭлектронныйДокументОснование = пОснование;
		ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
		ЭлектронныйДокумент_ТекЗнач = ЭлектронныйДокумент;
		
		ВхИсх = пОснование.ВхИсх;//Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий; //?
		ЕДРПОУВладельцаШаблона = ЭлектронныйДокументОснование.ЕДРПОУВладельцаШаблона;
		ИмяШаблона = ЭлектронныйДокументОснование.ИмяШаблона;
		ВерсияШаблона = ЭлектронныйДокументОснование.ВерсияШаблона;
		
		Элементы.ЭлектронныйДокумент.СписокВыбора.Очистить();
		ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
		ЭлектронныйДокумент_ТекЗнач = ЭлектронныйДокумент;
		
		Элементы.СоздатьНовыйЭлектронныйДокумент.Доступность = Ложь;//Не ЕстьПодтвержденныйДокумент;
		
		
		Элементы.ОрганизацияEDI.СписокВыбора.Очистить();
		Элементы.ОрганизацияEDI.РежимВыбораИзСписка = Ложь;
		Элементы.ОрганизацияEDI.ТолькоПросмотр = Истина;
		ОрганизацияEDI = ЭлектронныйДокументОснование.Организация;
		ОрганизацияEDI_ТекЗнач = ОрганизацияEDI;
		ПолучитьДанныеПоНаличиюЛицензии();
		
		
		Элементы.ВидЭлектронногоДокумента.СписокВыбора.Очистить();
		Элементы.ВидЭлектронногоДокумента.РежимВыбораИзСписка = Ложь;
		Элементы.ВидЭлектронногоДокумента.ТолькоПросмотр = Истина;
		ВидЭлектронногоДокумента = ЭлектронныйДокументОснование.ВидЭлектронногоДокумента;
		ВидЭлектронногоДокумента_ТекЗнач = ВидЭлектронногоДокумента;
		
		ТипДокумента = ВидЭлектронногоДокумента.ТипДокумента;
		ЖурналРабочегоСтола = скEDI_ОбщегоНазначения.ПолучитьЖурналРабочегоСтолаПоТипуЭлектронныхДокументов(ТипДокумента);
		//ИнформацияДляРегистрацииДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьИнформациюДляРегистрацииДокумента(Документ1С);
		РегистрируетсяВЕРННПокупателем = ЭлектронныйДокументОснование.РегистрируетсяВЕРННПокупателем;
		
		РежимЕстьЭлектроннаяФорма = Истина;
		РежимЭлектроннаяФорма = Истина;
		РежимЭлектроннаяФормаТолькоПросмотр = Ложь;
		РежимЭлектроннаяФормаМожноРедактировать = Истина;
		ХранилищеРеквизитовЭлектронногоДокумента = ЭлектронныйДокументОснование.ХранилищеРеквизитовЭлектронногоДокумента;
		СоответствиеРеквизитовЭлектронногоДокумента = ХранилищеРеквизитовЭлектронногоДокумента.Получить();
		ЗаполнитьВложенияПоЭлектронномуДокументу_НаСервере(ЭлектронныйДокументОснование, Документ1С, Истина);
		
		ДоступноОтменитьРедактированиеЭлектронногоДокумента = Истина;
		МаршрутОтображатьПоДаннымФЭД = Истина;
		МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
	ИначеЕсли ЗначениеЗаполнено(Документ1С) Тогда
		Элементы.ОрганизацияEDI.СписокВыбора.Очистить();
		лОрганизация = Неопределено;
		лМассивОрганизацийEDI = скEDI_НастройкиПодКонфигурацию.ПолучитьМассивОрганизацийПоДокументу1С(Документ1С);
		Для Каждого ЭлементМассиваОрганизацийEDI Из лМассивОрганизацийEDI Цикл
			Если лОрганизация = Неопределено Тогда
				лОрганизация = ЭлементМассиваОрганизацийEDI;
			КонецЕсли;
			Если ЭлементМассиваОрганизацийEDI = пОрганизацияПоУмолчанию Тогда
				лОрганизация = ЭлементМассиваОрганизацийEDI;
			КонецЕсли;
			Элементы.ОрганизацияEDI.СписокВыбора.Добавить(ЭлементМассиваОрганизацийEDI);
		КонецЦикла;
		Элементы.ОрганизацияEDI.РежимВыбораИзСписка = Истина;
		Элементы.ОрганизацияEDI.ТолькоПросмотр = Ложь;
		ОрганизацияEDI = лОрганизация;
		ОрганизацияEDI_ТекЗнач = ОрганизацияEDI;
		ПолучитьДанныеПоНаличиюЛицензии();
		
		ЕстьПодтвержденныйДокумент = Ложь;
		ЗаполнитьСписокВыбораДляЭлектронныйДокумент(Документ1С, ОрганизацияEDI, пВидЭлектронногоДокументаПоУмолчанию, Истина, ЕстьПодтвержденныйДокумент);
		Элементы.СоздатьНовыйЭлектронныйДокумент.Доступность = Ложь;//Не ЕстьПодтвержденныйДокумент;
		ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
		ЭлектронныйДокумент_ТекЗнач = ЭлектронныйДокумент;
		
		Элементы.СоздатьНовыйЭлектронныйДокумент.Доступность = Ложь;//Не ЕстьПодтвержденныйДокумент;
		
		ЕДРПОУВладельцаШаблона = "";
		ИмяШаблона = "";
		ВерсияШаблона = "";
		
		Элементы.ВидЭлектронногоДокумента.СписокВыбора.Очистить();
		лВидЭлектронногоДокумента = Неопределено;
		лМассивВидовЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьМассивВидовИсходящихЭлектронныхДокументовДоступныхДляДокумента1С(Документ1С, ОрганизацияEDI);
		Для Каждого ЭлементМассиваВидовЭлектронныхДокументов Из лМассивВидовЭлектронныхДокументов Цикл
			Если лВидЭлектронногоДокумента = Неопределено Тогда
				лВидЭлектронногоДокумента = ЭлементМассиваВидовЭлектронныхДокументов;
			КонецЕсли;
			Если ЭлементМассиваВидовЭлектронныхДокументов = пВидЭлектронногоДокументаПоУмолчанию Тогда
				лВидЭлектронногоДокумента = ЭлементМассиваВидовЭлектронныхДокументов;
			КонецЕсли;
			Элементы.ВидЭлектронногоДокумента.СписокВыбора.Добавить(ЭлементМассиваВидовЭлектронныхДокументов);
		КонецЦикла;
		Элементы.ВидЭлектронногоДокумента.РежимВыбораИзСписка = Истина;
		Элементы.ВидЭлектронногоДокумента.ТолькоПросмотр = Ложь;
		ВидЭлектронногоДокумента = лВидЭлектронногоДокумента;
		ВидЭлектронногоДокумента_ТекЗнач = ВидЭлектронногоДокумента;
		ТипДокумента = ВидЭлектронногоДокумента.ТипДокумента;
		ЖурналРабочегоСтола = скEDI_ОбщегоНазначения.ПолучитьЖурналРабочегоСтолаПоТипуЭлектронныхДокументов(ТипДокумента);
		ИнформацияДляРегистрацииДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьИнформациюДляРегистрацииДокумента(Документ1С);
		РегистрируетсяВЕРННПокупателем = ИнформацияДляРегистрацииДокумента.РегистрируетсяВЕРННПокупателем;
		
		РежимЕстьЭлектроннаяФорма = Ложь;
		РежимЭлектроннаяФорма = Ложь;
		РежимЭлектроннаяФормаТолькоПросмотр = Истина;
		РежимЭлектроннаяФормаМожноРедактировать = Истина;
		ХранилищеРеквизитовЭлектронногоДокумента = ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента;
		СоответствиеРеквизитовЭлектронногоДокумента = ХранилищеРеквизитовЭлектронногоДокумента.Получить();
		ЗаполнитьВложенияПоЭлектронномуДокументу_НаСервере(Неопределено, Документ1С);
		МаршрутОтображатьПоДаннымФЭД = Истина;
		МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
	КонецЕсли;
	
//	УстановитьДанныеЭлектроннойФормыИзХранилищаРеквизитовЭлектронногоДокумента_НаСервере(ХранилищеРеквизитовЭлектронногоДокумента);
	УстановитьДанныеЭлектроннойФормыИзСоответствияСДаннымиTablesЭлектронногоДокумента_НаСервере(СоответствиеРеквизитовЭлектронногоДокумента);
	ЗаполнитьМаршрутПоЭлектронномуДокументу_НаСервере(Неопределено, СоответствиеРеквизитовЭлектронногоДокумента, Неопределено);
	ЗаполнитьНастройкиОтправкиСсылкиНаДокумент_НаСервере();
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
	или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
	или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
		Если ВидЭлектронногоДокумента.ОтправлятьКомментарий Тогда
			Если ЗначениеЗаполнено(ИнформацияДляРегистрацииДокумента) Тогда
				ПримечаниеЭлектронногоДокумента = ИнформацияДляРегистрацииДокумента.Комментарий;
			Иначе
				ПримечаниеЭлектронногоДокумента = "";
			КонецЕсли;
		Иначе
			ПримечаниеЭлектронногоДокумента = "";
		КонецЕсли;
		
		Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Ложь;
		Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Ложь;
	Иначе
		ПримечаниеЭлектронногоДокумента = "";
		Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Истина;
		Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ОбновитьВидимостьАннулироватьЭлектронныйДокументСервере();
	МаршрутПоДаннымФормыРучнаяУстановкаИнт = МаршрутПоДаннымФормыРучнаяУстановка;
	УстановитьВидимостьКнопок_НаСервере();
	
	СобытияПоЭлектронномуДокументу.Очистить();
	ПодписантыСоСтороныКонтагента.Параметры.УстановитьЗначениеПараметра("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ПодписантыСНашейСтороны.Параметры.УстановитьЗначениеПараметра("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Модифицированность = Ложь;
	Элементы.ФормаСохранитьИзменения.Доступность = Истина;
КонецПроцедуры

&НаСервере
Процедура УстановитьРежим_ЕстьЭлектронныйДокументИНетДокумента1С_НаСервере(пЭлектронныйДокумент)
	ДоступноОтменитьРедактированиеЭлектронногоДокумента = Ложь;
	ДоступноОтменитьЗаполнениеПоЭлектроннойФормеЭлектронногоДокумента = Ложь;
	МаршрутОтображатьПоДаннымФЭД = Ложь;
	МаршрутВозможноОтображатьПоДаннымФЭД = Ложь;
	МаршрутОтображатьПоДаннымХР = Ложь;
	МаршрутОтображатьПоДаннымЭДТЧ = Ложь;
	МаршрутПоДаннымФормы = Ложь;
	МаршрутПоДаннымФормыРучнаяУстановка = Ложь;
	МаршрутПоДаннымФормыРучнаяУстановкаИнт = Ложь;
 	ЭлектронныйДокументОснование = Неопределено;
	ЭлектронныйДокумент = пЭлектронныйДокумент;
	ЭлектронныйДокумент_ТекЗнач = ЭлектронныйДокумент;
	Документ1С = Неопределено;
	
	ВхИсх = ЭлектронныйДокумент.ВхИсх;
	ГдеСоздан = ЭлектронныйДокумент.ГдеСоздан;
	СостояниеЭлектронногоДокумента = ЭлектронныйДокумент.Состояние;
	
	СостояниеЭлектронногоДокументаРегистрацияВДФС = ЭлектронныйДокумент.СостояниеРегистрацияВДФС;
	ЕстьФинальнаяКвитанцияДФС = ЭлектронныйДокумент.ЕстьФинальнаяКвитанцияДФС;
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент) Тогда
		Если ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент = ЭлектронныйДокумент Тогда
			ЭтоОсновнойВариант = Истина;
		Иначе
			ЭтоОсновнойВариант = Ложь;
		КонецЕсли;
	Иначе
		ЭтоОсновнойВариант = Истина;
	КонецЕсли;
	ОшибкаШифрованияПриОтправке = ЭлектронныйДокумент.ОшибкаШифрованияПриОтправке;
	
	Элементы.ЭлектронныйДокумент.СписокВыбора.Очистить();
	Элементы.ЭлектронныйДокумент.СписокВыбора.Добавить(ЭлектронныйДокумент);
	Элементы.ВидЭлектронногоДокумента.РежимВыбораИзСписка = Ложь;
	Элементы.ВидЭлектронногоДокумента.ТолькоПросмотр = Истина;
	ЭлектронныйДокумент = пЭлектронныйДокумент;
	ЭлектронныйДокумент_ТекЗнач = ЭлектронныйДокумент;
	
	Элементы.СоздатьНовыйЭлектронныйДокумент.Доступность = Ложь;
	
	Элементы.ОрганизацияEDI.СписокВыбора.Очистить();
	Элементы.ОрганизацияEDI.РежимВыбораИзСписка = Ложь;
	Элементы.ОрганизацияEDI.ТолькоПросмотр = Истина;
	ОрганизацияEDI = ЭлектронныйДокумент.Организация;
	ОрганизацияEDI_ТекЗнач = ОрганизацияEDI;
	ПолучитьДанныеПоНаличиюЛицензии();
	
	ЕДРПОУВладельцаШаблона = ЭлектронныйДокумент.ЕДРПОУВладельцаШаблона;
	ИмяШаблона = ЭлектронныйДокумент.ИмяШаблона;
	ВерсияШаблона = ЭлектронныйДокумент.ВерсияШаблона;
	
	Элементы.ВидЭлектронногоДокумента.СписокВыбора.Очистить();
	Элементы.ВидЭлектронногоДокумента.РежимВыбораИзСписка = Ложь;
	Элементы.ВидЭлектронногоДокумента.ТолькоПросмотр = Истина;
	ВидЭлектронногоДокумента = ЭлектронныйДокумент.ВидЭлектронногоДокумента;
	ВидЭлектронногоДокумента_ТекЗнач = ВидЭлектронногоДокумента;
	ТипДокумента = ВидЭлектронногоДокумента.ТипДокумента;
	ЖурналРабочегоСтола = скEDI_ОбщегоНазначения.ПолучитьЖурналРабочегоСтолаПоТипуЭлектронныхДокументов(ТипДокумента);
	РегистрируетсяВЕРННПокупателем = ЭлектронныйДокумент.РегистрируетсяВЕРННПокупателем;
	
	лСоответствиеСДанными = ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента.Получить();
	Если ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
		ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы = Ложь;
		ЗаполнятьМаршрутПоДаннымЭлектроннойФормы = Ложь;
		ЗаполнятьМаршрутПоДаннымЭлектроннойФормыРучнаяУстановка = Ложь;
		Если ЭлектронныйДокумент.ПоДаннымХранилищаРеквизитов Тогда
			//лСоответствиеСДанными = ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента.Получить();
			Если ТипЗнч(лСоответствиеСДанными) = Тип("Соответствие") Тогда
				ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы = лСоответствиеСДанными.Получить("РеквизитиПоДаннымЭлектроннойФормы");
				Если ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы <> Ложь Тогда
					ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы = Истина;
				КонецЕсли;
							
				ЗаполнятьМаршрутПоДаннымЭлектроннойФормы = лСоответствиеСДанными.Получить("МаршрутПоДаннымЭлектроннойФормы") = Истина;
				ЗаполнятьМаршрутПоДаннымЭлектроннойФормыРучнаяУстановка = лСоответствиеСДанными.Получить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка") = Истина;
			КонецЕсли;
		КонецЕсли;
		МаршрутПоДаннымФормыРучнаяУстановка = ЗаполнятьМаршрутПоДаннымЭлектроннойФормыРучнаяУстановка;
		
		Если ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы Тогда
			РежимЕстьЭлектроннаяФорма = Истина;
			Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
			
				Если ЗаполнятьМаршрутПоДаннымЭлектроннойФормы Тогда
					МаршрутОтображатьПоДаннымХР = Истина;
					МаршрутПоДаннымФормы = Истина;
				Иначе
					МаршрутОтображатьПоДаннымФЭД = Истина;
					МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
				КонецЕсли;
				РежимЭлектроннаяФорма = Истина;
				РежимЭлектроннаяФормаТолькоПросмотр = Ложь;
				РежимЭлектроннаяФормаМожноРедактировать = Истина;
				Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента") Тогда
					
				Иначе
					МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
				КонецЕсли;
			Иначе
				РежимЭлектроннаяФорма = Ложь;
				РежимЭлектроннаяФормаТолькоПросмотр = Истина;
				РежимЭлектроннаяФормаМожноРедактировать = Ложь;
				МаршрутОтображатьПоДаннымЭДТЧ = Истина;
			КонецЕсли;
		Иначе
			РежимЕстьЭлектроннаяФорма = Ложь;
			РежимЭлектроннаяФорма = Ложь;
			РежимЭлектроннаяФормаТолькоПросмотр = Истина;
			
			Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
				
				РежимЭлектроннаяФормаМожноРедактировать = Истина;
				Если ЗаполнятьМаршрутПоДаннымЭлектроннойФормы Тогда
					МаршрутОтображатьПоДаннымХР = Истина;
					МаршрутПоДаннымФормы = Истина;
				Иначе
					МаршрутОтображатьПоДаннымФЭД = Истина;
					МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
				КонецЕсли;
			Иначе
				РежимЭлектроннаяФормаМожноРедактировать = Ложь;
				МаршрутОтображатьПоДаннымЭДТЧ = Истина;
			КонецЕсли;
		КонецЕсли;
		//РежимЭлектроннаяФорма = Ложь;
	Иначе
		РежимЕстьЭлектроннаяФорма = Ложь;
		РежимЭлектроннаяФорма = Ложь;
		РежимЭлектроннаяФормаТолькоПросмотр = Истина;
		РежимЭлектроннаяФормаМожноРедактировать = Ложь;
		МаршрутОтображатьПоДаннымЭДТЧ = Истина;
	КонецЕсли;
	
	ПримечаниеЭлектронногоДокумента = ЭлектронныйДокумент.NOTATION;
	//Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Истина;
	//Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Истина;
	Если ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
		Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
			или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
			или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
		
			Элементы.ФормаСохранитьИзменения.Доступность = Истина;
			Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Ложь;
			Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.ФормаСохранитьИзменения.Доступность = Ложь;
			Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Истина;
			Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		Элементы.ФормаСохранитьИзменения.Доступность = Ложь;
		Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Истина;
		Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	//УстановитьДанныеЭлектроннойФормыИзХранилищаРеквизитовЭлектронногоДокумента_НаСервере(пЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента);
	УстановитьДанныеЭлектроннойФормыИзСоответствияСДаннымиTablesЭлектронногоДокумента_НаСервере(лСоответствиеСДанными);
	ЗаполнитьМаршрутПоЭлектронномуДокументу_НаСервере(пЭлектронныйДокумент, лСоответствиеСДанными, Неопределено);
	ЗаполнитьВложенияПоЭлектронномуДокументу_НаСервере(пЭлектронныйДокумент, Документ1С);
	ЗаполнитьНастройкиОтправкиСсылкиНаДокумент_НаСервере();
	
	ОбновитьВидимостьАннулироватьЭлектронныйДокументСервере();
	МаршрутПоДаннымФормыРучнаяУстановкаИнт = МаршрутПоДаннымФормыРучнаяУстановка;
	УстановитьВидимостьКнопок_НаСервере();
	
	ЗаполнитьТаблицуКвитанцийПоЭлектронномуДокументу();
	ПодписантыСоСтороныКонтагента.Параметры.УстановитьЗначениеПараметра("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ПодписантыСНашейСтороны.Параметры.УстановитьЗначениеПараметра("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаСервере(пЭлектронныйДокумент)
	Если не ЗначениеЗаполнено(пЭлектронныйДокумент.Документ1С) Тогда
		УстановитьРежим_ЕстьЭлектронныйДокументИНетДокумента1С_НаСервере(пЭлектронныйДокумент);
		Возврат;
	КонецЕсли;
	ДоступноОтменитьРедактированиеЭлектронногоДокумента = Ложь;
	ДоступноОтменитьЗаполнениеПоЭлектроннойФормеЭлектронногоДокумента = Ложь;
	МаршрутОтображатьПоДаннымФЭД = Ложь;
	МаршрутВозможноОтображатьПоДаннымФЭД = Ложь;
	МаршрутОтображатьПоДаннымХР = Ложь;
	МаршрутОтображатьПоДаннымЭДТЧ = Ложь;
	МаршрутПоДаннымФормы = Ложь;
	МаршрутПоДаннымФормыРучнаяУстановка = Ложь;
	МаршрутПоДаннымФормыРучнаяУстановкаИнт = Ложь;
	ЭлектронныйДокументОснование = Неопределено;
	ЭлектронныйДокумент = пЭлектронныйДокумент;
	ЭлектронныйДокумент_ТекЗнач = ЭлектронныйДокумент;
	Документ1С = ЭлектронныйДокумент.Документ1С;
	
	ВхИсх = ЭлектронныйДокумент.ВхИсх;
	ГдеСоздан = ЭлектронныйДокумент.ГдеСоздан;
	СостояниеЭлектронногоДокумента = ЭлектронныйДокумент.Состояние;
	//РежимЭлектроннаяФорма = Ложь;
	//РежимЭлектроннаяФормаТолькоПросмотр = Истина;
	//РежимЭлектроннаяФормаМожноРедактировать = Ложь;
	СостояниеЭлектронногоДокументаРегистрацияВДФС = ЭлектронныйДокумент.СостояниеРегистрацияВДФС;
	ЕстьФинальнаяКвитанцияДФС = ЭлектронныйДокумент.ЕстьФинальнаяКвитанцияДФС;
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент) Тогда
		Если ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент = ЭлектронныйДокумент Тогда
			ЭтоОсновнойВариант = Истина;
		Иначе
			ЭтоОсновнойВариант = Ложь;
		КонецЕсли;
	Иначе
		ЭтоОсновнойВариант = Истина;
	КонецЕсли;
	ОшибкаШифрованияПриОтправке = ЭлектронныйДокумент.ОшибкаШифрованияПриОтправке;
	
	Элементы.ВидЭлектронногоДокумента.СписокВыбора.Очистить();
	Элементы.ВидЭлектронногоДокумента.РежимВыбораИзСписка = Ложь;
	Элементы.ВидЭлектронногоДокумента.ТолькоПросмотр = Истина;
	ВидЭлектронногоДокумента = ЭлектронныйДокумент.ВидЭлектронногоДокумента;
	ВидЭлектронногоДокумента_ТекЗнач = ВидЭлектронногоДокумента;
	ТипДокумента = ВидЭлектронногоДокумента.ТипДокумента;
	ЖурналРабочегоСтола = скEDI_ОбщегоНазначения.ПолучитьЖурналРабочегоСтолаПоТипуЭлектронныхДокументов(ТипДокумента);
	
	Элементы.ОрганизацияEDI.СписокВыбора.Очистить();
	Элементы.ОрганизацияEDI.РежимВыбораИзСписка = Ложь;
	Элементы.ОрганизацияEDI.ТолькоПросмотр = Истина;
	ОрганизацияEDI = ЭлектронныйДокумент.Организация;
	ОрганизацияEDI_ТекЗнач = ОрганизацияEDI;
	ПолучитьДанныеПоНаличиюЛицензии();
	
	ЕстьПодтвержденныйДокумент = Ложь;
	ЗаполнитьСписокВыбораДляЭлектронныйДокумент(Документ1С, ОрганизацияEDI, ВидЭлектронногоДокумента, Истина, ЕстьПодтвержденныйДокумент);
	ЭлектронныйДокумент = пЭлектронныйДокумент;
	ЭлектронныйДокумент_ТекЗнач = ЭлектронныйДокумент;
	
	Элементы.СоздатьНовыйЭлектронныйДокумент.Доступность = Истина;//Не ЕстьПодтвержденныйДокумент;
	
	ЕДРПОУВладельцаШаблона = ЭлектронныйДокумент.ЕДРПОУВладельцаШаблона;
	ИмяШаблона = ЭлектронныйДокумент.ИмяШаблона;
	ВерсияШаблона = ЭлектронныйДокумент.ВерсияШаблона;
	
	//ИнформацияДляРегистрацииДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьИнформациюДляРегистрацииДокумента(Документ1С);
	РегистрируетсяВЕРННПокупателем = ЭлектронныйДокумент.РегистрируетсяВЕРННПокупателем;//ИнформацияДляРегистрацииДокумента.РегистрируетсяВЕРННПокупателем;
	
	лСоответствиеСДанными = ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента.Получить();
	Если ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
		ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы = Ложь;
		ЗаполнятьМаршрутПоДаннымЭлектроннойФормы = Ложь;
		ЗаполнятьМаршрутПоДаннымЭлектроннойФормыРучнаяУстановка = Ложь;
		Если ЭлектронныйДокумент.ПоДаннымХранилищаРеквизитов Тогда
			//лСоответствиеСДанными = ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента.Получить();
			Если ТипЗнч(лСоответствиеСДанными) = Тип("Соответствие") Тогда
				ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы = лСоответствиеСДанными.Получить("РеквизитиПоДаннымЭлектроннойФормы");
				Если ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы <> Ложь Тогда
					ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы = Истина;
				КонецЕсли;
							
				ЗаполнятьМаршрутПоДаннымЭлектроннойФормы = лСоответствиеСДанными.Получить("МаршрутПоДаннымЭлектроннойФормы") = Истина;
				ЗаполнятьМаршрутПоДаннымЭлектроннойФормыРучнаяУстановка = лСоответствиеСДанными.Получить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка") = Истина;
			КонецЕсли;
		КонецЕсли;
		МаршрутПоДаннымФормыРучнаяУстановка = ЗаполнятьМаршрутПоДаннымЭлектроннойФормыРучнаяУстановка;
		
		Если ЗаполнятьРеквизитиПоДаннымЭлектроннойФормы Тогда
			РежимЕстьЭлектроннаяФорма = Истина;
			Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
			
				Если ЗаполнятьМаршрутПоДаннымЭлектроннойФормы Тогда
					МаршрутОтображатьПоДаннымХР = Истина;
					МаршрутПоДаннымФормы = Истина;
				Иначе
					МаршрутОтображатьПоДаннымФЭД = Истина;
					МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
				КонецЕсли;
				РежимЭлектроннаяФорма = Истина;
				РежимЭлектроннаяФормаТолькоПросмотр = Истина;//Ложь;
				РежимЭлектроннаяФормаМожноРедактировать = Истина;
				
				Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент") Тогда
					ДоступноОтменитьЗаполнениеПоЭлектроннойФормеЭлектронногоДокумента = Истина;
				//ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента") Тогда
				//	ДоступноОтменитьЗаполнениеПоЭлектроннойФормеЭлектронногоДокумента = Истина;
				ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
					ДоступноОтменитьЗаполнениеПоЭлектроннойФормеЭлектронногоДокумента = Истина;
				ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
					ДоступноОтменитьЗаполнениеПоЭлектроннойФормеЭлектронногоДокумента = Истина;
				КонецЕсли;
			Иначе
				РежимЭлектроннаяФорма = Ложь;
				РежимЭлектроннаяФормаТолькоПросмотр = Истина;
				РежимЭлектроннаяФормаМожноРедактировать = Ложь;
				МаршрутОтображатьПоДаннымЭДТЧ = Истина;
			КонецЕсли;
		Иначе
			РежимЕстьЭлектроннаяФорма = Ложь;
			РежимЭлектроннаяФорма = Ложь;
			РежимЭлектроннаяФормаТолькоПросмотр = Истина;
			
			Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
				
				РежимЭлектроннаяФормаМожноРедактировать = Истина;
				Если ЗаполнятьМаршрутПоДаннымЭлектроннойФормы Тогда
					МаршрутОтображатьПоДаннымХР = Истина;
					МаршрутПоДаннымФормы = Истина;
				Иначе
					МаршрутОтображатьПоДаннымФЭД = Истина;
				КонецЕсли;
				МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
			Иначе
				РежимЭлектроннаяФормаМожноРедактировать = Ложь;
				МаршрутОтображатьПоДаннымЭДТЧ = Истина;
				//РежимЭлектроннаяФормаМожноРедактировать = Ложь;
				//МаршрутОтображатьПоДаннымФЭД = Истина;
				//МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
			КонецЕсли;
		КонецЕсли;
		//РежимЭлектроннаяФорма = Ложь;
	Иначе
		РежимЕстьЭлектроннаяФорма = Ложь;
		РежимЭлектроннаяФорма = Ложь;
		РежимЭлектроннаяФормаТолькоПросмотр = Истина;
		РежимЭлектроннаяФормаМожноРедактировать = Ложь;
		МаршрутОтображатьПоДаннымФЭД = Истина;
		МаршрутВозможноОтображатьПоДаннымФЭД = Истина;
	КонецЕсли;
	
	Если ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
		Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
			или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
			или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
		
			Элементы.ФормаСохранитьИзменения.Доступность = Истина;
		Иначе
			Элементы.ФормаСохранитьИзменения.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ФормаСохранитьИзменения.Доступность = Ложь;
	КонецЕсли;

	//УстановитьДанныеЭлектроннойФормыИзХранилищаРеквизитовЭлектронногоДокумента_НаСервере(пЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента);
	УстановитьДанныеЭлектроннойФормыИзСоответствияСДаннымиTablesЭлектронногоДокумента_НаСервере(лСоответствиеСДанными);
	ЗаполнитьМаршрутПоЭлектронномуДокументу_НаСервере(пЭлектронныйДокумент, лСоответствиеСДанными, Неопределено);
	ЗаполнитьВложенияПоЭлектронномуДокументу_НаСервере(пЭлектронныйДокумент, Документ1С);
	ЗаполнитьНастройкиОтправкиСсылкиНаДокумент_НаСервере();
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
	или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
	или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
		Если ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
			и ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
			
			Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
				или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
				
				ПримечаниеЭлектронногоДокумента = ЭлектронныйДокумент.NOTATION;
				Если ВидЭлектронногоДокумента.ОтправлятьКомментарий Тогда
					ИнформацияДляРегистрацииДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьИнформациюДляРегистрацииДокумента(Документ1С);
					Если ЗначениеЗаполнено(ИнформацияДляРегистрацииДокумента.Комментарий) Тогда
						ПримечаниеЭлектронногоДокумента = ИнформацияДляРегистрацииДокумента.Комментарий;
					КонецЕсли;
				КонецЕсли;
				Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Ложь;
				Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Ложь;
			Иначе
				ПримечаниеЭлектронногоДокумента = ЭлектронныйДокумент.NOTATION;
				Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Истина;
				Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			ПримечаниеЭлектронногоДокумента = ЭлектронныйДокумент.NOTATION;
			Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Истина;
			Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		ПримечаниеЭлектронногоДокумента = ЭлектронныйДокумент.NOTATION;
		Элементы.ПримечаниеЭлектронногоДокумента.ТолькоПросмотр = Истина;
		Элементы.ПримечаниеЭлектронногоДокумента1.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ОбновитьВидимостьАннулироватьЭлектронныйДокументСервере();
	МаршрутПоДаннымФормыРучнаяУстановкаИнт = МаршрутПоДаннымФормыРучнаяУстановка;
	УстановитьВидимостьКнопок_НаСервере();
	
	ЗаполнитьТаблицуКвитанцийПоЭлектронномуДокументу();
	ПодписантыСоСтороныКонтагента.Параметры.УстановитьЗначениеПараметра("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ПодписантыСНашейСтороны.Параметры.УстановитьЗначениеПараметра("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаКлиенте(пДокумент1С, пОрганизацияПоУмолчанию = Неопределено, пВидЭлектронногоДокументаПоУмолчанию = Неопределено, пОснование = Неопределено)
	УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаСервере(пДокумент1С, пОрганизацияПоУмолчанию, пВидЭлектронногоДокументаПоУмолчанию, пОснование);
	СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
	УстановитьВариантОтображения();
	ПоказатьИзображениеЭлектронногоДокумента();
	УстановитьДоступностьКнопокКомандФормы();
	ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументов();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежим_ЕстьЭлектронныйДокументИНетДокумента1С_НаКлиенте(пЭлектронныйДокумент)
	РезультатФункцииПечатьДокумента = Неопределено;
	УстановитьРежим_ЕстьЭлектронныйДокументИНетДокумента1С_НаСервере(пЭлектронныйДокумент);
	СформироватьДанныеЭлектронногоДокументаПоЭлектронномуДокументу();
	УстановитьВариантОтображения();
	ПоказатьИзображениеЭлектронногоДокумента();
	УстановитьДоступностьКнопокКомандФормы();
	ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументов();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаКлиенте(пЭлектронныйДокумент)
	РезультатФункцииПечатьДокумента = Неопределено;
	УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаСервере(пЭлектронныйДокумент);
	Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
		СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
	Иначе
		СформироватьДанныеЭлектронногоДокументаПоЭлектронномуДокументу();
	КонецЕсли;
	УстановитьВариантОтображения();
	ПоказатьИзображениеЭлектронногоДокумента();
	УстановитьДоступностьКнопокКомандФормы();
	ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументов();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();
	//УстановитьВариантОтображения();
	РезультатФункцииПечатьДокумента = Неопределено;
	Если РежимЭлектроннаяФорма Тогда
		ЕстьДанныеЭлектронногоДокумента = Истина;
		СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
		ПоказатьИзображениеЭлектронногоДокумента();
	ИначеЕсли ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") и ЗначениеЗаполнено(Документ1С) Тогда
			СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
		Иначе
			СформироватьДанныеЭлектронногоДокументаПоЭлектронномуДокументу();
		КонецЕсли;
		ПоказатьИзображениеЭлектронногоДокумента();
	ИначеЕсли ЗначениеЗаполнено(Документ1С) Тогда
		СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
		ПоказатьИзображениеЭлектронногоДокумента();
	Иначе
		ОчиститьПолеHTMLДокумента();
	КонецЕсли;
	УстановитьВариантОтображения(Ложь);
	УстановитьДоступностьКнопокКомандФормы();
КонецПроцедуры

&НаСерверебезКонтекста
Процедура ВывестиМассивКартинокPtnDrawНаПечатнуюФорму(МассивКартинокPtn, МассивРазмеровКартинок, ПечатнаяФорма)
	ПечатнаяФорма.Очистить();
	скEDI_ОбщегоНазначения.ВывестиМассивКартинокPtnDrawНаПечатнуюФорму(МассивКартинокPtn, МассивРазмеровКартинок, ПечатнаяФорма);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДанныеЭлектронногоДокументаПоДокументу1С()
	мДанныеДляОтображенияЭлектронногоДокументаСоответствие = Неопределено;
	ОтображенияЭлектронногоДокументаВозможноПереключение = Ложь;
	ОтображенияЭлектронногоДокументаИндекс = 0;
	мПредставлениеЭлектронногоДокументаPDF     = Неопределено;
	мПредставлениеЭлектронногоДокументаXML     = Неопределено;
	мПараметрыДляСозданияЭлектронногоДокумента = Неопределено;	
	ВерсияСодержанияЭлектронногоДокумента      = Неопределено;
	ИмяФайлаСДО = "";
	
	ОбновлятьДанныеЭлектроннойФормы = Истина;
	СтруктураДанныхДокумента = Новый Структура;
	СтруктураДанныхДокумента.Вставить("Документ1С"                     , Документ1С);
	СтруктураДанныхДокумента.Вставить("ЭлектронныйДокумент"            , ЭлектронныйДокумент);
	СтруктураДанныхДокумента.Вставить("ВидЭлектронногоДокумента"       , ВидЭлектронногоДокумента);
	СтруктураДанныхДокумента.Вставить("ВхИсх"                          , ВхИсх);
	СтруктураДанныхДокумента.Вставить("ГдеСоздан"                      , ГдеСоздан);
	СтруктураДанныхДокумента.Вставить("Состояние"                      , СостояниеЭлектронногоДокумента);
	СтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
	СтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов   " , Новый Структура);
	СтруктураДанныхДокумента.Вставить("ВидДокумента1С"                 , скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(Документ1С));
	СтруктураДанныхДокумента.Вставить("Примечание"                     , ПримечаниеЭлектронногоДокумента);
	
	СтруктураДанныхДокумента.Вставить("ТелоДокумента"        , "");
	СтруктураДанныхДокумента.Вставить("ИзображениеДокумента" , "");
	СтруктураДанныхДокумента.Вставить("ЕстьОшибки", Ложь);

	Если РежимЭлектроннаяФорма или МаршрутПоДаннымФормы Тогда
		Если РежимЭлектроннаяФорма Тогда
			ОбновлятьДанныеЭлектроннойФормы = Ложь;
		КонецЕсли;

		ИнформацияПоЗаполнениюОбязательныхРеквизитов = "";
		Если ЗаполнитьДанныеПоЭлектроннойФорме(СтруктураДанныхДокумента, РежимЭлектроннаяФорма, МаршрутПоДаннымФормы, Ложь, ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
			//Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
			//	Сообщить(ИнформацияПоЗаполнениюОбязательныхРеквизитов);
			//КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
				Сообщить(ИнформацияПоЗаполнениюОбязательныхРеквизитов);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Иначе
		СтруктураДанныхДокумента.ПараметрыСозданияДокументов.Вставить("ПоДаннымХранилищаРеквизитов", Ложь);
	КонецЕсли;
			
	МассивДанныхДокументов = Новый Массив;
	МассивДанныхДокументов.Добавить(СтруктураДанныхДокумента);
	
	РезультатыФункцииПечатьДокумента = Неопределено;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатыФункцииПечатьДокумента = скEDI_НастройкиПодКонфигурациюКлиент.ПолучитьРезультатыФункцииПечатьДокумента(МассивДанныхДокументов);
	#КонецЕсли
	Если РезультатыФункцииПечатьДокумента = Неопределено Тогда
		лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Неопределено;
	Иначе
		ФиксированноеСоответствиеДокументов = Новый ФиксированноеСоответствие(РезультатыФункцииПечатьДокумента);
		лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура;
		лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("РезультатыФункцииПечатьДокумента", ФиксированноеСоответствиеДокументов);
	КонецЕсли;
	
	скEDI_ОбщегоНазначения.ВыгрузитьДокументВСоответствиеЗначенийВызовСервера(МассивДанныхДокументов, лПараметрыФормыНастройкиПодписейЭлектронныхДокументов);
	
	СтруктураДанныхДокумента = МассивДанныхДокументов[0];
	
	лСоответствиеСРеквизитамиЭлектронногоДокумента = СтруктураДанныхДокумента.СоответствиеЗначенийРеквизитов;
	мПараметрыДляСозданияЭлектронногоДокумента     = СтруктураДанныхДокумента.ПараметрыСозданияДокументов;
	
	ЖурналОперации = "";

	мДанныеДляОтображенияЭлектронногоДокументаСоответствие = Новый Соответствие;
	
	Если (не СтруктураДанныхДокумента.ЕстьОшибки)
		и ЗначениеЗаполнено(лСоответствиеСРеквизитамиЭлектронногоДокумента) 
		И ЗначениеЗаполнено(мПараметрыДляСозданияЭлектронногоДокумента) Тогда 
		
		ЕстьДанныеЭлектронногоДокумента = Истина;
		//лЗаголовокДокумента = Строка(ВидЭлектронногоДокумента)
		//						+ " №" + СокрЛП(мПараметрыДляСозданияЭлектронногоДокумента.НомерЭлектронногоДокумента)
		//						+ " от " + Формат(мПараметрыДляСозданияЭлектронногоДокумента.ДатаЭлектронногоДокумента, "ДФ=dd.MM.yyyy");
		//лСоответствиеСДаннымиЭлектронногоДокумента = скEDI_ОбщегоНазначения.СформироватьСоответствиеСДаннымиЭлектронногоДокумента(ВидЭлектронногоДокумента, лЗаголовокДокумента, лСоответствиеСРеквизитамиЭлектронногоДокумента, мПараметрыДляСозданияЭлектронногоДокумента.ЕДРПОУВладельцаШаблона, мПараметрыДляСозданияЭлектронногоДокумента.ИмяШаблона, мПараметрыДляСозданияЭлектронногоДокумента.ВерсияШаблона, мПараметрыДляСозданияЭлектронногоДокумента.DocID, мПараметрыДляСозданияЭлектронногоДокумента.OutID, мПараметрыДляСозданияЭлектронногоДокумента.NOTATION);
		
		ЕДРПОУВладельцаШаблона = мПараметрыДляСозданияЭлектронногоДокумента.ЕДРПОУВладельцаШаблона;
		ИмяШаблона = мПараметрыДляСозданияЭлектронногоДокумента.ИмяШаблона;
		ВерсияШаблона = мПараметрыДляСозданияЭлектронногоДокумента.ВерсияШаблона;
		
		Если ОбновлятьДанныеЭлектроннойФормы Тогда
			//УстановитьДанныеЭлектроннойФормыИзСоответствияСДаннымиTablesЭлектронногоДокумента_НаСервере(лСоответствиеСДаннымиЭлектронногоДокумента.Получить("Tables"));
			УстановитьДанныеЭлектроннойФормыИзСоответствияСДаннымиTablesЭлектронногоДокумента_НаСервере(лСоответствиеСРеквизитамиЭлектронногоДокумента);
		КонецЕсли;
		
		Если МаршрутОтображатьПоДаннымФЭД Тогда
			ЗаполнитьМаршрутПоЭлектронномуДокументу_НаСервере(Неопределено, Неопределено, мПараметрыДляСозданияЭлектронногоДокумента);
		КонецЕсли;
		
		//лПредставленияЭлектронногоДокумента = скEDI_ОбщегоНазначения.СобратьXMLиPDFПредставленияЭлектронногоДокументаИзСоответствияСДанными(лСоответствиеСДаннымиЭлектронногоДокумента, ЖурналОперации);
		//
		//мПредставлениеЭлектронногоДокументаPDF = лПредставленияЭлектронногоДокумента.ИзображениеДокумента;
		//мПредставлениеЭлектронногоДокументаXML = лПредставленияЭлектронногоДокумента.ТелоДокумента;
		мПредставлениеЭлектронногоДокументаPDF = СтруктураДанныхДокумента.ИзображениеДокумента;
		мПредставлениеЭлектронногоДокументаXML = СтруктураДанныхДокумента.ТелоДокумента;
		
		ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = Новый Структура("НомерФайла, ИмяФайла, ЕстьПДФ, ЕстьКартинка, ОтображениеПДФ, ОтображениеМассивКартинок, ОтображениеМассивРазмеровКартинок", 0, "", Ложь, Ложь);
		ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ЕстьПДФ = Истина;
		ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеПДФ = СтруктураДанныхДокумента.ИзображениеДокумента;
		мДанныеДляОтображенияЭлектронногоДокументаСоответствие.Вставить(0, ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента);

		Если ОтображатьКартинку Тогда
			ПечатнаяФормаЭлектронногоДокумента = Новый ТабличныйДокумент;
			Если ЗначениеЗаполнено(мПредставлениеЭлектронногоДокументаXML) Тогда
				лпПараметрыВыводаФаксимиле = Новый Структура;
				лпПараметрыВыводаФаксимиле.Вставить("MedocBody", мПредставлениеЭлектронногоДокументаXML);
				ОтветEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/draw", лпПараметрыВыводаФаксимиле, Ложь);
				

				
				Если ЗначениеЗаполнено(ОтветEDIПровайдера.Message) Тогда
					ТекстОшибки = ОтветEDIПровайдера.Message;
				КонецЕсли;
				МассивСтрокBase64_ДополненаФаксимиле = Неопределено;
				СтрокаBase64_ДополненаФаксимиле = "";	
				ОтображениеМассивКартинок = Новый Массив;
				ОтображениеМассивРазмеровКартинок = Неопределено;
				Если ОтветEDIПровайдера.Свойство("Images", МассивСтрокBase64_ДополненаФаксимиле) Тогда
					Если ТипЗнч(МассивСтрокBase64_ДополненаФаксимиле) = Тип("Массив") Тогда
						Для Каждого СтрокаBase64_ДополненаФаксимиле Из МассивСтрокBase64_ДополненаФаксимиле Цикл
							ОтображениеМассивКартинок.Добавить(СтрокаBase64_ДополненаФаксимиле);
						КонецЦикла;
						МассивDimensions = Неопределено;
						Если ОтветEDIПровайдера.Свойство("Dimensions", МассивDimensions) Тогда
							Если ТипЗнч(МассивDimensions) = Тип("Массив") Тогда
								ОтображениеМассивРазмеровКартинок = Новый Массив;
								Для Каждого ЭлементМассиваDimensions Из МассивDimensions Цикл
									ЭлементМассиваРазмеровКартинок = Новый Структура;
									ЭлементМассиваРазмеровКартинок.Вставить("Высота", ЭлементМассиваDimensions.Height);
									ЭлементМассиваРазмеровКартинок.Вставить("Ширина", ЭлементМассиваDimensions.Width);
									ОтображениеМассивРазмеровКартинок.Добавить(ЭлементМассиваРазмеровКартинок);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						
						Если ТипЗнч(ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента) = Тип("Структура") Тогда
							ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ЕстьКартинка = Истина;
							ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок = ОтображениеМассивКартинок;
							ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивРазмеровКартинок = ОтображениеМассивРазмеровКартинок;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ОтветEDIПровайдера.Свойство("Image", СтрокаBase64_ДополненаФаксимиле) Тогда
					Если ЗначениеЗаполнено(СтрокаBase64_ДополненаФаксимиле) Тогда
						ОтображениеМассивКартинок.Добавить(СтрокаBase64_ДополненаФаксимиле);
						
						Если ТипЗнч(ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента) = Тип("Структура") Тогда
							ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ЕстьКартинка = Истина;
							ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок = ОтображениеМассивКартинок;
							ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивРазмеровКартинок = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЕстьДанныеЭлектронногоДокумента = Ложь;
		
		ЕДРПОУВладельцаШаблона = "";
		ИмяШаблона = "";
		ВерсияШаблона = "";
		ПечатнаяФормаЭлектронногоДокумента = Новый ТабличныйДокумент;
		
		Если ОбновлятьДанныеЭлектроннойФормы Тогда
			УстановитьДанныеЭлектроннойФормыИзСоответствияСДаннымиTablesЭлектронногоДокумента_НаСервере(Неопределено);
		КонецЕсли;
		
		Если МаршрутОтображатьПоДаннымФЭД Тогда
			ЗаполнитьМаршрутПоЭлектронномуДокументу_НаСервере(Неопределено, Неопределено, мПараметрыДляСозданияЭлектронногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЖурналОперации) Тогда
		Сообщить(ЖурналОперации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДанныеЭлектронногоДокументаПоЭлектронномуДокументу()
	ПолучитьДанныеЭлектронногоДокументаПоЭлектронномуДокументуНаСервере(мДанныеДляОтображенияЭлектронногоДокументаСоответствие, ВерсияСодержанияЭлектронногоДокумента);
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеЭлектронногоДокументаПоЭлектронномуДокументуНаСервере(пДанныеДляОтображенияЭлектронногоДокументаСоответствие, пВерсия)
	пПредставлениеЭлектронногоДокументаPDF = Неопределено;
	пПредставлениеЭлектронногоДокументаXML = Неопределено;
	пОтображениеМассивКартинок = Неопределено;
	пОтображениеМассивРазмеровКартинок = Неопределено;
	пВерсия = Неопределено;
	
	ИмяФайлаСДО = ЭлектронныйДокумент.ИмяФайла;
	ТекОшибка = "";
	СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ТекОшибка);
	Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		ОтображатьОшибку = Истина;
		ОшибкаОтображения = ТекОшибка;
		ЕстьДанныеЭлектронногоДокумента = Ложь;
		ОтображенияЭлектронногоДокументаВозможноПереключение = Ложь;
		ОтображенияЭлектронногоДокументаИндекс = 0;
		пДанныеДляОтображенияЭлектронногоДокументаСоответствие = Неопределено;
	Иначе
		ОтображатьОшибку = Ложь;
		ОшибкаОтображения = "";
		ЕстьДанныеЭлектронногоДокумента = Истина;
		
		пПредставлениеЭлектронногоДокументаPDF = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
		//пПредставлениеЭлектронногоДокументаXML = СодержаниеЭлектронногоДокумента.ТелоДокумента;
		пВерсия = СодержаниеЭлектронногоДокумента.Дата;
		Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ИмяФайла) Тогда
			ИмяФайлаСДО = СодержаниеЭлектронногоДокумента.ИмяФайла
		КонецЕсли;
		
		ТекстОшибки = "";
		скEDI_ОбщегоНазначения.ПолучитьСодержимоеПоЭлектронномуДокументу(ОрганизацияEDI, ТипДокумента, ЭлектронныйДокумент, СодержаниеЭлектронногоДокумента, ОтображатьPDF, ОтображатьКартинку, Истина, пПредставлениеЭлектронногоДокументаPDF, пОтображениеМассивКартинок, пОтображениеМассивРазмеровКартинок, пДанныеДляОтображенияЭлектронногоДокументаСоответствие, ТекстОшибки);
		
		Если ТипЗнч(пДанныеДляОтображенияЭлектронногоДокументаСоответствие) = Тип("Соответствие") Тогда
			ЕстьВложенияДляОтображения = Ложь;
			ВложенияДляОтображенияОтмечено = Ложь;
			Для Каждого ЭлементВложения Из Вложения Цикл
				Если ЗначениеЗаполнено(ЭлементВложения.ПорядковыйНомерФайла) Тогда
					ДанныеДляОтображенияЭлектронногоДокумента = пДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(ЭлементВложения.ПорядковыйНомерФайла);
					Если ЗначениеЗаполнено(ДанныеДляОтображенияЭлектронногоДокумента) Тогда
						ЕстьВложенияДляОтображения = Истина;
						Если ЭлементВложения.ПорядковыйНомерФайла = ОтображенияЭлектронногоДокументаИндекс Тогда
							ЭлементВложения.Отображать = Истина;
							ВложенияДляОтображенияОтмечено = Истина;
						Иначе
							ЭлементВложения.Отображать = Ложь;
						КонецЕсли;
					Иначе
						ЭлементВложения.Отображать = Ложь;
					КонецЕсли;
				Иначе
					ЭлементВложения.Отображать = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьВложенияДляОтображения Тогда
				ОтображенияЭлектронногоДокументаВозможноПереключение = Истина;
				Если не ВложенияДляОтображенияОтмечено Тогда
					ОтображенияЭлектронногоДокументаИндекс = 0;
				КонецЕсли;
			Иначе
				ОтображенияЭлектронногоДокументаВозможноПереключение = Ложь;
				ОтображенияЭлектронногоДокументаИндекс = 0;
			КонецЕсли;
		Иначе
			ОтображенияЭлектронногоДокументаВозможноПереключение = Ложь;
			ОтображенияЭлектронногоДокументаИндекс = 0;
			Для Каждого ЭлементВложения Из Вложения Цикл
				ЭлементВложения.Отображать = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	УстановитьВариантОтображения();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИзображениеЭлектронногоДокумента()
	ОчиститьПолеHTMLДокумента();
	Если ОтображатьPDF Тогда
		ПодключитьОбработчикОжидания("ПоказатьИзображениеЭлектронногоДокумента_ПослеОжидания", 0.2, Истина);
	КонецЕсли;
	Если ОтображатьКартинку Тогда
		ПечатнаяФормаЭлектронногоДокумента = Новый ТабличныйДокумент;
		ПечатнаяФормаЭлектронногоДокумента.ПолеСверху = 0;
		ПечатнаяФормаЭлектронногоДокумента.ПолеСлева = 0;
		ПечатнаяФормаЭлектронногоДокумента.ПолеСнизу = 0;
		ПечатнаяФормаЭлектронногоДокумента.ПолеСправа = 0;
		
		Если ТипЗнч(мДанныеДляОтображенияЭлектронногоДокументаСоответствие) = Тип("Соответствие") Тогда
			ДанныеДляОтображенияЭлектронногоДокумента = мДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(ОтображенияЭлектронногоДокументаИндекс);
			Если ТипЗнч(ДанныеДляОтображенияЭлектронногоДокумента) = Тип("Структура") Тогда
				Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьКартинка Тогда
					пОтображениеМассивКартинок = ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок;
					пОтображениеМассивРазмеровКартинок = ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеМассивРазмеровКартинок;
					ВывестиМассивКартинокPtnDrawНаПечатнуюФорму(пОтображениеМассивКартинок, пОтображениеМассивРазмеровКартинок, ПечатнаяФормаЭлектронногоДокумента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОтобразитьИзображениеЭлектронногоДокумента()

&НаКлиенте
Процедура ПоказатьИзображениеЭлектронногоДокумента_ПослеОжидания()
	Если ТипЗнч(мДанныеДляОтображенияЭлектронногоДокументаСоответствие) = Тип("Соответствие") Тогда
		ДанныеДляОтображенияЭлектронногоДокумента = мДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(ОтображенияЭлектронногоДокументаИндекс);
		Если ТипЗнч(ДанныеДляОтображенияЭлектронногоДокумента) = Тип("Структура") Тогда
			Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьПДФ Тогда
				СписокВременныхФайловКУдалению.Добавить(АдресВременногоФайлаДляОтображенияЭлектронногоДокумента);
				АдресВременногоФайлаДляОтображенияЭлектронногоДокумента = ПолучитьИмяВременногоФайла(".pdf");
				скEDI_ОбщегоНазначенияКлиент.СоздатьФайлИзСтрокиBase64(ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеПДФ, АдресВременногоФайлаДляОтображенияЭлектронногоДокумента);
				лМенеджерФайла = Новый Файл(АдресВременногоФайлаДляОтображенияЭлектронногоДокумента);
				Если лМенеджерФайла.Существует() Тогда
//					Элементы.АдресФайлаСПредставлениемЭлектронногоДокумента.Вид = ВидПоляФормы.ПолеHTMLДокумента;
					АдресФайлаСПредставлениемЭлектронногоДокумента = АдресВременногоФайлаДляОтображенияЭлектронногоДокумента;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъектаНаСервере(Объект, ИмяРеквизита)
	Возврат Объект[ИмяРеквизита];
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОчиститьПолеHTMLДокумента()
	
	АдресФайлаСПредставлениемЭлектронногоДокумента = "";
//	Элементы.АдресФайлаСПредставлениемЭлектронногоДокумента.Вид = ВидПоляФормы.ПолеВвода;
//	Элементы.АдресФайлаСПредставлениемЭлектронногоДокумента.МногострочныйРежим = Истина;

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура УстановитьДоступностьКнопокКомандФормы()
	Если ЕстьДанныеЭлектронногоДокумента Тогда
		лМассивДанныхДокументов = Новый Массив;
		
		лСтруктураДанныхДокумента = Новый Структура();
		лСтруктураДанныхДокумента.Вставить("Дата", ПолучитьРеквизитОбъектаНаСервере(ЭлектронныйДокумент, "Дата"));
		лСтруктураДанныхДокумента.Вставить("ВидЭлектронногоДокумента",        ВидЭлектронногоДокумента);
		лСтруктураДанныхДокумента.Вставить("ТипДокумента",                    ТипДокумента);
		лСтруктураДанныхДокумента.Вставить("Документ1С",                      Документ1С);
		лСтруктураДанныхДокумента.Вставить("ЭлектронныйДокумент",             ЭлектронныйДокумент);
		лСтруктураДанныхДокумента.Вставить("ВхИсх",                           ВхИсх);
		лСтруктураДанныхДокумента.Вставить("ГдеСоздан",                       ГдеСоздан);
		лСтруктураДанныхДокумента.Вставить("Состояние",                       СостояниеЭлектронногоДокумента);
		лСтруктураДанныхДокумента.Вставить("СостояниеРегистрацияВДФС",        СостояниеЭлектронногоДокументаРегистрацияВДФС);
		лСтруктураДанныхДокумента.Вставить("ЕстьФинальнаяКвитанцияДФС",       ЕстьФинальнаяКвитанцияДФС);
		лСтруктураДанныхДокумента.Вставить("ВидДокумента1С",                  скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(Документ1С));
		лСтруктураДанныхДокумента.Вставить("РегистрируетсяВЕРННПокупателем",  РегистрируетсяВЕРННПокупателем);
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) И Не ЗначениеЗаполнено(Документ1С) Тогда
			лСоответствиеДокументов = ПредопределенноеЗначение("Перечисление.скEDI_СоответствиеДокументов1СиЭлектронныхДокументов.ЕстьЭлектронныйДокументНетДокумент1С");
		ИначеЕсли ЗначениеЗаполнено(Документ1С) И Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			лСоответствиеДокументов = ПредопределенноеЗначение("Перечисление.скEDI_СоответствиеДокументов1СиЭлектронныхДокументов.ЕстьДокумент1СнетЭлектронногоДокумента");
		Иначе
			лСоответствиеДокументов = ПредопределенноеЗначение("Перечисление.скEDI_СоответствиеДокументов1СиЭлектронныхДокументов.ЕстьДокумент1СиЭлектронныйДокумент");
		КонецЕсли;
		лСтруктураДанныхДокумента.Вставить("СоответствиеДокументов",          лСоответствиеДокументов);
		лИнформацияОНеобходимостиПроведенияДокумента1С = скEDI_НастройкиПодКонфигурацию.ПолучитьИнформациюОНеобходимостиПроведенияДокумента1С(Документ1С);
		лСтруктураДанныхДокумента.Вставить("НеобходимоПроведениеДокумента1С", лИнформацияОНеобходимостиПроведенияДокумента1С.НеобходимоПроведение);
		лСтруктураДанныхДокумента.Вставить("Документ1СПроведен",              лИнформацияОНеобходимостиПроведенияДокумента1С.Проведен);
		
		лСтруктураДанныхДокумента.Вставить("ЭтоОсновнойВариант",              ЭтоОсновнойВариант);
		лСтруктураДанныхДокумента.Вставить("ОшибкаШифрованияПриОтправке",     ОшибкаШифрованияПриОтправке);
		
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
		лДоступныеКоманды = скEDI_ОбщегоНазначенияКлиент.ПолучитьДоступныеКоманды(лМассивДанныхДокументов);
		
		Элементы.ФормаПодписатьЭлектронныйДокумент.Доступность                            = лДоступныеКоманды.Подписать;
		Элементы.ФормаПодписатьИОтправитьЭлектронныйДокумент.Доступность                  = лДоступныеКоманды.ПодписатьИОтправить;
		Элементы.ПодписатьИОтправитьЭлектронныйДокументТолькоСсылка.Доступность           = лДоступныеКоманды.ПодписатьИОтправитьТолькоСсылку;
		Элементы.ФормаОтправитьНаДоподписаниеЭлектронныйДокумент.Доступность              = лДоступныеКоманды.ОтправитьНаДоподписание;
		Элементы.ФормаПодписатьИОтправитьЭлектронныйДокументВДФС.Доступность              = лДоступныеКоманды.ПодписатьИОтправитьВДФС;
		Элементы.ФормаПодтвердитьИОтправитьОтветНаВходящийЭлектронныйДокумент.Доступность = лДоступныеКоманды.Подтвердить;
		Элементы.ФормаОтклонитьВходящийЭлектронныйДокумент.Доступность                    = лДоступныеКоманды.Отклонить;
		Элементы.ФормаОтозватьЭлектронныйДокумент.Доступность                             = лДоступныеКоманды.Отозвать;
		Элементы.ФормаАннулироватьЭлектронныйДокумент.Доступность                         = лДоступныеКоманды.Аннулировать;
		Элементы.СоздатьДокумент1СИПривязатьКЭлектронномуДокументу.Доступность            = лДоступныеКоманды.СоздатьДокумент1С;
		Элементы.НайтиДокумент1С.Доступность                                              = лДоступныеКоманды.НайтиДокумент1С;
		Элементы.ПровестиДокумент1С.Доступность                                           = лДоступныеКоманды.ПровестиДокумент1С;
		Элементы.СоздатьНовыйЭлектронныйДокумент.Видимость                                = лДоступныеКоманды.СоздатьНовыйЭлектронныйДокумент; 
		Элементы.ФормаСнятьПодписиСЭлектронногоДокумента.Доступность                      = лДоступныеКоманды.СнятьПодписи;
		Элементы.ФормаПроверитьЭлектронныйДокумент.Доступность                            = лДоступныеКоманды.Проверить;
		Элементы.ФормаПодписатьИОтправитьЭлектронныйДокумент_Переподписать.Доступность    = лДоступныеКоманды.ПовторноеУтверждение;
		Элементы.ФормаПодписатьИОтправитьЭлектронныйДокумент_Переподписать.Видимость      = лДоступныеКоманды.ПовторноеУтверждение;
		Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен")
			или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке") Тогда
			
			Если ЗначениеЗаполнено(ИмяФайлаСДО) Тогда
				Элементы.ОтправкаСсылкиНаДокументОтправить.Доступность = Истина;
			Иначе
				Элементы.ОтправкаСсылкиНаДокументОтправить.Доступность = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ОтправкаСсылкиНаДокументОтправить.Доступность = Ложь;
		КонецЕсли;
		Элементы.ФормаРедактироватьЭлектронныйДокумент.Доступность = лДоступныеКоманды.ОтредактироватьДокумент;
		Если ЭлектроннаяФорма_IsMultisided Тогда
			Элементы.ФормаРедактироватьЭлектронныйДокумент.Доступность = Ложь;
		КонецЕсли;
		Если ДоступноОтменитьРедактированиеЭлектронногоДокумента Тогда
			Элементы.ФормаОтменитьРедактированиеЭлектронногоДокумента.Видимость = Истина;
			Элементы.ФормаРедактироватьЭлектронныйДокумент.Видимость = Истина;
		Иначе
			Элементы.ФормаОтменитьРедактированиеЭлектронногоДокумента.Видимость = Ложь;
			Если Элементы.ФормаРедактироватьЭлектронныйДокумент.Доступность Тогда
				Элементы.ФормаРедактироватьЭлектронныйДокумент.Видимость = Истина;
			Иначе
				Элементы.ФормаРедактироватьЭлектронныйДокумент.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ФормаПодписатьЭлектронныйДокумент.Доступность = Ложь;
		Элементы.ФормаПодписатьИОтправитьЭлектронныйДокумент.Доступность = Ложь;
		Элементы.ПодписатьИОтправитьЭлектронныйДокументТолькоСсылка.Доступность = Ложь;
		Элементы.ФормаОтправитьНаДоподписаниеЭлектронныйДокумент.Доступность = Ложь;
		Элементы.ФормаПодписатьИОтправитьЭлектронныйДокументВДФС.Доступность = Ложь;
		Элементы.ФормаПодтвердитьИОтправитьОтветНаВходящийЭлектронныйДокумент.Доступность = Ложь;
		Элементы.ФормаОтклонитьВходящийЭлектронныйДокумент.Доступность = Ложь;
		Элементы.ФормаОтозватьЭлектронныйДокумент.Доступность = Ложь;
		Элементы.ФормаАннулироватьЭлектронныйДокумент.Доступность = Ложь;
		Элементы.СоздатьДокумент1СИПривязатьКЭлектронномуДокументу.Доступность = Ложь;
		Элементы.НайтиДокумент1С.Доступность = Ложь;
		Элементы.ПровестиДокумент1С.Доступность = Ложь;
		Элементы.СоздатьНовыйЭлектронныйДокумент.Видимость = Ложь; 
		Элементы.ФормаСнятьПодписиСЭлектронногоДокумента.Доступность = Ложь;
		Элементы.ФормаПроверитьЭлектронныйДокумент.Доступность = Ложь;
		Элементы.ОтправкаСсылкиНаДокументОтправить.Доступность = Ложь;
		Элементы.ФормаРедактироватьЭлектронныйДокумент.Доступность = Ложь;
		Элементы.ФормаОтменитьРедактированиеЭлектронногоДокумента.Видимость = Ложь;
		Элементы.ФормаРедактироватьЭлектронныйДокумент.Видимость = Ложь;
	КонецЕсли;
	
	Если ОтображенияЭлектронногоДокументаВозможноПереключение Тогда
		Элементы.ВложенияОтображатьЭлектронныйДокумент.Видимость = Истина;
		Элементы.ВложенияОтображать.Видимость = Истина;
		Если ОтображенияЭлектронногоДокументаИндекс = 0 Тогда
			Элементы.ВложенияОтображатьЭлектронныйДокумент.Пометка = Истина;
		Иначе
			Элементы.ВложенияОтображатьЭлектронныйДокумент.Пометка = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ВложенияОтображатьЭлектронныйДокумент.Видимость = Ложь;
		Элементы.ВложенияОтображать.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры // УстановитьДоступностьКнопокКомандФормы()

&НаКлиенте
Процедура ИнициализироватьПроверкуЭлектронногоДокумента()
	лМассивДанныхПоДокументам = Новый Массив;
	
	СтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
	СтруктураДанныхДокумента.Документ1С = Документ1С;
	СтруктураДанныхДокумента.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
	СтруктураДанныхДокумента.ЭлектронныйДокумент = ЭлектронныйДокумент;
	СтруктураДанныхДокумента.Организация = ОрганизацияEDI;
	СтруктураДанныхДокумента.Состояние = СостояниеЭлектронногоДокумента;
	СтруктураДанныхДокумента.РегистрируетсяВЕРННПокупателем = РегистрируетсяВЕРННПокупателем;
	СтруктураДанныхДокумента.ВидДокумента1С = скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(Документ1С);
	СтруктураДанныхДокумента.ВхИсх = ВхИсх;
	СтруктураДанныхДокумента.ГдеСоздан = ГдеСоздан;
	
	НеВыполнятьОбновлениеДанных = Ложь;
	Если РежимЭлектроннаяФорма или МаршрутПоДаннымФормы Тогда
		ИнформацияПоЗаполнениюОбязательныхРеквизитов = "";
		Если ЗаполнитьДанныеПоЭлектроннойФорме(СтруктураДанныхДокумента, РежимЭлектроннаяФорма, МаршрутПоДаннымФормы, Ложь, ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
			Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
				Сообщить(ИнформацияПоЗаполнениюОбязательныхРеквизитов);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
				Сообщить(ИнформацияПоЗаполнениюОбязательныхРеквизитов);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		НеВыполнятьОбновлениеДанных = Истина;
	КонецЕсли;
	
	лМассивДанныхПоДокументам.Добавить(СтруктураДанныхДокумента);
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхПоДокументам);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("Проверка");
	ВыполняемыеОперации.Добавить("ПоказатьРезультатПроверки");
	Если НеВыполнятьОбновлениеДанных Тогда
		ВыполняемыеОперации.Добавить("НеВыполнятьОбновлениеДанных");
	КонецЕсли;
	
	ПараметрыОпераций = Новый Структура;
	ПараметрыОпераций.Вставить("ВыполняемыеОперации", ВыполняемыеОперации);
	ПараметрыОпераций.Вставить("ТаблицаНеобходимыхПодписей", Неопределено);
	ПараметрыОпераций.Вставить("ТаблицаНеобходимыхПодписейШифрования", Неопределено);
	ПараметрыОпераций.Вставить("ВерсияМассиваДанныхПоДокументам", ВерсияМассиваДанныхПоДокументам);
	ПараметрыОпераций.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	ВыполнитьОперацииСЭлектроннымиДокументами(ПараметрыОпераций);
КонецПроцедуры


&НаКлиенте
Функция ЗаполнитьДанныеПоВложениям(СтруктураДанныхДокумента)
	ИтогВложенияРазмерФайлов = Вложения.Итог("РазмерФайла");
	Если ИтогВложенияРазмерФайлов > 20 * 1024 * 1024 Тогда
		Сообщить(НСтр("ru = 'Превышен размер вложений (20МБ)'; uk = 'Перевищено розмір вкладень (20МБ)'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
		НеобходимоПерезаписатьВложения = Ложь;
		Если УдаленныеВложения.Количество() > 0 Тогда
			НеобходимоПерезаписатьВложения = Истина;
		Иначе
			Для Каждого СтрокаВложения Из Вложения Цикл
				Если ЭтоАдресВременногоХранилища(СтрокаВложения.ВложениеДокумента) Тогда
					НеобходимоПерезаписатьВложения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НеобходимоПерезаписатьВложения Тогда
			ПерезаписатьВложенияПоЭлектронномуДокументу_НаСервере(ЭлектронныйДокумент);
		КонецЕсли;
	ИначеЕсли СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
		или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
		Если Вложения.Количество() >= 1 Тогда
			Вложение = Вложения.Получить(0);
			Если ЭтоАдресВременногоХранилища(Вложение.ВложениеДокумента) Тогда
				СтруктураДанныхДокумента.ИмяФайлаВложениеДокумента1 = Вложение.ИмяФайлаВложениеДокумента;
				СтруктураДанныхДокумента.ВложениеДокумента1 = Base64Строка(ПолучитьИзВременногоХранилища(Вложение.ВложениеДокумента));
				СтруктураДанныхДокумента.ВложениеДокументаФайл1 = Вложение.Файл;
			КонецЕсли;
		КонецЕсли; 
		Если Вложения.Количество() >= 2 Тогда
			Вложение = Вложения.Получить(1);
			Если ЭтоАдресВременногоХранилища(Вложение.ВложениеДокумента) Тогда
				СтруктураДанныхДокумента.ИмяФайлаВложениеДокумента2 = Вложение.ИмяФайлаВложениеДокумента;
				СтруктураДанныхДокумента.ВложениеДокумента2 = Base64Строка(ПолучитьИзВременногоХранилища(Вложение.ВложениеДокумента));
				СтруктураДанныхДокумента.ВложениеДокументаФайл2 = Вложение.Файл;
			КонецЕсли;
		КонецЕсли; 
		Если Вложения.Количество() >= 3 Тогда
			Вложение = Вложения.Получить(2);
			Если ЭтоАдресВременногоХранилища(Вложение.ВложениеДокумента) Тогда
				СтруктураДанныхДокумента.ИмяФайлаВложениеДокумента3 = Вложение.ИмяФайлаВложениеДокумента;
				СтруктураДанныхДокумента.ВложениеДокумента3 = Base64Строка(ПолучитьИзВременногоХранилища(Вложение.ВложениеДокумента));
				СтруктураДанныхДокумента.ВложениеДокументаФайл3 = Вложение.Файл;
			КонецЕсли;
		КонецЕсли;
		Если Вложения.Количество() >= 4 Тогда
			ТекНомерВложения = 3;
			МассивВложений4 = Новый Массив;
			Пока Вложения.Количество() > ТекНомерВложения Цикл
				Вложение = Вложения.Получить(ТекНомерВложения);
				Если ЭтоАдресВременногоХранилища(Вложение.ВложениеДокумента) Тогда
					ТекСтруктураВложения = Новый Структура;
					ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", Вложение.ИмяФайлаВложениеДокумента);
					ТекСтруктураВложения.Вставить("ВложениеДокумента", Base64Строка(ПолучитьИзВременногоХранилища(Вложение.ВложениеДокумента)));
					ТекСтруктураВложения.Вставить("ВложениеДокументаФайл", Вложение.Файл);
					МассивВложений4.Добавить(Новый ФиксированнаяСтруктура(ТекСтруктураВложения));
				КонецЕсли;
				ТекНомерВложения = ТекНомерВложения + 1;
			КонецЦикла;
			СтруктураДанныхДокумента.МассивВложенийДокумента4 = Новый ФиксированныйМассив(МассивВложений4);
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ЗаполнитьДанныеПоОтправкеСсылкиНаДокумент(СтруктураДанныхДокумента)
	Если ОтправкаСсылкиНаДокументНастроено Тогда
		МассивСсылокНаДокумент = Новый Массив;
		Для Каждого СтрокаТаблицы Из ОтправкаСсылкиНаДокументТаблица Цикл
			ТекСтруктураСсылки = Новый Структура;
			ТекСтруктураСсылки.Вставить("ЭлектроннаяПочта", СтрокаТаблицы.ЭлектроннаяПочта);
			ТекСтруктураСсылки.Вставить("Комментарий", СтрокаТаблицы.Комментарий);
			МассивСсылокНаДокумент.Добавить(Новый ФиксированнаяСтруктура(ТекСтруктураСсылки));
		КонецЦикла;
		СтруктураДанныхДокумента.МассивНастроекОтправкаСсылкиНаДокумент = Новый ФиксированныйМассив(МассивСсылокНаДокумент);
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСерверебезКонтекста
Процедура СохранитьПримечаниеЭлектронногоДокументаНаСервере(ЭлектронныйДокумент, NOTATION)
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Если ЭлектронныйДокумент.NOTATION <> NOTATION Тогда
			ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокументОбъект.NOTATION = NOTATION;
			ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
			ЭлектронныйДокументОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПримечаниеЭлектронногоДокумента()
	Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
		СохранитьПримечаниеЭлектронногоДокументаНаСервере(ЭлектронныйДокумент, ПримечаниеЭлектронногоДокумента);
	КонецЕсли;
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьПодписьИОтправкуЭлектронногоДокумента(Отправлять, ОтправлятьТолькоСсылку = Ложь, ОтправлятьНаДоподписание = Ложь, ПовторноеУтверждение = Ложь)
	лМассивДанныхПоДокументам = Новый Массив;
	
	лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
	лСтруктураДанныхДокумента.Документ1С = Документ1С;
	лСтруктураДанныхДокумента.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
	лСтруктураДанныхДокумента.ЭлектронныйДокумент = ЭлектронныйДокумент;
	лСтруктураДанныхДокумента.Организация = ОрганизацияEDI;
	лСтруктураДанныхДокумента.Состояние = СостояниеЭлектронногоДокумента;
	лСтруктураДанныхДокумента.РегистрируетсяВЕРННПокупателем = РегистрируетсяВЕРННПокупателем;
	лСтруктураДанныхДокумента.ВидДокумента1С = скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(Документ1С);
	лСтруктураДанныхДокумента.ВхИсх = ВхИсх;
	лСтруктураДанныхДокумента.ГдеСоздан = ГдеСоздан;
	лСтруктураДанныхДокумента.Примечание = ПримечаниеЭлектронногоДокумента;
	
	Если (РежимЭлектроннаяФорма и не РежимЭлектроннаяФормаТолькоПросмотр) или МаршрутПоДаннымФормы Тогда
		ИнформацияПоЗаполнениюОбязательныхРеквизитов = "";
		Если ЗаполнитьДанныеПоЭлектроннойФорме(лСтруктураДанныхДокумента, (РежимЭлектроннаяФорма и не РежимЭлектроннаяФормаТолькоПросмотр), МаршрутПоДаннымФормы, Истина, ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
			Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
				Сообщить(ИнформацияПоЗаполнениюОбязательныхРеквизитов);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
				Сообщить(ИнформацияПоЗаполнениюОбязательныхРеквизитов);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если не ЗаполнитьДанныеПоОтправкеСсылкиНаДокумент(лСтруктураДанныхДокумента) Тогда
		Возврат;
	КонецЕсли;
	Если не ЗаполнитьДанныеПоВложениям(лСтруктураДанныхДокумента) Тогда
		Возврат;
	КонецЕсли;
	СохранитьПримечаниеЭлектронногоДокумента();
	
	лМассивДанныхПоДокументам.Добавить(лСтруктураДанныхДокумента);
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхПоДокументам);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	
	ВыполняемыеОперации = Новый Массив;
	Если ОтправлятьНаДоподписание Тогда
		ВыполняемыеОперации.Добавить("ОтправитьНаДоподписание");
	Иначе
		Если БесплатнаяОтправка50 Тогда
			Отправлять = Истина;
			ВыполняемыеОперации.Добавить("Free");
		КонецЕсли;
		Если ПовторноеУтверждение Тогда  
			ВыполняемыеОперации.Добавить("ПовторноеУтверждение");
		КонецЕсли;
		ВыполняемыеОперации.Добавить("Подпись");
		
		Если Отправлять Тогда  
			ВыполняемыеОперации.Добавить("Отправка");
			Если ОтправлятьТолькоСсылку Тогда
				ВыполняемыеОперации.Добавить("OnlyHref");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, ОрганизацияEDI, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, ОрганизацияEDI, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("РезультатыФункцииПечатьДокумента", Неопределено);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодписьЭлектронногоДокумента()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьПодписьИОтправкуЭлектронногоДокументаВДФС(Отправлять)
	лМассивДанныхПоДокументам = Новый Массив;
	
	лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
	лСтруктураДанныхДокумента.Документ1С = Документ1С;
	лСтруктураДанныхДокумента.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
	лСтруктураДанныхДокумента.ЭлектронныйДокумент = ЭлектронныйДокумент;
	лСтруктураДанныхДокумента.Организация = ОрганизацияEDI;
	лСтруктураДанныхДокумента.Состояние = СостояниеЭлектронногоДокумента;
	лСтруктураДанныхДокумента.РегистрируетсяВЕРННПокупателем = РегистрируетсяВЕРННПокупателем;
	лСтруктураДанныхДокумента.ВидДокумента1С = скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(Документ1С);
	лСтруктураДанныхДокумента.ВхИсх = ВхИсх;
	лСтруктураДанныхДокумента.ГдеСоздан = ГдеСоздан;
	
	Если не ЗаполнитьДанныеПоОтправкеСсылкиНаДокумент(лСтруктураДанныхДокумента) Тогда
		Возврат;
	КонецЕсли;
	Если не ЗаполнитьДанныеПоВложениям(лСтруктураДанныхДокумента) Тогда
		Возврат;
	КонецЕсли;
	СохранитьПримечаниеЭлектронногоДокумента();
	
	лМассивДанныхПоДокументам.Добавить(лСтруктураДанныхДокумента);
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхПоДокументам);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("Подпись");
	
	Если Отправлять Тогда  
		ВыполняемыеОперации.Добавить("ОтправкаВДФС");
	КонецЕсли;
	
	
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, ОрганизацияEDI, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, ОрганизацияEDI, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("РезультатыФункцииПечатьДокумента", Неопределено);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодписьЭлектронногоДокумента()

&НаКлиенте
Процедура ВыполнитьОперацииСЭлектроннымиДокументами(ПараметрыОпераций, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	Если ПараметрыОпераций <> Неопределено Тогда
		Если ПараметрыОпераций.ВерсияМассиваДанныхПоДокументам = ВерсияМассиваДанныхПоДокументам Тогда
			//ПараметрыОпераций.ВыполняемыеОперации
			//ПараметрыОпераций.ТаблицаНеобходимыхПодписей
			//ПараметрыОпераций.ТаблицаНеобходимыхПодписейШифрования
			//МассивДанныхПоДокументам
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("ВыполняемыеОперации"              , ПараметрыОпераций.ВыполняемыеОперации);
			СтруктураДополнительныхПараметров.Вставить("НастройкиНеобходимыхПодписей"     , ПараметрыОпераций.ТаблицаНеобходимыхПодписей);
			СтруктураДополнительныхПараметров.Вставить("НастройкиПодписейШифрования"      , ПараметрыОпераций.ТаблицаНеобходимыхПодписейШифрования);
			СтруктураДополнительныхПараметров.Вставить("ЖурналРабочегоСтола"              , ПараметрыОпераций.ЖурналРабочегоСтола);
			СтруктураДополнительныхПараметров.Вставить("КоличествоЭлементовВОднойТаблице" , 1000); //ДОРАБОТАТЬ
			СтруктураДополнительныхПараметров.Вставить("ЖурналОперации" , "");
			
			Если ПараметрыОпераций.ВыполняемыеОперации.Найти("Отклонение") <> Неопределено Тогда 
				
				лТекстКвитанции = "";
				
				Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
					
					Если ВвестиСтроку(лТекстКвитанции, НСтр("ru = 'Отклонить по причине:'; uk = 'Відхилити по причині:'"), , Истина) Тогда							
						ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами(лТекстКвитанции, СтруктураДополнительныхПараметров);
					КонецЕсли;
					
				Иначе
					
					скEDI_ОткрытиеФормБезМодальности.скEDI_ПоказатьВводСтроки("ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами"
																				, лТекстКвитанции
																				, НСтр("ru = 'Отклонить по причине:'; uk = 'Відхилити по причині:'")
																				, ЭтаФорма
																				, СтруктураДополнительныхПараметров);
				КонецЕсли;
				
			ИначеЕсли ПараметрыОпераций.ВыполняемыеОперации.Найти("Отзыв") <> Неопределено Тогда 
				
				
				лТекстКвитанции = "";
				
				Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
					
					Если ВвестиСтроку(лТекстКвитанции, НСтр("ru = 'Заблокировать по причине:'; uk = 'Заблокувати по причині:'"), , Истина) Тогда							
						ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами(лТекстКвитанции, СтруктураДополнительныхПараметров);
					КонецЕсли;
					
				Иначе
					
					скEDI_ОткрытиеФормБезМодальности.скEDI_ПоказатьВводСтроки("ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами"
																				, лТекстКвитанции
																				, НСтр("ru = 'Заблокировать по причине:'; uk = 'Заблокувати по причині:'")
																				, ЭтаФорма
																				, СтруктураДополнительныхПараметров);
				КонецЕсли;

			Иначе	
				ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами("",СтруктураДополнительныхПараметров);
			КонецЕсли;
			//СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами(ПараметрыОпераций = Неопределено, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	
	// Проверка указания причины отклонения.
	Если (ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отклонение") <> Неопределено
		ИЛИ ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отзыв") <> Неопределено)
		И ПараметрыОпераций = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли (ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отклонение") <> Неопределено
		ИЛИ ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отзыв") <> Неопределено) Тогда 		
		ДополнительныеПараметрыОпераций.Вставить("ТекстКвитанции" , ПараметрыОпераций);	
	КонецЕсли;	
	
	
	РезультатыФункцииПечатьДокумента = Неопределено;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатыФункцииПечатьДокумента = скEDI_НастройкиПодКонфигурациюКлиент.ПолучитьРезультатыФункцииПечатьДокумента(МассивДанныхПоДокументам);
	#КонецЕсли
	Если РезультатыФункцииПечатьДокумента = Неопределено Тогда
		//лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Неопределено;
	Иначе
		ФиксированноеСоответствиеДокументов = Новый ФиксированноеСоответствие(РезультатыФункцииПечатьДокумента);
		//лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура;
		ДополнительныеПараметрыОпераций.Вставить("РезультатыФункцииПечатьДокумента", ФиксированноеСоответствиеДокументов);
	КонецЕсли;
	
	
	//Если ДополнительныеПараметры.Свойство("ОбработкаОдногоДокумента") 
	//	И ДополнительныеПараметры.ОбработкаОдногоДокумента Тогда 
	//	
	КлючОбработанойЗаписи = Неопределено;
	ЖурналРабочегоСтолаОбработанойЗаписи = Неопределено;
	ДополнительныеПараметрыОпераций.Свойство("ЖурналРабочегоСтола", ЖурналРабочегоСтолаОбработанойЗаписи);
	Результат = скEDI_ОбщегоНазначения.ОбработкаДокументаВызовСервера(МассивДанныхПоДокументам, ДополнительныеПараметрыОпераций, КлючОбработанойЗаписи);
	//	
	//Иначе	
	//Результат = скEDI_ОбщегоНазначения.ОбработкаДокументовВызовСервера(МассивДанныхПоДокументам, СтруктураДополнительныхПараметров);
	//КонецЕсли;
	
	Если ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("ПоказатьРезультатПроверки") <> Неопределено Тогда
		Если МассивДанныхПоДокументам.Количество() >= 1 Тогда
			лСтруктураДанныхДокумента = МассивДанныхПоДокументам.Получить(0);
			Если лСтруктураДанныхДокумента.ПроверкаВыполнена Тогда
				ТекстСообщенияОРезультатахПроверки = НСтр("ru = 'Документ проверен'; uk = 'Документ перевірено'");
				Если лСтруктураДанныхДокумента.ЕстьОшибки Тогда
					ТекстСообщенияОРезультатахПроверки = ТекстСообщенияОРезультатахПроверки + Символы.ПС + НСтр("ru = 'Есть ошибки:'; uk = 'Є помилки:'");
				ИначеЕсли лСтруктураДанныхДокумента.ЕстьЗамечания Тогда
					ТекстСообщенияОРезультатахПроверки = ТекстСообщенияОРезультатахПроверки + Символы.ПС + НСтр("ru = 'Есть замечания:'; uk = 'Є зауваження:'");
				Иначе
					ТекстСообщенияОРезультатахПроверки = ТекстСообщенияОРезультатахПроверки + Символы.ПС + НСтр("ru = 'Ошибор/замечаний нет'; uk = 'Помилок/зауважень немає'");
				КонецЕсли;
				Если лСтруктураДанныхДокумента.ОписаниеОшибок <> "" Тогда
					ТекстСообщенияОРезультатахПроверки = ТекстСообщенияОРезультатахПроверки + Символы.ПС + лСтруктураДанныхДокумента.ОписаниеОшибок;
				КонецЕсли;
				//ПоказатьПредупреждение(, ТекстСообщенияОРезультатахПроверки, 30, НСтр("ru = 'Результат проверки'; uk = 'Результат перевірки'"));
				Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
					Предупреждение(ТекстСообщенияОРезультатахПроверки, 30, НСтр("ru = 'Результат проверки'; uk = 'Результат перевірки'"));
				Иначе
					скEDI_ОткрытиеФормБезМодальности.ПоказатьПредупреждение_83(ТекстСообщенияОРезультатахПроверки, 30, НСтр("ru = 'Результат проверки'; uk = 'Результат перевірки'"));
				КонецЕсли;
			Иначе
				//ПоказатьПредупреждение(, НСтр("ru = 'Документ не проверен'; uk = 'Документ не перевірено'"), 30, НСтр("ru = 'Результат проверки'; uk = 'Результат перевірки'"));
				Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
					Предупреждение(НСтр("ru = 'Документ не проверен'; uk = 'Документ не перевірено'"), 30, );
				Иначе
					скEDI_ОткрытиеФормБезМодальности.ПоказатьПредупреждение_83(НСтр("ru = 'Документ не проверен'; uk = 'Документ не перевірено'"), 30);
				КонецЕсли;
				Если ЗначениеЗаполнено(Результат) Тогда 
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);	
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);	
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);	
	КонецЕсли;
	
	Если ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("НеВыполнятьОбновлениеДанных") = Неопределено Тогда
		Если МассивДанныхПоДокументам.Количество() >= 1 Тогда
			лСтруктураДанныхДокумента = МассивДанныхПоДокументам.Получить(0);
			Если ЗначениеЗаполнено(лСтруктураДанныхДокумента.ЭлектронныйДокумент) Тогда
				Если ЗначениеЗаполнено(лСтруктураДанныхДокумента.Документ1С) Тогда
					УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаСервере(лСтруктураДанныхДокумента.ЭлектронныйДокумент);
				Иначе
					УстановитьРежим_ЕстьЭлектронныйДокументИНетДокумента1С_НаСервере(лСтруктураДанныхДокумента.ЭлектронныйДокумент);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(лСтруктураДанныхДокумента.Документ1С) Тогда
				УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаСервере(лСтруктураДанныхДокумента.Документ1С, лСтруктураДанныхДокумента.Организация, лСтруктураДанныхДокумента.ВидЭлектронногоДокумента);
				//Иначе
				//	Отказ = Истина;
				//	Сообщить("Данная форма может быть открыта только для определенного документа.");
			КонецЕсли;
			СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();
		КонецЕсли;

		ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументов();
		Если ЖурналРабочегоСтолаОбработанойЗаписи = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
			Оповестить("скEDI_НеобходимоОбновитьСписокЭлектронныхДокументов", КлючОбработанойЗаписи);
		ИначеЕсли ЖурналРабочегоСтолаОбработанойЗаписи = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
			Оповестить("скEDI_НеобходимоОбновитьСписокЭлектронныхДокументовДокументыНДС", КлючОбработанойЗаписи);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент()
	лМассивДанныхДокументов = Новый Массив;
	
	лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
	ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, ЭтаФорма);	
	лСтруктураДанныхДокумента.Вставить("Организация" , ОрганизацияEDI);
	лСтруктураДанныхДокумента.Вставить("Состояние" , СостояниеЭлектронногоДокумента);

	лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
	
	
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	Если БесплатнаяОтправка50 Тогда
		ВыполняемыеОперации.Добавить("Free");
	КонецЕсли;
	ВыполняемыеОперации.Добавить("Подпись");
	ВыполняемыеОперации.Добавить("ОтправкаКвитанций");
		
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, ОрганизацияEDI, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, ОрганизацияEDI, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
																						, ЭтаФорма 
																						, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьОтклонениеЭлектронногоДокумента()
	лМассивДанныхДокументов = Новый Массив;
	
	лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
	лСтруктураДанныхДокумента.Вставить("Организация" , ОрганизацияEDI);
	лСтруктураДанныхДокумента.Вставить("Состояние" , СостояниеЭлектронногоДокумента);

	ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, ЭтаФорма);
	
	//Если скEDI_ОбщегоНазначения.ЭлектронныйДокументНеОтправлен(ЭлектронныйДокумент) Тогда			
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);			
	//КонецЕсли;
		

	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	Если БесплатнаяОтправка50 Тогда
		ВыполняемыеОперации.Добавить("Free");
	КонецЕсли;
	//ВыполняемыеОперации.Добавить("Подпись");
	ВыполняемыеОперации.Добавить("Отклонение");
		
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, ОрганизацияEDI, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, ОрганизацияEDI, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
																						, ЭтаФорма 
																						, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьОтзывЭлектронногоДокумента()
	лМассивДанныхДокументов = Новый Массив;
	
	лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
	ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, ЭтаФорма);
	лСтруктураДанныхДокумента.Вставить("Организация" , ОрганизацияEDI);	
	лСтруктураДанныхДокумента.Вставить("Состояние" , СостояниеЭлектронногоДокумента);
	
	//Если Не скEDI_ОбщегоНазначения.ЭлектронныйДокументНеОтправлен(ЭлектронныйДокумент) Тогда			 
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);		 
	//Иначе			 
	//	Сообщить("Электронный документ " + ЭлектронныйДокумент + " ранее уже был отправлен.");			 
	//КонецЕсли;
	
	
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	Если БесплатнаяОтправка50 Тогда
		ВыполняемыеОперации.Добавить("Free");
	КонецЕсли;
	//ВыполняемыеОперации.Добавить("Подпись");
	ВыполняемыеОперации.Добавить("Отзыв");
		
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, ОрганизацияEDI, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, ОрганизацияEDI, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
																						, ЭтаФорма 
																						, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент()

////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПрименитьВариантОтображения()
	ОтображатьPDF = Ложь;
	ОтображатьКартинку = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ОтображениеЭлектронныхДокументов.ОтображениеЭлектронныхДокументов,
	               |	ВЫБОР
	               |		КОГДА скEDI_ОтображениеЭлектронныхДокументов.Пользователь = &ТекПользователь
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	РегистрСведений.скEDI_ОтображениеЭлектронныхДокументов КАК скEDI_ОтображениеЭлектронныхДокументов
	               |ГДЕ
	               |	(скEDI_ОтображениеЭлектронныхДокументов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ИЛИ скEDI_ОтображениеЭлектронныхДокументов.Пользователь = &ТекПользователь)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
	Запрос.УстановитьПараметр("ТекПользователь", скEDI_НастройкиПодКонфигурацию.ПолучитьТекущегоПользователя());
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Если ВыборкаРезультатаЗапроса.ОтображениеЭлектронныхДокументов = ПредопределенноеЗначение("Перечисление.скEDI_ВариантыОтображенияЭлектронныхДокументов.PDF") Тогда
			ОтображатьPDF = Истина;
		ИначеЕсли ВыборкаРезультатаЗапроса.ОтображениеЭлектронныхДокументов = ПредопределенноеЗначение("Перечисление.скEDI_ВариантыОтображенияЭлектронныхДокументов.Картинка") Тогда
			ОтображатьКартинку = Истина;
		КонецЕсли;
	Иначе
		ОтображатьКартинку = Истина;
	КонецЕсли;
	УстановитьВариантОтображения();
КонецПроцедуры

&НаСервере
Функция ПолучитьЭлементОтображенияРежимаЭлектроннаяФорма()
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
		Возврат Элементы.ЭлектроннаяФормаНалоговаяНакладная;
	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		Возврат Элементы.ЭлектроннаяФормаПриложение2КНалоговойНакладной;
	ИначеЕсли ВРег(ЕДРПОУВладельцаШаблона) = "311131113" и ВРег(ИмяШаблона) = "MULTIDOC" Тогда
		Возврат Элементы.ЭлектроннаяФормаMULTIDOC;
	ИначеЕсли ВРег(ЕДРПОУВладельцаШаблона) = "311131113" и ВРег(ИмяШаблона) = "ZERODOC" Тогда
		Возврат Элементы.ЭлектроннаяФормаZERODOC;
	Иначе
		Возврат Элементы.ЭлектроннаяФорма;
	КонецЕсли;		
КонецФункции

&НаКлиенте
Процедура ГруппаОтображениеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//Если РежимЭлектроннаяФорма Тогда
	//	Если не РежимЭлектроннаяФормаТолькоПросмотр Тогда
			Если Элементы.ГруппаОтображение.ТекущаяСтраница = Элементы.ОтображениеPDF Тогда
				СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();
				//СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
				//ПоказатьИзображениеЭлектронногоДокумента();
			ИначеЕсли Элементы.ГруппаОтображение.ТекущаяСтраница = Элементы.ОтображениеКартинки Тогда
				СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();
				//СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
				//ПоказатьИзображениеЭлектронногоДокумента();
			КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантОтображения(ПереключатьСтраницу = Истина)
	КоличествоВидимыхСтраниц = 0;
	ЭлементОтображенияТекущаяСтраница = Неопределено;
	
	Если РежимЭлектроннаяФормаТолькоПросмотр Тогда
		Элементы.ФормаЭлектроннаяФормаТолькоПросмотр.Пометка = Истина;
		Если РежимЭлектроннаяФормаМожноРедактировать Тогда
			Элементы.ФормаЭлектроннаяФормаТолькоПросмотр.Доступность = Истина;
		Иначе
			Элементы.ФормаЭлектроннаяФормаТолькоПросмотр.Доступность = Ложь;
		КонецЕсли;
		
		Элементы.ЭлектронныйДокумент_Дата.ТолькоПросмотр = Истина;
		Элементы.ЭлектронныйДокумент_Номер.ТолькоПросмотр = Истина;
		Элементы.ЭлектронныйДокумент_Контрагент.ТолькоПросмотр = Истина;
		Элементы.ЭлектронныйДокумент_СуммаДокумента.ТолькоПросмотр = Истина;
		Элементы.ЭлектронныйДокумент_ОтветственныйНаименование.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_Таблица0Строка0.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_Таблица1.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_Таблица2.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_Таблица3.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_Таблица4.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_Таблица5.ТолькоПросмотр = Истина;
		
		Элементы.ЭлектроннаяФорма_НДСлужебныеДанныеТаблица0Строка0.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_НалоговаяНакладнаяТаблица0Строка0.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_НалоговаяНакладнаяТаблица1.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица0Строка0.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица1.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ФормаЭлектроннаяФормаТолькоПросмотр.Пометка = Ложь;
		Элементы.ФормаЭлектроннаяФормаТолькоПросмотр.Доступность = Ложь;
		
		Элементы.ЭлектронныйДокумент_Дата.ТолькоПросмотр = Ложь;
		Элементы.ЭлектронныйДокумент_Номер.ТолькоПросмотр = Ложь;
		Элементы.ЭлектронныйДокумент_Контрагент.ТолькоПросмотр = Ложь;
		Элементы.ЭлектронныйДокумент_СуммаДокумента.ТолькоПросмотр = Ложь;
		Элементы.ЭлектронныйДокумент_ОтветственныйНаименование.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_Таблица0Строка0.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_Таблица1.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_Таблица2.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_Таблица3.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_Таблица4.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_Таблица5.ТолькоПросмотр = Ложь;
		
		Элементы.ЭлектроннаяФорма_НДСлужебныеДанныеТаблица0Строка0.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_НалоговаяНакладнаяТаблица0Строка0.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_НалоговаяНакладнаяТаблица1.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица0Строка0.ТолькоПросмотр = Ложь;
		Элементы.ЭлектроннаяФорма_Приложение2КНалоговойНакладнойТаблица1.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если РежимЕстьЭлектроннаяФорма Тогда
		Элементы.ФормаЭлектроннаяФормаТолькоПросмотр.Видимость = Истина;
		
		ЭлементОтображенияРежимаЭлектроннаяФорма = ПолучитьЭлементОтображенияРежимаЭлектроннаяФорма();
		Элементы.ЭлектроннаяФормаMULTIDOC.Видимость = (ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФормаMULTIDOC);
		Элементы.ЭлектроннаяФормаZERODOC.Видимость = (ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФормаZERODOC);
		Элементы.ЭлектроннаяФорма.Видимость = (ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФорма);
		Элементы.ЭлектроннаяФормаНалоговаяНакладная.Видимость = (ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФормаНалоговаяНакладная);
		Элементы.ЭлектроннаяФормаПриложение2КНалоговойНакладной.Видимость = (ЭлементОтображенияРежимаЭлектроннаяФорма = Элементы.ЭлектроннаяФормаПриложение2КНалоговойНакладной);
		Элементы.ЭлектроннаяФормаНДСлужебныеДанные.Видимость = Элементы.ЭлектроннаяФормаНалоговаяНакладная.Видимость или Элементы.ЭлектроннаяФормаПриложение2КНалоговойНакладной.Видимость;
		
		ЭлектроннаяФормаНалоговаяНакладная = Элементы.ЭлектроннаяФормаНалоговаяНакладная.Видимость;
		ЭлектроннаяФормаПриложение2КНалоговойНакладной = Элементы.ЭлектроннаяФормаПриложение2КНалоговойНакладной.Видимость;
		ЭлектроннаяФормаMULTIDOC = Элементы.ЭлектроннаяФормаMULTIDOC.Видимость;
		ЭлектроннаяФормаZERODOC = Элементы.ЭлектроннаяФормаZERODOC.Видимость;
		
		КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		//Элементы.ОтображениеОшибка.Видимость = Ложь;
		//Элементы.ОтображениеPDF.Видимость = Ложь;
		//Элементы.ОтображениеКартинки.Видимость = Ложь;
		//Элементы.ОтображениеОшибка.Доступность = Ложь;
		//Элементы.ОтображениеPDF.Доступность = Ложь;
		//Элементы.ОтображениеКартинки.Доступность = Ложь;
		Если РежимЭлектроннаяФорма Тогда
			Если ЭлементОтображенияТекущаяСтраница = Неопределено Тогда
				ЭлементОтображенияТекущаяСтраница = ЭлементОтображенияРежимаЭлектроннаяФорма;
			КонецЕсли;
		КонецЕсли;
		//Элементы.ГруппаОтображение.ТекущаяСтраница = ЭлементОтображенияРежимаЭлектроннаяФорма;
		//Элементы.ГруппаОтображение.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Если ДоступноОтменитьЗаполнениеПоЭлектроннойФормеЭлектронногоДокумента Тогда
			Элементы.ФормаОтменитьЗаполнениеДокументаПоЭлектроннойФорме.Доступность = Истина;
			Элементы.ФормаОтменитьЗаполнениеДокументаПоЭлектроннойФорме.Видимость = Истина;
		Иначе
			Элементы.ФормаОтменитьЗаполнениеДокументаПоЭлектроннойФорме.Доступность = Ложь;
			Элементы.ФормаОтменитьЗаполнениеДокументаПоЭлектроннойФорме.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.ФормаЭлектроннаяФормаТолькоПросмотр.Видимость = Ложь;
		
		Элементы.ЭлектроннаяФорма.Видимость = Ложь;
		Элементы.ЭлектроннаяФормаНалоговаяНакладная.Видимость = Ложь;
		Элементы.ЭлектроннаяФормаПриложение2КНалоговойНакладной.Видимость = Ложь;
		Элементы.ЭлектроннаяФормаНДСлужебныеДанные.Видимость = Ложь;
		Элементы.ЭлектроннаяФормаMULTIDOC.Видимость = Ложь;
		Элементы.ЭлектроннаяФормаZERODOC.Видимость = Ложь;
		
		Элементы.ФормаОтменитьЗаполнениеДокументаПоЭлектроннойФорме.Доступность = Ложь;
		Элементы.ФормаОтменитьЗаполнениеДокументаПоЭлектроннойФорме.Видимость = Ложь;
		
		ЭлектроннаяФормаНалоговаяНакладная = Ложь;
		ЭлектроннаяФормаПриложение2КНалоговойНакладной = Ложь;
		ЭлектроннаяФормаMULTIDOC = Ложь;
		ЭлектроннаяФормаZERODOC = Ложь;
	КонецЕсли;
	
	Если ОтображатьОшибку Тогда
		Элементы.ОтображениеОшибка.Видимость = Истина;
		Элементы.ОтображениеОшибка.Доступность = Истина;
		Элементы.ОтображениеPDF.Видимость = Ложь;
		Элементы.ОтображениеPDF.Доступность = Ложь;
		Элементы.ОтображениеКартинки.Видимость = Ложь;
		Элементы.ОтображениеКартинки.Доступность = Ложь;
		Элементы.ОтображениеНетДанных.Видимость = Ложь;
		Элементы.ОтображениеНетДанных.Доступность = Ложь;
		
		КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		Если ЭлементОтображенияТекущаяСтраница = Неопределено Тогда
			ЭлементОтображенияТекущаяСтраница = Элементы.ОтображениеОшибка;
		КонецЕсли;
	ИначеЕсли Не ЕстьДанныеЭлектронногоДокумента Тогда
		Элементы.ОтображениеОшибка.Видимость = Ложь;
		Элементы.ОтображениеОшибка.Доступность = Ложь;
		Элементы.ОтображениеPDF.Видимость = Ложь;
		Элементы.ОтображениеPDF.Доступность = Ложь;
		Элементы.ОтображениеКартинки.Видимость = Ложь;
		Элементы.ОтображениеКартинки.Доступность = Ложь;
		Элементы.ОтображениеНетДанных.Видимость = Истина;
		Элементы.ОтображениеНетДанных.Доступность = Истина;
		
		КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		Если ЭлементОтображенияТекущаяСтраница = Неопределено Тогда
			ЭлементОтображенияТекущаяСтраница = Элементы.ОтображениеНетДанных;
		КонецЕсли;
	ИначеЕсли ОтображатьPDF и ОтображатьКартинку Тогда
		//Элементы.ГруппаОтображение.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		//Элементы.ГруппаОтображение.ТекущаяСтраница = Элементы.ОтображениеPDF;
		Элементы.ОтображениеPDF.Видимость = Истина;
		Элементы.ОтображениеPDF.Доступность = Истина;
		Элементы.ОтображениеКартинки.Видимость = Истина;
		Элементы.ОтображениеКартинки.Доступность = Истина;
		Элементы.ОтображениеОшибка.Видимость = Ложь;
		Элементы.ОтображениеОшибка.Доступность = Ложь;
		Элементы.ОтображениеНетДанных.Видимость = Ложь;
		Элементы.ОтображениеНетДанных.Доступность = Ложь;
		КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 2;
		Если ЭлементОтображенияТекущаяСтраница = Неопределено Тогда
			ЭлементОтображенияТекущаяСтраница = Элементы.ОтображениеPDF;
		КонецЕсли;
	Иначе
		//Элементы.ГруппаОтображение.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ОтображениеОшибка.Видимость = Ложь;
		Элементы.ОтображениеОшибка.Доступность = Ложь;
		Элементы.ОтображениеНетДанных.Видимость = Ложь;
		Элементы.ОтображениеНетДанных.Доступность = Ложь;
		Если ОтображатьPDF Тогда
			//Элементы.ГруппаОтображение.ТекущаяСтраница = Элементы.ОтображениеPDF;
			Элементы.ОтображениеPDF.Доступность = Истина;
			Элементы.ОтображениеPDF.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
			Если ЭлементОтображенияТекущаяСтраница = Неопределено Тогда
				ЭлементОтображенияТекущаяСтраница = Элементы.ОтображениеPDF;
			КонецЕсли;
		Иначе
			Элементы.ОтображениеPDF.Доступность = Ложь;
			Элементы.ОтображениеPDF.Видимость = Ложь;
		КонецЕсли;
		Если ОтображатьКартинку Тогда
			//Элементы.ГруппаОтображение.ТекущаяСтраница = Элементы.ОтображениеКартинки;
			Элементы.ОтображениеКартинки.Доступность = Истина;
			Элементы.ОтображениеКартинки.Видимость = Истина;
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
			Если ЭлементОтображенияТекущаяСтраница = Неопределено Тогда
				ЭлементОтображенияТекущаяСтраница = Элементы.ОтображениеКартинки;
			КонецЕсли;
		Иначе
			Элементы.ОтображениеКартинки.Доступность = Ложь;
			Элементы.ОтображениеКартинки.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоВидимыхСтраниц > 1 Тогда
		Элементы.ГруппаОтображение.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаОтображение.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	Если ПереключатьСтраницу Тогда
		Элементы.ГруппаОтображение.ТекущаяСтраница = ЭлементОтображенияТекущаяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ТипДокументаЗаполняетсяПоЭлектроннойФорме(пТипДокумента, пЕДРПОУВладельцаШаблона = "", пКодШаблона = "", пВерсияШаблона = "")
	Если пТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
		пЕДРПОУВладельцаШаблона = "311131113";
		пКодШаблона = "MULTIDOC";
		пВерсияШаблона = "";
		Возврат Истина;
	ИначеЕсли пТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента") Тогда
		пЕДРПОУВладельцаШаблона = "311131113";
		пКодШаблона = "ZERODOC";
		пВерсияШаблона = "";
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНаСервере(пЭлектронныйДокумент, пДокумент1С, пОрганизация, пВидЭлектронногоДокумента, пТипДокумента, пСвязанныйЭлектронныйДокумент, пСвязанныйЭлектронныйДокументТипСвязи, Отказ = Ложь)
	Если ЗначениеЗаполнено(пЭлектронныйДокумент) Тогда
		Если ЗначениеЗаполнено(пЭлектронныйДокумент.Документ1С) Тогда
			УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаСервере(пЭлектронныйДокумент);
		Иначе
			УстановитьРежим_ЕстьЭлектронныйДокументИНетДокумента1С_НаСервере(пЭлектронныйДокумент);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(пДокумент1С) Тогда
		УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаСервере(пДокумент1С, пОрганизация, пВидЭлектронногоДокумента);
	ИначеЕсли ЗначениеЗаполнено(пОрганизация) и ТипДокументаЗаполняетсяПоЭлектроннойФорме(пТипДокумента) Тогда
		НаОсновании = пТипДокумента;
		СвязанныйЭлектронныйДокумент = пСвязанныйЭлектронныйДокумент;
		СвязанныйЭлектронныйДокументТипСвязи = пСвязанныйЭлектронныйДокументТипСвязи;
		УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаСервере(пДокумент1С, пОрганизация, пВидЭлектронногоДокумента, пТипДокумента);
	Иначе
		Отказ = Истина;
		//Сообщить("Данная форма может быть открыта только для определенного документа.");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем пЭлектронныйДокумент, пДокумент1С, пОрганизация, пВидЭлектронногоДокумента;
	Перем пТипДокумента, пСвязанныйЭлектронныйДокумент, пСвязанныйЭлектронныйДокументТипСвязи;//, пКонтрагент;
	
	Параметры.Свойство("ЭлектронныйДокумент", пЭлектронныйДокумент);
	Параметры.Свойство("Документ1С", пДокумент1С);
	Параметры.Свойство("Организация", пОрганизация);
	Параметры.Свойство("ВидЭлектронногоДокумента", пВидЭлектронногоДокумента);
	Параметры.Свойство("ТипДокумента", пТипДокумента);
	Параметры.Свойство("СвязанныйЭлектронныйДокумент", пСвязанныйЭлектронныйДокумент);
	Параметры.Свойство("СвязанныйЭлектронныйДокументТипСвязи", пСвязанныйЭлектронныйДокументТипСвязи);
	//Параметры.Свойство("Контрагент", пКонтрагент);
	
	ПрименитьВариантОтображения();
	
	ОбновитьДанныеНаСервере(пЭлектронныйДокумент, пДокумент1С, пОрганизация, пВидЭлектронногоДокумента, пТипДокумента, пСвязанныйЭлектронныйДокумент, пСвязанныйЭлектронныйДокументТипСвязи, Отказ);
	Если Отказ Тогда
		Сообщить("Данная форма может быть открыта только для определенного документа.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();
	ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Для Каждого Файл Из СписокВременныхФайловКУдалению Цикл
		Попытка
			УдалитьФайлы(Файл.Значение);	
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныйДокументПриИзмененииВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИнициализироватьСохранениеДанныхЭлектронногоДокумента();
		ЭлектронныйДокумент = ДополнительныеПараметры;
		ЭлектронныйДокументПриИзменении_НаКлиенте();
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЭлектронныйДокумент = ДополнительныеПараметры;
		ЭлектронныйДокументПриИзменении_НаКлиенте();
	Иначе
		//Отмена
    КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныйДокументПриИзменении(Элемент)
	Если Модифицированность Тогда
		Если ЭлектронныйДокумент <> ЭлектронныйДокумент_ТекЗнач Тогда
			ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; uk = 'Дані було змінено. Зберегти зміни?'");
			ЭлектронныйДокумент_НовоеЗнач = ЭлектронныйДокумент;
			ЭлектронныйДокумент = ЭлектронныйДокумент_ТекЗнач;
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
				 Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				 ЭлектронныйДокументПриИзмененииВопросЗавершение(Ответ, ЭлектронныйДокумент_НовоеЗнач);
			Иначе
				скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ЭлектронныйДокументПриИзмененииВопросЗавершение", ЭтаФорма, ЭлектронныйДокумент_НовоеЗнач, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭлектронныйДокументПриИзменении_НаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныйДокументПриИзменении_НаКлиенте()
	Если ЗначениеЗаполнено(Документ1С) Тогда
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаКлиенте(ЭлектронныйДокумент);
		Иначе
			УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаКлиенте(Документ1С, ОрганизацияEDI, ВидЭлектронногоДокумента, НаОсновании);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаКлиенте(ЭлектронныйДокумент);
		Иначе
			Если ЗначениеЗаполнено(НаОсновании) Тогда
				УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаКлиенте(Документ1С, ОрганизацияEDI, ВидЭлектронногоДокумента, НаОсновании);
			Иначе
				ОчиститьПолеHTMLДокумента();
				Сообщить("ЗАКРОЙТЕ ОКНО");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидЭлектронногоДокументаПриИзмененииВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИнициализироватьСохранениеДанныхЭлектронногоДокумента();
		ВидЭлектронногоДокумента = ДополнительныеПараметры;
		ВидЭлектронногоДокументаПриИзменении_НаКлиенте();
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВидЭлектронногоДокумента = ДополнительныеПараметры;
		ВидЭлектронногоДокументаПриИзменении_НаКлиенте();
	Иначе
		//Отмена
    КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВидЭлектронногоДокументаПриИзменении(Элемент)
	Если Модифицированность Тогда
		Если ВидЭлектронногоДокумента <> ВидЭлектронногоДокумента_ТекЗнач Тогда
			ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; uk = 'Дані було змінено. Зберегти зміни?'");
			ВидЭлектронногоДокумента_НовоеЗнач = ВидЭлектронногоДокумента;
			ВидЭлектронногоДокумента = ВидЭлектронногоДокумента_ТекЗнач;
	        ПоказатьВопрос(Новый ОписаниеОповещения("ВидЭлектронногоДокументаПриИзмененииВопросЗавершение", ЭтаФорма, ВидЭлектронногоДокумента_НовоеЗнач), ТекстВопроса,  РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	Иначе
		ВидЭлектронногоДокументаПриИзменении_НаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидЭлектронногоДокументаПриИзменении_НаКлиенте()
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ВидЭлектронногоДокумента = ПолучитьРеквизитОбъектаНаСервере(ЭлектронныйДокумент, "ВидЭлектронногоДокумента");
		ВидЭлектронногоДокумента_ТекЗнач = ВидЭлектронногоДокумента;
	ИначеЕсли ЗначениеЗаполнено(Документ1С) Тогда
		УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаКлиенте(Документ1С, ОрганизацияEDI, ВидЭлектронногоДокумента, НаОсновании);
		//СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
		//ПоказатьИзображениеЭлектронногоДокумента();
	Иначе
		Если ЗначениеЗаполнено(НаОсновании) Тогда
			УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаКлиенте(Документ1С, ОрганизацияEDI, ВидЭлектронногоДокумента, НаОсновании);
		Иначе
			ОчиститьПолеHTMLДокумента();
			Сообщить("ЗАКРОЙТЕ ОКНО");
		КонецЕсли;
		//ОчиститьПолеHTMLДокумента();
		//Сообщить("ЗАКРОЙТЕ ОКНО");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопок_НаСервере()
	Если БесплатнаяОтправка50 Тогда
		Элементы.ФормаПодписатьЭлектронныйДокумент.Видимость = Ложь;
		Элементы.ФормаПодписатьИОтправитьЭлектронныйДокументВДФС.Видимость = Ложь;
		Элементы.ФормаОтправитьНаДоподписаниеЭлектронныйДокумент.Видимость = Ложь;
		Элементы.ФормаПроверитьЭлектронныйДокумент.Видимость = Ложь;
	Иначе
		Элементы.ФормаПодписатьЭлектронныйДокумент.Видимость = Истина;
		Элементы.ФормаОтправитьНаДоподписаниеЭлектронныйДокумент.Видимость = Истина;
		Если ОрганизацияEDI.ОбменНалоговымиДокументамиСГФС Тогда
			Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
				или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
				
				Элементы.ФормаПодписатьИОтправитьЭлектронныйДокументВДФС.Видимость = Истина;
				Если ВидЭлектронногоДокумента.НалоговыйДокументВыполнятьПроверкуПоXSDСхеме или ВидЭлектронногоДокумента.НалоговыйДокументВыполнятьЛогическуюПроверку Тогда
					Элементы.ФормаПроверитьЭлектронныйДокумент.Видимость = Истина;
				Иначе
					Элементы.ФормаПроверитьЭлектронныйДокумент.Видимость = Ложь;
				КонецЕсли;
			Иначе
				Элементы.ФормаПодписатьИОтправитьЭлектронныйДокументВДФС.Видимость = Ложь;
				Элементы.ФормаПроверитьЭлектронныйДокумент.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ФормаПодписатьИОтправитьЭлектронныйДокументВДФС.Видимость = Ложь;
			Элементы.ФормаПроверитьЭлектронныйДокумент.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОрганизацияEDIПриИзменении_НаСервере()
	Элементы.ВидЭлектронногоДокумента.СписокВыбора.Очистить();
	лВидЭлектронногоДокумента = Неопределено;
	лМассивВидовЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьМассивВидовИсходящихЭлектронныхДокументовДоступныхДляДокумента1С(Документ1С, ОрганизацияEDI);
	Для Каждого ЭлементМассиваВидовЭлектронныхДокументов Из лМассивВидовЭлектронныхДокументов Цикл
		Если лВидЭлектронногоДокумента = Неопределено Тогда
			лВидЭлектронногоДокумента = ЭлементМассиваВидовЭлектронныхДокументов;
		КонецЕсли;
		Элементы.ВидЭлектронногоДокумента.СписокВыбора.Добавить(ЭлементМассиваВидовЭлектронныхДокументов);
	КонецЦикла;
	//Элементы.ВидЭлектронногоДокумента.РежимВыбораИзСписка = Истина;
	//Элементы.ВидЭлектронногоДокумента.ТолькоПросмотр = Ложь;
	ВидЭлектронногоДокумента = лВидЭлектронногоДокумента;
	ВидЭлектронногоДокумента_ТекЗнач = ВидЭлектронногоДокумента;
	ТипДокумента = ВидЭлектронногоДокумента.ТипДокумента;
	ЖурналРабочегоСтола = скEDI_ОбщегоНазначения.ПолучитьЖурналРабочегоСтолаПоТипуЭлектронныхДокументов(ТипДокумента);
	ПолучитьДанныеПоНаличиюЛицензии();
	УстановитьВидимостьКнопок_НаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияEDIПриИзменении(Элемент)
	Если Модифицированность Тогда
		Если ОрганизацияEDI <> ОрганизацияEDI_ТекЗнач Тогда
			ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; uk = 'Дані було змінено. Зберегти зміни?'");
			ОрганизацияEDI_НовоеЗнач = ОрганизацияEDI;
			ОрганизацияEDI = ОрганизацияEDI_ТекЗнач;
	        ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацияEDIПриИзмененииВопросЗавершение", ЭтаФорма, ОрганизацияEDI_НовоеЗнач), ТекстВопроса,  РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	Иначе
		ОрганизацияEDIПриИзменении_НаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияEDIПриИзмененииВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИнициализироватьСохранениеДанныхЭлектронногоДокумента();
		ОрганизацияEDI = ДополнительныеПараметры;
		ОрганизацияEDIПриИзменении_НаКлиенте();
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ОрганизацияEDI = ДополнительныеПараметры;
		ОрганизацияEDIПриИзменении_НаКлиенте();
	Иначе
		//Отмена
    КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияEDIПриИзменении_НаКлиенте()
	ОрганизацияEDIПриИзменении_НаСервере();
	Если ЗначениеЗаполнено(Документ1С) Тогда
		СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
		ПоказатьИзображениеЭлектронногоДокумента();
	Иначе
		ОчиститьПолеHTMLДокумента();
		Сообщить("ЗАКРОЙТЕ ОКНО");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭлектронныйДокумент(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронногоДокумента(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаДоподписаниеЭлектронныйДокумент(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронногоДокумента(Ложь, , Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьЭлектронныйДокумент(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронногоДокумента(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьЭлектронныеДокументы_Переподписать(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронногоДокумента(Истина, , , Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИОтправитьОтветНаВходящийЭлектронныйДокумент(Команда)
	ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьВходящийЭлектронныйДокумент(Команда)
	ИнициализироватьОтклонениеЭлектронногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьЭлектронныйДокумент(Команда)
	ИнициализироватьОтзывЭлектронногоДокумента();
КонецПроцедуры

&НаСервере
Процедура СоздатьДокумент1СИПривязатьКЭлектронномуДокументу_НаСервере()
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		лЖурналЗагрузкиЭлектронногоДокументаВДокумент1С = "";
		
		лСоответствиеСРеквизитамиЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьСоответствиеСРеквизитамиИзЭлектронногоДокумента(ЭлектронныйДокумент);
		Если лСоответствиеСРеквизитамиЭлектронногоДокумента = Неопределено Тогда
			Сообщить("В электронном документе отсутствуют данные для формирования документа 1С.");
		Иначе
			Если скEDI_СозданиеДокументовСервер.ЗагрузитьДокумент1С(Документ1С, ОрганизацияEDI, ВидЭлектронногоДокумента, ВхИсх, ЭлектронныйДокумент,
				ЭлектронныйДокумент.ЕДРПОУВладельцаШаблона, ЭлектронныйДокумент.ИмяШаблона, ЭлектронныйДокумент.ВерсияШаблона, 
				лСоответствиеСРеквизитамиЭлектронногоДокумента, лЖурналЗагрузкиЭлектронногоДокументаВДокумент1С) Тогда
			//Если скEDI_СозданиеДокументовСервер.ЗагрузитьДокумент1С(Документ1С, ОрганизацияEDI, ЭлектронныйДокумент.ИмяШаблона, лСоответствиеСРеквизитамиЭлектронногоДокумента, лЖурналЗагрузкиЭлектронногоДокументаВДокумент1С) Тогда
				лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				лЭлектронныйДокументОбъект.Документ1С = Документ1С;
				лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
				лЭлектронныйДокументОбъект.Записать();
				
				УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаСервере(ЭлектронныйДокумент);
			Иначе
				Сообщить(лЖурналЗагрузкиЭлектронногоДокументаВДокумент1С);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент1СИПривязатьКЭлектронномуДокументу(Команда)
	СоздатьДокумент1СИПривязатьКЭлектронномуДокументу_НаСервере();
	СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокумент1СНаСервере()
	Документ1С.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент1С(Команда)
	ПровестиДокумент1СНаСервере();
	УстановитьДоступностьКнопокКомандФормы();
КонецПроцедуры

&НаКлиенте
Процедура КвитанцииПоЭлектронномуДокументуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//Если Элемент.ТекущиеДанные <> Неопределено Тогда
	//	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
	//		ОткрытьЗначение(Элемент.ТекущиеДанные.Квитанция);
	//	Иначе
	//		скEDI_ОткрытиеФормБезМодальности.ПоказатьКвитанцию(Элемент.ТекущиеДанные.Квитанция);
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЭлектронныйДокумент(Команда)
	Если ЗначениеЗаполнено(Документ1С) Тогда
		УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаКлиенте(Документ1С, ОрганизацияEDI, ВидЭлектронногоДокумента);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПолучитьСсылкуНаЭлектронныйДокументНаСервере(СсылкаНаФайлЭлектронногоДокумента, ИмяФайла)
	СсылкаНаФайлЭлектронногоДокумента = "";
	ИмяФайла = "";
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ТекОшибка = "";
		СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ТекОшибка);
		Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекОшибка) Тогда
				Сообщить(ТекОшибка);
			КонецЕсли;
		Иначе
			//Если не ПустаяСтрока(ЭлектронныйДокумент.ИмяФайлаДФС) Тогда
			//ИмяФайла = ЭлектронныйДокумент.ИмяФайлаДФС;
			//	Если ВРег(Прав(ИмяФайла, 4)) <> ".XML" Тогда
			//		ИмяФайла = ИмяФайла + ".xml";
			//	КонецЕсли;
			//ИначеЕсли не ПустаяСтрока(ЭлектронныйДокумент.ИмяФайла) Тогда
			//ИмяФайла = ЭлектронныйДокумент.ИмяФайла;
			//	Если ВРег(Прав(ИмяФайла, 4)) <> ".XML" Тогда
			//		ИмяФайла = ИмяФайла + ".xml";
			//	КонецЕсли;
			//Иначе
				ИмяФайла = ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование
				+ " №" + СокрЛП(ЭлектронныйДокумент.НомерДокумента)
				+ " від " + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy")
				+ ".xml";
				
				ИмяФайла = СтрЗаменить(ИмяФайла, "/", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "|", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
			//КонецЕсли;
	 		СсылкаНаФайлЭлектронногоДокумента = ПоместитьВоВременноеХранилище(Base64Значение(СодержаниеЭлектронногоДокумента.ТелоДокумента), УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СохранитьЭлектронныйДокумент(Команда)
	СсылкаНаФайлЭлектронногоДокумента = "";
	ИмяФайлаСДО = "";
	ПолучитьСсылкуНаЭлектронныйДокументНаСервере(СсылкаНаФайлЭлектронногоДокумента, ИмяФайлаСДО);
	Если СсылкаНаФайлЭлектронногоДокумента <> "" Тогда
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайлаСДО, СсылкаНаФайлЭлектронногоДокумента));
		МассивПолученыхФайлов = Новый Массив;
		Если ПолучитьФайлы(МассивФайлов, МассивПолученыхФайлов) = Истина Тогда
			ТекстСообщения = НСтр("ru = 'Файл сохранен'; uk = 'Файл збережено'");
			Для Каждого ПолученыйФайл Из МассивПолученыхФайлов Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + ПолученыйФайл.Имя;
			КонецЦикла;
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПолучитьСсылкуНаИзображениеЭлектронногоДокументаНаСервере(СсылкаНаИзображениеЭлектронногоДокументаНаСервере, ИмяФайла)
	СсылкаНаИзображениеЭлектронногоДокументаНаСервере = "";
	ИмяФайла = "";
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ТекОшибка = "";
		СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ТекОшибка);
		Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекОшибка) Тогда
				Сообщить(ТекОшибка);
			КонецЕсли;
		Иначе
			//Если не ПустаяСтрока(ЭлектронныйДокумент.ИмяФайлаДФС) Тогда
			//ИмяФайла = ИзменитьРасширениеИмениФайла(ЭлектронныйДокумент.ИмяФайлаДФС, ".pdf");
			//ИначеЕсли не ПустаяСтрока(ЭлектронныйДокумент.ИмяФайла) Тогда
			//ИмяФайла = ИзменитьРасширениеИмениФайла(ЭлектронныйДокумент.ИмяФайла, ".pdf");
			//Иначе
				ИмяФайла = ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование
				+ " №" + СокрЛП(ЭлектронныйДокумент.НомерДокумента)
				+ " від " + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy")
				+ ".pdf";
				
				ИмяФайла = СтрЗаменить(ИмяФайла, "/", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "|", "_");
				ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
			//КонецЕсли;
			ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
			Если не ПустаяСтрока(ИзображениеДокумента) Тогда
	 			СсылкаНаИзображениеЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ИзображениеДокумента), УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СохранитьИзображениеЭлектронногоДокумента(Команда)
	СсылкаНаИзображениеЭлектронногоДокументаНаСервере = "";
	ИмяФайлаСДО = "";
	ПолучитьСсылкуНаИзображениеЭлектронногоДокументаНаСервере(СсылкаНаИзображениеЭлектронногоДокументаНаСервере, ИмяФайлаСДО);
	Если СсылкаНаИзображениеЭлектронногоДокументаНаСервере <> "" Тогда
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайлаСДО, СсылкаНаИзображениеЭлектронногоДокументаНаСервере));
		МассивПолученыхФайлов = Новый Массив;
		Если ПолучитьФайлы(МассивФайлов, МассивПолученыхФайлов) = Истина Тогда
			ТекстСообщения = НСтр("ru = 'Файл сохранен'; uk = 'Файл збережено'");
			Для Каждого ПолученыйФайл Из МассивПолученыхФайлов Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + ПолученыйФайл.Имя;
			КонецЦикла;
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложение(Команда)
	АдресВХранилище = "";
	ВыбранноеИмяФайла = "";
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		Если ПоместитьФайл(АдресВХранилище, , ВыбранноеИмяФайла, , УникальныйИдентификатор) Тогда
			ПослеПомещенияВложеногоФайла(Истина, АдресВХранилище, ВыбранноеИмяФайла);
		КонецЕсли;
	Иначе
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.Фильтр = НСтр("ru = 'Файлы вложений'; uk = 'Файли вкладень'")
		+ " (*.txt;*.doc;*.docx;*.rtf;*.xls;*.xlsx;*.pdf;*.jpeg;*.jpg;*.png;*.csv;*.xml)|*.txt;*.doc;*.docx;*.rtf;*.xls;*.xlsx;*.pdf;*.jpeg;*.jpg;*.png;*.csv;*.xml"
		+ "|"
		+ НСтр("ru = 'Все файлы'; uk = 'Всі файли'")
		+ " (*.*)|*.*";
		ДиалогВыбора.Заголовок =НСтр("ru = 'Выберите файлы для загрузки; uk = 'Виберіть файли для завантаження'");
		ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
		ДиалогВыбора.ИндексФильтра               = 0;
		ДиалогВыбора.ПолноеИмяФайла              = "";
		ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
		ДиалогВыбора.МножественныйВыбор          = Истина;
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуВыбораФайловВложений(ДиалогВыбора, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСерверебезКонтекста
Функция ПодготовитьСписокВложенийПоДокументу1СНаСервере(пДокумент1С, ТекСписокФайлов)
	ПрикрепленныеФайлыПоДокументу1С = скEDI_НастройкиПодКонфигурацию.ПолучитьПрикрепленныеФайлы(пДокумент1С);
	Для Каждого ЭлементМассиваФайлов из ПрикрепленныеФайлыПоДокументу1С Цикл
		Если ТекСписокФайлов.НайтиПоЗначению(ЭлементМассиваФайлов) = Неопределено Тогда
			ТекСписокФайлов.Добавить(ЭлементМассиваФайлов);
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ДобавитьВложениеПоДокументу1С(Команда)
	ТекСписокФайлов = Новый СписокЗначений;
	Для Каждого ЭлементВложения Из Вложения Цикл
		Если ЗначениеЗаполнено(ЭлементВложения.Файл) Тогда
			ТекСписокФайлов.Добавить(ЭлементВложения.Файл, , Истина);
		КонецЕсли;
	КонецЦикла;
	ПодготовитьСписокВложенийПоДокументу1СНаСервере(Документ1С, ТекСписокФайлов);
	ЗаголовокСпискаВыбора = НСтр("ru = 'Файлы Учетного документа'; uk = 'Файли Облікового документа'");
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		Если ТекСписокФайлов.ОтметитьЭлементы(ЗаголовокСпискаВыбора) Тогда
			ПослеВыбораФайловДобавитьВложениеПоДокументу1С(ТекСписокФайлов, Неопределено);
		КонецЕсли;
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПоказатьОтметкуЭлементовСпискаЗначений(ЗаголовокСпискаВыбора, "ПослеВыбораФайловДобавитьВложениеПоДокументу1С", ТекСписокФайлов, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайловДобавитьВложениеПоДокументу1С(Параметр, ДопПараметр) Экспорт
	Если ТипЗнч(Параметр) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСпискаЗначений из Параметр Цикл
			ФайлСсылка = ЭлементСпискаЗначений.Значение;
			Если ЭлементСпискаЗначений.Пометка Тогда
				НайденыеСтроки = Вложения.НайтиСтроки(Новый Структура("Файл", ФайлСсылка));
				Если НайденыеСтроки.Количество() = 0 Тогда
					ИмяФайла = "";
					Адрес = "";
					Если скEDI_НастройкиПодКонфигурацию.ПрикрепленныйФайлПоместитьВоВременноеХранилище(ФайлСсылка, УникальныйИдентификатор, ИмяФайла, Адрес) Тогда
						РазмерФайла = СтрДлина(Base64Строка(ПолучитьИзВременногоХранилища(Адрес))) * 3 / 4;
						Если РазмерФайла > 20 * 1024 * 1024 Тогда
							Сообщить(НСтр("ru = 'Размер Файла'; uk = 'Розмір файлу'")
							+ " """
							+ ИмяФайла
							+ """ "
							+ НСтр("ru = 'превышает 20 Мб и не подлежит отправке...'; uk = 'перевищує 20 Мб і не підлягає відправці...'"));
						Иначе
							Если СтрДлина(ИмяФайла) > 100 Тогда
								Сообщить(НСтр("ru = 'Длина имени файла'; uk = 'Довжина імені файлу'")
								+ " """
								+ ИмяФайла
								+ """ "
								+ НСтр("ru = 'превышает 100 символов и не подлежит отправке...'; uk = 'перевищує 100 символів і не підлягає відправці...'"));
							Иначе
								НоваяСтрокаВложение = Вложения.Добавить();
								НоваяСтрокаВложение.ИмяФайлаВложениеДокумента = ИмяФайла;
								НоваяСтрокаВложение.ВложениеДокумента = Адрес;
								НоваяСтрокаВложение.РазмерФайла = РазмерФайла;
								НоваяСтрокаВложение.РазмерФайлаТекст = ПолучитьРазмерФайлаТекст_НаКлиенте(НоваяСтрокаВложение.РазмерФайла);
								НоваяСтрокаВложение.Файл = ФайлСсылка;
								ОбновитьВложенияРазмерФайлов_НаКлиенте();
								Модифицированность = Истина;
								УстановитьСтраницуСтраницыВариантыОтображения_НаКлиенте(Элементы.СтраницаСВложенымиФайлами);
							КонецЕсли;
						КонецЕсли;
						Модифицированность = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НайденыеСтроки = Вложения.НайтиСтроки(Новый Структура("Файл", ФайлСсылка));
				Для Каждого НайденаяСтрока из НайденыеСтроки Цикл
					ТекВложениеДокумента = НайденаяСтрока.ВложениеДокумента;
					Если ЭтоАдресВременногоХранилища(ТекВложениеДокумента) Тогда
						
					Иначе
						Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
							НомерФайла = Число(НайденаяСтрока.ВложениеДокумента);
							НоваяСтрокаУдаленныеВложения = УдаленныеВложения.Добавить();
							НоваяСтрокаУдаленныеВложения.ЭлектронныйДокумент = ЭлектронныйДокумент;
							НоваяСтрокаУдаленныеВложения.НомерФайла = НомерФайла;
						КонецЕсли;
					КонецЕсли;
					Вложения.Удалить(НайденаяСтрока);			
								
					Модифицированность = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ОбновитьВложенияРазмерФайлов_НаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайловДобавитьВложение(Параметр, ДопПараметр) Экспорт
	//СписокФайлов = Новый СписокЗначений;
	//АдресДвоичныхДанных="";
	Если Параметр <> Неопределено Тогда
		Для Каждого СтрокаСпискаФайлов из Параметр Цикл
			Файл = Новый Файл(СтрокаСпискаФайлов);
			УстановитьСтраницуСтраницыВариантыОтображения_НаКлиенте(Элементы.СтраницаСВложенымиФайлами);
			 
			скEDI_ОткрытиеФормБезМодальности.ВызватьМетодНачатьПомещениеФайла(Файл.ПолноеИмя, УникальныйИдентификатор, "ПослеПомещенияВложеногоФайла", ЭтаФорма);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуСтраницыВариантыОтображения_НаКлиенте(НоваяСтраница)
	Если НоваяСтраница = Элементы.СтраницаСВложенымиФайлами Тогда
		Если Элементы.СтраницыВариантыОтображения.ТекущаяСтраница = Элементы.СтраницаБезВложеныхФайлов Тогда
			Если Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаСобытия1 Тогда
				Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаСобытия;
			ИначеЕсли Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаПодписантыСНашейСтороны1 Тогда
				Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаПодписантыСНашейСтороны;
			ИначеЕсли Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаПодписантыСоСтороныКонтрагента1 Тогда
				Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаПодписантыСоСтороныКонтрагента;
			ИначеЕсли Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаМаршрут1 Тогда
				Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаМаршрут;
			КонецЕсли;
		КонецЕсли;
		Элементы.СтраницыВариантыОтображения.ТекущаяСтраница = НоваяСтраница;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаБезВложеныхФайлов Тогда
		Если Элементы.СтраницыВариантыОтображения.ТекущаяСтраница = Элементы.СтраницаСВложенымиФайлами Тогда
			Если Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаСобытия Тогда
				Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаСобытия1;
			ИначеЕсли Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаПодписантыСНашейСтороны Тогда
				Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаПодписантыСНашейСтороны1;
			ИначеЕсли Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаПодписантыСоСтороныКонтрагента Тогда
				Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаПодписантыСоСтороныКонтрагента1;
			ИначеЕсли Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаМаршрут Тогда
				Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаМаршрут1;
			КонецЕсли;
		КонецЕсли;
		Элементы.СтраницыВариантыОтображения.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуСтраницыВариантыОтображения_НаСервере(НоваяСтраница)
	Если НоваяСтраница = Элементы.СтраницаСВложенымиФайлами Тогда
		Если Элементы.СтраницыВариантыОтображения.ТекущаяСтраница = Элементы.СтраницаБезВложеныхФайлов Тогда
			Если Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаСобытия1 Тогда
				Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаСобытия;
			ИначеЕсли Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаПодписантыСНашейСтороны1 Тогда
				Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаПодписантыСНашейСтороны;
			ИначеЕсли Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаПодписантыСоСтороныКонтрагента1 Тогда
				Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаПодписантыСоСтороныКонтрагента;
			ИначеЕсли Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаМаршрут1 Тогда
				Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаМаршрут;
			КонецЕсли;
		КонецЕсли;
		Элементы.СтраницыВариантыОтображения.ТекущаяСтраница = НоваяСтраница;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаБезВложеныхФайлов Тогда
		Если Элементы.СтраницыВариантыОтображения.ТекущаяСтраница = Элементы.СтраницаСВложенымиФайлами Тогда
			Если Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаСобытия Тогда
				Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаСобытия1;
			ИначеЕсли Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаПодписантыСНашейСтороны Тогда
				Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаПодписантыСНашейСтороны1;
			ИначеЕсли Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаПодписантыСоСтороныКонтрагента Тогда
				Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаПодписантыСоСтороныКонтрагента1;
			ИначеЕсли Элементы.ГруппаИнформация.ТекущаяСтраница = Элементы.ГруппаМаршрут Тогда
				Элементы.ГруппаИнформация1.ТекущаяСтраница = Элементы.ГруппаМаршрут1;
			КонецЕсли;
		КонецЕсли;
		Элементы.СтраницыВариантыОтображения.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПомещенияВложеногоФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры=Неопределено) Экспорт
	Если Результат Тогда
		РазмерФайла = СтрДлина(Base64Строка(ПолучитьИзВременногоХранилища(Адрес))) * 3 / 4;
		Если РазмерФайла > 20 * 1024 * 1024 Тогда
			Сообщить(НСтр("ru = 'Размер Файла'; uk = 'Розмір файлу'")
			+ " """
			+ ВыбранноеИмяФайла
			+ """ "
			+ НСтр("ru = 'превышает 20 Мб и не подлежит отправке...'; uk = 'перевищує 20 Мб і не підлягає відправці...'"));
		Иначе
			Файл = Новый Файл(ВыбранноеИмяФайла);
			Если СтрДлина(Файл.Имя) > 100 Тогда
				Сообщить(НСтр("ru = 'Длина имени файла'; uk = 'Довжина імені файлу'")
				+ " """
				+ ВыбранноеИмяФайла
				+ """ "
				+ НСтр("ru = 'превышает 100 символов и не подлежит отправке...'; uk = 'перевищує 100 символів і не підлягає відправці...'"));
			Иначе
				НоваяСтрокаВложение = Вложения.Добавить();
				НоваяСтрокаВложение.ИмяФайлаВложениеДокумента = Файл.Имя;
				НоваяСтрокаВложение.ВложениеДокумента = Адрес;
				НоваяСтрокаВложение.РазмерФайла = РазмерФайла;
				НоваяСтрокаВложение.РазмерФайлаТекст = ПолучитьРазмерФайлаТекст_НаКлиенте(НоваяСтрокаВложение.РазмерФайла);
				ОбновитьВложенияРазмерФайлов_НаКлиенте();
				Модифицированность = Истина;
				
				УстановитьСтраницуСтраницыВариантыОтображения_НаКлиенте(Элементы.СтраницаСВложенымиФайлами);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаВложеныйФайлНаСервере(пЭлектронныйДокумент, пНомерФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ВложенияЭлектронныхДокументов.НомерФайла КАК НомерФайла,
	               |	скEDI_ВложенияЭлектронныхДокументов.ВложениеДокумента КАК ВложениеДокумента,
	               |	скEDI_ВложенияЭлектронныхДокументов.ВложениеДокументаХЗ КАК ВложениеДокументаХЗ,
	               |	скEDI_ВложенияЭлектронныхДокументов.ИмяФайлаВложениеДокумента КАК ИмяФайлаВложениеДокумента
	               |ИЗ
	               |	РегистрСведений.скEDI_ВложенияЭлектронныхДокументов КАК скEDI_ВложенияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ВложенияЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |	И скEDI_ВложенияЭлектронныхДокументов.НомерФайла = &НомерФайла";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", пЭлектронныйДокумент);
	Запрос.УстановитьПараметр("НомерФайла", пНомерФайла);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		ВложениеДокумента = ВыборкаРезультатаЗапроса.ВложениеДокумента;
		ВложениеДокументаХЗ = ВыборкаРезультатаЗапроса.ВложениеДокументаХЗ.Получить();
		Если ВложениеДокументаХЗ <> Неопределено Тогда
			ВложениеДокумента = Base64Строка(ВложениеДокументаХЗ);
		КонецЕсли;
		Возврат ПоместитьВоВременноеХранилище(Base64Значение(ВложениеДокумента), УникальныйИдентификатор);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СохранитьВложение(Команда)
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 0 Тогда
		ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
		ДиалогВыбораКаталога.МножественныйВыбор = Ложь; 
		ДиалогВыбораКаталога.Заголовок = "Выберите каталог"; 
		ДиалогВыбораКаталога.МножественныйВыбор = Истина;
		Если ДиалогВыбораКаталога.Выбрать() Тогда 
			ПутьККаталогу = ДиалогВыбораКаталога.Каталог; 
			
			МассивФайлов = Новый Массив;
			ЕстьСуществующиеФайлы = Ложь;
			СписокСуществующихФайлов = "";
			
			Для Каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
				ТекущиеДанные = ЭтаФорма.Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);    
    	
				Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ВложениеДокумента) Тогда
					СсылкаНаВложеныйФайл = ТекущиеДанные.ВложениеДокумента;
				Иначе
					СсылкаНаВложеныйФайл = ПолучитьСсылкуНаВложеныйФайлНаСервере(ЭлектронныйДокумент, Число(ТекущиеДанные.ВложениеДокумента));
					Если СсылкаНаВложеныйФайл = Неопределено Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекущиеДанные.ИмяФайлаВложениеДокумента, СсылкаНаВложеныйФайл));
				
				ПутьКФайлу = ПутьККаталогу + "\" + ТекущиеДанные.ИмяФайлаВложениеДокумента;
			    Файл = Новый Файл(ПутьКФайлу);
				Если Файл.Существует() Тогда
					ЕстьСуществующиеФайлы = Истина;
					СписокСуществующихФайлов = СписокСуществующихФайлов + "
					|"""
					+ ПутьКФайлу
					+ """";
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыВыполнитьПолучениеФайлов = Новый Структура;
			ПараметрыВыполнитьПолучениеФайлов.Вставить("ПутьККаталогу", ПутьККаталогу);
			ПараметрыВыполнитьПолучениеФайлов.Вставить("МассивФайлов", МассивФайлов);
			
			Если ЕстьСуществующиеФайлы Тогда
				ТекстВопроса = НСтр("ru = 'Файлы:'; uk = 'Файли:'")
				+ СписокСуществующихФайлов
				+ "
				|"
				+ НСтр("ru = 'существуют. Перезаписать?'; uk = 'існють. Перезаписати?'");
				Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
					Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
						ВыполнитьПолучениеФайловПослеПоказатьВопрос(КодВозвратаДиалога.Да, ПараметрыВыполнитьПолучениеФайлов);
					КонецЕсли;	
				Иначе
					скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ВыполнитьПолучениеФайловПослеПоказатьВопрос",
																					ЭтаФорма,
																					ПараметрыВыполнитьПолучениеФайлов,
																					ТекстВопроса,
																					РежимДиалогаВопрос.ДаНет);		
				КонецЕсли;				
			Иначе
				ВыполнитьПолучениеФайловПослеПоказатьВопрос(КодВозвратаДиалога.Да, ПараметрыВыполнитьПолучениеФайлов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолучениеФайловПослеПоказатьВопрос(Результат, ПараметрыПолученияФайлов) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивПолученыхФайлов = Новый Массив;
		Если ПолучитьФайлы(ПараметрыПолученияФайлов.МассивФайлов, МассивПолученыхФайлов, ПараметрыПолученияФайлов.ПутьККаталогу, Ложь) = Истина Тогда
			ТекстСообщения = НСтр("ru = 'Файлы сохранены'; uk = 'Файли збережені'");
			Для Каждого ПолученыйФайл Из МассивПолученыхФайлов Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + ПолученыйФайл.Имя;
			КонецЦикла;
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивКвитанцийНаСервере(пЭлектронныйДокумент)
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_Квитанция.Ссылка,
	               |	скEDI_Квитанция.ИмяФайла,
	               |	скEDI_Квитанция.GateId,
	               |	скEDI_Квитанция.ТелоКвитанции
	               |ИЗ
	               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
	               |ГДЕ
	               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", пЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.ТелоКвитанции) Тогда
			СсылкаНаКвитанциюНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ВыборкаРезультатаЗапроса.ТелоКвитанции), УникальныйИдентификатор);
	 		ИмяФайлаСДО = ВыборкаРезультатаЗапроса.ИмяФайла;
			Если ИмяФайлаСДО = "" Тогда
				ИмяФайлаСДО = ВыборкаРезультатаЗапроса.GateId;
			КонецЕсли;
			Если ВРег(Прав(ИмяФайлаСДО, 4)) <> ".XML" Тогда
				ИмяФайлаСДО = ИмяФайлаСДО + ".xml";
			КонецЕсли;
			Результат.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайлаСДО, СсылкаНаКвитанциюНаСервере));
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьМассивТекстовКвитанцийНаСервере(пЭлектронныйДокумент)
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_Квитанция.Ссылка,
	               |	скEDI_Квитанция.ИмяФайла,
	               |	скEDI_Квитанция.GateId,
	               |	скEDI_Квитанция.ТекстКвитанции
	               |ИЗ
	               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
	               |ГДЕ
	               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", пЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.ТекстКвитанции) Тогда
			СсылкаНаКвитанциюНаСервере = ПоместитьВоВременноеХранилище(ВыборкаРезультатаЗапроса.ТекстКвитанции, УникальныйИдентификатор);
	 		ИмяФайлаСДО = ВыборкаРезультатаЗапроса.ИмяФайла;
			Если ИмяФайлаСДО = "" Тогда
				ИмяФайлаСДО = ВыборкаРезультатаЗапроса.GateId;
			КонецЕсли;
			//Если ВРег(Прав(ИмяФайла, 4)) <> ".XML" Тогда
				ИмяФайлаСДО = ИмяФайлаСДО + ".txt";
				
				ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "/", "_");
				ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "\", "_");
				ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, ":", "_");
				ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "*", "_");
				ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "<", "_");
				ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, ">", "_");
				ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "|", "_");
				ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "?", "_");
			//КонецЕсли;
			Результат.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайлаСДО, СсылкаНаКвитанциюНаСервере));
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СохранитьКвитанцииXML(Команда)
	Квитанции = ПолучитьМассивКвитанцийНаСервере(ЭлектронныйДокумент);
	
	Если Квитанции.Количество() > 0 Тогда
		МассивПолученыхФайлов = Новый Массив;
		Если ПолучитьФайлы(Квитанции, МассивПолученыхФайлов) = Истина Тогда
			ТекстСообщения = НСтр("ru = 'Квитанции в формате xml сохранены'; uk = 'Квитанції в форматі xml збережені'");
			Для Каждого ПолученыйФайл Из МассивПолученыхФайлов Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + ПолученыйФайл.Имя;
			КонецЦикла;
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКвитанцииTXT(Команда)
	Квитанции = ПолучитьМассивТекстовКвитанцийНаСервере(ЭлектронныйДокумент);
	
	Если Квитанции.Количество() > 0 Тогда
		МассивПолученыхФайлов = Новый Массив;
		Если ПолучитьФайлы(Квитанции, МассивПолученыхФайлов) = Истина Тогда
			ТекстСообщения = НСтр("ru = 'Квитанции в формате txt сохранены'; uk = 'Квитанції в форматі txt збережені'");
			Для Каждого ПолученыйФайл Из МассивПолученыхФайлов Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + ПолученыйФайл.Имя;
			КонецЦикла;
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьЭлектронныйДокументВДФС(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронногоДокументаВДФС(Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИмяФайлаЭлектронногоДокументаНаСервере(ЭлектронныйДокумент)
	Возврат ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + " №" + СокрЛП(ЭлектронныйДокумент.НомерДокумента) + " від "
			+ Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy") + ".xml";
КонецФункции

&НаКлиенте
Процедура ЭкспортДокументаСПодписями(Команда)
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			ЧтоСохраняем = "НалоговыйЭлектронныйДокумент";
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			ЧтоСохраняем = "НалоговыйЭлектронныйДокумент";
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент") Тогда
			ЧтоСохраняем = "ЭлектронныйДокумент";
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента") Тогда
			ЧтоСохраняем = "ЭлектронныйДокумент";
		ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			ЧтоСохраняем = "ЭлектронныйДокумент";
		Иначе
			Возврат;
		КонецЕсли;
		ИмяФайлаСДО = СформироватьИмяФайлаЭлектронногоДокументаНаСервере(ЭлектронныйДокумент);
		ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "/", "_");
		ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "\", "_");
		ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, ":", "_");
		ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "*", "_");
		ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "<", "_");
		ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, ">", "_");
		ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "|", "_");
		ИмяФайлаСДО = СтрЗаменить(ИмяФайлаСДО, "?", "_");
		ПараметрыЭкспорта = Новый Структура("ЧтоСохраняем,НомерФайла,ИмяФайла", ЧтоСохраняем, -1, ИмяФайлаСДО);
		Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
			лФормаСохраненияПодписанныхДокументовВфайл = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаДляЭкспортаДокументаСПодписями", ПараметрыЭкспорта, ЭтаФорма);
			ЭкспортДанныхДокументаДокумента(лФормаСохраненияПодписанныхДокументовВфайл.ОткрытьМодально());
		Иначе
			скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуСохраненияПодписанныхДокументов(ЭтаФорма, ПараметрыЭкспорта);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВложенийДокументаСПодписями(Команда)
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекОшибка = "";
			СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ТекОшибка);
			Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
				Если ЗначениеЗаполнено(ТекОшибка) Тогда
					Сообщить(ТекОшибка);
				КонецЕсли;
			Иначе
				ИмяФайлаСДО = "";
				//НомерФайла = Число(ТекущиеДанные.ВложениеДокумента);
				НомерФайла = ТекущиеДанные.ПорядковыйНомерФайла;
			    Если НомерФайла = 1 Тогда
					ИмяФайлаСДО = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
				ИначеЕсли НомерФайла = 2 Тогда
					ИмяФайлаСДО = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
				ИначеЕсли НомерФайла = 3 Тогда
					ИмяФайлаСДО = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
				Иначе
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Если НомерФайла-3 <= МассивВложенийДокумента4.Количество() Тогда
							ЭлементМассиваВложенийДокумента4 = МассивВложенийДокумента4[НомерФайла-3-1];
							ИмяФайлаСДО = ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ИмяФайлаСДО <> "" Тогда
					ПараметрыЭкспорта = Новый Структура("ЧтоСохраняем,НомерФайла,ИмяФайла", "ВложеныйФайл", НомерФайла, ИмяФайлаСДО);
					Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
						лФормаСохраненияПодписанныхДокументовВфайл = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаДляЭкспортаДокументаСПодписями", ПараметрыЭкспорта, ЭтаФорма);
						ЭкспортДанныхДокументаДокумента(лФормаСохраненияПодписанныхДокументовВфайл.ОткрытьМодально());
					Иначе
						скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуСохраненияПодписанныхДокументов(ЭтаФорма, ПараметрыЭкспорта);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортДанныхДокументаДокумента(ПараметрыСохраненияДокументов, ДополнительныеПараметры = Неопределено) Экспорт
	Если ТипЗнч(ПараметрыСохраненияДокументов) = Тип("Структура") Тогда
		ЧтоСохраняем = Неопределено;
		НомерФайла = Неопределено;
		ИмяФайлаСДО = Неопределено;
		КаталогСохранения = "";
		СохранятьТелоДокумента = Ложь;
		СохранятьИзображениеДокумента = Ложь;
		СохранятьВложенныеФайлы = Ложь;
		СохранятьВ_P7S    = Ложь;
		СохранятьВ_CADES  = Ложь;
		СохранятьБезПодписей = Ложь;
		СохранятьИзображениеДокументаPDF = Ложь;
		СохранятьИзображениеДокументаPNG = Ложь;
		ПараметрыСохраненияДокументов.Свойство("ЧтоСохраняем", ЧтоСохраняем);
		ПараметрыСохраненияДокументов.Свойство("ИмяФайла", ИмяФайлаСДО);
		ПараметрыСохраненияДокументов.Свойство("НомерФайла", НомерФайла);
		ПараметрыСохраненияДокументов.Свойство("КаталогСохранения", КаталогСохранения);
		ПараметрыСохраненияДокументов.Свойство("СохранятьТелоДокумента", СохранятьТелоДокумента);
		ПараметрыСохраненияДокументов.Свойство("СохранятьИзображениеДокумента", СохранятьИзображениеДокумента);
		ПараметрыСохраненияДокументов.Свойство("СохранятьВложенныеФайлы", СохранятьВложенныеФайлы);
		ПараметрыСохраненияДокументов.Свойство("СохранятьВ_P7S", СохранятьВ_P7S);
		ПараметрыСохраненияДокументов.Свойство("СохранятьВ_CADES", СохранятьВ_CADES);
		ПараметрыСохраненияДокументов.Свойство("СохранятьБезПодписей", СохранятьБезПодписей);
		ПараметрыСохраненияДокументов.Свойство("СохранятьИзображениеДокументаPDF", СохранятьИзображениеДокументаPDF);
		ПараметрыСохраненияДокументов.Свойство("СохранятьИзображениеДокументаPNG", СохранятьИзображениеДокументаPNG);
		Если СохранятьВ_CADES <> Истина И СохранятьВ_P7S <> Истина И СохранятьБезПодписей <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		МассивФайлов = Новый Массив;
		МассивАрхивов = Новый Массив;
		ПолучитьМассивДанныхДляЭкспортаЭлектронногоДокументаНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ЭлектронныйДокумент, ЧтоСохраняем, ИмяФайлаСДО, НомерФайла, СохранятьТелоДокумента, СохранятьИзображениеДокумента, СохранятьВ_CADES, СохранятьВ_P7S, СохранятьБезПодписей, СохранятьИзображениеДокументаPDF, СохранятьИзображениеДокументаPNG);
		МассивПолученыхФайлов = Новый Массив;
		Если МассивФайлов.Количество() = 0 Тогда
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(НСтр("ru = 'Нет файлов для сохранены'; uk = 'Нема файлів для збереження'"));
		ИначеЕсли ПолучитьФайлы(МассивФайлов, МассивПолученыхФайлов, КаталогСохранения, Ложь) = Истина Тогда
			ТекстСообщения = НСтр("ru = 'Файлы сохранены'; uk = 'Файли збережені'");
			КоличествоСтрокВСообщении = 0;
			МаксимальноеКоличествоСтрокВСообщении = 10;
			ТекстСообщенияСформирован = Ложь;
			
			Для Каждого Архив Из МассивАрхивов Цикл
				ИмяФайлаАрхива = КаталогСохранения + "\" + Архив.Наименование + "_p7s.zip";
				ЗаписьZIP = Новый ЗаписьZipФайла(ИмяФайлаАрхива, , Архив.Наименование + " P7S");
				Для Каждого ФайлАрхива Из Архив.МассивФайловАрхива Цикл
					ЗаписьZIP.Добавить(ФайлАрхива.ПутьКВременномуФайлу);//, РежимСохраненияПутейZIP.НеСохранятьПути);
					
					ИндМассиваМассивПолученыхФайлов = МассивПолученыхФайлов.ВГраница();
					Пока ИндМассиваМассивПолученыхФайлов >= 0 Цикл
						Если МассивПолученыхФайлов[ИндМассиваМассивПолученыхФайлов].Имя = ФайлАрхива.ПутьКВременномуФайлу Тогда
							МассивПолученыхФайлов.Удалить(ИндМассиваМассивПолученыхФайлов);
						КонецЕсли;
						ИндМассиваМассивПолученыхФайлов = ИндМассиваМассивПолученыхФайлов - 1;
					КонецЦикла;
				КонецЦикла;
				ЗаписьZIP.Записать();
				УдалитьФайлы(Архив.КаталогВременныхФайлов);
				
				КоличествоСтрокВСообщении = КоличествоСтрокВСообщении + 1;
				Если не ТекстСообщенияСформирован Тогда
					Если КоличествоСтрокВСообщении > МаксимальноеКоличествоСтрокВСообщении Тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "...";
						ТекстСообщенияСформирован = Истина;
					Иначе
						ТекстСообщения = ТекстСообщения + Символы.ПС + ИмяФайлаАрхива;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ПолученыйФайл Из МассивПолученыхФайлов Цикл
				КоличествоСтрокВСообщении = КоличествоСтрокВСообщении + 1;
				Если не ТекстСообщенияСформирован Тогда
					Если КоличествоСтрокВСообщении > МаксимальноеКоличествоСтрокВСообщении Тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "...";
						ТекстСообщенияСформирован = Истина;
					Иначе
						ТекстСообщения = ТекстСообщения + Символы.ПС + ПолученыйФайл.Имя;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ИмяФайла, ТелоДокумента, СохранятьТелоИПодписи, СохранятьТело)
	ПараметрыКоманды = Новый Структура("Body", ТелоДокумента);
	ОтветEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("p7sfromsign", ПараметрыКоманды);
	
	ТелоДокументаБезПодписей = "";
	Если ОтветEDIПровайдера.Свойство("Body", ТелоДокументаБезПодписей) Тогда
		Если ЗначениеЗаполнено(ТелоДокументаБезПодписей) Тогда
			Если СохранятьТело Тогда
				СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ТелоДокументаБезПодписей));
				МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, СсылкаНаТелоЭлектронногоДокументаНаСервере));
			КонецЕсли;
			Если СохранятьТелоИПодписи Тогда
				ОписаниеАрхива = Новый Структура;
				ОписаниеАрхива.Вставить("Наименование", ИмяФайла);
				ОписаниеАрхива.Вставить("КаталогВременныхФайлов", КаталогСохранения + "\" + ИмяФайла + "_temp_files");
				
				МассивФайловАрхива = Новый Массив;
				
				СсылкаНаЭлектронныйДокументНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ТелоДокументаБезПодписей));
				
				ОписаниеФайлаДляАрхива = Новый Структура;
				ОписаниеФайлаДляАрхива.Вставить("ПутьКВременномуФайлу", ОписаниеАрхива.КаталогВременныхФайлов + "\" + ИмяФайла);
				ОписаниеФайлаДляАрхива.Вставить("ИмяФайла", ИмяФайла);
				ОписаниеФайлаДляАрхива.Вставить("АдресВоВременномХранилище", СсылкаНаЭлектронныйДокументНаСервере);
				
				МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ОписаниеФайлаДляАрхива.ПутьКВременномуФайлу, СсылкаНаЭлектронныйДокументНаСервере));
				МассивФайловАрхива.Добавить(ОписаниеФайлаДляАрхива);
				
				МассивПодписей = Неопределено;
				Если ОтветEDIПровайдера.Свойство("Signs", МассивПодписей) Тогда
					Если ТипЗнч(МассивПодписей) = Тип("Массив") Тогда
						счПодписей = 0;
						Для Каждого ЭлементМассиваПодписей Из МассивПодписей Цикл
							счПодписей = счПодписей + 1;
							
							ИмяФайлаПодписи = "signature" + Строка(счПодписей) + ".p7s";
							СсылкаНаПодписьНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ЭлементМассиваПодписей));
							
							ОписаниеФайлаДляАрхива = Новый Структура;
							ОписаниеФайлаДляАрхива.Вставить("ПутьКВременномуФайлу", ОписаниеАрхива.КаталогВременныхФайлов + "\" + ИмяФайлаПодписи);
							ОписаниеФайлаДляАрхива.Вставить("ИмяФайла", ИмяФайлаПодписи);
							ОписаниеФайлаДляАрхива.Вставить("АдресВоВременномХранилище", СсылкаНаПодписьНаСервере);
							
							МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ОписаниеФайлаДляАрхива.ПутьКВременномуФайлу, СсылкаНаПодписьНаСервере));
							МассивФайловАрхива.Добавить(ОписаниеФайлаДляАрхива);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ОписаниеАрхива.Вставить("МассивФайловАрхива", МассивФайловАрхива);
				МассивАрхивов.Добавить(ОписаниеАрхива);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСерверебезКонтекста
Функция ИзменитьРасширениеИмениФайла(Знач ИмяФайла, Расширение)
	Если Врег(Прав(ИмяФайла, 4)) = ".XML" Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	КонецЕсли;
	Возврат ИмяФайла + Расширение;
КонецФункции

&НаКлиентеНаСерверебезКонтекста
Функция ДобавитьСуфиксКИмениФайла(Знач ИмяФайла, Суфикс)
	Д = СтрДлина(ИмяФайла);
	Р = -1;
	Для Н = 0 по Д-1 Цикл
		Если Сред(ИмяФайла, Д-Н, 1) = "." Тогда
			Р = Д-Н;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Р > 1 Тогда
		Возврат Лев(ИмяФайла, Р-1) + Суфикс + Сред(ИмяФайла, Р);
	ИначеЕсли Р = 1 Тогда
		Возврат Суфикс + ИмяФайла;
	Иначе
		Возврат ИмяФайла + Суфикс;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьМассивДанныхДляЭкспортаЭлектронногоДокументаНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ЭлектронныйДокумент, ЧтоСохраняем, ИмяФайла, НомерФайла, СохранятьТелоДокумента, СохранятьИзображениеДокумента, CADES, P7S, БезПодписей, СохранятьИзображениеДокументаPDF, СохранятьИзображениеДокументаPNG)
	ТекОшибка = "";
	СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ТекОшибка);
	Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекОшибка) Тогда
			Сообщить(ТекОшибка);
		КонецЕсли;
	Иначе
		Если ЧтоСохраняем = "ЭлектронныйДокумент" или ЧтоСохраняем = "НалоговыйЭлектронныйДокумент" Тогда
			Если СохранятьТелоДокумента Тогда
				ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
				Если ЗначениеЗаполнено(ТелоДокумента) Тогда
					Если CADES Тогда
						СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ТелоДокумента));
						МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИзменитьРасширениеИмениФайла(ИмяФайла, "_cades.xml"), СсылкаНаТелоЭлектронногоДокументаНаСервере));
					КонецЕсли;
					Если P7S или БезПодписей Тогда
						ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ИмяФайла, ТелоДокумента, P7S, БезПодписей);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СохранятьИзображениеДокумента Тогда
				ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
				Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда
					Если CADES Тогда
						СсылкаНаИзображениеЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ИзображениеДокумента));
						МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИзменитьРасширениеИмениФайла(ИмяФайла, "_cades.pdf"), СсылкаНаИзображениеЭлектронногоДокументаНаСервере));
					КонецЕсли;
					Если P7S или БезПодписей Тогда
						ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ИзменитьРасширениеИмениФайла(ИмяФайла, ".pdf"), ИзображениеДокумента, P7S, БезПодписей);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СохранятьИзображениеДокументаPDF или СохранятьИзображениеДокументаPNG Тогда
				//ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
				
				//Если ЗначениеЗаполнено(ТелоДокумента) Тогда
					пПредставлениеЭлектронногоДокументаPDF = "";
					пОтображениеМассивКартинок = Неопределено;
					скEDI_ОбщегоНазначения.ПолучитьСодержимоеПоЭлектронномуДокументу(ЭлектронныйДокумент.Организация, ЭлектронныйДокумент.ВидЭлектронногоДокумента.ТипДокумента, ЭлектронныйДокумент, СодержаниеЭлектронногоДокумента, СохранятьИзображениеДокументаPDF, СохранятьИзображениеДокументаPNG, Ложь, пПредставлениеЭлектронногоДокументаPDF, пОтображениеМассивКартинок, Неопределено, "");
					Если СохранятьИзображениеДокументаPDF Тогда
						СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(пПредставлениеЭлектронногоДокументаPDF));
						МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла+"_for_print.pdf", СсылкаНаТелоЭлектронногоДокументаНаСервере));
					КонецЕсли;
					Если СохранятьИзображениеДокументаPNG Тогда
						Если ТипЗнч(пОтображениеМассивКартинок) = Тип("Массив") Тогда
							НомерКартинки = 0;
							Для Каждого ОтображениеКартинка Из пОтображениеМассивКартинок Цикл
								НомерКартинки = НомерКартинки + 1;
								СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ОтображениеКартинка));
								МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла+"_for_print_p_" + Прав("000" + Формат(НомерКартинки, "ЧГ=0"), 3) + ".png", СсылкаНаТелоЭлектронногоДокументаНаСервере));
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧтоСохраняем = "ВложеныйФайл" Тогда
			ВложениеДокумента = "";
		    Если НомерФайла = 1 Тогда
				ВложениеДокумента = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
			ИначеЕсли НомерФайла = 2 Тогда
				ВложениеДокумента = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
			ИначеЕсли НомерФайла = 3 Тогда
				ВложениеДокумента = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
			Иначе
				МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
				Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
					Если НомерФайла-3 <= МассивВложенийДокумента4.Количество() Тогда
						ЭлементМассиваВложенийДокумента4 = МассивВложенийДокумента4[НомерФайла-3-1];
						ВложениеДокумента = ЭлементМассиваВложенийДокумента4.ВложениеДокумента;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ВложениеДокумента <> "" Тогда
				Если CADES Тогда
					СсылкаНаВложениеДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ВложениеДокумента));
					МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ДобавитьСуфиксКИмениФайла(ИмяФайла, "_cades"), СсылкаНаВложениеДокументаНаСервере));
				КонецЕсли;
				Если P7S или БезПодписей Тогда
					ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ИмяФайла, ВложениеДокумента, P7S, БезПодписей);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложение(Команда)
	МассивДанныхВыделеныхСтрок = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
		ТекущиеДанные = ЭтаФорма.Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);    
		МассивДанныхВыделеныхСтрок.Добавить(ТекущиеДанные);
	КонецЦикла;
	
	Для Каждого ТекущиеДанные Из МассивДанныхВыделеныхСтрок Цикл
		ТекВложениеДокумента = ТекущиеДанные.ВложениеДокумента;
		Если ЭтоАдресВременногоХранилища(ТекВложениеДокумента) Тогда
			
		Иначе
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				НомерФайла = Число(ТекущиеДанные.ВложениеДокумента);
				НоваяСтрокаУдаленныеВложения = УдаленныеВложения.Добавить();
				НоваяСтрокаУдаленныеВложения.ЭлектронныйДокумент = ЭлектронныйДокумент;
				НоваяСтрокаУдаленныеВложения.НомерФайла = НомерФайла;
			КонецЕсли;
		КонецЕсли;
		Вложения.Удалить(Вложения.Индекс(ТекущиеДанные));
		Модифицированность = Истина;
	КонецЦикла;
	ОбновитьВложенияРазмерФайлов_НаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСнятиеПодписейСЭлектронногоДокумента()
	лМассивДанныхДокументов = Новый Массив;
	
	лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
	ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, ЭтаФорма);
	лСтруктураДанныхДокумента.Вставить("Организация" , ОрганизацияEDI);	
	лСтруктураДанныхДокумента.Вставить("Состояние" , СостояниеЭлектронногоДокумента);
	
	лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);		 
	
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("СнятьПодписи");
		
	лПараметрыФормыНастройкиСнятияПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,ТаблицаНеобходимыхПодписей,ТаблицаНеобходимыхПодписейШифрования", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, ОрганизацияEDI, Новый Массив, Новый Массив);
	лПараметрыФормыНастройкиСнятияПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	ВыполнитьОперацииСЭлектроннымиДокументами(лПараметрыФормыНастройкиСнятияПодписейЭлектронныхДокументов);
КонецПроцедуры // ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент()

&НаКлиенте
Процедура СнятьПодписиСЭлектронногоДокумента(Команда)
	ИнициализироватьСнятиеПодписейСЭлектронногоДокумента();
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьЭлектронныйДокумент(Команда)
	ИнициализироватьПроверкуЭлектронногоДокумента();
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыКонтрагентаДляНастройкиОтправкиСсылки(ЕДРПОУКонтрагента, Контрагент)
	Контрагент = Неопределено;
	ЕДРПОУКонтрагента = "";
	ПолучитьЕДРПОУКонтрагентаДляОтправкиСсылки(ЕДРПОУКонтрагента, Контрагент);
	Если ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
		Если не ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЕДРПОУКонтрагента);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаСсылкиНаДокументОписаниеНастроить(Команда)
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент = Новый Структура;
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("Организация", ОрганизацияEDI);
	
	Контрагент = Неопределено;
	ЕДРПОУКонтрагента = "";
	ПолучитьПараметрыКонтрагентаДляНастройкиОтправкиСсылки(ЕДРПОУКонтрагента, Контрагент);
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("Контрагент", Контрагент);
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("ЕДРПОУКонтрагента", ЕДРПОУКонтрагента);
	
	МассивСсылокНаДокумент = Новый Массив;
	Для Каждого СтрокаТаблицы Из ОтправкаСсылкиНаДокументТаблица Цикл
		ТекСтруктураСсылки = Новый Структура;
		ТекСтруктураСсылки.Вставить("ЭлектроннаяПочта", СтрокаТаблицы.ЭлектроннаяПочта);
		ТекСтруктураСсылки.Вставить("Комментарий", СтрокаТаблицы.Комментарий);
		МассивСсылокНаДокумент.Добавить(Новый ФиксированнаяСтруктура(ТекСтруктураСсылки));
	КонецЦикла;
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("МассивЭлектронныхАдресов", Новый ФиксированныйМассив(МассивСсылокНаДокумент));

	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиОтправкиСсылкиНаДокумент = ПолучитьФорму("ОбщаяФорма.скEDI_НастройкаОтправкиСсылкиНаДокумент", лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент, ЭтаФорма);
		ПрименитьНастройкиОтправкиСсылкиНаДокумент(лФормаНастройкиОтправкиСсылкиНаДокумент.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиОтправкиСсылкиНаДокумент(лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент, ЭтаФорма, "ПрименитьНастройкиОтправкиСсылкиНаДокумент");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиОтправкиСсылкиНаДокумент(ПараметрыРезультат, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	МассивСсылокНаДокумент = Неопределено;
	Если ТипЗнч(ПараметрыРезультат) = Тип("Структура") или ТипЗнч(ПараметрыРезультат) = Тип("ФиксированнаяСтруктура") Тогда	
		МассивСсылокНаДокумент = ПараметрыРезультат.МассивСсылокНаДокумент;
		
		Если ПараметрыРезультат.НазваниеОпрерации = "" Тогда
			Если ТипЗнч(МассивСсылокНаДокумент) = Тип("Массив") или ТипЗнч(МассивСсылокНаДокумент) = Тип("ФиксированныйМассив") Тогда	
				ОтправкаСсылкиНаДокументОписаниеНастройки = "";
				ОтправкаСсылкиНаДокументТаблица.Очистить();
				
				ЕстьСсылки = Ложь;
				Для Каждого СтрокаМассиваСсылокНаДокумент Из МассивСсылокНаДокумент Цикл
					НоваяСтрокаОтправкаСсылкиНаДокументТаблица = ОтправкаСсылкиНаДокументТаблица.Добавить();
					НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта = СтрокаМассиваСсылокНаДокумент.ЭлектроннаяПочта;
					НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий = СтрокаМассиваСсылокНаДокумент.Комментарий;
					Если ОтправкаСсылкиНаДокументОписаниеНастройки = "" Тогда
						ОтправкаСсылкиНаДокументОписаниеНастройки = НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
					Иначе
						ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + Символы.ПС + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
					КонецЕсли;
					Если ЗначениеЗаполнено(НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий) Тогда
						ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + " - " + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий;
					КонецЕсли;
					ЕстьСсылки = Истина;
				КонецЦикла;
				
				ОтправкаСсылкиНаДокументНастроено = Истина;
				Если Не ЕстьСсылки Тогда
					ОтправкаСсылкиНаДокументОписаниеНастройки = НСтр("ru = 'Отправка ссылки на документ не настроена.'; uk = 'Відправка посилання на документ не налаштована.'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаСсылкиНаДокументОтправить(Команда)
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент = Новый Структура;
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("Организация", ОрганизацияEDI);
	
	Контрагент = Неопределено;
	ЕДРПОУКонтрагента = "";
	ПолучитьПараметрыКонтрагентаДляНастройкиОтправкиСсылки(ЕДРПОУКонтрагента, Контрагент);
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("Контрагент", Контрагент);
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("ЕДРПОУКонтрагента", ЕДРПОУКонтрагента);
	
	МассивСсылокНаДокумент = Новый Массив;
	Для Каждого СтрокаТаблицы Из ОтправкаСсылкиНаДокументТаблица Цикл
		ТекСтруктураСсылки = Новый Структура;
		ТекСтруктураСсылки.Вставить("ЭлектроннаяПочта", СтрокаТаблицы.ЭлектроннаяПочта);
		ТекСтруктураСсылки.Вставить("Комментарий", СтрокаТаблицы.Комментарий);
		МассивСсылокНаДокумент.Добавить(Новый ФиксированнаяСтруктура(ТекСтруктураСсылки));
	КонецЦикла;
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("МассивЭлектронныхАдресов", Новый ФиксированныйМассив(МассивСсылокНаДокумент));
	
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("НазваниеОпрерации", "ОтправитьСсылкуНаДокумент");
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("ИмяФайлаЭлектронногоДокумента", ИмяФайлаСДО);
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиОтправкиСсылкиНаДокумент = ПолучитьФорму("ОбщаяФорма.скEDI_НастройкаОтправкиСсылкиНаДокумент", лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент, ЭтаФорма);
		ОтправитьСсылкиНаДокумент(лФормаНастройкиОтправкиСсылкиНаДокумент.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиОтправкиСсылкиНаДокумент(лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент, ЭтаФорма, "ОтправитьСсылкиНаДокумент");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтправитьСсылкиНаДокументПоИмениФайлаНаСервере(ЭлектронныйДокумент, ИмяФайла, МассивСсылок)
	РезультатОтправки = "";
	скEDI_ОбщегоНазначения.ОтправитьСсылкиНаДокументПоИмениФайла(ЭлектронныйДокумент, ИмяФайла, МассивСсылок, РезультатОтправки);
	
	ЗаполнитьТаблицуКвитанцийПоЭлектронномуДокументу();
	Если ЗначениеЗаполнено(РезультатОтправки) Тогда
		ОтправкаСсылкиНаДокументОписаниеНастройки = РезультатОтправки;
		Сообщить(РезультатОтправки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСсылкиНаДокумент(ПараметрыРезультат, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	МассивСсылокНаДокумент = Неопределено;
	Если ТипЗнч(ПараметрыРезультат) = Тип("Структура") или ТипЗнч(ПараметрыРезультат) = Тип("ФиксированнаяСтруктура") Тогда	
		МассивСсылокНаДокумент = ПараметрыРезультат.МассивСсылокНаДокумент;
		
		Если ПараметрыРезультат.НазваниеОпрерации = "ОтправитьСсылкуНаДокумент" Тогда
			Если ТипЗнч(МассивСсылокНаДокумент) = Тип("Массив") или ТипЗнч(МассивСсылокНаДокумент) = Тип("ФиксированныйМассив") Тогда	
				ОтправитьСсылкиНаДокументПоИмениФайлаНаСервере(ПараметрыРезультат.ЭлектронныйДокумент, ПараметрыРезультат.ИмяФайлаЭлектронногоДокумента, МассивСсылокНаДокумент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьЭлектронныйДокументТолькоСсылка(Команда)
	Если ОтправкаСсылкиНаДокументНастроено Тогда
		ИнициализироватьПодписьИОтправкуЭлектронногоДокумента(Истина, Истина);
	Иначе
		лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент = Новый Структура;
		лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("Организация", ОрганизацияEDI);
		
		Контрагент = Неопределено;
		ЕДРПОУКонтрагента = "";
		ПолучитьПараметрыКонтрагентаДляНастройкиОтправкиСсылки(ЕДРПОУКонтрагента, Контрагент);
		лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("Контрагент", Контрагент);
		лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("ЕДРПОУКонтрагента", ЕДРПОУКонтрагента);
		
		МассивСсылокНаДокумент = Новый Массив;
		Для Каждого СтрокаТаблицы Из ОтправкаСсылкиНаДокументТаблица Цикл
			ТекСтруктураСсылки = Новый Структура;
			ТекСтруктураСсылки.Вставить("ЭлектроннаяПочта", СтрокаТаблицы.ЭлектроннаяПочта);
			ТекСтруктураСсылки.Вставить("Комментарий", СтрокаТаблицы.Комментарий);
			МассивСсылокНаДокумент.Добавить(Новый ФиксированнаяСтруктура(ТекСтруктураСсылки));
		КонецЦикла;
		лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("МассивЭлектронныхАдресов", Новый ФиксированныйМассив(МассивСсылокНаДокумент));
		лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент.Вставить("НазваниеОпрерации", "ПодписатьОтправитьТолькоСсылкуНаДокумент");

		Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
			лФормаНастройкиОтправкиСсылкиНаДокумент = ПолучитьФорму("ОбщаяФорма.скEDI_НастройкаОтправкиСсылкиНаДокумент", лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент, ЭтаФорма);
			ПрименитьНастройкиОтправкиСсылкиНаДокументИПодписатьОтправитьТолькоСсылка(лФормаНастройкиОтправкиСсылкиНаДокумент.ОткрытьМодально());
		Иначе
			скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиОтправкиСсылкиНаДокумент(лПараметрыФормыНастройкиОтправкиСсылкиНаДокумент, ЭтаФорма, "ПрименитьНастройкиОтправкиСсылкиНаДокументИПодписатьОтправитьТолькоСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиОтправкиСсылкиНаДокументИПодписатьОтправитьТолькоСсылка(ПараметрыРезультат, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	МассивСсылокНаДокумент = Неопределено;
	Если ТипЗнч(ПараметрыРезультат) = Тип("Структура") или ТипЗнч(ПараметрыРезультат) = Тип("ФиксированнаяСтруктура") Тогда	
		МассивСсылокНаДокумент = ПараметрыРезультат.МассивСсылокНаДокумент;
		
		Если ПараметрыРезультат.НазваниеОпрерации = "ПодписатьОтправитьТолькоСсылкуНаДокумент" Тогда
			Если ТипЗнч(МассивСсылокНаДокумент) = Тип("Массив") или ТипЗнч(МассивСсылокНаДокумент) = Тип("ФиксированныйМассив") Тогда	
				ОтправкаСсылкиНаДокументОписаниеНастройки = "";
				ОтправкаСсылкиНаДокументТаблица.Очистить();
				
				ЕстьСсылки = Ложь;
				Для Каждого СтрокаМассиваСсылокНаДокумент Из МассивСсылокНаДокумент Цикл
					НоваяСтрокаОтправкаСсылкиНаДокументТаблица = ОтправкаСсылкиНаДокументТаблица.Добавить();
					НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта = СтрокаМассиваСсылокНаДокумент.ЭлектроннаяПочта;
					НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий = СтрокаМассиваСсылокНаДокумент.Комментарий;
					Если ОтправкаСсылкиНаДокументОписаниеНастройки = "" Тогда
						ОтправкаСсылкиНаДокументОписаниеНастройки = НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
					Иначе
						ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + Символы.ПС + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.ЭлектроннаяПочта;
					КонецЕсли;
					Если ЗначениеЗаполнено(НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий) Тогда
						ОтправкаСсылкиНаДокументОписаниеНастройки = ОтправкаСсылкиНаДокументОписаниеНастройки + " - " + НоваяСтрокаОтправкаСсылкиНаДокументТаблица.Комментарий;
					КонецЕсли;
					ЕстьСсылки = Истина;
				КонецЦикла;
				
				ОтправкаСсылкиНаДокументНастроено = Истина;
				Если Не ЕстьСсылки Тогда
					ОтправкаСсылкиНаДокументОписаниеНастройки = НСтр("ru = 'Отправка ссылки на документ не настроена.'; uk = 'Відправка посилання на документ не налаштована.'");
				КонецЕсли;
				
				Если ОтправкаСсылкиНаДокументНастроено Тогда
					ИнициализироватьПодписьИОтправкуЭлектронногоДокумента(Истина, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЭлектронныйДокумент_КонтрагентПриИзмененииНаСервере()
	//Если ЗначениеЗаполнено(ЭлектронныйДокумент_Контрагент) Тогда
		ДанныеКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагента(ЭлектронныйДокумент_Контрагент);
		ЭлектронныйДокумент_ЕДРПОУКонтрагента = ДанныеКонтрагента.КодПоЕДРПОУ;
		ЭлектронныйДокумент_ФилиалКонтрагента = ДанныеКонтрагента.КодФилиала;
		ЭлектронныйДокумент_НаименованиеКонтрагента = ДанныеКонтрагента.Наименование;
		ИННКонтрагента = ДанныеКонтрагента.ИНН;
		
		Для Каждого ЭлементЗначение Из ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(Новый Структура("ИмяПоля", "SIDE_EDRPOU_K")) Цикл
			ЭлементЗначение.ЗначениеПоля = ЭлектронныйДокумент_ЕДРПОУКонтрагента;
		КонецЦикла;
		Для Каждого ЭлементЗначение Из ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(Новый Структура("ИмяПоля", "SIDE_DEPT_K")) Цикл
			ЭлементЗначение.ЗначениеПоля = ЭлектронныйДокумент_ФилиалКонтрагента;
		КонецЦикла;
		Для Каждого ЭлементЗначение Из ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(Новый Структура("ИмяПоля", "SIDE_SHORTNAME_K")) Цикл
			ЭлементЗначение.ЗначениеПоля = ЭлектронныйДокумент_НаименованиеКонтрагента;
		КонецЦикла;
		Для Каждого ЭлементЗначение Из ЭлектроннаяФорма_Таблица0Строка0.НайтиСтроки(Новый Структура("ИмяПоля", "SIDE_CD_K")) Цикл
			ЭлементЗначение.ЗначениеПоля = ЭлектронныйДокумент_НаименованиеКонтрагента;
		КонецЦикла;
		
		//Если МаршрутОтображатьПоДаннымФЭД Тогда
			Если Маршрут.Количество() >= 2 Тогда
				ЭлементМаршрутаКонтрагент = Маршрут.Получить(1);
				ЭлементМаршрутаКонтрагент.Контрагент = ЭлектронныйДокумент_Контрагент;
				ЭлементМаршрутаКонтрагент.ЕДРПОУКонтрагента = ЭлектронныйДокумент_ЕДРПОУКонтрагента;
				ЭлементМаршрутаКонтрагент.ФилиалКонтрагента = ЭлектронныйДокумент_ФилиалКонтрагента;
				ЭлементМаршрутаКонтрагент.НаименованиеКонтрагента = ЭлектронныйДокумент_НаименованиеКонтрагента;
				ЭлементМаршрутаКонтрагент.ИНН = ИННКонтрагента;
			КонецЕсли;
		//КонецЕсли;
		
		ЗаполнитьНастройкиОтправкиСсылкиНаДокумент_НаСервере();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныйДокумент_КонтрагентПриИзменении(Элемент)
	ЭлектронныйДокумент_КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЭлектронныйДокумент(Команда)
	НаОсновании = ЭлектронныйДокумент;
	УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаСервере(Документ1С, ОрганизацияEDI, ВидЭлектронногоДокумента, НаОсновании);
	СформироватьДанныеЭлектронногоДокументаПоДокументу1С();
	УстановитьВариантОтображения();
	ПоказатьИзображениеЭлектронногоДокумента();
	УстановитьДоступностьКнопокКомандФормы();
КонецПроцедуры

&НаСерверебезКонтекста
Процедура ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументовНаСервере(ТекКлючУникальности, ПараметрыФормыОтображенияЭлектронногоДокумента, ТекЗаголовокФормы)
	скEDI_ОбщегоНазначения.ОбновитьДанныеПоПолучитьКлючуУникальностиФормыОтображениеЭлектронныхДокументов(ТекКлючУникальности, ПараметрыФормыОтображенияЭлектронногоДокумента);
	Если ПараметрыФормыОтображенияЭлектронногоДокумента = Неопределено Тогда
		ТекЗаголовокФормы = "";
	Иначе
		ТекЭлектронныйДокумент = Неопределено;
		Если ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("ЭлектронныйДокумент", ТекЭлектронныйДокумент) Тогда
			Если ЗначениеЗаполнено(ТекЭлектронныйДокумент) Тогда
				ТекЗаголовокФормы = ПолучитьПредставлениеЭлектронногоДокумента(ТекЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование, ТекЭлектронныйДокумент.Номер, ТекЭлектронныйДокумент.Дата, ТекЭлектронныйДокумент.Состояние, ТекЭлектронныйДокумент.ПоследняяОперация);
			Иначе
				ТекЗначение = Неопределено;
				Если ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("Документ1С", ТекЗначение) Тогда
					ТекДокумент1С = ТекЗначение;
					Если ЗначениеЗаполнено(ТекДокумент1С) Тогда
						Если ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("ВидЭлектронногоДокумента", ТекЗначение) Тогда
							ТекЗаголовокФормы = ТекЗначение.Наименование + " (" + НСтр("ru = 'создание'; uk = 'створення'") + ") " + Строка(ТекДокумент1С);
						Иначе
							ТекЗаголовокФормы = Строка(ТекДокумент1С) + " (" + НСтр("ru = 'создание'; uk = 'створення'") + ")";
						КонецЕсли;
					Иначе
						Если ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("ТипДокумента", ТекЗначение) Тогда
							ТекТипДокумента = ТекЗначение;
							Если ТекТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
								Если ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("Контрагент", ТекЗначение) Тогда
									ТекКонтрагент = ТекЗначение;
									Если ЗначениеЗаполнено(ТекКонтрагент) Тогда
										ТекЗаголовокФормы = Строка(ТекТипДокумента) + " (" + НСтр("ru = 'создание'; uk = 'створення'") + ") " + " " + ТекКонтрагент.Наименование;
									Иначе
										ТекЗаголовокФормы = Строка(ТекТипДокумента) + " (" + НСтр("ru = 'создание'; uk = 'створення'") + ")";
									КонецЕсли;
								Иначе
									ТекЗаголовокФормы = Строка(ТекТипДокумента) + " (" + НСтр("ru = 'создание'; uk = 'створення'") + ")";
								КонецЕсли;
							ИначеЕсли ТекТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента") Тогда
								Если ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("СвязанныйЭлектронныйДокумент", ТекЗначение) Тогда
									ТекСвязанныйЭлектронныйДокумент = ТекЗначение;
									Если ЗначениеЗаполнено(ТекСвязанныйЭлектронныйДокумент) Тогда
										ТекЗаголовокФормы = Строка(ТекТипДокумента) + " (" + НСтр("ru = 'создание'; uk = 'створення'") + ") " + " " + Строка(ТекСвязанныйЭлектронныйДокумент);
									Иначе
										ТекЗаголовокФормы = Строка(ТекТипДокумента) + " (" + НСтр("ru = 'создание'; uk = 'створення'") + ")";
									КонецЕсли;
								Иначе
									ТекЗаголовокФормы = Строка(ТекТипДокумента) + " (" + НСтр("ru = 'создание'; uk = 'створення'") + ")";
								КонецЕсли;
							Иначе
 								ТекЗаголовокФормы = ТекЗначение.Наименование + " (" + НСтр("ru = 'создание'; uk = 'створення'") + ") " + Строка(ТекДокумент1С);
							КонецЕсли;
						Иначе
							ТекЗаголовокФормы = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекЗаголовокФормы = "";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекЗаголовокФормы = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументов()
	Если ЗначениеЗаполнено(КлючУникальности) Тогда
		ПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
		ПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
		ПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Документ1С", Документ1С);
		ПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", ОрганизацияEDI);
		ПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
		ПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ТипДокумента", ТипДокумента);
		ПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("СвязанныйЭлектронныйДокумент", СвязанныйЭлектронныйДокумент);
		ПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("СвязанныйЭлектронныйДокументТипСвязи", СвязанныйЭлектронныйДокументТипСвязи);
		ПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Контрагент", ЭлектронныйДокумент_Контрагент);
		ТекЗаголовокФормы = ЭтаФорма.Заголовок;
		ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументовНаСервере(КлючУникальности, ПараметрыФормыОтображенияЭлектронногоДокумента, ТекЗаголовокФормы);
		Если ТекЗаголовокФормы = "" Тогда
			ЭтаФорма.АвтоЗаголовок = Истина;
		Иначе
			ЭтаФорма.АвтоЗаголовок = Ложь;
		КонецЕсли;
		ЭтаФорма.Заголовок = ТекЗаголовокФормы;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы = Истина Тогда
		Если Модифицированность Тогда
			ТекстПредупреждения = НСтр("ru = 'В форме'; uk = 'В формі'");
			Если ЭтаФорма.Заголовок = "" Тогда
				ТекстПредупреждения = ТекстПредупреждения
				+ " """
				+ НСтр("ru = 'Отображение электронных документов'; uk = 'Відображення електронних документів'");
			Иначе
				ТекстПредупреждения = ТекстПредупреждения
				+ " """
				+ ЭтаФорма.Заголовок;
			КонецЕсли;
			ТекстПредупреждения = ТекстПредупреждения
			+ """ "
			+ НСтр("ru = 'есть не сохраненная информация'; uk = 'є не збережена інформація'");
			
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если Модифицированность Тогда
			Если ЗакрытиеРазрешеноКак = Неопределено Тогда
				ТекстВопроса = НСтр("ru = 'В форме'; uk = 'В формі'");
				Если ЭтаФорма.Заголовок = "" Тогда
					ТекстВопроса = ТекстВопроса
					+ " """
					+ НСтр("ru = 'Отображение электронных документов'; uk = 'Відображення електронних документів'");
				Иначе
					ТекстВопроса = ТекстВопроса
					+ " """
					+ ЭтаФорма.Заголовок;
				КонецЕсли;
				ТекстВопроса = ТекстВопроса
				+ """ "
				+ НСтр("ru = 'есть не сохраненная информация'; uk = 'є не збережена інформація'")
				+ "!";
				ТекстВопроса = ТекстВопроса
				+ Символы.ПС
				+ НСтр("ru = 'Сохранить?'; uk = 'Зберегти?'");
		        ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма), ТекстВопроса,  РежимДиалогаВопрос.ДаНетОтмена);
		        Отказ = Истина;
			ИначеЕсли ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Да Тогда
				Если не ИнициализироватьСохранениеДанныхЭлектронногоДокумента() Тогда
					Отказ = Истина;
				КонецЕсли;
			ИначеЕсли ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Нет Тогда
				
			ИначеЕсли ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Если не Отказ Тогда
			Если ЗначениеЗаполнено(КлючУникальности) Тогда
				ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументовНаСервере(КлючУникальности, Неопределено, "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытиеРазрешеноКак = РезультатВопроса;
		Закрыть();
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗакрытиеРазрешеноКак = РезультатВопроса;
		Закрыть();
	Иначе
		ЗакрытиеРазрешеноКак = Неопределено;
    КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьСохранениеДанныхЭлектронногоДокумента()
	лМассивДанныхПоДокументам = Новый Массив;
	
	лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
	лСтруктураДанныхДокумента.Документ1С = Документ1С;
	лСтруктураДанныхДокумента.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
	лСтруктураДанныхДокумента.ЭлектронныйДокумент = ЭлектронныйДокумент;
	лСтруктураДанныхДокумента.Организация = ОрганизацияEDI;
	лСтруктураДанныхДокумента.Состояние = СостояниеЭлектронногоДокумента;
	лСтруктураДанныхДокумента.РегистрируетсяВЕРННПокупателем = РегистрируетсяВЕРННПокупателем;
	лСтруктураДанныхДокумента.ВидДокумента1С = скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(Документ1С);
	лСтруктураДанныхДокумента.ВхИсх = ВхИсх;
	лСтруктураДанныхДокумента.ГдеСоздан = ГдеСоздан;
	лСтруктураДанныхДокумента.Примечание = ПримечаниеЭлектронногоДокумента;
	
	Если (РежимЭлектроннаяФорма и не РежимЭлектроннаяФормаТолькоПросмотр) или МаршрутПоДаннымФормы Тогда
		ИнформацияПоЗаполнениюОбязательныхРеквизитов = "";
		Если ЗаполнитьДанныеПоЭлектроннойФорме(лСтруктураДанныхДокумента, (РежимЭлектроннаяФорма и не РежимЭлектроннаяФормаТолькоПросмотр), МаршрутПоДаннымФормы, Истина, ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
			Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
				Сообщить(ИнформацияПоЗаполнениюОбязательныхРеквизитов);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ИнформацияПоЗаполнениюОбязательныхРеквизитов) Тогда
				Сообщить(ИнформацияПоЗаполнениюОбязательныхРеквизитов);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПараметрыСозданияДокументов = Новый Структура;
		ПараметрыСозданияДокументов.Вставить("ПоДаннымХранилищаРеквизитов", Ложь);
		лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов", ПараметрыСозданияДокументов);
	КонецЕсли;
	
	Если не ЗаполнитьДанныеПоОтправкеСсылкиНаДокумент(лСтруктураДанныхДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если не ЗаполнитьДанныеПоВложениям(лСтруктураДанныхДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	СохранитьПримечаниеЭлектронногоДокумента();

	лМассивДанныхПоДокументам.Добавить(лСтруктураДанныхДокумента);
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхПоДокументам);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("СохранениеДанных");
	
	лПараметрыФормыНастройкиСохраненияДанныхЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,ТаблицаНеобходимыхПодписей,ТаблицаНеобходимыхПодписейШифрования", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, ОрганизацияEDI, Новый Массив, Новый Массив);
	лПараметрыФормыНастройкиСохраненияДанныхЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	ВыполнитьОперацииСЭлектроннымиДокументами(лПараметрыФормыНастройкиСохраненияДанныхЭлектронныхДокументов);
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	ИнициализироватьСохранениеДанныхЭлектронногоДокумента();
КонецПроцедуры


&НаСервере
Процедура ПоказатьЭлектроннуюФормуНаСервере()
	РежимЕстьЭлектроннаяФорма = Истина;
	РежимЭлектроннаяФорма = Истина;
	//РежимЭлектроннаяФормаТолькоПросмотр = Ложь;
	УстановитьВариантОтображения();
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьЭлектроннуюФорму(Команда)
	ПоказатьЭлектроннуюФормуНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ЭлектронныйДокумент_Контрагент1ПриИзменении(Элемент)
	ЭлектронныйДокумент_КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяФормаТолькоПросмотр(Команда)
	Если РежимЭлектроннаяФорма Тогда
		Если РежимЭлектроннаяФормаТолькоПросмотр Тогда
			Если РежимЭлектроннаяФормаМожноРедактировать Тогда
				РежимЭлектроннаяФормаТолькоПросмотр = Ложь;
				ДоступноОтменитьЗаполнениеПоЭлектроннойФормеЭлектронногоДокумента = Истина;
				
				УстановитьВариантОтображения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЭлектронногоДокумента(Команда)
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'; uk = 'Дані було змінено. Зберегти зміни?'");
		Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
			 Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			 ОбработатьОтветОбновитьДанныеЭлектронногоДокумента(Ответ);
		Иначе
			скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ОбработатьОтветОбновитьДанныеЭлектронногоДокумента", ЭтаФорма, "Неопределено", ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	Иначе
		ОбработатьОтветОбновитьДанныеЭлектронногоДокумента(КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветОбновитьДанныеЭлектронногоДокумента(Ответ, П2 = Неопределено) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИнициализироватьСохранениеДанныхЭлектронногоДокумента();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ОбновитьДанныеНаСервере(ЭлектронныйДокумент, Документ1С, ОрганизацияEDI, ВидЭлектронногоДокумента, ТипДокумента, СвязанныйЭлектронныйДокумент, СвязанныйЭлектронныйДокументТипСвязи);
		СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();
		ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактированиеЭлектронногоДокумента(Команда)
	Если ЗначениеЗаполнено(НаОсновании) Тогда
		Если Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'Данные были изменены. Отменить редактирование Электронного документа?'; uk = 'Дані було змінено. Відмінити редагування Електронного документа?'");
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
				 Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				 ОбработатьОтветОтменитьРедактированиеЭлектронногоДокумента(Ответ, НаОсновании);
			Иначе
				скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ОбработатьОтветОтменитьРедактированиеЭлектронногоДокумента", ЭтаФорма, НаОсновании, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		Иначе
			ОбработатьОтветОтменитьРедактированиеЭлектронногоДокумента(КодВозвратаДиалога.Да, НаОсновании);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветОтменитьРедактированиеЭлектронногоДокумента(Ответ, П2 = Неопределено) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ЗначениеЗаполнено(П2) Тогда
			УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаКлиенте(П2);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаполнениеДокументаПоЭлектроннойФорме(Команда)
	Если ЗначениеЗаполнено(Документ1С) Тогда
		Если ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
			Если ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
				//или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
				или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
				или ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
				
				Если СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
					или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
					или СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
					
					СтруктураДанныхДокумента = Новый Структура;
					СтруктураДанныхДокумента.Вставить("Документ1С"                     , Документ1С);
					СтруктураДанныхДокумента.Вставить("ЭлектронныйДокумент"            , ЭлектронныйДокумент);
					СтруктураДанныхДокумента.Вставить("ВидЭлектронногоДокумента"       , ВидЭлектронногоДокумента);
					СтруктураДанныхДокумента.Вставить("ВхИсх"                          , ВхИсх);
					СтруктураДанныхДокумента.Вставить("ГдеСоздан"                      , ГдеСоздан);
					СтруктураДанныхДокумента.Вставить("Состояние"                      , СостояниеЭлектронногоДокумента);
					СтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
					СтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов   " , Новый Структура);
					СтруктураДанныхДокумента.Вставить("ВидДокумента1С"                 , скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(Документ1С));
					СтруктураДанныхДокумента.Вставить("Примечание"                     , ПримечаниеЭлектронногоДокумента);
					СтруктураДанныхДокумента.ПараметрыСозданияДокументов.Вставить("ПоДаннымХранилищаРеквизитов", Ложь);
					
					МассивДанныхДокументов = Новый Массив;
					МассивДанныхДокументов.Добавить(СтруктураДанныхДокумента);
					
					РезультатыФункцииПечатьДокумента = Неопределено;
					#Если ТолстыйКлиентОбычноеПриложение Тогда
						РезультатыФункцииПечатьДокумента = скEDI_НастройкиПодКонфигурациюКлиент.ПолучитьРезультатыФункцииПечатьДокумента(МассивДанныхДокументов);
					#КонецЕсли
					Если РезультатыФункцииПечатьДокумента = Неопределено Тогда
						лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Неопределено;
					Иначе
						ФиксированноеСоответствиеДокументов = Новый ФиксированноеСоответствие(РезультатыФункцииПечатьДокумента);
						лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура;
						лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("РезультатыФункцииПечатьДокумента", ФиксированноеСоответствиеДокументов);
					КонецЕсли;
					
					скEDI_ОбщегоНазначения.ВыгрузитьДокументВСоответствиеЗначенийВызовСервера(МассивДанныхДокументов, лПараметрыФормыНастройкиПодписейЭлектронныхДокументов);
					
					СтруктураДанныхДокумента = МассивДанныхДокументов[0];
					
					лСоответствиеСРеквизитамиЭлектронногоДокумента = СтруктураДанныхДокумента.СоответствиеЗначенийРеквизитов;
					мПараметрыДляСозданияЭлектронногоДокумента     = СтруктураДанныхДокумента.ПараметрыСозданияДокументов;
					
					ТекстВопроса = "";
					Если ЗначениеЗаполнено(лСоответствиеСРеквизитамиЭлектронногоДокумента) 
						И ЗначениеЗаполнено(мПараметрыДляСозданияЭлектронногоДокумента) Тогда
					Иначе
						Если ЗначениеЗаполнено(ТекстВопроса) Тогда
							ТекстВопроса = ТекстВопроса + Символы.ПС;
						КонецЕсли;
						ТекстВопроса = ТекстВопроса + НСтр("ru = 'Для'; uk = 'Для'") + " """ + Строка(ВидЭлектронногоДокумента) + """ "
							+ НСтр("ru = 'по учетному документу'; uk = 'по обліковому документу'")
							+ " """ + Строка(Документ1С) + """ "
							+ НСтр("ru = 'нет данных для заполнения!'; uk = 'нема даних для заповнення!'")
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекстВопроса) Тогда
						ТекстВопроса = ТекстВопроса + Символы.ПС;
					КонецЕсли;
					
					П2 = Новый ФиксированнаяСтруктура(Новый Структура("ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента", ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента));
					ТекстВопроса = ТекстВопроса + НСтр("ru = 'Отменить заполнение документа по Электронной форме?'; uk = 'Відмінити заповнення документа за Електронною формою?'");
					
					Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
						 Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
						 ОбработатьОтменитьЗаполнениеДокументаПоЭлектроннойФорме(Ответ, П2);
					Иначе
						скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ОбработатьОтменитьЗаполнениеДокументаПоЭлектроннойФорме", ЭтаФорма, П2, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСерверебезКонтекста
Процедура СнятьПризнакЭлектронногоДокументаПоДаннымХранилищаРеквизитов(пЭлектронныйДокумент)
	Если пЭлектронныйДокумент.ПоДаннымХранилищаРеквизитов Тогда
		ЭлектронныйДокументОбъект = пЭлектронныйДокумент.ПолучитьОбъект();
		ЭлектронныйДокументОбъект.ПоДаннымХранилищаРеквизитов = Ложь;
		ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
		ЭлектронныйДокументОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтменитьЗаполнениеДокументаПоЭлектроннойФорме(Ответ, П2 = Неопределено) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(П2) = Тип("ФиксированнаяСтруктура") Тогда
			Если ЗначениеЗаполнено(П2.ЭлектронныйДокумент) Тогда
				СнятьПризнакЭлектронногоДокументаПоДаннымХранилищаРеквизитов(П2.ЭлектронныйДокумент);
				УстановитьРежим_ЕстьЭлектронныйДокументИЕстьДокумент1С_НаКлиенте(П2.ЭлектронныйДокумент);
			Иначе
				УстановитьРежим_ЕстьДокумент1СиНетЭлектронногоДокумента_НаКлиенте(П2.Документ1С, , П2.ВидЭлектронногоДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога) Экспорт
	ПутьКаталога = СокрЛП(ПутьКаталога);
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	//Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
	Если Сред(ПутьКаталога, СтрДлина(ПутьКаталога), 1) = ДобавляемыйСимвол Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьУникальноеИмяСПутем(Знач ИмяКаталога, ИмяФайла) Экспорт
	ИтоговыйПуть = "";
	
	Счетчик = 0;
	ЦиклНомер = 0;
	Успешно = Ложь;
	
	ГенераторСлучая = Неопределено;
	
	#Если Не ВебКлиент Тогда
		// ТекущаяДата() используется только для генерации случайного числа,
		// поэтому приведение к ТекущаяДатаСеанса не требуется.
		ГенераторСлучая = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяДата()));
	#КонецЕсли
	
	Пока НЕ Успешно И ЦиклНомер < 100 Цикл
		НомерКаталога = 0;
		#Если Не ВебКлиент Тогда
			НомерКаталога = ГенераторСлучая.СлучайноеЧисло(0, 25);
		#Иначе
			// ТекущаяДата() используется только для генерации случайного числа,
			// поэтому приведение к ТекущаяДатаСеанса не требуется.
			НомерКаталога = Секунда(ТекущаяДата()) % 26;
		#КонецЕсли
		
		КодБукваA = КодСимвола("A", 1); 
		КодКаталога = КодБукваA + НомерКаталога;
		
		БукваКаталога = Символ(КодКаталога);
		
		ПодКаталог = ""; // Частичный путь.
		
		// По умолчанию вначале используется корень, если возможности нет,
		// то добавляется A, B, ... Z,  A1, B1, .. Z1, ..  A2, B2 и т.д.
		Если  Счетчик = 0 Тогда
			ПодКаталог = "";
		Иначе
			ПодКаталог = БукваКаталога; 
			ЦиклНомер = Окр(Счетчик / 26);
			
			Если ЦиклНомер <> 0 Тогда
				ЦиклНомерСтрока = Строка(ЦиклНомер);
				ПодКаталог = ПодКаталог + ЦиклНомерСтрока;
			КонецЕсли;
			
			ПодКаталог = ДобавитьКонечныйРазделительПути(ПодКаталог);
		КонецЕсли;
		
		ПолныйПодКаталог = ИмяКаталога + ПодКаталог;
		
		// Создание каталога для файлов.
		КаталогНаДиске = Новый Файл(ПолныйПодКаталог);
		Если НЕ КаталогНаДиске.Существует() Тогда
			Попытка
				СоздатьКаталог(ПолныйПодКаталог);
			Исключение
				ВызватьИсключение 
					НСтр("ru = 'Ошибка при создании каталога'; uk = 'Помилка при створенні каталогу'")
					+ """" + ПолныйПодКаталог + """:" + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
		
		ФайлПопытки = ПолныйПодКаталог + ИмяФайла;
		Счетчик = Счетчик + 1;
		
		// Проверка, есть ли файл с таким именем.
		ФайлНаДиске = Новый Файл(ФайлПопытки);
		Если НЕ ФайлНаДиске.Существует() Тогда  // Нет такого файла.
			ИтоговыйПуть = ПодКаталог + ИмяФайла;
			Успешно = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйПуть;
КонецФункции

&НаКлиенте
Процедура ОткрытьВложеныйФайл(Команда)
	ЭлементТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если ЭлементТекущиеДанные <> Неопределено Тогда
		ИмяКаталога = КаталогВременныхФайлов() + "DirectoryTemporaryFiles1C\";
		Попытка
			 УдалитьФайлы(ИмяКаталога);
		Исключение
		КонецПопытки;
		////ПолучитьИмяВременногоФайла(
		ПутьКФайлу = ИмяКаталога + ПолучитьУникальноеИмяСПутем(ИмяКаталога, ЭлементТекущиеДанные.ИмяФайлаВложениеДокумента);
		Если ЭтоАдресВременногоХранилища(ЭлементТекущиеДанные.ВложениеДокумента) Тогда
			Адрес = ЭлементТекущиеДанные.ВложениеДокумента;
		Иначе
			Адрес = ПолучитьСсылкуНаВложеныйФайлНаСервере(ЭлектронныйДокумент, Число(ЭлементТекущиеДанные.ВложениеДокумента));
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
			ДвоичныеДанные.Записать(ПутьКФайлу);
			//ФайлНаДиске = Новый Файл(ПутьКФайлу);
			//ФайлНаДиске.УстановитьТолькоЧтение(Истина);
			
			ЗапуститьПриложение(ПутьКФайлу);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьВложеныйФайл(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Отказ = Истина;
		Иначе
			ТекКонтрагент = ТекущиеДанные.Контрагент;
			Если ТипЗнч(ТекКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ТекКонтрагент = ТекущиеДанные.Контрагент;
		Если ТипЗнч(ТекКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекКонтрагент = ТекущиеДанные.Контрагент;
		Если ТипЗнч(ТекКонтрагент) = Тип("СправочникСсылка.скEDI_Организации") Тогда
			Отказ = Истина;
		Иначе
			ЕстьДругиеЭлементыМаршрута = Ложь;
			Для Каждого ЭлементМаршрута Из Маршрут Цикл
				Если ТипЗнч(ЭлементМаршрута.Контрагент) = Тип("СправочникСсылка.скEDI_Организации") Тогда
					Продолжить;
				Иначе
					Если ЭлементМаршрута = ТекущиеДанные Тогда
						Продолжить;
					Иначе
						ЕстьДругиеЭлементыМаршрута = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьДругиеЭлементыМаршрута Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока и не Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
	
	ТекИндекс = Маршрут.Индекс(Элемент.ТекущиеДанные);
	Если ТекИндекс = 1 Тогда
		ЗаполнитьДанныеПоКонтрагентуПоМарщнутуMULTIDOC();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПослеУдаления(Элемент)
	Модифицированность = Истина;
	
	ТекИндекс = Маршрут.Индекс(Элемент.ТекущиеДанные);
	Если ТекИндекс = 1 Тогда
		ЗаполнитьДанныеПоКонтрагентуПоМарщнутуMULTIDOC();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМаршрутПоДаннымФормыРучнаяУстановка(Значение, ЗадаватьВпрос)
	Если Значение Тогда
		Если МаршрутПоДаннымФормы Тогда
			МаршрутПоДаннымФормыРучнаяУстановка = Истина;
			Модифицированность = Истина;
		Иначе
			//ОбработатьОтветОбновитьДанныеЭлектронногоДокумента(КодВозвратаДиалога.Нет);
			СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();
			ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументов();
			
			МаршрутПоДаннымФормы = Истина;
			МаршрутОтображатьПоДаннымФЭД = Ложь;
			МаршрутОтображатьПоДаннымХР = Истина;
			МаршрутОтображатьПоДаннымЭДТЧ = Ложь;
			МаршрутПоДаннымФормыРучнаяУстановка = Истина;
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		Если МаршрутВозможноОтображатьПоДаннымФЭД Тогда
			Если ЗадаватьВпрос Тогда
				ТекстВопроса = НСтр("ru = 'Отменить ручное редактирование маршрутта?'; uk = 'Відмінити ручне редагування маршруту?'");
				Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
					 Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					 ОбработатьОтветМаршрутПоДаннымФормыРучнаяУстановка(Ответ, Ложь);
					 Возврат;
				Иначе
					скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ОбработатьОтветМаршрутПоДаннымФормыРучнаяУстановка", ЭтаФорма, Ложь, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					МаршрутПоДаннымФормыРучнаяУстановкаИнт = МаршрутПоДаннымФормыРучнаяУстановка;
					Возврат;
				КонецЕсли;
			Иначе
				МаршрутПоДаннымФормы = Ложь;
				МаршрутОтображатьПоДаннымФЭД = Истина;
				МаршрутОтображатьПоДаннымХР = Ложь;
				МаршрутОтображатьПоДаннымЭДТЧ = Ложь;
				//ОбработатьОтветОбновитьДанныеЭлектронногоДокумента(КодВозвратаДиалога.Нет);
				СформироватьДанныеЭлектронногоДокументаИПоказатьИзображение();
				ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументов();
				
				МаршрутПоДаннымФормыРучнаяУстановкаИнт = Ложь;
				МаршрутПоДаннымФормыРучнаяУстановка = Ложь;
				Модифицированность = Истина;
			КонецЕсли;
		Иначе
			МаршрутПоДаннымФормыРучнаяУстановкаИнт = МаршрутПоДаннымФормыРучнаяУстановка;
		КонецЕсли;             
	КонецЕсли;
	
	Если МаршрутОтображатьПоДаннымФЭД Тогда
		Элементы.МаршрутКонтрагент.Видимость = Ложь;
		Элементы.МаршрутКонтрагент1.Видимость = Ложь;
		Элементы.МаршрутСостояние.Видимость = Ложь;         
		Элементы.МаршрутСостояние1.Видимость = Ложь;
		
		Элементы.ГруппаМаршрут.ТолькоПросмотр = Ложь;
		Элементы.ГруппаМаршрут1.ТолькоПросмотр = Ложь;
		Элементы.МаршрутПоДаннымФормыРучнаяУстановкаИнт.ТолькоПросмотр = Ложь;
		Элементы.МаршрутПоДаннымФормыРучнаяУстановкаИнт1.ТолькоПросмотр = Ложь;
		Элементы.Маршрут.ТолькоПросмотр = не МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.Маршрут1.ТолькоПросмотр = не МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутДобавить.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутДобавить1.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутУдалить.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутУдалить1.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутПереместитьВверх.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутПереместитьВниз.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.Маршрут1ПереместитьВверх.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.Маршрут1ПереместитьВниз.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
	ИначеЕсли МаршрутОтображатьПоДаннымХР Тогда
		Элементы.МаршрутКонтрагент.Видимость = Ложь;//МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутКонтрагент1.Видимость = Ложь;//МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутСостояние.Видимость = Ложь;
		Элементы.МаршрутСостояние1.Видимость = Ложь;
		
		Элементы.ГруппаМаршрут.ТолькоПросмотр = Ложь;
		Элементы.ГруппаМаршрут1.ТолькоПросмотр = Ложь;
		Элементы.МаршрутПоДаннымФормыРучнаяУстановкаИнт.ТолькоПросмотр = Ложь;
		Элементы.МаршрутПоДаннымФормыРучнаяУстановкаИнт1.ТолькоПросмотр = Ложь;
		Элементы.Маршрут.ТолькоПросмотр = не МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.Маршрут1.ТолькоПросмотр = не МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутДобавить.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутДобавить1.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутУдалить.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутУдалить1.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутПереместитьВверх.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.МаршрутПереместитьВниз.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.Маршрут1ПереместитьВверх.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
		Элементы.Маршрут1ПереместитьВниз.Доступность = МаршрутПоДаннымФормыРучнаяУстановка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПоДаннымФормыРучнаяУстановкаПриИзменении(Элемент)
	УстановитьМаршрутПоДаннымФормыРучнаяУстановка(МаршрутПоДаннымФормыРучнаяУстановкаИнт, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветМаршрутПоДаннымФормыРучнаяУстановка(Ответ, НовоеЗначение = Неопределено) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьМаршрутПоДаннымФормыРучнаяУстановка(НовоеЗначение, Ложь);
		МаршрутПоДаннымФормыРучнаяУстановка = НовоеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеСтрокиМаршрутаПоКонтрагентуНаСервере(Контрагент, ЕДРПОУКонтрагента, ФилиалКонтрагента, ИНН, НаименованиеКонтрагента)
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ДанныеКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагента(Контрагент);
			ЕДРПОУКонтрагента = ДанныеКонтрагента.КодПоЕДРПОУ;
			ФилиалКонтрагента = ДанныеКонтрагента.КодФилиала;
			НаименованиеКонтрагента = ДанныеКонтрагента.Наименование;
			ИНН = ДанныеКонтрагента.ИНН;
		Иначе
			ЕДРПОУКонтрагента = "";
			ФилиалКонтрагента = "";
			НаименованиеКонтрагента = "";
			ИНН = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКонтрагентуПоМарщнутуMULTIDOC()
	Если ЭлектроннаяФормаMULTIDOC Тогда
		Если Маршрут.Количество() >= 0 Тогда
			ЭлементМаршрутаКонтрагент = Маршрут.Получить(1);
			
			ЭлектронныйДокумент_Контрагент = ЭлементМаршрутаКонтрагент.Контрагент;
			ЭлектронныйДокумент_ЕДРПОУКонтрагента = ЭлементМаршрутаКонтрагент.ЕДРПОУКонтрагента;
			ЭлектронныйДокумент_ФилиалКонтрагента = ЭлементМаршрутаКонтрагент.ФилиалКонтрагента;
			ЭлектронныйДокумент_НаименованиеКонтрагента = ЭлементМаршрутаКонтрагент.НаименованиеКонтрагента;
			//ИННКонтрагента = ЭлементМаршрутаКонтрагент.ИНН;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутТекущиеДанныеКонтрагентПриИзменении(ТекущиеДанные)
	Если ТекущиеДанные <> Неопределено Тогда
		ТекКонтрагент = ТекущиеДанные.Контрагент;
		ТекЕДРПОУКонтрагента = ТекущиеДанные.ЕДРПОУКонтрагента;
		ТекФилиалКонтрагента = ТекущиеДанные.ФилиалКонтрагента;
		ТекИНН = ТекущиеДанные.ИНН;
		ТекНаименованиеКонтрагента = ТекущиеДанные.НаименованиеКонтрагента;
		ПолучитьДанныеСтрокиМаршрутаПоКонтрагентуНаСервере(ТекКонтрагент, ТекЕДРПОУКонтрагента, ТекФилиалКонтрагента, ТекИНН, ТекНаименованиеКонтрагента);
		//ТекущиеДанные.Контрагент = ТекКонтрагент;
		ТекущиеДанные.ЕДРПОУКонтрагента = ТекЕДРПОУКонтрагента;
		ТекущиеДанные.ФилиалКонтрагента = ТекФилиалКонтрагента;
		ТекущиеДанные.ИНН = ТекИНН;
		ТекущиеДанные.НаименованиеКонтрагента = ТекНаименованиеКонтрагента;
		
		ТекИндекс = Маршрут.Индекс(ТекущиеДанные);
		Если ТекИндекс = 1 Тогда
			ЗаполнитьДанныеПоКонтрагентуПоМарщнутуMULTIDOC();
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьНастройкиОтправкиСсылкиНаДокумент_НаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутКонтрагентПриИзменении(Элемент)
	МаршрутТекущиеДанныеКонтрагентПриИзменении(Элементы.Маршрут.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутКонтрагент1ПриИзменении(Элемент)
	МаршрутТекущиеДанныеКонтрагентПриИзменении(Элементы.Маршрут1.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПереместить_НаКлиенте(Элемент, Сдвиг)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекКонтрагент = ТекущиеДанные.Контрагент;
		Если ТипЗнч(ТекКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ТекИндекс = Маршрут.Индекс(ТекущиеДанные);
			НовыйИндекс = ТекИндекс + Сдвиг;
			Если НовыйИндекс < 0 Тогда
				Возврат;
			ИначеЕсли НовыйИндекс >= Маршрут.Количество() Тогда
				Возврат;
			КонецЕсли;
			СтрокаНазначение = Маршрут.Получить(НовыйИндекс);
			Если ТипЗнч(СтрокаНазначение.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Маршрут.Сдвинуть(ТекИндекс, Сдвиг);
				Модифицированность = Истина;
				
				Если (ТекИндекс = 1) или (НовыйИндекс = 1) Тогда
					ЗаполнитьДанныеПоКонтрагентуПоМарщнутуMULTIDOC();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Маршрут1ПереместитьВверх(Команда)
	МаршрутПереместить_НаКлиенте(Элементы.Маршрут1, -1);
КонецПроцедуры

&НаКлиенте
Процедура Маршрут1ПереместитьВниз(Команда)
	МаршрутПереместить_НаКлиенте(Элементы.Маршрут1, +1);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПереместитьВверх(Команда)
	МаршрутПереместить_НаКлиенте(Элементы.Маршрут, -1);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПереместитьВниз(Команда)
	МаршрутПереместить_НаКлиенте(Элементы.Маршрут, +1);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутНаименованиеКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ТекКонтрагент = ТекущиеДанные.Контрагент;
		Если ТипЗнч(ТекКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		    ВыбЗнач = ТекущиеДанные.Контрагент;
		    Массив = Новый Массив;
		    Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
		    ОписаниеТипов = Новый ОписаниеТипов(Массив);
			Оповещение =  Новый ОписаниеОповещения("ПослеВводаЗначенияМаршрутКонтрагент", ЭтаФорма);//, Параметры);
		    ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите значение", ОписаниеТипов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутНаименованиеКонтрагента1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Маршрут1.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ТекКонтрагент = ТекущиеДанные.Контрагент;
		Если ТипЗнч(ТекКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		    ВыбЗнач = ТекущиеДанные.Контрагент;
		    Массив = Новый Массив;
		    Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
		    ОписаниеТипов = Новый ОписаниеТипов(Массив);
			Оповещение =  Новый ОписаниеОповещения("ПослеВводаЗначенияМаршрут1Контрагент", ЭтаФорма);//, Параметры);
		    ПоказатьВводЗначения(Оповещение, ВыбЗнач, "Введите значение", ОписаниеТипов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначенияМаршрутКонтрагент(ВыбЗнач, Параметры) Экспорт
    Если ВыбЗнач <> Неопределено Тогда
		ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
		    ТекущиеДанные.Контрагент = ВыбЗнач;
			МаршрутТекущиеДанныеКонтрагентПриИзменении(ТекущиеДанные);
		КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначенияМаршрут1Контрагент(ВыбЗнач, Параметры) Экспорт
    Если ВыбЗнач <> Неопределено Тогда
		ТекущиеДанные = Элементы.Маршрут1.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
		    ТекущиеДанные.Контрагент = ВыбЗнач;
			МаршрутТекущиеДанныеКонтрагентПриИзменении(ТекущиеДанные);
		КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭлектронныйДокумент(Команда)
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		лПараметрыФормыОтображенияЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПараметрыФормыОтображенияДляСоглашенияОбАннулировании(ЭлектронныйДокумент, ОрганизацияEDI);
		КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
		ОткрытьФорму("ОбщаяФорма.скEDI_ОтображениеЭлектронныхДокументов", лПараметрыФормыОтображенияЭлектронногоДокумента, ВладелецФормы, КлючУникальностиФормыОтображениеЭлектронныхДокументов);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиДокумент1СНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НайтиДокумент1С(Команда)
	//НайтиДокумент1СНаСервере();
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Если Модифицированность Тогда
			Сообщить(НСтр("ru = 'Есть несохраненные данные, операция невозможна.'; uk = 'Є незбережені дані, операція неможлива.'"));
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
			
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
				НастроенныеКолонки = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДокумента1С", ПараметрыФормы, ЭтаФорма).ОткрытьМодально();
				ПослеЗакрытияФормыВыбораДокумента1С(НастроенныеКолонки, Неопределено);
			Иначе
				скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуВыбораДокумента1С(ПараметрыФормы, ЭтаФорма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораДокумента1С(РезультатФормы, ДопПараметр) Экспорт
	Если РезультатФормы = КодВозвратаДиалога.Да Тогда
		ЭлектронныйДокументПриИзменении_НаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИндексОтображенияЭлектронногоДокумента(ТекИндекс);
	НовыйИндекс = 0;
	Для Каждого ЭлементВложения Из Вложения Цикл
		Если ЭлементВложения.ПорядковыйНомерФайла = ТекИндекс Тогда
			ЭлементВложения.Отображать = Истина;
			НовыйИндекс = ЭлементВложения.ПорядковыйНомерФайла;
		Иначе
			ЭлементВложения.Отображать = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если НовыйИндекс = 0 Тогда
		Элементы.ВложенияОтображатьЭлектронныйДокумент.Пометка = Истина;
	Иначе
		Элементы.ВложенияОтображатьЭлектронныйДокумент.Пометка = Ложь;
	КонецЕсли;
	Если ОтображенияЭлектронногоДокументаИндекс <> НовыйИндекс Тогда
		ОтображенияЭлектронногоДокументаИндекс = ТекИндекс;
		ПоказатьИзображениеЭлектронногоДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЭлектронныйДокумент(Команда)
	УстановитьИндексОтображенияЭлектронногоДокумента(0);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияОтображатьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		УстановитьИндексОтображенияЭлектронногоДокумента(0);
	Иначе
		Если ТекущиеДанные.Отображать Тогда
			УстановитьИндексОтображенияЭлектронногоДокумента(ТекущиеДанные.ПорядковыйНомерФайла);
		Иначе
			УстановитьИндексОтображенияЭлектронногоДокумента(0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
