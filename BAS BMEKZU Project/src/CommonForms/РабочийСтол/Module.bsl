
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВариантРабочегоСтола = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ВариантРабочегоСтола");
	
	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ОрганизацияПредставление = Строка(Организация);
	
	
	ОбновитьТекущуюДатуЗаголовокФормыНаСервере();
	
		ШиринаРазделаВМонитореРуководителя = 50;
	
	Элементы.ДекорацияЕдиницаИзмерения.Ширина = ШиринаРазделаВМонитореРуководителя - 1;
	
	// Устанавливаем ширину разделов монитора в зависимости от интерфейса
	СписокРазделовМонитора = МониторРуководителя.СтандартныйСписокРазделовМонитораРуководителя();
	Для Каждого ЭлементСпискаРазделовМонитора Из СписокРазделовМонитора Цикл
		ИмяРазделаМонитора = ОбщегоНазначения.ИмяЗначенияПеречисления(ЭлементСпискаРазделовМонитора.Значение);
		Элементы[ИмяРазделаМонитора].Ширина = ШиринаРазделаВМонитореРуководителя;
	КонецЦикла;
	
	Если ВариантРабочегоСтола = "ЗадачиБухгалтера" Тогда
		// Список задач актуален, если не выполнены задачи начала работы или дата актуальности больше текущей даты
		ЗаполнитьСписокЗадачНачалаРаботыНаСервере();
		Если СписокЗадачНачалаРаботы.Количество() > 0 Тогда
			СписокЗадачПустой   = Ложь;
		Иначе
			СписокЗадачПустой   = Истина;
		КонецЕсли;
	Иначе
		// Пока пользователь не потребовал обновить, считаем, что данные монитора актуальны
		МониторАктуален = Истина; 
		ОбновитьМониторНаСервере();
	КонецЕсли;
	
	// Помощь в освоении
	НастройкиПредупрежденийОбИзменениях = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях(
		"ЗадачаБухгалтераПомещенаВСписокВыполненных,
		|ВыполненаЗадачаНачальныеОстатки,
		|ВыполненаЗадачаПараметрыУчета,
		|ВыполненаЗадачаУчетнаяПолитика");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтолаПриОткрытии", 16, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтола", ИнтервалОбновления, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		Организация = Параметр;
		ОрганизацияПриИзмененииНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантРабочегоСтолаПриИзменении(Элемент)
	
	ВариантРабочегоСтолаПриИзмененииНаСервере();
	
	ЖдатьЗавершенияФоновогоЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ВариантРабочегоСтолаПриИзмененииНаСервере()
	
	Если ВариантРабочегоСтола = "ЗадачиБухгалтера" Тогда
		ЗаполнитьСписокЗадачНачалаРаботыНаСервере();
	Иначе
		// Сразу обновим монитор устаревшими данными.
		// А затем, запустим обработку обновления данных монитора в фоне.
		ОбновитьМониторНаСервере();
		ОбновитьДанныеМонитора();
	КонецЕсли;
	
	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ВариантРабочегоСтола", ВариантРабочегоСтола);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииНаКлиенте()
	
	ОрганизацияПредставление = Строка(Организация);
	
	Если ЗапуститьОбновлениеДанныхТекущегоВариантаНаСервере() Тогда
		ЖдатьЗавершенияФоновогоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта",  Новый Структура("Ключ", Организация), ЭтотОбъект, Организация);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадачНачалаРаботы

&НаКлиенте
Процедура СписокЗадачНачалаРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Задача = Элементы.СписокЗадачНачалаРаботы.ТекущиеДанные;
	Если Задача = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СписокЗадачНачалаРаботыПравило" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыКоманды = НовыеПараметрыКомандЗадачи();
		ЗаполнитьЗначенияСвойств(ПараметрыКоманды, Задача);
		
		СписокКоманд = СписокКомандЗадачи(ПараметрыКоманды, ТекущаяДата);
		КоличествоКоманд = СписокКоманд.Количество();
		Если КоличествоКоманд = 1 Тогда
			СписокЗадачВыполнитьКоманду(СписокКоманд[0], ПараметрыКоманды);
		ИначеЕсли КоличествоКоманд > 1 Тогда
			ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("СписокЗадачВыборЗначенияЗавершение", ЭтотОбъект, ПараметрыКоманды);
			ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадачБухгалтера




&НаКлиенте
Процедура СписокЗадачВыборЗначенияЗавершение(Команда, ПараметрыКоманды) Экспорт
	
	СписокЗадачВыполнитьКоманду(Команда, ПараметрыКоманды);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыМониторРуководителя

&НаКлиенте
Процедура ОстаткиДенежныхСредствНажатие(Элемент, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Отборы = ОтборПоСтрокеДенежныхСредств(Элемент.Имя);
	ГруппировкаОтчета = СтандартныеГруппировкиДенежныхСредств();
	
	ОткрытьОтчет("Отчет.ОстаткиДенежныхСредств.Форма.ФормаОтчета",ГруппировкаОтчета, Отборы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеДенежныхСредствПоступлениеЗаголовокНажатие(Элемент)
	
	ГруппировкаОтчета = СтандартныеГруппировкиДенежныхСредств();
	
	ОткрытьОтчет("Отчет.ПоступленияДенежныхСредств.Форма.ФормаОтчета", ГруппировкаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеДенежныхСредствРасходЗаголовокНажатие(Элемент)
	
	ГруппировкаОтчета = СтандартныеГруппировкиДенежныхСредств();

	ОткрытьОтчет("Отчет.РасходыДенежныхСредств.Форма.ФормаОтчета", ГруппировкаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеДенежныхСредствЗаголовокНажатие(Элемент)
	
	ГруппировкаОтчета = СтандартныеГруппировкиДенежныхСредств();
	ГруппировкаОтчета.Добавить(Новый Структура("Поле, Представление, Использование, ТипГруппировки", "ВидДвижения", "Вид движения", Истина, 0));
	
	Показатели = Новый Массив;
	
	Показатели.Добавить("ПоказательПоступление");
	Показатели.Добавить("ПоказательРасход");
	
	ОткрытьОтчет("Отчет.АнализДвиженийДенежныхСредств.Форма.ФормаОтчета", ГруппировкаОтчета,,Показатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиПоКонтрагентамЗаголовокНажатие(Элемент)
	
	ОткрытьОтчет("Отчет.Продажи.Форма.ФормаОтчета",,,,"ПродажиПоКонтрагентам");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПродажиПоКонтрагентамСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отборы = ОтборПоСтрокеПродажиПоКонтрагентам(Элемент.Имя);

	ОткрытьОтчет("Отчет.Продажи.Форма.ФормаОтчета",,Отборы,,"ПродажиПоНоменклатуре");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажиПоНоменклатурнымГруппамЗаголовокНажатие(Элемент)
	
	ОткрытьОтчет("Отчет.Продажи.Форма.ФормаОтчета",,,,"ПродажиПоНоменклатурнымГруппам");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурнаяГруппаПродажиПоНоменклатурнымГруппамСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отборы = ОтборПоСтрокеПродажиПоНоменклатурнымГруппам(Элемент.Имя);

	ОткрытьОтчет("Отчет.Продажи.Форма.ФормаОтчета",,Отборы,,"ПродажиПоНоменклатуре");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПокупателейЗаголовокНажатие(Элемент)
	
	ОткрытьОтчет("Отчет.ЗадолженностьПокупателей.Форма.ФормаОтчета",,,,"ЗадолженностьПокупателей");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентЗадолженностьПокупателейСтрокаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Отборы = ОтборПоКонтрагенту(Элемент.Имя);
	ОткрытьОтчет("Отчет.ЗадолженностьПокупателей.Форма.ФормаОтчета",,Отборы,,"ЗадолженностьПокупателейПоДоговорам");
	
КонецПроцедуры

&НаКлиенте
Процедура ПросроченнаяЗадолженностьПокупателейЗаголовокНажатие(Элемент)
	
	ОткрытьОтчет("Отчет.ЗадолженностьПокупателейПоСрокамДолга.Форма.ФормаОтчета",,,,"ЗадолженностьПокупателейПоСрокамДолга");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПросроченнаяЗадолженностьПокупателейСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отборы = ОтборПоКонтрагенту(Элемент.Имя);
	// Добавим группировку по договорам
	ГруппировкаОтчета = Новый Массив;
	ГруппировкаОтчета.Добавить(Новый Структура("Поле, Представление, Использование, ТипГруппировки", "Договор", "Договор", Истина, 0));
	
	ОткрытьОтчет("Отчет.ЗадолженностьПокупателейПоСрокамДолга.Форма.ФормаОтчета", ГруппировкаОтчета ,Отборы,,"ЗадолженностьПокупателейПоСрокамДолга");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамЗаголовокНажатие(Элемент)
	
	ОткрытьОтчет("Отчет.ЗадолженностьПоставщикам.Форма.ФормаОтчета",,,,"ЗадолженностьПоставщикам");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентЗадолженностьПоставщикамСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отборы = ОтборПоКонтрагенту(Элемент.Имя);
	
	ОткрытьОтчет("Отчет.ЗадолженностьПоставщикам.Форма.ФормаОтчета",,Отборы,,"ЗадолженностьПоставщикамПоДоговорам");
	
КонецПроцедуры

&НаКлиенте
Процедура ПросроченнаяЗадолженностьПоставщикамйЗаголовокНажатие(Элемент)
	
	ОткрытьОтчет("Отчет.ЗадолженностьПоставщикамПоСрокамДолга.Форма.ФормаОтчета",,,,"ЗадолженностьПоставщикамПоСрокамДолга");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПросроченнаяЗадолженностьПоставщикамСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отборы = ОтборПоКонтрагенту(Элемент.Имя);
	// Добавим группировку по договорам
	ГруппировкаОтчета = Новый Массив;
	ГруппировкаОтчета.Добавить(Новый Структура("Поле, Представление, Использование, ТипГруппировки", "Договор", "Договор", Истина, 0));
	
	ОткрытьОтчет("Отчет.ЗадолженностьПоставщикамПоСрокамДолга.Форма.ФормаОтчета", ГруппировкаОтчета ,Отборы,,"ЗадолженностьПоставщикамПоСрокамДолга");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЗадачиБухгалтера

&НаКлиенте
Процедура ВыполненныеЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Организация));
	КонецЕсли; 
	
	ОткрытьФорму("РегистрСведений.ВыполненныеЗадачиНачалаРаботы.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура КалендарьНаИТС(Команда)
	
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда)
	
	СписокЗадачАктуален = Ложь; // Пользователь явно указал на то, что список задач неактуален
	
	Если ЗапуститьОбновлениеДанныхТекущегоВариантаНаСервере() Тогда
	
		Если Не СписокЗадачАктуален Тогда
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
		ЖдатьЗавершенияФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыМониторРуководителя

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	МониторАктуален = Ложь; // Пользователь явно указал на то, данные монитора неактуальны
	
	ОбновитьДанныеМонитора(Ложь);
	
	Если Не МониторАктуален Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	ЖдатьЗавершенияФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьМонитораРуководителя(Команда)
	
	// Собираем данные формы для печати текущего состояния
	ПараметрыПечатиМонитора = ПодготовитьПарараметрыПечатиМонитораНаСервере();
	
	// Передадим в параметры дату с точность до минуты
	// Дата будет отображаться в заголовке окна табличного документа
	ДатаОбновленияМонитораСтрокой = Формат(ДатаПоследнегоОбновленияМонитора, "ДФ='dd MMMM yyyy ""г."" H:mm'");
	
	ДополнителныеПараметрыПечати = Новый Структура();
	ДополнителныеПараметрыПечати.Вставить("ПечатнаяФормаМонитораПуть", ПараметрыПечатиМонитора.ПечатнаяФормаМонитораПуть);
	ДополнителныеПараметрыПечати.Вставить("ДатаФормированияМонитора",  ДатаОбновленияМонитораСтрокой);
	
	ПараметрыПечати = Новый Структура();
	ПараметрыПечати.Вставить("ЗаголовокФормы", НСтр("ru='Монитор руководителя ';uk='Монітор керівника '") + ДатаОбновленияМонитораСтрокой);
	ПараметрыПечати.Вставить("ДополнительныеПараметры", ДополнителныеПараметрыПечати);
	
	// Отдаем данные обработке печати
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("РегистрСведений.ДанныеМонитораРуководителя", "МониторРуководителя", ПараметрыПечатиМонитора.ОбъектыПечати,
		"МониторРуководителя", ПараметрыПечати);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);

	ОткрытьФорму("ОбщаяФорма.НастройкаМонитораРуководителя" , , , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбщие

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ВариантРабочегоСтола = "ЗадачиБухгалтера" Тогда
		
		// Скрываем страницу монитора для устранения полосы прокрутки формы
		Элементы.СтраницаМониторРуководителя.Видимость = Ложь;
		
		Элементы.СтраницыКомандныеПанели.ТекущаяСтраница = Элементы.СтраницаКоманднаяПанельЗадачНачалаРаботы;

		Если Форма.СписокЗадачНачалаРаботы.Количество() > 0 Тогда
			
			// Показываем обязательные задачи начала работы
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаНачалоРаботы;
		Иначе
			
 			// Все задачи выполнены
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВсеЗадачиВыполнены;
 		КонецЕсли;
		
	ИначеЕсли Форма.ВариантРабочегоСтола = "МониторРуководителя" Тогда
		
		Если Не Форма.МониторАктуален Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОжидание;
		Иначе
			Элементы.СтраницаМониторРуководителя.Видимость = Истина;
			Элементы.СтраницыКомандныеПанели.ТекущаяСтраница = Элементы.СтраницаКоманднаяПанельМонитораРуководителя;
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаМониторРуководителя;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеРабочегоСтолаПриОткрытии()
	
	Если ЗапуститьОбновлениеДанныхТекущегоВариантаНаСервере(Истина) Тогда
	
		ЖдатьЗавершенияФоновогоЗадания();
		
	Иначе
		
		// Попробуем обновить позже
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтолаПриОткрытии", 16, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеРабочегоСтола()
	
	Если ЗапуститьОбновлениеДанныхТекущегоВариантаНаСервере(Истина) Тогда
	
		ЖдатьЗавершенияФоновогоЗадания();
		
	КонецЕсли;
	
	// Интервал следующего обновления рабочего стола рассчитан в ОбновитьТекущуюДатуЗаголовокФормыНаСервере()
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтола", ИнтервалОбновления, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьОбновлениеДанныхТекущегоВариантаНаСервере(ОбновитьИЗаполнитьЗадачиНачалаРаботы = Ложь)
	
	Если МонопольныйРежим() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВариантРабочегоСтола = "ЗадачиБухгалтера" Тогда
		ЗаполнитьСписокЗадачНачалаРаботыНаСервере();
		УправлениеФормой(ЭтаФорма);
		Возврат Ложь;
	Иначе
		ОбновитьДанныеМонитора();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьТекущуюДатуЗаголовокФормыНаСервере()
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	ИнтервалОбновления = (КонецДня(ДатаСеанса) + 1) - ДатаСеанса + 59;
	
	ТекущаяДата = ДатаСеанса;
	
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сегодня: %1';uk='Сьогодні: %1'"),
			Формат(ТекущаяДата, НСтр("ru=""Л=ru_RU; ДФ='d MMMM, dddd'"";uk=""Л=uk_UA; ДФ='d MMMM, dddd'""") ));
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЗадачБухгалтера

&НаСервере
Функция НастройкиОформленияСпискаЗадач()
	
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		Неопределено, -1, НСтр("ru='Просрочено';uk='Прострочено'"), ЦветаСтиля.ВажноеСобытие);
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		0, 0, НСтр("ru='Сегодня';uk='Сьогодні'"), ЦветаСтиля.ВажноеСобытие);
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		1, 1, НСтр("ru='Завтра';uk='Завтра'"), ЦветаСтиля.ПриближающеесяСобытие);
	
	Шаблон = НСтр("ru='Осталось %1';uk='Залишилося %1'");
	
	Для РазностьДат = 2 По 6 Цикл
		СтрокаРазностьДат = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			РазностьДат, НСтр("ru='день,дня,дней';uk='день,дні,днів'"));
		ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
			РазностьДат, РазностьДат, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаРазностьДат));
	КонецЦикла;
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		7, 13, НСтр("ru='Осталась неделя';uk='Залишився тиждень'"));
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		14, 18, НСтр("ru='Осталось 2 недели';uk='Залишилося 2 тижні'"));
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		19, 22, НСтр("ru='Осталось 3 недели';uk='Залишилося 3 тижні'"));
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		23, 34, НСтр("ru='Остался месяц';uk='Залишився місяць'"));
	
	// Используем пробел в качестве представления пустой строки, т.к. пустая строка в условном оформлении игнорируется
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		35, Неопределено, " ");
	
	Возврат НастройкиКомпоновкиДанных;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных, НижняяГраница, ВерхняяГраница, Текст, ЦветТекста = Неопределено)
	
	ПутьКДаннымПоля = "ОсталосьДней";
	
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	
	Если ЦветТекста <> Неопределено Тогда
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	КонецЕсли;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	
	Если НижняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	ИначеЕсли ВерхняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	ИначеЕсли НижняяГраница = ВерхняяГраница Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	Иначе
		
		ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.Использование = Истина;
		ГруппаЭлементовОтбора.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	КонецЕсли;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборПоОрганизации(Знач Организация)
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	Если ЗначениеЗаполнено(Организация) И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение") Тогда
		// Добавляем пустую ссылку для отображения общих задач, но только для головных организаций
		ОтборПоОрганизации = Новый СписокЗначений;
		Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
			ОтборПоОрганизации.Добавить(Организация);
		КонецЕсли;
		ОтборПоОрганизации.Добавить(Справочники.Организации.ПустаяСсылка());
	Иначе
		Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
			ОтборПоОрганизации = Организация;
		Иначе
			ОтборПоОрганизации = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтборПоОрганизации;
	
КонецФункции


&НаКлиенте
Функция НовыеПараметрыКомандЗадачи()
	
	ПараметрыКоманд = Новый Структура;
	ПараметрыКоманд.Вставить("Задача",               Неопределено);
	ПараметрыКоманд.Вставить("ИдентификаторЗадачи",  "");
	ПараметрыКоманд.Вставить("Организация",          Неопределено);
	ПараметрыКоманд.Вставить("Срок",                 '00010101');
	ПараметрыКоманд.Вставить("НачалоВыполнения",     '00010101');
	ПараметрыКоманд.Вставить("Правило",              Неопределено);
	ПараметрыКоманд.Вставить("ИдентификаторПравила", "");
	ПараметрыКоманд.Вставить("ПериодСобытия",        '00010101');
	ПараметрыКоманд.Вставить("Периодичность",        Неопределено); 
	ПараметрыКоманд.Вставить("Наименование",         "");
	ПараметрыКоманд.Вставить("Действие",             Неопределено);
	ПараметрыКоманд.Вставить("ЕстьИнформацияНаИТС",  Ложь);
	ПараметрыКоманд.Вставить("АдресНаИТС",           АдресНаИТС); // Адрес по умолчанию
	
	Возврат ПараметрыКоманд;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокКомандЗадачи(ПараметрыКоманд, Знач ТекущаяДата)
	
	СписокКоманд = Новый СписокЗначений;
	
		СписокКоманд.Добавить("Выполнить", 
			Перечисления.ЗадачиНачалаРаботы.ПредставлениеКомандыВыполнить(ПараметрыКоманд.Правило), ,
			БиблиотекаКартинок.ЗадачаНачалаРаботы);
	
			СписокКоманд.Добавить(
				"ОтметитьЗадачуКакВыполненную", НСтр("ru='Отметить задачу как выполненную';uk='Позначити задачу як виконану'"), , БиблиотекаКартинок.ОтметитьЗадачуКакВыполненную);
	
	Если ПараметрыКоманд.ЕстьИнформацияНаИТС Тогда
		
		АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(ПараметрыКоманд.Срок, ПараметрыКоманд.ИдентификаторЗадачи, ПараметрыКоманд.ИдентификаторПравила);
		Если Не ПустаяСтрока(АдресНаИТС) Тогда
			СписокКоманд.Добавить("ПодробнееНаИТС", НСтр("ru='Узнать подробнее на сайте ИТС';uk='Дізнатися детальніше на сайті ІТС'"), , БиблиотекаКартинок.ПерейтиНаИТС);
			ПараметрыКоманд.АдресНаИТС = АдресНаИТС;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокКоманд;
	
КонецФункции

&НаКлиенте
Процедура СписокЗадачВыполнитьКоманду(Команда, ПараметрыКоманды) Экспорт
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Команда.Значение = "ПодробнееНаИТС" Тогда
		ПерейтиПоНавигационнойСсылке(ПараметрыКоманды.АдресНаИТС);
	ИначеЕсли Команда.Значение = "ОтметитьЗадачуКакВыполненную" Тогда
		ОтметитьЗадачуКакВыполненную(ПараметрыКоманды);
	Иначе
		ВыполнитьДействие(ПараметрыКоманды);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЗадачуКакВыполненную(ПараметрыКоманды)
	
	КлючЗаписи = ПеренестиВАрхив(ПараметрыКоманды);
	
 	Если ТипЗнч(КлючЗаписи) = Тип("РегистрСведенийКлючЗаписи.ВыполненныеЗадачиНачалаРаботы") Тогда
		
		ТипПравила = ТипЗнч(ПараметрыКоманды.Правило);
		
		Если ТипПравила = Тип("ПеречислениеСсылка.ЗадачиНачалаРаботы") Тогда
			
			// Подробно расскажем, что и куда перемещено
			ИдентификаторОписания = "";
			Если ПараметрыКоманды.Правило = ПредопределенноеЗначение("Перечисление.ЗадачиНачалаРаботы.НачальныеОстатки") Тогда
				ИдентификаторОписания = "ВыполненаЗадачаНачальныеОстатки";
			ИначеЕсли ПараметрыКоманды.Правило = ПредопределенноеЗначение("Перечисление.ЗадачиНачалаРаботы.ПараметрыУчета") Тогда
				ИдентификаторОписания = "ВыполненаЗадачаПараметрыУчета";
			ИначеЕсли ПараметрыКоманды.Правило = ПредопределенноеЗначение("Перечисление.ЗадачиНачалаРаботы.УчетнаяПолитика") Тогда
				ИдентификаторОписания = "ВыполненаЗадачаУчетнаяПолитика";
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИдентификаторОписания) Тогда
				ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях(
					ИдентификаторОписания,
					ЭтаФорма,
					НастройкиПредупрежденийОбИзменениях);
			КонецЕсли;
			
		КонецЕсли;
		
		ОповеститьОбИзменении(КлючЗаписи);
		
	КонецЕсли;
	
 	Если СписокЗадачНачалаРаботы.Количество() = 0 Тогда
 		УправлениеФормой(ЭтаФорма);
 	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПеренестиВАрхив(Знач ПараметрыКоманды)
	
	НачалоРаботы = ТипЗнч(ПараметрыКоманды.Правило) = Тип("ПеречислениеСсылка.ЗадачиНачалаРаботы");
	
	Если НачалоРаботы Тогда
		
		КлючЗаписи = РегистрыСведений.ВыполненныеЗадачиНачалаРаботы.Добавить(
			ПараметрыКоманды.Организация, 
			ПараметрыКоманды.Правило);
			
		ЗадачаВСписке = СписокЗадачНачалаРаботы.НайтиСтроки(Новый Структура("Организация,Правило",ПараметрыКоманды.Организация,ПараметрыКоманды.Правило));	
		Если ЗадачаВСписке.Количество()>0 Тогда
		     СписокЗадачНачалаРаботы.Удалить(ЗадачаВСписке[0]);
		КонецЕсли; 
	Иначе
	
		
	КонецЕсли;
	
	Возврат КлючЗаписи; // Для оповещения форм и пользователя
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействие(ПараметрыКоманды)
	
	ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
	
	ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокЗадачНачалаРаботыНаСервере()
	
	ОбязательныеЗадачиНачалаРаботы = РегистрыСведений.ВыполненныеЗадачиНачалаРаботы.ЗадачиПоОрганизации(Организация);
	СписокЗадачНачалаРаботы.Очистить();
	Для Каждого Задача Из ОбязательныеЗадачиНачалаРаботы Цикл
		НоваяСтрока = СписокЗадачНачалаРаботы.Добавить();
		НоваяСтрока.Правило = Задача.Задача;
		НоваяСтрока.Организация = Задача.Организация;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖдатьЗавершенияФоновогоЗадания()
	
	Если ФоновоеЗаданиеМонитораЗапущено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()
	
	
	Если ФоновоеЗаданиеМонитораЗапущено Тогда
		
		Если ЗаданиеВыполнено(ФоновоеЗаданиеМонитораИдентификатор) Тогда
			ФоновоеЗаданиеМонитораЗапущено = Ложь;
			МониторАктуален = Истина;
			ОбновитьМониторНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФоновоеЗаданиеМонитораЗапущено Тогда
		// Продолжим ожидание
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьЗавершениеДлительнойОперации",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииМониторРуководителя

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, Параметры) Экспорт
	
	// Если настройки не были изменены - ничего не делаем
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьМониторНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМониторНаСервере()
	
	Если НачалоДня(ТекущаяДата) <> НачалоДня(ТекущаяДатаСеанса()) Или ПустаяСтрока(Заголовок) Тогда
		ОбновитьТекущуюДатуЗаголовокФормыНаСервере();
	КонецЕсли;
	
	СписокРазделов = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "СписокРазделовМонитораРуководителя");
	Если СписокРазделов = Неопределено Тогда
		СписокРазделов = МониторРуководителя.СтандартныйСписокРазделовМонитораРуководителя();
	КонецЕсли;
	
	ВариантОкругленияИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "ВариантОкругленияМонитораРуководителя");
	
	Если ВариантОкругленияИзНастроек = Неопределено Тогда
		// По умолчанию до целых гривен
		ВариантОкругления = 1;
	Иначе
		// Нельзя допустить 0
		ВариантОкругления = Макс(ВариантОкругленияИзНастроек, 1);
	КонецЕсли;
	
	ОбновитьЗаголовкиПериодов(ЭтотОбъект);
	
	ДанныеРазделовМонитора = МониторРуководителя.ПолучитьДанныеРазделовМонитора(Организация, СписокРазделов.ВыгрузитьЗначения(), ВариантОкругления);
	
	Если ДанныеРазделовМонитора <> Неопределено Тогда
		
		Для Каждого РазделМонитора Из СписокРазделов Цикл
			ИмяРазделаМонитора = ОбщегоНазначения.ИмяЗначенияПеречисления(РазделМонитора.Значение);
			Если РазделМонитора.Пометка Тогда
				ЗаполнитьРазделМонитора(РазделМонитора.Значение, ДанныеРазделовМонитора[СписокРазделов.Индекс(РазделМонитора)]);
			КонецЕсли;
			Элементы[ИмяРазделаМонитора].Видимость = РазделМонитора.Пометка;
			Элементы.Переместить(Элементы[ИмяРазделаМонитора], Элементы["СтрокаМонитора_" + СписокРазделов.Индекс(РазделМонитора)]);
		КонецЦикла;
		
	КонецЕсли;
	
	СтандартныйСписокРазделов = МониторРуководителя.СтандартныйСписокРазделовМонитораРуководителя();
	Для Каждого РазделМонитора Из СтандартныйСписокРазделов Цикл
		Если СписокРазделов.НайтиПоЗначению(РазделМонитора.Значение) = Неопределено Тогда
			ИмяРазделаМонитора = ОбщегоНазначения.ИмяЗначенияПеречисления(РазделМонитора.Значение);
			Элементы[ИмяРазделаМонитора].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДатаПоследнегоОбновленияМонитора = МониторРуководителя.ПолучитьДатуПоследнегоОбновленияМонитора(Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделМонитора(РазделМонитора, ДанныеРаздела)
	
	Если РазделМонитора = Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств Тогда
		ЗаполнитьОстаткиДенежныхСредств(ДанныеРаздела);
	ИначеЕсли РазделМонитора = Перечисления.РазделыМонитораРуководителя.ДвижениеДенежныхСредств Тогда
		ЗаполнитьДвижениеДенежныхСредств(ДанныеРаздела);
	ИначеЕсли РазделМонитора = Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам Тогда
		ЗаполнитьПродажиПоКонтрагентам(ДанныеРаздела);
	ИначеЕсли РазделМонитора = Перечисления.РазделыМонитораРуководителя.ПродажиПоНоменклатурнымГруппам Тогда
		ЗаполнитьПродажиПоНоменклатурнымГруппам(ДанныеРаздела);
	ИначеЕсли РазделМонитора = Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей Тогда
		ЗаполнитьЗадолженностьПокупателей(ДанныеРаздела);
	ИначеЕсли РазделМонитора = Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей Тогда
		ЗаполнитьПросроченнуюЗадолженностьПокупателей(ДанныеРаздела);
	ИначеЕсли РазделМонитора = Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам Тогда
		ЗаполнитьЗадолженностьПоставщикам(ДанныеРаздела);
	ИначеЕсли РазделМонитора = Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам Тогда
		ЗаполнитьПросроченнуюЗадолженностьПоставщикам(ДанныеРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеМонитора(СУчетомАктуальности = Истина)
	
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ФоновоеЗаданиеМонитораЗапущено И ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ФоновоеЗаданиеМонитораИдентификатор) Тогда
		// Надо ждать
		Возврат;
	КонецЕсли;
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыФункции = Новый Структура();
	
	ПараметрыФункции.Вставить("Организация", Организация);
	
	Если СУчетомАктуальности Тогда
		ИмяПроцедуры = "ОбновитьДанныеМонитораВФоне";
	Иначе
		ИмяПроцедуры = "ПерезаписатьДанныеМонитораВФоне";
	КонецЕсли;	
	
	НаименованиеФоновогоЗадания = НСтр("ru='Обновление данных монитора руководителя';uk='Оновлення даних монітора керівника'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
	УникальныйИдентификатор,
	"МониторРуководителя." + ИмяПроцедуры, 
	ПараметрыФункции, 
	НаименованиеФоновогоЗадания);
	
	ФоновоеЗаданиеМонитораАдресРезультата = Результат.АдресХранилища;
	ФоновоеЗаданиеМонитораИдентификатор   = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОбновитьМониторНаСервере();
		МониторАктуален = Истина;
		УправлениеФормой(ЭтаФорма);
	Иначе
		// Начнем ждать
		ФоновоеЗаданиеМонитораЗапущено = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентенаСервереБезКонтекста
Процедура ОбновитьЗаголовкиПериодов(Форма)
	
	// Обновим заголовки периодов
	Форма.ПериодДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на %1';uk='на %1'"), Формат(Форма.ТекущаяДата, "ДФ='д ММММ'"));
	
	НачалоПериода = ДобавитьМесяц(Форма.ТекущаяДата,-1) + 60*60*24; 
	КонецПериода 		= Форма.ТекущаяДата;
	
	Если Месяц(НачалоПериода) = Месяц(КонецПериода) Тогда
		ФорматНачалаПериода =  "ДФ=д";
	Иначе
		ФорматНачалаПериода =  "ДФ='д ММММ'";
	КонецЕсли;
	
	Форма.ПериодМесяц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='с %1 по %2';uk='з %1 по %2'"), Формат(НачалоПериода, ФорматНачалаПериода), Формат(КонецПериода, "ДФ='д ММММ'"));	
	
	Форма.Элементы.ДекорацияЕдиницаИзмерения.Заголовок = ?(Форма.ВариантОкругления = 1, НСтр("ru='Грн';uk='Грн'"), НСтр("ru='Тыс. грн';uk='Тис. грн'"));
	
	// Запоминаем начало периода
	Форма.НачалоПериодаМесяцНазад = НачалоПериода;
	
КонецПроцедуры

&НаКлиентеНаСерверебезКонтекста
Функция ПользовательскиеНастройкиДляРасшифровки(Форма)
	
	// Инициализация пользовательских настроек
	// Добавим в настройки все параметры которые могут использоваться в отчетах руководителю
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",	Истина);
	ДополнительныеСвойства.Вставить("Организация", 		Форма.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", 	Форма.НачалоПериодаМесяцНазад);
	ДополнительныеСвойства.Вставить("КонецПериода", 	Форма.ТекущаяДата);
	ДополнительныеСвойства.Вставить("Период", 			Форма.ТекущаяДата);
	
	Если Форма.ВариантОкругления = 1000 Тогда
		
		// Установим формат цифр для гривневых сумм
		УсловноеОформление = ПользовательскиеНастройки.Элементы.Добавить(Тип("УсловноеОформлениеКомпоновкиДанных"));
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru='Суммы в тыс.';uk='Суми в тис.'");
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЭлементУсловногоОформления.Оформление,"Формат", "ЧДЦ=; ЧС=3");
		ЭлементУсловногоОформления.Использование = Истина;
		
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаКлиентеНаСерверебезКонтекста
Функция СтандартныеГруппировкиДенежныхСредств()
	
	ГруппировкаОтчета = Новый Массив;
	ГруппировкаОтчета.Добавить(Новый Структура("Поле, Представление, Использование, ТипГруппировки", "ВидДенежныхСредств", "Вид денежных средств", Истина, 0));
	ГруппировкаОтчета.Добавить(Новый Структура("Поле, Представление, Использование, ТипГруппировки", "Размещение", "Размещение", Истина, 0));
	Возврат ГруппировкаОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчет(Отчет, ГруппировкаОтчета = Неопределено, Отборы = Неопределено, Показатели  = Неопределено, КлючВарианта = Неопределено)

	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(ЭтотОбъект);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ГруппировкаОтчета <> Неопределено И ТипЗнч(ГруппировкаОтчета) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("Группировка", ГруппировкаОтчета);
	КонецЕсли;
	
	Если Отборы <> Неопределено И ТипЗнч(Отборы) = Тип("Массив") Тогда
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
		КонецЦикла;
	КонецЕсли;
	
	Если Показатели <> Неопределено И ТипЗнч(Показатели) = Тип("Массив") Тогда
		
		Для Каждого Показатель Из Показатели Цикл
			ДополнительныеСвойства.Вставить(Показатель, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Если КлючВарианта <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура("РежимРасшифровки, ВидРасшифровки, ПользовательскиеНастройки", Истина, 2, ПользовательскиеНастройки);
	
	ОткрытьФорму(Отчет, ПараметрыОтчета, ЭтотОбъект, Истина);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоПутиЭлементаФормы(Путь)
	
	Данные = Неопределено;
	ПозицияОткрывающейСкобки = Найти(Путь, "[");
	ПозицияЗакрывающейСкобки = Найти(Путь, "]");
	
	ИмяТаблицы 	= Лев(Путь, ПозицияОткрывающейСкобки - 1);
	ИндексСтроки = Число(Сред(Путь, ПозицияОткрывающейСкобки + 1, ПозицияЗакрывающейСкобки - ПозицияОткрывающейСкобки - 1));
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		
		Таблица = ЭтотОбъект[ИмяТаблицы];
		
		Если Таблица.Количество() > ИндексСтроки  Тогда
			Данные = Таблица[ИндексСтроки];
		Конецесли;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#Область ОстаткиДенежныхСредств

&НаСервере
Процедура ЗаполнитьОстаткиДенежныхСредств(ДанныеМонитора)
	
	ТаблицаДС = ДанныеМонитора.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ОстаткиДенежныхСредства.Очистить();
	ИтогоДенежныхСредств = 0;
	
	Если ТаблицаДС <> Неопределено Тогда
		
		// Подготовим переменные которые будем использовать при заполнении таблицы остатков
		ПредставлениеДляВалютныхСчетов 	= НСтр("ru='На счетах в ';uk='На рахунках у '");
		ПредставлениеДляГривневыхСчетов 	= НСтр("ru='На гривневых счетах';uk='На гривневих рахунках'");
		СтрокаИтого 					= НСтр("ru='Итого';uk='Разом'");
		СтрокаВКассе 					= НСтр("ru='В кассе';uk='У касі'");
		ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		// Заполняем таблицу остатков ДС
		Для Каждого Остаток Из ТаблицаДС Цикл
			Валюта = Остаток.ДанныеРасшифровки;
			ОстатокПредставление = Остаток.Представление;
			// Если это итоговая строка то запишем итог
			Если Не ЗначениеЗаполнено(Валюта) И ОстатокПредставление = СтрокаИтого Тогда
				ИтогоДенежныхСредств = Остаток.Сумма;
			Иначе
				СтрокаДС = ОстаткиДенежныхСредства.Добавить();
				Если Валюта = ВалютаРегламентированногоУчета Тогда
					Если ОстатокПредставление <> СтрокаВКассе Тогда
						ОстатокПредставление 	= ПредставлениеДляГривневыхСчетов;
					КонецЕсли;
				Иначе
					ОстатокПредставление 	= ПредставлениеДляВалютныхСчетов + Остаток.Представление;
					СтрокаДС.ПредставлениеВалютнойСуммы = "" + Остаток.СуммаВВалюте + " " + Остаток.Представление;
				КонецЕсли;
				
				СтрокаДС.Представление 	= ОстатокПредставление;
				СтрокаДС.Валюта 		= Валюта;
				СтрокаДС.Сумма			= Остаток.Сумма;
				СтрокаДС.СуммаВВалюте	= Остаток.СуммаВВалюте;
			КонецЕсли;	
			
		КонецЦикла;	
	КонецЕсли;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	МаксимальныйИндексТаблицы = ОстаткиДенежныхСредства.Количество() - 1;
	// Установим видимость заранее добавленных строк (их 4)
	Для Индекс = 0 По 3 Цикл
		
		Если Индекс <= МаксимальныйИндексТаблицы Тогда
			
			ВидимостьСтроки = Истина;
			
			// Если это видимая строки то нужно дополнительно установить видимость валютной суммы
			// Для гривень валютная сумма не нужна
			Если ОстаткиДенежныхСредства[Индекс].Валюта = ВалютаРегламентированногоУчета Тогда
				ВидимостьВалютнойСуммы = Ложь;
			Иначе
				ВидимостьВалютнойСуммы = Истина;
			Конецесли;
			
		Иначе
			ВидимостьСтроки = Ложь;
			ВидимостьВалютнойСуммы = Ложь;
		Конецесли;
		
		Элементы["ОстаткиДенежныхСредствСтрока" + (Индекс + 1)].Видимость 	= ВидимостьСтроки;
		Элементы["ВалютнаяСуммаСтрока" + (Индекс + 1)].Видимость 			= ВидимостьВалютнойСуммы;
		
	КонецЦикла;	
	
	// Если размер таблицы превышает количество заранее подготовленных элементов
	// для ее отображения, то добавим эти элеметы программно
	// Заранее подготовленных элементов 4, для большинства случаев должно хватить
	// 1 В кассе
	// 2 На гривневых счетах
	// 3 На счетах в EUR
	// 4 На счетах в USD
	
	// Если на форме уже есть программно добавленные группы и элементы то их нужно сначала удалить
	// Возможно они больше не нужны
	ЕстьГруппыДляУдаления = Истина;
	ЕстьЭлементыДляУдаления = Истина;
	СчетчикЭлементов = 5;
	Пока ЕстьГруппыДляУдаления ИЛИ ЕстьЭлементыДляУдаления Цикл
		
		// Ищем строки
		УдаляемаяГруппа = Элементы.Найти("ОстаткиДенежныхСредствСтрока" + СчетчикЭлементов);
		
		Если УдаляемаяГруппа <> Неопределено Тогда
			// Удаляем группу
			Элементы.Удалить(УдаляемаяГруппа);
		Иначе
			// Если группа строки не найдена заканчиваем поиск
			ЕстьГруппыДляУдаления = Ложь;
		КонецЕсли;	
		
		// Ищем элементы
		УдаляемыйЭлемент = Элементы.Найти("ВалютнаяСуммаСтрока" + СчетчикЭлементов);
		
		Если УдаляемыйЭлемент <> Неопределено Тогда
			// Удаляем элемент
			Элементы.Удалить(УдаляемыйЭлемент);
		Иначе
			// Если элемент не найден заканчиваем поиск
			ЕстьЭлементыДляУдаления = Ложь;
		КонецЕсли;	
		
		СчетчикЭлементов = СчетчикЭлементов + 1;
		
	КонецЦикла;	
	
	// Подготовим переменные которые будем использовать
	ГруппаОстаткиДенежныхСредств = Элементы.ОстаткиДенежныхСредств;
	ШрифтТекстаМонитора = ШрифтыСтиля.ШрифтТекстаМонитораРуководителя;
	ЦветТекстаВалюты 	= ЦветаСтиля.ЦветВторостепенногоТекстаМонитораРуководителя;
	Для СчетчикСтрок = 4 по ОстаткиДенежныхСредства.Количество() - 1 Цикл 
		
		// Нумерация групп на 1 больше чем индекс строки таблицы ОстаткиДенежныхСредства
		СчетчикЭлементов = СчетчикСтрок + 1;
		
		// Добавляем группу строки и заполеняем ее свойства
		ОстаткиДенежныхСредствСтрока = Элементы.Добавить("ОстаткиДенежныхСредствСтрока" + СчетчикЭлементов, Тип("ГруппаФормы"), ГруппаОстаткиДенежныхСредств);  
		ОстаткиДенежныхСредствСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ОстаткиДенежныхСредствСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ОстаткиДенежныхСредствСтрока.Отображение = ОтображениеОбычнойГруппы.Нет;
		ОстаткиДенежныхСредствСтрока.ОтображатьЗаголовок = Ложь;
		
		// Добавляем элементы строки
		// Представление
		ПредставлениеОстаткиДенежныхСредствСтрока 				= Элементы.Добавить("ПредставлениеОстаткиДенежныхСредствСтрока" + СчетчикЭлементов, Тип("ПолеФормы"), ОстаткиДенежныхСредствСтрока);  
		ПредставлениеОстаткиДенежныхСредствСтрока.Вид 			= ВидПоляФормы.ПолеНадписи;
		ПредставлениеОстаткиДенежныхСредствСтрока.Шрифт 		= ШрифтТекстаМонитора;
		ПредставлениеОстаткиДенежныхСредствСтрока.ПутьКДанным 	= "ОстаткиДенежныхСредства[" + СчетчикСтрок + "].Представление";
		ПредставлениеОстаткиДенежныхСредствСтрока.РастягиватьПоГоризонтали 	= Истина;
		ПредставлениеОстаткиДенежныхСредствСтрока.Гиперссылка				= Истина;
		ПредставлениеОстаткиДенежныхСредствСтрока.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;					
		ПредставлениеОстаткиДенежныхСредствСтрока.УстановитьДействие("Нажатие","ОстаткиДенежныхСредствНажатие");
		
		// Сумма
		ПредставлениеОстаткиДенежныхСредствСтрока 				= Элементы.Добавить("СуммаОстаткиДенежныхСредствСтрока" + СчетчикСтрок + 1, Тип("ПолеФормы"), ОстаткиДенежныхСредствСтрока);  
		ПредставлениеОстаткиДенежныхСредствСтрока.Вид 			= ВидПоляФормы.ПолеНадписи;
		ПредставлениеОстаткиДенежныхСредствСтрока.Шрифт 		= ШрифтТекстаМонитора;
		ПредставлениеОстаткиДенежныхСредствСтрока.ПутьКДанным 	= "ОстаткиДенежныхСредства[" + СчетчикСтрок + "].Сумма";
		ПредставлениеОстаткиДенежныхСредствСтрока.Ширина 		= 11;
		ПредставлениеОстаткиДенежныхСредствСтрока.РастягиватьПоГоризонтали 	= Ложь;
		ПредставлениеОстаткиДенежныхСредствСтрока.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПредставлениеОстаткиДенежныхСредствСтрока.ГоризонтальноеПоложение 	= ГоризонтальноеПоложениеЭлемента.Право;
		
		// Добавляем валютную сумму
		ВалютнаяСуммаСтрока 							= Элементы.Добавить("ВалютнаяСуммаСтрока" + СчетчикЭлементов, Тип("ПолеФормы"), ГруппаОстаткиДенежныхСредств);  
		ВалютнаяСуммаСтрока.Вид 						= ВидПоляФормы.ПолеНадписи;
		ВалютнаяСуммаСтрока.ПутьКДанным 				= "ОстаткиДенежныхСредства[" + СчетчикСтрок + "].ПредставлениеВалютнойСуммы";
		ВалютнаяСуммаСтрока.РастягиватьПоГоризонтали 	= Истина;
		ВалютнаяСуммаСтрока.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;					
		ВалютнаяСуммаСтрока.ГоризонтальноеПоложение 	= ГоризонтальноеПоложениеЭлемента.Право;
		ВалютнаяСуммаСтрока.ЦветТекста 					= ЦветТекстаВалюты;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция ОтборПоСтрокеДенежныхСредств(ИмяЭлемента)

	ДанныеСтроки = Неопределено;
	
	Элемент = Элементы[ИмяЭлемента];
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		ДанныеСтроки = ПолучитьДанныеПоПутиЭлементаФормы(Элемент.ПутьКДанным);
	КонецЕсли;
	
	Отборы = Новый Массив;
	
	Если ДанныеСтроки <> Неопределено Тогда
		// Добавляем отбор по виду денежных средств
		// Варианта всего 2
		// - В кассе
		// - На счетах
		Если ДанныеСтроки.Представление = "В кассе" Тогда
			Отборы.Добавить(Новый Структура("Поле, Значение, ВидСравнения","ВидДенежныхСредств", "ДеньгиВКассе", ВидСравненияКомпоновкиДанных.Равно));
		Иначе
			Отборы.Добавить(Новый Структура("Поле, Значение, ВидСравнения","ВидДенежныхСредств", "ДеньгиНаРасчетныхСчетах", ВидСравненияКомпоновкиДанных.Равно));
		КонецЕсли;
		// Если данные не в гривнах то нужно установить отбор по валюте
		Если ДанныеСтроки.Валюта <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			Отборы.Добавить(Новый Структура("Поле, Значение, ВидСравнения","Валюта", ДанныеСтроки.Валюта, ВидСравненияКомпоновкиДанных.Равно));
		КонецЕсли;
	// Не удалось определить данные строки, просто откроем отчет, 
	// подотчет в мониторе не показывается поэтому убираем его и из расшифровки	
	Иначе
		Отборы.Добавить(Новый Структура("Поле, Значение, ВидСравнения","ВидДенежныхСредств", "ДеньгиУПодотчетныхЛиц", ВидСравненияКомпоновкиДанных.НеРавно));
	КонецЕсли;
	
	Возврат Отборы;
	
КонецФункции

#КонецОбласти

#Область ДвижениеДенежныхСредств

&НаСервере
Процедура ЗаполнитьДвижениеДенежныхСредств(ДанныеМонитора)
	
	ДвижениеДС = ДанныеМонитора.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ПоступлениеДенежныхСредствСумма = 0;
	РасходДенежныхСредствСумма = 0;
	Если ДвижениеДС <> Неопределено Тогда
		
		Для Каждого Движение Из ДвижениеДС Цикл
			
			Если Движение.Представление = "Поступление" Тогда
				ПоступлениеДенежныхСредствСумма = ПоступлениеДенежныхСредствСумма + Движение.Сумма;
			ИначеЕсли Движение.Представление = "Расход" Тогда
				РасходДенежныхСредствСумма = РасходДенежныхСредствСумма + Движение.Сумма;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПродажиПоКонтрагентам

&НаСервере
Процедура ЗаполнитьПродажиПоКонтрагентам(ДанныеМонитора)
	
	Продажи = ДанныеМонитора.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ПродажиПоКонтрагентам.Очистить();
	ИтогоПродажиПоКонтрагентам = 0;
	
	Если Продажи <> Неопределено Тогда
		
		СтрокаИтого = НСтр("ru='Итого';uk='Разом'");
		Счетчик = 0;
		// Заполняем таблицу продаж
		Для Каждого СтрокаПродаж Из Продажи Цикл
			
			// Если это итоговая строка то запишем итог
			Если НЕ ЗначениеЗаполнено(СтрокаПродаж.ДанныеРасшифровки) И СтрокаПродаж.Представление = СтрокаИтого Тогда
				ИтогоПродажиПоКонтрагентам = СтрокаПродаж.Сумма;
			Иначе
				СтрокаПродажиПоКонтрагентам	= ПродажиПоКонтрагентам.Добавить();
				
				СтрокаПродажиПоКонтрагентам.Контрагент 	= СтрокаПродаж.ДанныеРасшифровки;
				СтрокаПродажиПоКонтрагентам.Сумма 		= СтрокаПродаж.Сумма;
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
			// нас интересуют 3 крупнейших
			Если Счетчик >= 3 Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	МаксимальныйИндексТаблицы = ПродажиПоКонтрагентам.Количество() - 1;
	// Установим видимость заранее добавленных строк (их 3)
	Для Индекс = 0 По 2 Цикл
		
		Если Индекс <= МаксимальныйИндексТаблицы Тогда
			ВидимостьСтроки = Истина;
		Иначе
			ВидимостьСтроки = Ложь;
		Конецесли;
		
		Элементы["ПродажиПоКонтрагентамСтрока" + (Индекс + 1)].Видимость 	= ВидимостьСтроки;
		
	КонецЦикла;	
	
	Если МаксимальныйИндексТаблицы >= 1 Тогда
		// Покажем строку В том числе
		Элементы.ПродажиПоКонтрагентамВтомЧисле.Видимость = Истина;
	Иначе
		// Скроем строку В том числе	
		Элементы.ПродажиПоКонтрагентамВтомЧисле.Видимость = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ОтборПоСтрокеПродажиПоКонтрагентам(ИмяЭлемента)

	ДанныеСтроки = Неопределено;
	
	Элемент = Элементы[ИмяЭлемента];
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		ДанныеСтроки = ПолучитьДанныеПоПутиЭлементаФормы(Элемент.ПутьКДанным);
	КонецЕсли;
	
	Отборы = Новый Массив;
	
	Если ДанныеСтроки <> Неопределено Тогда
		Отборы.Добавить(Новый Структура("Поле, Значение, ВидСравнения","Контрагент", ДанныеСтроки.Контрагент, ВидСравненияКомпоновкиДанных.Равно));
	КонецЕсли;
	
	Возврат Отборы;
	
КонецФункции

#КонецОбласти

#Область ПродажиПоНоменклатурнымГруппам

&НаСервере
Процедура ЗаполнитьПродажиПоНоменклатурнымГруппам(ДанныеМонитора)
	
	Продажи = ДанныеМонитора.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ПродажиПоНоменклатурнымГруппам.Очистить();
	ИтогоПродажиПоНоменклатурнымГруппам = 0;
	
	Если Продажи <> Неопределено Тогда
		
		СтрокаИтого = НСтр("ru='Итого';uk='Разом'");
		Счетчик = 0;
		// Заполняем таблицу продаж
		Для Каждого СтрокаПродаж Из Продажи Цикл
			
			// Если это итоговая строка то запишем итог
			Если НЕ ЗначениеЗаполнено(СтрокаПродаж.ДанныеРасшифровки) И СтрокаПродаж.Представление = СтрокаИтого Тогда
				ИтогоПродажиПоНоменклатурнымГруппам = СтрокаПродаж.Сумма;
			Иначе
				СтрокаПродажиПоНомГруппам	= ПродажиПоНоменклатурнымГруппам.Добавить();
				
				СтрокаПродажиПоНомГруппам.НоменклатурнаяГруппа 		= СтрокаПродаж.ДанныеРасшифровки;
				СтрокаПродажиПоНомГруппам.Сумма 					= СтрокаПродаж.Сумма;
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
			// нас интересуют 3 крупнейших
			Если Счетчик >= 3 Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	МаксимальныйИндексТаблицы = ПродажиПоНоменклатурнымГруппам.Количество() - 1;
	// Установим видимость заранее добавленных строк (их 3)
	Для Индекс = 0 По 2 Цикл
		
		Если Индекс <= МаксимальныйИндексТаблицы Тогда
			ВидимостьСтроки = Истина;
		Иначе
			ВидимостьСтроки = Ложь;
		Конецесли;
		
		Элементы["ПродажиПоНоменклатурнымГруппамСтрока" + (Индекс + 1)].Видимость 	= ВидимостьСтроки;
		
	КонецЦикла;	
	
	Если МаксимальныйИндексТаблицы >= 1 Тогда
		// Покажем строку В том числе
		Элементы.ПродажиПоНоменклатурнымГруппамВтомЧисле.Видимость = Истина;
	Иначе
		// Скроем строку В том числе	
		Элементы.ПродажиПоНоменклатурнымГруппамВтомЧисле.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтборПоСтрокеПродажиПоНоменклатурнымГруппам(ИмяЭлемента)

	ДанныеСтроки = Неопределено;
	
	Элемент = Элементы[ИмяЭлемента];
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		ДанныеСтроки = ПолучитьДанныеПоПутиЭлементаФормы(Элемент.ПутьКДанным);
	КонецЕсли;
	
	Отборы = Новый Массив;
	
	Если ДанныеСтроки <> Неопределено Тогда
		Отборы.Добавить(Новый Структура("Поле, Значение, ВидСравнения","НоменклатурнаяГруппа", ДанныеСтроки.НоменклатурнаяГруппа, ВидСравненияКомпоновкиДанных.Равно));
	КонецЕсли;
	
	Возврат Отборы;
	
КонецФункции

#КонецОбласти

#Область ЗадолженностьПокупателей

&НаСервере
Процедура ЗаполнитьЗадолженностьПокупателей(ДанныеМонитора)
	
	ТаблицаЗадолжености = ДанныеМонитора.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ЗадолженостьПокупателей.Очистить();
	ИтогоЗадолженностьПокупателей = 0;
	
	Если ТаблицаЗадолжености <> Неопределено Тогда
		
		СтрокаИтого = НСтр("ru='Итого';uk='Разом'");
		Счетчик = 0;
		// Заполняем таблицу продаж
		Для Каждого СтрокаЗадолженности Из ТаблицаЗадолжености Цикл
			
			// Если это итоговая строка то запишем итог
			Если НЕ ЗначениеЗаполнено(СтрокаЗадолженности.ДанныеРасшифровки) И СтрокаЗадолженности.Представление = СтрокаИтого Тогда
				ИтогоЗадолженностьПокупателей = СтрокаЗадолженности.Сумма;
			Иначе
				СтрокаЗадолженностьПокупателей	= ЗадолженостьПокупателей.Добавить();
				
				СтрокаЗадолженностьПокупателей.Контрагент 	= СтрокаЗадолженности.ДанныеРасшифровки;
				СтрокаЗадолженностьПокупателей.Сумма 		= СтрокаЗадолженности.Сумма;
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
			// нас интересуют 3 крупнейших
			Если Счетчик >= 3 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	МаксимальныйИндексТаблицы = ЗадолженостьПокупателей.Количество() - 1;
	// Установим видимость заранее добавленных строк (их 3)
	Для Индекс = 0 По 2 Цикл
		
		Если Индекс <= МаксимальныйИндексТаблицы Тогда
			ВидимостьСтроки = Истина;
		Иначе
			ВидимостьСтроки = Ложь;
		Конецесли;
		
		Элементы["ЗадолженностьПокупателейСтрока" + (Индекс + 1)].Видимость 	= ВидимостьСтроки;
		
	КонецЦикла;	
	
	Если МаксимальныйИндексТаблицы >= 1 Тогда
		// Покажем строку В том числе
		Элементы.ЗадолженностьПокупателейВтомЧисле.Видимость = Истина;
	Иначе
		// Скроем строку В том числе	
		Элементы.ЗадолженностьПокупателейВтомЧисле.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтборПоКонтрагенту(ИмяЭлемента)

	ДанныеСтроки = Неопределено;
	
	Элемент = Элементы[ИмяЭлемента];
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		ДанныеСтроки = ПолучитьДанныеПоПутиЭлементаФормы(Элемент.ПутьКДанным);
	КонецЕсли;
	
	Отборы = Новый Массив;
	
	Если ДанныеСтроки <> Неопределено Тогда
		Отборы.Добавить(Новый Структура("Поле, Значение, ВидСравнения","Контрагент", ДанныеСтроки.Контрагент, ВидСравненияКомпоновкиДанных.Равно));
	КонецЕсли;
	
	Возврат Отборы;
	
КонецФункции

#КонецОбласти

#Область ПросроченнаяЗадолженностьПокупателей

&НаСервере
Процедура ЗаполнитьПросроченнуюЗадолженностьПокупателей(ДанныеМонитора)
	
	ТаблицаЗадолжености = ДанныеМонитора.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ПросроченнаяЗадолженостьПокупателей.Очистить();
	ИтогоПросроченнаяЗадолженностьПокупателей = 0;
	
	Если ТаблицаЗадолжености <> Неопределено Тогда
		
		СтрокаИтого = НСтр("ru='Итого';uk='Разом'");
		Счетчик = 0;
		// Заполняем таблицу продаж
		Для Каждого СтрокаЗадолженности Из ТаблицаЗадолжености Цикл
			
			// Если это итоговая строка то запишем итог
			Если НЕ ЗначениеЗаполнено(СтрокаЗадолженности.ДанныеРасшифровки) И СтрокаЗадолженности.Представление = СтрокаИтого Тогда
				ИтогоПросроченнаяЗадолженностьПокупателей = СтрокаЗадолженности.Сумма;
			Иначе
				СтрокаЗадолженостьПокупателей	= ПросроченнаяЗадолженостьПокупателей.Добавить();
				
				СтрокаЗадолженостьПокупателей.Контрагент 	= СтрокаЗадолженности.ДанныеРасшифровки;
				СтрокаЗадолженостьПокупателей.Сумма 		= СтрокаЗадолженности.Сумма;
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
			// нас интересуют 3 крупнейших
			Если Счетчик >= 3 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	МаксимальныйИндексТаблицы = ПросроченнаяЗадолженостьПокупателей.Количество() - 1;
	// Установим видимость заранее добавленных строк (их 3)
	Для Индекс = 0 По 2 Цикл
		
		Если Индекс <= МаксимальныйИндексТаблицы Тогда
			ВидимостьСтроки = Истина;
		Иначе
			ВидимостьСтроки = Ложь;
		Конецесли;
		
		Элементы["ПросроченнаяЗадолженностьПокупателейСтрока" + (Индекс + 1)].Видимость 	= ВидимостьСтроки;
		
	КонецЦикла;	
	
	Если МаксимальныйИндексТаблицы >= 1 Тогда
		// Покажем строку В том числе
		Элементы.ПросроченнаяЗадолженностьПокупателейВтомЧисле.Видимость = Истина;
	Иначе
		// Скроем строку В том числе	
		Элементы.ПросроченнаяЗадолженностьПокупателейВтомЧисле.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗадолженностьПоставщикам

&НаСервере
Процедура ЗаполнитьЗадолженностьПоставщикам(ДанныеМонитора)
	
	ТаблицаЗадолжености = ДанныеМонитора.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ЗадолженностьПоставщикам.Очистить();
	ИтогоЗадолженностьПоставщикам = 0;
	
	Если ТаблицаЗадолжености <> Неопределено Тогда
		
		СтрокаИтого = НСтр("ru='Итого';uk='Разом'");
		Счетчик = 0;
		// Заполняем таблицу продаж
		Для Каждого СтрокаЗадолженности Из ТаблицаЗадолжености Цикл
			
			// Если это итоговая строка то запишем итог
			Если НЕ ЗначениеЗаполнено(СтрокаЗадолженности.ДанныеРасшифровки) И СтрокаЗадолженности.Представление = СтрокаИтого Тогда
				ИтогоЗадолженностьПоставщикам = СтрокаЗадолженности.Сумма;
			Иначе
				СтрокаЗадолженностьПоставщикам	= ЗадолженностьПоставщикам.Добавить();
				
				СтрокаЗадолженностьПоставщикам.Контрагент 	= СтрокаЗадолженности.ДанныеРасшифровки;
				СтрокаЗадолженностьПоставщикам.Сумма 		= СтрокаЗадолженности.Сумма;
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
			// нас интересуют 3 крупнейших
			Если Счетчик >= 3 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	МаксимальныйИндексТаблицы = ЗадолженностьПоставщикам.Количество() - 1;
	// Установим видимость заранее добавленных строк (их 3)
	Для Индекс = 0 По 2 Цикл
		
		Если Индекс <= МаксимальныйИндексТаблицы Тогда
			ВидимостьСтроки = Истина;
		Иначе
			ВидимостьСтроки = Ложь;
		Конецесли;
		
		Элементы["ЗадолженностьПоставщикамСтрока" + (Индекс + 1)].Видимость = ВидимостьСтроки;
		
	КонецЦикла;	
	
	Если МаксимальныйИндексТаблицы >= 1 Тогда
		// Покажем строку В том числе
		Элементы.ЗадолженностьПоставщикамВтомЧисле.Видимость = Истина;
	Иначе
		// Скроем строку В том числе	
		Элементы.ЗадолженностьПоставщикамВтомЧисле.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПросроченнаяЗадолженностьПоставщикам

&НаСервере
Процедура ЗаполнитьПросроченнуюЗадолженностьПоставщикам(ДанныеМонитора)
	
	ТаблицаЗадолжености = ДанныеМонитора.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ПросроченнаяЗадолженостьПоставщикам.Очистить();
	ИтогоПросроченнаяЗадолженностьПоставщикам = 0;
	
	Если ТаблицаЗадолжености <> Неопределено Тогда
		
		СтрокаИтого = НСтр("ru='Итого';uk='Разом'");
		Счетчик = 0;
		// Заполняем таблицу продаж
		Для Каждого СтрокаЗадолженности Из ТаблицаЗадолжености Цикл
			
			// Если это итоговая строка то запишем итог
			Если НЕ ЗначениеЗаполнено(СтрокаЗадолженности.ДанныеРасшифровки) И СтрокаЗадолженности.Представление = СтрокаИтого Тогда
				ИтогоПросроченнаяЗадолженностьПоставщикам = СтрокаЗадолженности.Сумма;
			Иначе
				СтрокаЗадолженностьПоставщикам	= ПросроченнаяЗадолженостьПоставщикам.Добавить();
				
				СтрокаЗадолженностьПоставщикам.Контрагент 	= СтрокаЗадолженности.ДанныеРасшифровки;
				СтрокаЗадолженностьПоставщикам.Сумма 		= СтрокаЗадолженности.Сумма;
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
			// нас интересуют 3 крупнейших
			Если Счетчик >= 3 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	МаксимальныйИндексТаблицы = ПросроченнаяЗадолженостьПоставщикам.Количество() - 1;
	// Установим видимость заранее добавленных строк (их 3)
	Для Индекс = 0 По 2 Цикл
		
		Если Индекс <= МаксимальныйИндексТаблицы Тогда
			ВидимостьСтроки = Истина;
		Иначе
			ВидимостьСтроки = Ложь;
		Конецесли;
		
		Элементы["ПросроченнаяЗадолженностьПоставщикамСтрока" + (Индекс + 1)].Видимость = ВидимостьСтроки;
		
	КонецЦикла;	
	
	Если МаксимальныйИндексТаблицы >= 1 Тогда
		// Покажем строку В том числе
		Элементы.ПросроченнаяЗадолженностьПоставщикамВтомЧисле.Видимость = Истина;
	Иначе
		// Скроем строку В том числе	
		Элементы.ПросроченнаяЗадолженностьПоставщикамВтомЧисле.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПодготовитьДанныеДляПечатиТаблицыРазделаМонитора(Таблица, КолонкаПредставление, ТабличныйДокумент, Макет)
	
	МакетСтроки 					= Макет.ПолучитьОбласть("СтрокаРаздела");
	МакетСуммыВВалюте 				= Макет.ПолучитьОбласть("СтрокаСуммаВВалюте");
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
	
	Для Каждого Строка Из Таблица Цикл
		
		МакетСтроки.Параметры.Представление 	= Строка[КолонкаПредставление];
		МакетСтроки.Параметры.Сумма 			= Строка.Сумма;
		ТабличныйДокумент.Вывести(МакетСтроки);
		Если Строка.Свойство("Валюта") И Строка.Валюта <> ВалютаРегламентированногоУчета Тогда
			
			МакетСуммыВВалюте.Параметры.ПредставлениеСуммыВВалюте = Строка.ПредставлениеВалютнойСуммы;
			ТабличныйДокумент.Вывести(МакетСуммыВВалюте);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляПечатиРазделМонитора(Раздел, ТабличныйДокумент, Макет)
	
	ЗаголовокРаздела = Макет.ПолучитьОбласть("ЗаголовокРаздела");
	
	РазделыМонитора = Перечисления.РазделыМонитораРуководителя; 
	
	Если Раздел.Значение = РазделыМонитора.ОстаткиДенежныхСредств Тогда
		
		ЗаголовокРаздела.Параметры.Заголовок = Раздел.Представление;
		ЗаголовокРаздела.Параметры.Сумма = ИтогоДенежныхСредств;
		ЗаголовокРаздела.Параметры.Период = ПериодДата;
		ТабличныйДокумент.Вывести(ЗаголовокРаздела);
		ТабличныйДокумент.НачатьГруппуСтрок(Раздел.Представление);
		ПодготовитьДанныеДляПечатиТаблицыРазделаМонитора(ОстаткиДенежныхСредства, "Представление", ТабличныйДокумент, Макет);
		
	ИначеЕсли Раздел.Значение = РазделыМонитора.ДвижениеДенежныхСредств Тогда
		
		ЗаголовокРаздела.Параметры.Заголовок = Раздел.Представление;
		ЗаголовокРаздела.Параметры.Период = ПериодМесяц;
		ТабличныйДокумент.Вывести(ЗаголовокРаздела);
		ТабличныйДокумент.НачатьГруппуСтрок(Раздел.Представление);
		
		МакетСтроки = Макет.ПолучитьОбласть("СтрокаРаздела");
		
		МакетСтроки.Параметры.Представление = НСтр("ru='Поступление';uk='Надходження'");
		МакетСтроки.Параметры.Сумма = ПоступлениеДенежныхСредствСумма;
		ТабличныйДокумент.Вывести(МакетСтроки);
		
		МакетСтроки.Параметры.Представление = НСтр("ru='Расход';uk='Видаток'");
		МакетСтроки.Параметры.Сумма = РасходДенежныхСредствСумма;
		ТабличныйДокумент.Вывести(МакетСтроки);
		
	ИначеЕсли Раздел.Значение = РазделыМонитора.ПродажиПоКонтрагентам Тогда
		
		ЗаголовокРаздела.Параметры.Заголовок = Раздел.Представление;
		ЗаголовокРаздела.Параметры.Сумма = ИтогоПродажиПоКонтрагентам;
		ЗаголовокРаздела.Параметры.Период = ПериодМесяц;
		ТабличныйДокумент.Вывести(ЗаголовокРаздела);
		ТабличныйДокумент.НачатьГруппуСтрок(Раздел.Представление);
		
		Если Элементы.ПродажиПоКонтрагентамВтомЧисле.Видимость Тогда
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ВТомЧисле"));
			
		КонецЕсли;	
		ПодготовитьДанныеДляПечатиТаблицыРазделаМонитора(ПродажиПоКонтрагентам, "Контрагент", ТабличныйДокумент, Макет);
		
	ИначеЕсли Раздел.Значение = РазделыМонитора.ПродажиПоНоменклатурнымГруппам Тогда
		
		ЗаголовокРаздела.Параметры.Заголовок = Раздел.Представление;
		ЗаголовокРаздела.Параметры.Сумма = ИтогоПродажиПоНоменклатурнымГруппам;
		ЗаголовокРаздела.Параметры.Период = ПериодМесяц;
		ТабличныйДокумент.Вывести(ЗаголовокРаздела);
		ТабличныйДокумент.НачатьГруппуСтрок(Раздел.Представление);
		
		Если Элементы.ПродажиПоНоменклатурнымГруппамВтомЧисле.Видимость Тогда
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ВТомЧисле"));
			
		КонецЕсли;	
		
		ПодготовитьДанныеДляПечатиТаблицыРазделаМонитора(ПродажиПоНоменклатурнымГруппам, "НоменклатурнаяГруппа", ТабличныйДокумент, Макет);
		
	ИначеЕсли Раздел.Значение = РазделыМонитора.ЗадолженностьПокупателей Тогда
		
		ЗаголовокРаздела.Параметры.Заголовок = Раздел.Представление;
		ЗаголовокРаздела.Параметры.Сумма = ИтогоЗадолженностьПокупателей;
		ЗаголовокРаздела.Параметры.Период = ПериодМесяц;
		ТабличныйДокумент.Вывести(ЗаголовокРаздела);
		ТабличныйДокумент.НачатьГруппуСтрок(Раздел.Представление);
		
		Если Элементы.ЗадолженностьПокупателейВтомЧисле.Видимость Тогда
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ВТомЧисле"));
			
		КонецЕсли;	
		
		ПодготовитьДанныеДляПечатиТаблицыРазделаМонитора(ЗадолженостьПокупателей, "Контрагент", ТабличныйДокумент, Макет);
		
	ИначеЕсли Раздел.Значение = РазделыМонитора.ПросроченнаяЗадолженностьПокупателей Тогда
		
		ЗаголовокРаздела.Параметры.Заголовок = Раздел.Представление;
		ЗаголовокРаздела.Параметры.Сумма = ИтогоПросроченнаяЗадолженностьПокупателей;
		ЗаголовокРаздела.Параметры.Период = ПериодМесяц;
		ТабличныйДокумент.Вывести(ЗаголовокРаздела);
		ТабличныйДокумент.НачатьГруппуСтрок(Раздел.Представление);
		
		Если Элементы.ПросроченнаяЗадолженностьПокупателейВтомЧисле.Видимость Тогда
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ВТомЧисле"));
			
		КонецЕсли;	
		
		ПодготовитьДанныеДляПечатиТаблицыРазделаМонитора(ПросроченнаяЗадолженостьПокупателей, "Контрагент", ТабличныйДокумент, Макет);
		
	ИначеЕсли Раздел.Значение = РазделыМонитора.ЗадолженностьПоставщикам Тогда
		
		ЗаголовокРаздела.Параметры.Заголовок = Раздел.Представление;
		ЗаголовокРаздела.Параметры.Сумма = ИтогоЗадолженностьПоставщикам;
		ЗаголовокРаздела.Параметры.Период = ПериодМесяц;
		ТабличныйДокумент.Вывести(ЗаголовокРаздела);
		ТабличныйДокумент.НачатьГруппуСтрок(Раздел.Представление);
		
		Если Элементы.ЗадолженностьПоставщикамВтомЧисле.Видимость Тогда
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ВТомЧисле"));
			
		КонецЕсли;	
		
		ПодготовитьДанныеДляПечатиТаблицыРазделаМонитора(ЗадолженностьПоставщикам, "Контрагент", ТабличныйДокумент, Макет);
		
	ИначеЕсли Раздел.Значение = РазделыМонитора.ПросроченнаяЗадолженностьПоставщикам Тогда
		
		ЗаголовокРаздела.Параметры.Заголовок = Раздел.Представление;
		ЗаголовокРаздела.Параметры.Сумма = ИтогоЗадолженностьПоставщикам;
		ЗаголовокРаздела.Параметры.Период = ПериодМесяц;
		ТабличныйДокумент.Вывести(ЗаголовокРаздела);
		ТабличныйДокумент.НачатьГруппуСтрок(Раздел.Представление);
		
		Если Элементы.ПросроченнаяЗадолженностьПоставщикамВтомЧисле.Видимость Тогда
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ВТомЧисле"));
			
		КонецЕсли;	
		
		ПодготовитьДанныеДляПечатиТаблицыРазделаМонитора(ПросроченнаяЗадолженостьПоставщикам, "Контрагент", ТабличныйДокумент, Макет);
		
	КонецЕсли;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
КонецПроцедуры	

&НаСервере
// Подготавливает данные для печати
// Собитрает данные формы в табличный документ
// Для того чтобы вывести на печать именно то что видит пользователь берем данные из формы а не из регистра
Функция ПодготовитьПарараметрыПечатиМонитораНаСервере()
	
	Макет = ПолучитьОбщийМакет("МониторРуководителя");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокМонитора");
	
	ОбластьЗаголовок.Параметры.Организация = ?(ЗначениеЗаполнено(Организация), Строка(Организация), "");
	
	ОбластьЗаголовок.Параметры.Сегодня = Формат(ДатаПоследнегоОбновленияМонитора, "ДФ='dd MMMM yyyy ""г."" H:mm'");
	
	ОбластьЗаголовок.Параметры.ЕдиницаИзмерения = ?(ВариантОкругления = 1, НСтр("ru='Грн';uk='Грн'"), НСтр("ru='Тыс. грн';uk='Тис. грн'"));

	ТаблицаМонитора = Новый ТабличныйДокумент;
	
	ТаблицаМонитора.Вывести(ОбластьЗаголовок);
	
	СписокРазделов = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "СписокРазделовМонитораРуководителя");
	Если СписокРазделов = Неопределено Тогда
		СписокРазделов = МониторРуководителя.СтандартныйСписокРазделовМонитораРуководителя();
	КонецЕсли;
	
	Для Каждого НастройкаРаздела Из СписокРазделов Цикл
		
		Если НастройкаРаздела.Пометка Тогда
			
			ПодготовитьДанныеДляПечатиРазделМонитора(НастройкаРаздела, ТаблицаМонитора, Макет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаМонитора.ТолькоПросмотр      = Истина;
	ТаблицаМонитора.АвтоМасштаб         = Истина;
	ТаблицаМонитора.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТаблицаМонитора.ОтображатьЗаголовки = Ложь;
	ТаблицаМонитора.ОтображатьСетку     = Ложь;
	
	ПечатнаяФормаМонитораПуть = ПоместитьВоВременноеХранилище(ТаблицаМонитора, УникальныйИдентификатор);
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТаблицаМонитора, 0, ОбъектыПечати, Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());

	Возврат Новый Структура("ПечатнаяФормаМонитораПуть, ОбъектыПечати", ПечатнаяФормаМонитораПуть, ОбъектыПечати.ВыгрузитьЗначения());
	
КонецФункции

#КонецОбласти
