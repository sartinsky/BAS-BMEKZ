
///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает массив, элементами которого выступают возможные имена представления загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя представления
//
&НаСервере
Функция ПолучитьСписокИменПредставлений(ОписаниеТипов)
	
	СписокВыбора = Новый СписокЗначений;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		
		Тип = ОписаниеТипов.Типы()[0];
		
		МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
		ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
		Если ЭтоСправочник ИЛИ ЭтоСчет Или ЭтоВидХарактеристик Тогда
			
			ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
			ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
			
			ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
			?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
			
			Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
				
				Если ЕстьКод Тогда
					СписокВыбора.Добавить("Код", "Код");
				КонецЕсли;
				
				Если ЕстьИмя Тогда
					СписокВыбора.Добавить("Наименование", "Наименование");
				КонецЕсли;
				
			Иначе
				
				Если ЕстьИмя Тогда
					СписокВыбора.Добавить("Наименование", "Наименование");
				КонецЕсли;
				
				Если ЕстьКод Тогда
					СписокВыбора.Добавить("Код", "Код");
				КонецЕсли;
				
			КонецЕсли;
			
			Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
				
				Если Истина//Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
					И Реквизит.Тип.Типы().Количество() = 1 и Реквизит.Тип.Типы()[0] = Тип ("Строка")
				Тогда
					
					СписокВыбора.Добавить(Реквизит.Имя, Реквизит.Представление());
					
				КонецЕсли;
				
			КонецЦикла;
			
			
		Иначе
		
		КонецЕсли;
		
	КонецЕсли;
	Возврат СписокВыбора;
КонецФункции // ()

// Функция возвращает список, элементами которого выступают возможные связи по типу для загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
&НаСервере
Функция ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ)
	
	СписокВыбора = Новый СписокЗначений;
	
	ВозможныеПланыСчетов = Новый Структура;
	Для каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		Попытка
			Если ПланСчетов.ВидыСубконто.Тип = ЗагружаемыйРеквизит.ОписаниеТипов Тогда
				
				ВозможныеПланыСчетов.Вставить(ПланСчетов.Имя,ПланыСчетов[ПланСчетов.Имя]);
				
			КонецЕсли;
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		ТипЗНЧПланСчетов = ТипЗНЧ(ПланСчетов.Значение.ПустаяСсылка());
		Для каждого КолонкаСвязиПоТипу Из ТЗ Цикл
			Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы().Количество() > 0 Тогда
				Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы()[0] = ТипЗНЧПланСчетов Тогда
					СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита,КолонкаСвязиПоТипу.ИмяРеквизита);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ВозможныеПланыСчетов.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
	КонецЕсли;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		СписокВыбора.Добавить("ПланСчетовСсылка."+ПланСчетов.Ключ,"<"+ПланСчетов.Ключ+">");
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции // ()

// Функция возвращает список, элементами которого выступают возможные связи по владельцу для загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
&НаСервере
Функция ПолучитьСписокСвязейПоВладельцу(ОписаниеТипов, ТаблицаКолонок)
	
	ЕстьТипСамогоОбъекта = Ложь;
	МетаданныеДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьМетаданныеДокументаПоВиду(ВидДокумента1С);
	Если Лев(МетаданныеДокумента.ПолноеИмя(), 10) = "Справочник" Тогда
		ОписаниеТиповСправочника = Тип(СтрЗаменить(МетаданныеДокумента.ПолноеИмя(),".","Ссылка."));
	Иначе
		ОписаниеТиповСправочника = Неопределено;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	ТипыВладельцев = Новый Соответствие;
	Для каждого ТипКолонки Из ОписаниеТипов.Типы() Цикл
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипКолонки) Тогда
			Для каждого Владелец Из Метаданные.НайтиПоТипу(ТипКолонки).Владельцы Цикл
				ТипВладельца   = Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка."));
				Если ТипыВладельцев[ТипВладельца] = Неопределено Тогда
					
					Если ТипВладельца = ОписаниеТиповСправочника Тогда
						
						ЕстьТипСамогоОбъекта = Истина;
						
					КонецЕсли;
					 
					ТипыВладельцев.Вставить(Владелец.ПолноеИмя(), Владелец.ПолноеИмя());
					Для каждого КолонкаСвязиПоВладельцу Из ТаблицаКолонок Цикл
						Если КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы().Количество() > 0 Тогда
							Если КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы()[0] = ТипВладельца И СписокВыбора.НайтиПоЗначению(КолонкаСвязиПоВладельцу.ИмяРеквизита) = Неопределено Тогда
								// Возможно надо будет по всем типам проходить
								СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита,КолонкаСвязиПоВладельцу.ИмяРеквизита);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТипыВладельцев.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
	КонецЕсли;
	 
	
	Для каждого КлючИЗначение Из ТипыВладельцев Цикл
		СписокВыбора.Добавить(КлючИЗначение.Значение, "<"+КлючИЗначение.Значение+">");
	КонецЦикла;
	
	Если ЕстьТипСамогоОбъекта Тогда
		
		СписокВыбора.Вставить(0,"<Создаваемый объект>", "<Создаваемый объект>");
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции // ()

// Возвращает список выбора, закэшированный в таблице значений для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		получить связанный список выбора
//
// Возвращаемое значение:
//   СписокЗначений - список значений для выбора для этого реквизита
//
&НаСервере
Функция ПолучитьСписокВыбораСвязиПоВладельцу(ИмяРеквизита)
	ТЗ = РеквизитФормыВЗначение("СпискиВыбораСвязиПоВладельцу");
	Стр = ТЗ.Найти(ИмяРеквизита, "ИмяРеквизита");
	
	Возврат Стр.СписокВыбора;
КонецФункции // ПолучитьСписокВыбораСвязиПоВладельцу()

// Возвращает список выбора, закэшированный в таблице значений для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		получить связанный список выбора
//
// Возвращаемое значение:
//   СписокЗначений - список значений для выбора для этого реквизита
//
&НаСервере
Функция ПолучитьСписокВыбораСвязиПоВладельцуТЧ(ИмяРеквизита, ИмяРеквизитаСпискиВыбораСвязиПоВладельцу)
	ТЗ = РеквизитФормыВЗначение(ИмяРеквизитаСпискиВыбораСвязиПоВладельцу);
	Стр = ТЗ.Найти(ИмяРеквизита, "ИмяРеквизита");
	
	Возврат Стр.СписокВыбора;
КонецФункции // ПолучитьСписокВыбораСвязиПоВладельцу1()

// Сохраняет в кэше список выбора для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		сохранить связанный список выбора
//  НовыйСписокВыбора  - СписокЗначений - сохраняемый список значений
//
&НаСервере
Процедура СохранитьСписокВыбораСвязиПоВладельцу(ИмяРеквизита, Знач НовыйСписокВыбора)

	ТЗ = РеквизитФормыВЗначение("СпискиВыбораСвязиПоВладельцу");
	Стр = ТЗ.Найти(ИмяРеквизита, "ИмяРеквизита");
	Стр.СписокВыбора = НовыйСписокВыбора;
	ЗначениеВРеквизитФормы(ТЗ, "СпискиВыбораСвязиПоВладельцу");

КонецПроцедуры // СохранитьСписокВыбораСвязиПоВладельцу()

// Сохраняет в кэше список выбора для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		сохранить связанный список выбора
//  НовыйСписокВыбора  - СписокЗначений - сохраняемый список значений
//
&НаСервере
Процедура СохранитьСписокВыбораСвязиПоВладельцу1(ИмяРеквизита, Знач НовыйСписокВыбора)

	ТЗ = РеквизитФормыВЗначение("СпискиВыбораСвязиПоВладельцу1");
	Стр = ТЗ.Найти(ИмяРеквизита, "ИмяРеквизита");
	Стр.СписокВыбора = НовыйСписокВыбора;
	ЗначениеВРеквизитФормы(ТЗ, "СпискиВыбораСвязиПоВладельцу1");

КонецПроцедуры // СохранитьСписокВыбораСвязиПоВладельцу1()

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура УстановитьВидимостьЭлементовФормыНаСервере()
	Если ТиповаяСхемма Тогда
		Элементы.ГруппаПоТиповойСхемме.Видимость = Ложь;
		Элементы.ГруппаСобытиеПоискДокумента.Видимость = Истина;
		Элементы.ГруппаСоответствиеРеквизитовШапки.Видимость = Истина;
		Элементы.ГруппаСобытиеПриСозданииДокумента.Видимость = Истина;
		Элементы.ГруппаСобытиеПередЗаписьюДокумента.Видимость = Истина;
		Элементы.ГруппаСобытиеПриЗаписиДокумента.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица1.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица2.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица3.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица4.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица5.Видимость = Истина;
		Элементы.ГруппаНастроекДляИспользованияТС.Видимость = Истина;
	ИначеЕсли ПоТиповойСхемме Тогда
		Элементы.ГруппаПоТиповойСхемме.Видимость = Истина;
		Элементы.ГруппаСобытиеПоискДокумента.Видимость = Ложь;
		Элементы.ГруппаСоответствиеРеквизитовШапки.Видимость = Ложь;
		Элементы.ГруппаСобытиеПриСозданииДокумента.Видимость = Ложь;
		Элементы.ГруппаСобытиеПередЗаписьюДокумента.Видимость = Ложь;
		Элементы.ГруппаСобытиеПриЗаписиДокумента.Видимость = Ложь;
		Элементы.ГруппаНастроекТаблица1.Видимость = Ложь;
		Элементы.ГруппаНастроекТаблица2.Видимость = Ложь;
		Элементы.ГруппаНастроекТаблица3.Видимость = Ложь;
		Элементы.ГруппаНастроекТаблица4.Видимость = Ложь;
		Элементы.ГруппаНастроекТаблица5.Видимость = Ложь;
		Элементы.ГруппаНастроекДляИспользованияТС.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПоТиповойСхемме.Видимость = Истина;
		Элементы.ГруппаСобытиеПоискДокумента.Видимость = Истина;
		Элементы.ГруппаСоответствиеРеквизитовШапки.Видимость = Истина;
		Элементы.ГруппаСобытиеПриСозданииДокумента.Видимость = Истина;
		Элементы.ГруппаСобытиеПередЗаписьюДокумента.Видимость = Истина;
		Элементы.ГруппаСобытиеПриЗаписиДокумента.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица1.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица2.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица3.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица4.Видимость = Истина;
		Элементы.ГруппаНастроекТаблица5.Видимость = Истина;
		Элементы.ГруппаНастроекДляИспользованияТС.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТабличногоДокументаЗаполнитьРеквизитыСервер(Макет, ИмяТаблицыЗагружаемыхРеквизитов, НомерТаблицыДанных, ИмяТабличнойЧасти, ПослеДобавленияСтрокиТабличнойЧасти)
	ОбластьШапкиТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапкиТаблицы.Параметры.ТаблицаДанных = НомерТаблицыДанных;
	ОбластьШапкиТаблицы.Параметры.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	НастройкиТабличныйДокумент.Вывести(ОбластьШапкиТаблицы);
	
	ТЗ = РеквизитФормыВЗначение(ИмяТаблицыЗагружаемыхРеквизитов);
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаТаблицыВыражение");
		Иначе
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаТаблицы");
		КонецЕсли;
		
		ОбластьСтроки.Параметры.Пометка      = ?(ЗагружаемыйРеквизит.Пометка, "Х","");
		ОбластьСтроки.Параметры.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
		ОбластьСтроки.Параметры.ПолеПоиска   = ?(ЗагружаемыйРеквизит.ПолеПоиска, "Х","");
		
		ОбластьСтроки.Параметры.ОписаниеТипов       = скEDI_СозданиеДокументовСервер.ПолучитьОписаниеТипа(ЗагружаемыйРеквизит.ОписаниеТипов);
		
		ОбластьСтроки.Параметры.РежимЗагрузки       = ЗагружаемыйРеквизит.РежимЗагрузки;
		Если ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено) = ЗагружаемыйРеквизит.ЗначениеПоУмолчанию Тогда
			ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = "";
		Иначе
			ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
			
			ОбластьСтроки.Параметры.Выражение           = ЗагружаемыйРеквизит.Выражение;
			
		Иначе
			ОбластьСтроки.Параметры.ИскатьПо            = ЗагружаемыйРеквизит.ИскатьПо;
			ОбластьСтроки.Параметры.СвязьПоВладельцу    = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоВладельцу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоВладельцу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоВладельцу));
			ОбластьСтроки.Параметры.СвязьПоТипу         = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоТипу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоТипу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоТипу));
			ОбластьСтроки.Параметры.ЭлементСвязиПоТипу  = ЗагружаемыйРеквизит.ЭлементСвязиПоТипу;
		КонецЕсли;
		ОбластьСтроки.Параметры.ИмяРеквизитаШаблона = ЗагружаемыйРеквизит.ИмяРеквизитаШаблона;
		
		НастройкиТабличныйДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьПодвалТаблицы.Параметры.ПослеДобавленияСтрокиТабличнойЧасти = ПослеДобавленияСтрокиТабличнойЧасти;
	НастройкиТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
КонецПроцедуры

Процедура ОбновитьДанныеТабличногоДокументаСервер()
	НастройкиТабличныйДокумент = Новый ТабличныйДокумент;
	//НастройкиТабличныйДокумент.Очистить();

	Макет = ПолучитьОбщийМакет("скEDI_МакетСохраненияНастроекСозданияДокументов");
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.ВидДокумента1С = ВидДокумента1С;
	ОбластьШапки.Параметры.ИмяШаблона = ИмяШаблона;
	ОбластьШапки.Параметры.РедактироватьНайденыйДокумент = ?(РедактироватьНайденыйДокумент, "Х","");
	ОбластьШапки.Параметры.ПрикреплятьВложеныеФайлы = ?(ПрикреплятьВложеныеФайлы, "Х","");
	ОбластьШапки.Параметры.ПрикреплятьИзображениеДокументаPDF = ?(ПрикреплятьИзображениеДокументаPDF, "Х","");
	//ОбластьШапки.Параметры.ВидОбъекта                                = ВидОбъекта;
	//ОбластьШапки.Параметры.НеСоздаватьНовыхЭлементов                 = ?(Объект.НеСоздаватьНовыхЭлементов, "Х","");
	//ОбластьШапки.Параметры.ЗамещатьСуществующиеЗаписи                 = ?(Объект.ЗамещатьСуществующиеЗаписи, "Х","");
	//ОбластьШапки.Параметры.РучнаяНумерацияКолонокТабличногоДокумента = ?(Объект.РучнаяНумерацияКолонокТабличногоДокумента, "Х","");
	//ОбластьШапки.Параметры.ПерваяСтрокаДанныхТабличногоДокумента     = Объект.ПерваяСтрокаДанныхТабличногоДокумента;
	НастройкиТабличныйДокумент.Вывести(ОбластьШапки);
	
	ОбновитьДанныеТабличногоДокументаЗаполнитьРеквизитыСервер(Макет, "ТаблицаЗагружаемыхРеквизитов", 0, "", "");
	
	Если ИмяТабличнойЧасти1 <> "" Тогда
		ОбновитьДанныеТабличногоДокументаЗаполнитьРеквизитыСервер(Макет, "ТаблицаЗагружаемыхРеквизитов1", 1, ИмяТабличнойЧасти1, ПослеДобавленияСтрокиТабличнойЧасти1);
	КонецЕсли;
	Если ИмяТабличнойЧасти2 <> "" Тогда
		ОбновитьДанныеТабличногоДокументаЗаполнитьРеквизитыСервер(Макет, "ТаблицаЗагружаемыхРеквизитов2", 2, ИмяТабличнойЧасти2, ПослеДобавленияСтрокиТабличнойЧасти2);
	КонецЕсли;
	Если ИмяТабличнойЧасти3 <> "" Тогда
		ОбновитьДанныеТабличногоДокументаЗаполнитьРеквизитыСервер(Макет, "ТаблицаЗагружаемыхРеквизитов3", 3, ИмяТабличнойЧасти3, ПослеДобавленияСтрокиТабличнойЧасти3);
	КонецЕсли;
	Если ИмяТабличнойЧасти4 <> "" Тогда
		ОбновитьДанныеТабличногоДокументаЗаполнитьРеквизитыСервер(Макет, "ТаблицаЗагружаемыхРеквизитов4", 4, ИмяТабличнойЧасти4, ПослеДобавленияСтрокиТабличнойЧасти4);
	КонецЕсли;
	Если ИмяТабличнойЧасти5 <> "" Тогда
		ОбновитьДанныеТабличногоДокументаЗаполнитьРеквизитыСервер(Макет, "ТаблицаЗагружаемыхРеквизитов5", 5, ИмяТабличнойЧасти5, ПослеДобавленияСтрокиТабличнойЧасти5);
	КонецЕсли;
	
	ОбластьПодвала = Макет.ПолучитьОбласть("События");
	ОбластьПодвала.Параметры.ПоискДокумента = ПоискДокумента;
	ОбластьПодвала.Параметры.ПриСозданииДокумента = ПриСозданииДокумента;
	ОбластьПодвала.Параметры.ПередЗаписьюДокумента = ПередЗаписьюДокумента;
	ОбластьПодвала.Параметры.ПриЗаписиДокумента = ПриЗаписиДокумента;
	НастройкиТабличныйДокумент.Вывести(ОбластьПодвала);
	
	Если ТиповаяСхемма Тогда
		ОбластьТиповаяСхеммаПризнак = Макет.ПолучитьОбласть("ТиповаяСхеммаПризнак");
		НастройкиТабличныйДокумент.Вывести(ОбластьТиповаяСхеммаПризнак);
		
		ЭлементыДереваНастройки = НастройкиДляИспользованияТС.ПолучитьЭлементы();
		Для Каждого Элемент Из ЭлементыДереваНастройки Цикл
			ОбластьШапкаТиповаяСхемма = Макет.ПолучитьОбласть("ШапкаТиповаяСхемма");
			ОбластьШапкаТиповаяСхемма.Параметры.НомерТаблицы = Элемент.НомерТабличнойЧасти;
			ОбластьШапкаТиповаяСхемма.Параметры.ИмяТаблицы = Элемент.Имя;
			ОбластьШапкаТиповаяСхемма.Параметры.ОписаниеТаблицы = Элемент.Описание;
			ОбластьШапкаТиповаяСхемма.Параметры.Обязательно = ?(Элемент.Обязательно, "Х","");;
			НастройкиТабличныйДокумент.Вывести(ОбластьШапкаТиповаяСхемма);
		
			ЭлементыДереваНастройки1 = Элемент.ПолучитьЭлементы();
			Для Каждого Элемент1 Из ЭлементыДереваНастройки1 Цикл
				ОбластьСтрокаТиповаяСхемма = Макет.ПолучитьОбласть("СтрокаТиповаяСхемма");
				ОбластьСтрокаТиповаяСхемма.Параметры.Обязательно = ?(Элемент1.Обязательно, "Х","");;
				ОбластьСтрокаТиповаяСхемма.Параметры.Имя = Элемент1.Имя;
				ОбластьСтрокаТиповаяСхемма.Параметры.Тип = Элемент1.ТипДанныхРеквизита;
				ОбластьСтрокаТиповаяСхемма.Параметры.Описание = Элемент1.Описание;
				ОбластьСтрокаТиповаяСхемма.Параметры.ТипТекст = Элемент1.ТипДанныхРеквизитаТекст;
				НастройкиТабличныйДокумент.Вывести(ОбластьСтрокаТиповаяСхемма);
			КонецЦикла;
			ОбластьПодвалТиповаяСхемма = Макет.ПолучитьОбласть("ПодвалТиповаяСхемма");
			НастройкиТабличныйДокумент.Вывести(ОбластьПодвалТиповаяСхемма);
		КонецЦикла;
		ОбластьТиповаяСхеммаКонецНастроек = Макет.ПолучитьОбласть("ТиповаяСхеммаКонецНастроек");
		НастройкиТабличныйДокумент.Вывести(ОбластьТиповаяСхеммаКонецНастроек);
	КонецЕсли;
	
	Если ПоТиповойСхемме Тогда
		ОбластьНастройкиПоТиповойСхеммеПризнак = Макет.ПолучитьОбласть("НастройкиПоТиповойСхеммеПризнак");
		ОбластьНастройкиПоТиповойСхеммеПризнак.Параметры.ЕДРПОУВладельцаШаблона = ПоТиповойСхеммеЕДРПОУВладельцаШаблона;
		ОбластьНастройкиПоТиповойСхеммеПризнак.Параметры.ИмяШаблона = ПоТиповойСхеммеИмяШаблона;
		ОбластьНастройкиПоТиповойСхеммеПризнак.Параметры.ВерсияШаблона = ПоТиповойСхеммеВерсияШаблона;
		ОбластьНастройкиПоТиповойСхеммеПризнак.Параметры.ВидДокумента1С = ПоТиповойСхеммеВидДокумента1С;
		НастройкиТабличныйДокумент.Вывести(ОбластьНастройкиПоТиповойСхеммеПризнак);
		
		ЭлементыДереваНастройки = НастройкиТиповойСхеммы.ПолучитьЭлементы();
		Для Каждого Элемент Из ЭлементыДереваНастройки Цикл
			ОбластьШапкаНастройкиПоТиповойСхемме = Макет.ПолучитьОбласть("ШапкаНастройкиПоТиповойСхемме");
			ОбластьШапкаНастройкиПоТиповойСхемме.Параметры.НомерТаблицы = Элемент.НомерТабличнойЧасти;
			ОбластьШапкаНастройкиПоТиповойСхемме.Параметры.ИмяТаблицы = Элемент.Имя;
			ОбластьШапкаНастройкиПоТиповойСхемме.Параметры.ОписаниеТаблицы = Элемент.Описание;
			ОбластьШапкаНастройкиПоТиповойСхемме.Параметры.Обязательно = ?(Элемент.Обязательно, "Х","");;
			ОбластьШапкаНастройкиПоТиповойСхемме.Параметры.НастройкаНомерТаблицы = Элемент.НастройкаНомерТабличнойЧасти;
			ОбластьШапкаНастройкиПоТиповойСхемме.Параметры.НастройкаИмяТаблицы = Элемент.НастройкаИмя;
			ОбластьШапкаНастройкиПоТиповойСхемме.Параметры.НастройкаОписаниеТаблицы = Элемент.НастройкаОписание;
			НастройкиТабличныйДокумент.Вывести(ОбластьШапкаНастройкиПоТиповойСхемме);
		
			ЭлементыДереваНастройки1 = Элемент.ПолучитьЭлементы();
			Для Каждого Элемент1 Из ЭлементыДереваНастройки1 Цикл
				ОбластьСтрокаНастройкиПоТиповойСхемме = Макет.ПолучитьОбласть("СтрокаНастройкиПоТиповойСхемме");
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.Обязательно = ?(Элемент1.Обязательно, "Х","");;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.Имя = Элемент1.Имя;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.Тип = Элемент1.ТипДанныхРеквизита;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.Описание = Элемент1.Описание;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.ТипТекст = Элемент1.ТипДанныхРеквизитаТекст;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.НастройкаНомерТаблицы = Элемент1.НастройкаНомерТабличнойЧасти;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.НастройкаИмя = Элемент1.НастройкаИмя;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.НастройкаТип = Элемент1.НастройкаТипДанныхРеквизита;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.НастройкаОписание = Элемент1.НастройкаОписание;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.НастройкаТипТекст = Элемент1.НастройкаТипДанныхРеквизитаТекст;
				ОбластьСтрокаНастройкиПоТиповойСхемме.Параметры.НастройкаВыражение = Элемент1.НастройкаВыражение;
				НастройкиТабличныйДокумент.Вывести(ОбластьСтрокаНастройкиПоТиповойСхемме);
			КонецЦикла;
			ОбластьПодвалНастройкиПоТиповойСхемме = Макет.ПолучитьОбласть("ПодвалНастройкиПоТиповойСхемме");
			НастройкиТабличныйДокумент.Вывести(ОбластьПодвалНастройкиПоТиповойСхемме);
		КонецЦикла;
		ОбластьНастройкиПоТиповойСхеммеКонецНастроек = Макет.ПолучитьОбласть("НастройкиПоТиповойСхеммеКонецНастроек");
		НастройкиТабличныйДокумент.Вывести(ОбластьНастройкиПоТиповойСхеммеКонецНастроек);
	КонецЕсли;
КонецПроцедуры // ОбновитьДанныеТабличногоДокументаСервер()

&НаКлиенте
Процедура ОбновитьДанныеТабличногоДокумента()
	ОбновитьДанныеТабличногоДокументаСервер();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//

&НаКлиенте
Процедура УправлениеВидимостью()
	
	//РежимЗагрузки = Объект.РежимЗагрузки;
	//РучнаяНумерацияКолонокТабличногоДокумента = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	//
	//Если РежимЗагрузки = 0 Тогда
	//	ТекЭлемент = Элементы.ГруппаЗагрузкаВСправочник;
	//ИначеЕсли РежимЗагрузки = 1 Тогда
	//	ТекЭлемент = Элементы.ГруппаЗагрузкаВТабличнуюЧасть;
	//ИначеЕсли РежимЗагрузки = 2 Тогда
	//	ТекЭлемент = Элементы.ГруппаЗагрузкаВРегистрСведений;
	//Иначе
	//	Возврат; // Неизвестный режим
	//КонецЕсли;
	//Если Не Элементы.ГруппаПанельРежима.ТекущаяСтраница = ТекЭлемент Тогда
	//	Элементы.ГруппаПанельРежима.ТекущаяСтраница = ТекЭлемент;
	//КонецЕсли;
	//
	//Элементы.ТаблицаЗагружаемыхРеквизитовПолеПоиска.Видимость         = РежимЗагрузки = 0;
	//
	//Элементы.НеСоздаватьНовыхЭлементов. Видимость = РежимЗагрузки = 0;
	//Элементы.ЗамещатьСуществующиеЗаписи.Видимость = РежимЗагрузки = 2;
	//
	//ДоступностьКнопкиСохранитьЗначения    = ЕстьВыбранныеМетаданные();
	//ДоступностьКнопкиВосстановитьЗначения = Ложь; //Не СписокСохраненныхНастроек.Количество() = 0;
	//
	//Элементы.СохранитьЗначения.   Доступность = Ложь; //ДоступностьКнопкиСохранитьЗначения;
	//Элементы.ВосстановитьЗначения.Доступность = ДоступностьКнопкиВосстановитьЗначения;
	//
	//Элементы.СохранитьЗначенияВФайл.Доступность = ДоступностьКнопкиСохранитьЗначения;
	//
	//Элементы.ТаблицаЗагружаемыхРеквизитовНомерКолонки.Видимость = РучнаяНумерацияКолонокТабличногоДокумента;
	//Элементы.ПеренумероватьКолонки.Доступность = РучнаяНумерацияКолонокТабличногоДокумента;
	//Элементы.РучнаяНумерацияКолонокТабличногоДокумента.Пометка = РучнаяНумерацияКолонокТабличногоДокумента;

КонецПроцедуры // УправлениеВидимостью()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура КомандаОбновить(Команда)
	ОбновитьДанныеТабличногоДокумента();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЁННЫЕ ОБРАБОТЧИКИ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ВидДокумента1С.РежимВыбораИзСписка = Истина;
	Элементы.ВидДокумента1С.СписокВыбора.ЗагрузитьЗначения(скEDI_НастройкиПодКонфигурацию.ПолучитьМассивИспользуемыхВКонфигурацииВидовДокументов1С());
	
	тОрганизация = Неопределено;
	Если Параметры.Свойство("Организация", тОрганизация) Тогда
		Организация = тОрганизация;
	КонецЕсли; 
	
	тВидДокумента1С = Неопределено;
	Если Параметры.Свойство("ВидДокумента1С", тВидДокумента1С) Тогда
		ВидДокумента1С = тВидДокумента1С;
	КонецЕсли; 
	
	тВидЭлектронногоДокумента = Неопределено;
	Если Параметры.Свойство("ВидЭлектронногоДокумента", тВидЭлектронногоДокумента) Тогда
		ВидЭлектронногоДокумента = тВидЭлектронногоДокумента;
	КонецЕсли; 
	
	тЕДРПОУВладельцаШаблона = Неопределено;
	Если Параметры.Свойство("ЕДРПОУВладельцаШаблона", тЕДРПОУВладельцаШаблона) Тогда
		ЕДРПОУВладельцаШаблона = тЕДРПОУВладельцаШаблона;
	КонецЕсли; 
	
	тИмяШаблона = Неопределено;
	Если Параметры.Свойство("ИмяШаблона", тИмяШаблона) Тогда
		ИмяШаблона = тИмяШаблона;
	КонецЕсли; 
	
	тВерсияШаблона = Неопределено;
	Если Параметры.Свойство("ВерсияШаблона", тВерсияШаблона) Тогда
		ВерсияШаблона = тВерсияШаблона;
	КонецЕсли; 
	
	тПриоритет = Неопределено;
	Если Параметры.Свойство("Приоритет", тПриоритет) Тогда
		Приоритет = тПриоритет;
	КонецЕсли; 
	
	тПредопределенный = Неопределено;
	Если Параметры.Свойство("Предопределенный", тПредопределенный) Тогда
		Предопределенный = тПредопределенный;
	Иначе
		Предопределенный = Ложь;
	КонецЕсли; 
	
	Если Предопределенный Тогда
		Элементы.ФормаКнопкаОК.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьСписокТабличныхЧастей();
	ЗаполнятьТаблицуЗагружаемыхРеквизитов = Истина;
	
	
	тНастройки = Неопределено;
	Если Параметры.Свойство("Настройки", тНастройки) Тогда
		Если тНастройки <> Неопределено Тогда
			НастройкиТабличныйДокумент = тНастройки;
			тИмяШаблона = Неопределено;
			тСтруктураНастроек= Неопределено;
			Если скEDI_СозданиеДокументов.ОбработатьНастройки(НастройкиТабличныйДокумент, тИмяШаблона, тСтруктураНастроек) Тогда
				Если ИмяШаблона = "" Тогда
					ИмяШаблона = тИмяШаблона;
				Иначе
					Если ИмяШаблона <> тИмяШаблона Тогда
						Сообщить("Данные настройки предназначены для шаблона """ + тИмяШаблона + """, проверьте ИменаРеквизитовШаблонов");
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьТаблицыЗагружаемыхРеквизитов(тСтруктураНастроек.Реквизиты0);
				ЗаполнятьТаблицуЗагружаемыхРеквизитов = Ложь;
				
				Если тСтруктураНастроек.ИмяТабличнойЧасти1 <> "" Тогда
					ИмяТабличнойЧасти1 = тСтруктураНастроек.ИмяТабличнойЧасти1;
					ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("1", тСтруктураНастроек.Реквизиты1);
				КонецЕсли;
				Если тСтруктураНастроек.ИмяТабличнойЧасти2 <> "" Тогда
					ИмяТабличнойЧасти2 = тСтруктураНастроек.ИмяТабличнойЧасти2;
					ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("2", тСтруктураНастроек.Реквизиты2);
				КонецЕсли;
				Если тСтруктураНастроек.ИмяТабличнойЧасти3 <> "" Тогда
					ИмяТабличнойЧасти3 = тСтруктураНастроек.ИмяТабличнойЧасти3;
					ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("3", тСтруктураНастроек.Реквизиты3);
				КонецЕсли;
				Если тСтруктураНастроек.ИмяТабличнойЧасти4 <> "" Тогда
					ИмяТабличнойЧасти4 = тСтруктураНастроек.ИмяТабличнойЧасти4;
					ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("4", тСтруктураНастроек.Реквизиты4);
				КонецЕсли;
				Если тСтруктураНастроек.ИмяТабличнойЧасти5 <> "" Тогда
					ИмяТабличнойЧасти5 = тСтруктураНастроек.ИмяТабличнойЧасти5;
					ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("5", тСтруктураНастроек.Реквизиты5);
				КонецЕсли;
				
				РедактироватьНайденыйДокумент = тСтруктураНастроек.РедактироватьНайденыйДокумент;
				ПрикреплятьВложеныеФайлы = тСтруктураНастроек.ПрикреплятьВложеныеФайлы;
				ПрикреплятьИзображениеДокументаPDF = тСтруктураНастроек.ПрикреплятьИзображениеДокументаPDF;
				ПоискДокумента = тСтруктураНастроек.ПоискДокумента;
				ПриСозданииДокумента = тСтруктураНастроек.ПриСозданииДокумента;

				ПередЗаписьюДокумента = тСтруктураНастроек.ПередЗаписьюДокумента;
				ПриЗаписиДокумента = тСтруктураНастроек.ПриЗаписиДокумента;
				ПослеДобавленияСтрокиТабличнойЧасти1 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти1;
				ПослеДобавленияСтрокиТабличнойЧасти2 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти2;
				ПослеДобавленияСтрокиТабличнойЧасти3 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти3;
				ПослеДобавленияСтрокиТабличнойЧасти4 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти4;
				ПослеДобавленияСтрокиТабличнойЧасти5 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти5;
				
				ТиповаяСхемма = тСтруктураНастроек.ЭтоТиповаяСхемма;
				ЭлементыДереваНастройки = НастройкиДляИспользованияТС.ПолучитьЭлементы();
				ЭлементыДереваНастройки.Очистить();
				Если ТиповаяСхемма Тогда
					Для Каждого ТиповаяСхемма_Таблица Из тСтруктураНастроек.ТиповаяСхемма_Таблицы Цикл
						СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
						СтрокаТабличнаяЧасть.Уровень = 1;
						СтрокаТабличнаяЧасть.НомерТабличнойЧасти = ТиповаяСхемма_Таблица.НомерТаблицы;
						СтрокаТабличнаяЧасть.Имя = ТиповаяСхемма_Таблица.ИмяТаблицы;
						СтрокаТабличнаяЧасть.Описание = ТиповаяСхемма_Таблица.ОписаниеТаблицы;
						СтрокаТабличнаяЧасть.Обязательно = ТиповаяСхемма_Таблица.Обязательно;
						
						СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
						Для Каждого ЭлементМассиваПолей Из ТиповаяСхемма_Таблица.МассивПолей Цикл 
							СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
							СтрокаРеквизитШаблона.Уровень = 2;
							СтрокаРеквизитШаблона.Имя = ЭлементМассиваПолей.ИмяРеквизита;
							СтрокаРеквизитШаблона.Описание = ЭлементМассиваПолей.Описание;
							СтрокаРеквизитШаблона.ТипДанныхРеквизита = ЭлементМассиваПолей.Тип;
							СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = ЭлементМассиваПолей.ТипТекст;
							СтрокаРеквизитШаблона.Обязательно = ЭлементМассиваПолей.Обязательно;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				ПоТиповойСхемме = тСтруктураНастроек.ПоТиповойСхемме;
				ПоТиповойСхеммеЕДРПОУВладельцаШаблона = "";
				ПоТиповойСхеммеИмяШаблона = "";
				ПоТиповойСхеммеВерсияШаблона = "";
				ПоТиповойСхеммеВидДокумента1С = "";
				ЭлементыДереваНастройки = НастройкиТиповойСхеммы.ПолучитьЭлементы();
				ЭлементыДереваНастройки.Очистить();
				Если ПоТиповойСхемме Тогда
					ПоТиповойСхеммеЕДРПОУВладельцаШаблона = тСтруктураНастроек.ПоТиповойСхеммеЕДРПОУВладельцаШаблона;
					ПоТиповойСхеммеИмяШаблона = тСтруктураНастроек.ПоТиповойСхеммеИмяШаблона;
					ПоТиповойСхеммеВерсияШаблона = тСтруктураНастроек.ПоТиповойСхеммеВерсияШаблона;
					ПоТиповойСхеммеВидДокумента1С = тСтруктураНастроек.ПоТиповойСхеммеВидДокумента1С;
					Для Каждого НастройкиТиповойСхеммы_Таблица Из тСтруктураНастроек.НастройкиТиповойСхеммы_Таблицы Цикл
						СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
						СтрокаТабличнаяЧасть.Уровень = 1;
						СтрокаТабличнаяЧасть.НомерТабличнойЧасти = НастройкиТиповойСхеммы_Таблица.НомерТаблицы;
						СтрокаТабличнаяЧасть.Имя = НастройкиТиповойСхеммы_Таблица.ИмяТаблицы;
						СтрокаТабличнаяЧасть.Описание = НастройкиТиповойСхеммы_Таблица.ОписаниеТаблицы;
						СтрокаТабличнаяЧасть.Обязательно = НастройкиТиповойСхеммы_Таблица.Обязательно;
						СтрокаТабличнаяЧасть.НастройкаНомерТабличнойЧасти = НастройкиТиповойСхеммы_Таблица.НастройкаНомерТаблицы;
						СтрокаТабличнаяЧасть.НастройкаИмя = НастройкиТиповойСхеммы_Таблица.НастройкаИмяТаблицы;
						СтрокаТабличнаяЧасть.НастройкаОписание = НастройкиТиповойСхеммы_Таблица.НастройкаОписаниеТаблицы;
						
						СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
						Для Каждого ЭлементМассиваПолей Из НастройкиТиповойСхеммы_Таблица.МассивПолей Цикл 
							СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
							СтрокаРеквизитШаблона.Уровень = 2;
							СтрокаРеквизитШаблона.Имя = ЭлементМассиваПолей.ИмяРеквизита;
							СтрокаРеквизитШаблона.Описание = ЭлементМассиваПолей.Описание;
							СтрокаРеквизитШаблона.ТипДанныхРеквизита = ЭлементМассиваПолей.Тип;
							СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = ЭлементМассиваПолей.ТипТекст;
							СтрокаРеквизитШаблона.Обязательно = ЭлементМассиваПолей.Обязательно;
							СтрокаРеквизитШаблона.НастройкаНомерТабличнойЧасти = ЭлементМассиваПолей.НастройкаНомерТаблицы;
							СтрокаРеквизитШаблона.НастройкаИмя = ЭлементМассиваПолей.НастройкаИмяРеквизита;
							СтрокаРеквизитШаблона.НастройкаОписание = ЭлементМассиваПолей.НастройкаОписание;
							СтрокаРеквизитШаблона.НастройкаТипДанныхРеквизита = ЭлементМассиваПолей.НастройкаТип;
							СтрокаРеквизитШаблона.НастройкаТипДанныхРеквизитаТекст = ЭлементМассиваПолей.НастройкаТипТекст;
							СтрокаРеквизитШаблона.НастройкаВыражение = ЭлементМассиваПолей.НастройкаВыражение;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗаполнятьТаблицуЗагружаемыхРеквизитов Тогда
		ЗаполнитьТаблицыЗагружаемыхРеквизитов();
	КонецЕсли;
	ОбновитьРеквизитыШаблонаНаСервере();
	УстановитьВидимостьЭлементовФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//СисИнфо = Новый СистемнаяИнформация;
	//Если Лев(СисИнфо.ВерсияПриложения, 3) = "8.3" Тогда
	//	Выполнить("Элементы.СсылкаИсточника.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
	//	Выполнить("Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
	//КонецЕсли;

	УправлениеВидимостью();
	ЗаполнитьСписокВыбораДляИмяРеквизитаШаблона();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЦЫ ЗНАЧЕНИЙ ЗАГРУЖАЕМЫХ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Элемент.ДоступныеТипы = ТекДанные.ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ФормаРедактированияВыражения = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастроекСозданияДокументов_РедактированиеВыражения", ,ЭтаФорма);
		
		ФормаРедактированияВыражения.НомерТаблицы = 0;
		ФормаРедактированияВыражения.ЗаполнитьПодсказку();
		ПолеТекстовогоДокумента = ФормаРедактированияВыражения.ПолеТекстовогоДокумента;
		ПолеТекстовогоДокумента.УстановитьТекст(ТекДанные.Выражение);
		
		ФормаРедактированияВыражения.Открыть();
		//Если ФормаРедактированияВыражения.Открыть() = Истина Тогда
		//	ТекДанные.Выражение = ПолеТекстовогоДокумента.ПолучитьТекст();
		//КонецЕсли;
	Иначе
		ДоступныеТипы	= ТекДанные.ОписаниеТипов;
		СписокВыбораВладельца	= ПолучитьСписокВыбораСвязиПоВладельцу(ТекДанные.ИмяРеквизита);
		ФормаРедактированияСвязи = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастроекСозданияДокументов_РедактированиеСвязи", ,ЭтаФорма);
		ФормаРедактированияСвязи.НомерТаблицы = 0;
		ФормаРедактированияСвязи.ИспользуемыеТипы = ДоступныеТипы;
		ФормаРедактированияСвязи.ИскатьПо = ТекДанные.ИскатьПо;
		ФормаРедактированияСвязи.ИспользоватьВладельца = (СписокВыбораВладельца.Количество() > 0);
		ФормаРедактированияСвязи.СвязьПоВладельцу = ТекДанные.СвязьПоВладельцу;
		
		СписокВыбораИскатьПо = ПолучитьСписокИменПредставлений(ТекДанные.ОписаниеТипов);
		Сп = ФормаРедактированияСвязи.Элементы.ИскатьПо.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораИскатьПо Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		
		Сп = ФормаРедактированияСвязи.Элементы.СвязьПоВладельцу.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораВладельца Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		ФормаРедактированияСвязи.Открыть();
		//Если ФормаРедактированияСвязи.Открыть() = Истина Тогда
		//	ТекДанные.ИскатьПо = ФормаРедактированияСвязи.ИскатьПо;
		//	ТекДанные.СвязьПоВладельцу = ФормаРедактированияСвязи.СвязьПоВладельцу;
		//КонецЕсли;
	КонецЕсли;
	//Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
	//	ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
	//Иначе
	//	ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
	//			+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийОчистка(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	ТекДанные.ПредставлениеДопУсловий = "";
	ТекДанные.ИскатьПо = "";
	ТекДанные.СвязьПоВладельцу = "";
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
	Иначе
		ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
				+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Источник = "ФормаРедактированияВыражения" И ВыбранноеЗначение.Результат = Истина Тогда
			Если ВыбранноеЗначение.НомерТаблицы = -1 Тогда
				ТекДанные = Элементы.НастройкиТиповойСхеммы.ТекущиеДанные;
				ТекДанные.НастройкаВыражение = ВыбранноеЗначение.Выражение;
				ТекДанные.НастройкаНомерТабличнойЧасти = 0;
				ТекДанные.НастройкаИмя = "";
				ТекДанные.НастройкаТипДанныхРеквизита = 0;
				ТекДанные.НастройкаОписание = "";
				ТекДанные.НастройкаТипДанныхРеквизитаТекст = "";
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 0 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
				ТекДанные.Выражение = ВыбранноеЗначение.Выражение;
				ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 1 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов1.ТекущиеДанные;
				ТекДанные.Выражение = ВыбранноеЗначение.Выражение;
				ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 2 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов2.ТекущиеДанные;
				ТекДанные.Выражение = ВыбранноеЗначение.Выражение;
				ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 3 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов3.ТекущиеДанные;
				ТекДанные.Выражение = ВыбранноеЗначение.Выражение;
				ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 4 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов4.ТекущиеДанные;
				ТекДанные.Выражение = ВыбранноеЗначение.Выражение;
				ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 5 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов5.ТекущиеДанные;
				ТекДанные.Выражение = ВыбранноеЗначение.Выражение;
				ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
			КонецЕсли;
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаРедактированияСвязи" И ВыбранноеЗначение.Результат = Истина Тогда
			Если ВыбранноеЗначение.НомерТаблицы = 0 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
				ТекДанные.ИскатьПо = ВыбранноеЗначение.ИскатьПо;
				ТекДанные.СвязьПоВладельцу = ВыбранноеЗначение.СвязьПоВладельцу;
				ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
					+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 1 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов1.ТекущиеДанные;
				ТекДанные.ИскатьПо = ВыбранноеЗначение.ИскатьПо;
				ТекДанные.СвязьПоВладельцу = ВыбранноеЗначение.СвязьПоВладельцу;
				ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
					+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 2 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов2.ТекущиеДанные;
				ТекДанные.ИскатьПо = ВыбранноеЗначение.ИскатьПо;
				ТекДанные.СвязьПоВладельцу = ВыбранноеЗначение.СвязьПоВладельцу;
				ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
					+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 3 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов3.ТекущиеДанные;
				ТекДанные.ИскатьПо = ВыбранноеЗначение.ИскатьПо;
				ТекДанные.СвязьПоВладельцу = ВыбранноеЗначение.СвязьПоВладельцу;
				ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
					+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 4 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов4.ТекущиеДанные;
				ТекДанные.ИскатьПо = ВыбранноеЗначение.ИскатьПо;
				ТекДанные.СвязьПоВладельцу = ВыбранноеЗначение.СвязьПоВладельцу;
				ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
					+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
			ИначеЕсли ВыбранноеЗначение.НомерТаблицы = 5 Тогда
				ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов5.ТекущиеДанные;
				ТекДанные.ИскатьПо = ВыбранноеЗначение.ИскатьПо;
				ТекДанные.СвязьПоВладельцу = ВыбранноеЗначение.СвязьПоВладельцу;
				ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
					+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораДляИмяРеквизитаШаблона()
	СписокВыбора = Элементы.ТаблицаЗагружаемыхРеквизитовИмяРеквизитаШаблона.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", "<НЕТ>");
	Для Каждого РеквизитШаблона Из РеквизитыШаблона_Таблица0 Цикл
		СписокВыбора.Добавить(РеквизитШаблона.Имя, РеквизитШаблона.Имя + " - " + РеквизитШаблона.Описание + " (" + РеквизитШаблона.ТипДанныхТекст + ")");
	КонецЦикла;
	
	СписокВыбора = Элементы.ТаблицаЗагружаемыхРеквизитов1ИмяРеквизитаШаблона.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", "<НЕТ>");
	Для Каждого РеквизитШаблона Из РеквизитыШаблона_Таблица1 Цикл
		СписокВыбора.Добавить(РеквизитШаблона.Имя, РеквизитШаблона.Имя + " - " + РеквизитШаблона.Описание + " (" + РеквизитШаблона.ТипДанныхТекст + ")");
	КонецЦикла;
	
	СписокВыбора = Элементы.ТаблицаЗагружаемыхРеквизитов2ИмяРеквизитаШаблона.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", "<НЕТ>");
	Для Каждого РеквизитШаблона Из РеквизитыШаблона_Таблица2 Цикл
		СписокВыбора.Добавить(РеквизитШаблона.Имя, РеквизитШаблона.Имя + " - " + РеквизитШаблона.Описание + " (" + РеквизитШаблона.ТипДанныхТекст + ")");
	КонецЦикла;
	
	СписокВыбора = Элементы.ТаблицаЗагружаемыхРеквизитов3ИмяРеквизитаШаблона.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", "<НЕТ>");
	Для Каждого РеквизитШаблона Из РеквизитыШаблона_Таблица3 Цикл
		СписокВыбора.Добавить(РеквизитШаблона.Имя, РеквизитШаблона.Имя + " - " + РеквизитШаблона.Описание + " (" + РеквизитШаблона.ТипДанныхТекст + ")");
	КонецЦикла;
	
	СписокВыбора = Элементы.ТаблицаЗагружаемыхРеквизитов4ИмяРеквизитаШаблона.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", "<НЕТ>");
	Для Каждого РеквизитШаблона Из РеквизитыШаблона_Таблица4 Цикл
		СписокВыбора.Добавить(РеквизитШаблона.Имя, РеквизитШаблона.Имя + " - " + РеквизитШаблона.Описание + " (" + РеквизитШаблона.ТипДанныхТекст + ")");
	КонецЦикла;
	
	СписокВыбора = Элементы.ТаблицаЗагружаемыхРеквизитов5ИмяРеквизитаШаблона.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", "<НЕТ>");
	Для Каждого РеквизитШаблона Из РеквизитыШаблона_Таблица5 Цикл
		СписокВыбора.Добавить(РеквизитШаблона.Имя, РеквизитШаблона.Имя + " - " + РеквизитШаблона.Описание + " (" + РеквизитШаблона.ТипДанныхТекст + ")");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокТабличныхЧастей()
	СписокВыбора1 = Элементы.ИмяТабличнойЧасти1.СписокВыбора;
	СписокВыбора2 = Элементы.ИмяТабличнойЧасти2.СписокВыбора;
	СписокВыбора3 = Элементы.ИмяТабличнойЧасти3.СписокВыбора;
	СписокВыбора4 = Элементы.ИмяТабличнойЧасти4.СписокВыбора;
	СписокВыбора5 = Элементы.ИмяТабличнойЧасти5.СписокВыбора;
	СписокВыбора1.Очистить();
	СписокВыбора2.Очистить();
	СписокВыбора3.Очистить();
	СписокВыбора4.Очистить();
	СписокВыбора5.Очистить();
	СписокВыбора1.Добавить("", "<ШАПКА>");
	СписокВыбора2.Добавить("", "<ШАПКА>");
	СписокВыбора3.Добавить("", "<ШАПКА>");
	СписокВыбора4.Добавить("", "<ШАПКА>");
	СписокВыбора5.Добавить("", "<ШАПКА>");
	Если ВидДокумента1С = Неопределено Тогда
		ИмяТабличнойЧасти1 = "";
		ИмяТабличнойЧасти2 = "";
		ИмяТабличнойЧасти3 = "";
		ИмяТабличнойЧасти4 = "";
		ИмяТабличнойЧасти5 = "";
		Возврат;
	КонецЕсли;
	МетаданныеДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьМетаданныеДокументаПоВиду(ВидДокумента1С);
	Если МетаданныеДокумента <> Неопределено Тогда
		Для каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			СписокВыбора1.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
			СписокВыбора2.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
			СписокВыбора3.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
			СписокВыбора4.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
			СписокВыбора5.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
		КонецЦикла;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИмяТабличнойЧасти1) И СписокВыбора1.НайтиПоЗначению(ИмяТабличнойЧасти1) = Неопределено Тогда
		ИмяТабличнойЧасти1 = "";
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИмяТабличнойЧасти2) И СписокВыбора2.НайтиПоЗначению(ИмяТабличнойЧасти2) = Неопределено Тогда
		ИмяТабличнойЧасти2 = "";
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИмяТабличнойЧасти3) И СписокВыбора3.НайтиПоЗначению(ИмяТабличнойЧасти3) = Неопределено Тогда
		ИмяТабличнойЧасти3 = "";
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИмяТабличнойЧасти4) И СписокВыбора4.НайтиПоЗначению(ИмяТабличнойЧасти4) = Неопределено Тогда
		ИмяТабличнойЧасти4 = "";
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИмяТабличнойЧасти5) И СписокВыбора5.НайтиПоЗначению(ИмяТабличнойЧасти5) = Неопределено Тогда
		ИмяТабличнойЧасти5 = "";
	КонецЕсли;
КонецПроцедуры // ()

&НаСервере
Процедура ВидДокумента1СПриИзмененииНаСервере()
	ЗаполнитьТаблицыЗагружаемыхРеквизитов();
	УстановитьСписокТабличныхЧастей();
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("1");
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("2");
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("3");
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("4");
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("5");
КонецПроцедуры

&НаКлиенте
Процедура ВидДокумента1СПриИзменении(Элемент)
	ВидДокумента1СПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыЗагружаемыхРеквизитов(ЗначенияПоУмолчанию = Неопределено)
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	ТЗ.Очистить();
	
	МетаданныеДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьМетаданныеДокументаПоВиду(ВидДокумента1С);
	
	Если МетаданныеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	Для каждого Реквизит Из МетаданныеДокумента.СтандартныеРеквизиты Цикл
		//Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = ТЗ.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			//ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ОписаниеТипов = Реквизит.Тип;// МетаданныеДокумента.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
			ЗагружаемыйРеквизит.НомерСтрокиПоУмолчанию = 999;
			ЗагружаемыйРеквизит.НомерСтрокиПоУмолчанию1 = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		//КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		//Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = ТЗ.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ОписаниеТипов = Реквизит.Тип;//МетаданныеДокумента.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
			ЗагружаемыйРеквизит.НомерСтрокиПоУмолчанию = 999;
			ЗагружаемыйРеквизит.НомерСтрокиПоУмолчанию1 = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		//КонецЕсли;
	КонецЦикла;
		
		
	Если ЗначенияПоУмолчанию <> Неопределено Тогда
		НомерСтроки = 0;
		Для Каждого ЗначениеПоУмолчанию Из ЗначенияПоУмолчанию Цикл
			ЗагружаемыйРеквизит = ТЗ.Найти(ЗначениеПоУмолчанию.Значение.ИмяРеквизита,"ИмяРеквизита");
			Если ЗагружаемыйРеквизит <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, ЗначениеПоУмолчанию.Значение);
				ЗагружаемыйРеквизит.НомерСтрокиПоУмолчанию = НомерСтроки;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		ТЗ.Сортировать("НомерСтрокиПоУмолчанию,НомерСтрокиПоУмолчанию1");
	КонецЕсли;
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит.ОписаниеТипов);
		Если СписокВыбора.НайтиПоЗначению(ЗагружаемыйРеквизит.ИскатьПо) = Неопределено Тогда
			ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		КонецЕсли;
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТЗ);
		Если СписокВыбора.НайтиПоЗначению(ЗагружаемыйРеквизит.СвязьПоВладельцу) = Неопределено Тогда
			ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		КонецЕсли;
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
			Иначе
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
			КонецЕсли;
		КонецЕсли;
		
		//ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.ДоступныеТипы = ЗагружаемыйРеквизит.ОписаниеТипов;
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "" Тогда
			ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ЗагружаемыйРеквизит.Выражение;
		Иначе
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ?(ПустаяСтрока(ЗагружаемыйРеквизит.ИскатьПо), "", "Искать по "+ЗагружаемыйРеквизит.ИскатьПо)
										+?(ПустаяСтрока(ЗагружаемыйРеквизит.СвязьПоВладельцу), "", " по владельцу "+ЗагружаемыйРеквизит.СвязьПоВладельцу);
		КонецЕсли; 
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаЗагружаемыхРеквизитов");
	
	
	СпискиВыбораСвязиПоВладельцу.Очистить();
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		СтрокаСписка = СпискиВыбораСвязиПоВладельцу.Добавить();
		СтрокаСписка.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
		СтрокаСписка.СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТЗ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ(НомерТаблицыТЧ, ЗначенияПоУмолчанию = Неопределено)
	ИмяТаблицыТЧ = "ТаблицаЗагружаемыхРеквизитов" + НомерТаблицыТЧ;
	ТЗ = РеквизитФормыВЗначение(ИмяТаблицыТЧ);	
	ТЗ.Очистить();
		
	МетаданныеДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьМетаданныеДокументаПоВиду(ВидДокумента1С);
	
	Если МетаданныеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = ЭтаФорма["ИмяТабличнойЧасти" + НомерТаблицыТЧ];
	Если ИмяТабличнойЧасти <> "" Тогда
		МетаданныеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		Если МетаданныеТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НомерСтроки = 0;
		Для каждого Реквизит Из МетаданныеТабличнойЧасти.Реквизиты Цикл
			ЗагружаемыйРеквизит                        = ТЗ.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ОписаниеТипов = Реквизит.Тип;// МетаданныеДокумента.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
			ЗагружаемыйРеквизит.НомерСтрокиПоУмолчанию1 = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	
	Если ЗначенияПоУмолчанию <> Неопределено Тогда
		НомерСтроки = 0;
		Для Каждого ЗначениеПоУмолчанию Из ЗначенияПоУмолчанию Цикл
			ЗагружаемыйРеквизит = ТЗ.Найти(ЗначениеПоУмолчанию.Значение.ИмяРеквизита,"ИмяРеквизита");
			Если ЗагружаемыйРеквизит <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, ЗначениеПоУмолчанию.Значение);
				ЗагружаемыйРеквизит.НомерСтрокиПоУмолчанию1 = НомерСтроки;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		ТЗ.Сортировать("НомерСтрокиПоУмолчанию,НомерСтрокиПоУмолчанию1");
	КонецЕсли;
	
/////////////////////////////////////////	
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит.ОписаниеТипов);
		Если СписокВыбора.НайтиПоЗначению(ЗагружаемыйРеквизит.ИскатьПо) = Неопределено Тогда
			ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		КонецЕсли;
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТЗ);
		Если СписокВыбора.НайтиПоЗначению(ЗагружаемыйРеквизит.СвязьПоВладельцу) = Неопределено Тогда
			ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		КонецЕсли;
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
			Иначе
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
			КонецЕсли;
		КонецЕсли;
		
		//ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.ДоступныеТипы = ЗагружаемыйРеквизит.ОписаниеТипов;
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "" Тогда
			ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ЗагружаемыйРеквизит.Выражение;
		Иначе
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ?(ПустаяСтрока(ЗагружаемыйРеквизит.ИскатьПо), "", "Искать по "+ЗагружаемыйРеквизит.ИскатьПо)
										+?(ПустаяСтрока(ЗагружаемыйРеквизит.СвязьПоВладельцу), "", " по владельцу "+ЗагружаемыйРеквизит.СвязьПоВладельцу);
		КонецЕсли; 
	КонецЦикла; 
	
	
	ЗначениеВРеквизитФормы(ТЗ, ИмяТаблицыТЧ);
	
	СпискиВыбораСвязиПоВладельцу_ = ЭтаФорма["СпискиВыбораСвязиПоВладельцу" + НомерТаблицыТЧ];
	СпискиВыбораСвязиПоВладельцу_.Очистить();
	ТЗ = РеквизитФормыВЗначение(ИмяТаблицыТЧ);
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		СтрокаСписка = СпискиВыбораСвязиПоВладельцу_.Добавить();
		СтрокаСписка.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
		СтрокаСписка.СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТЗ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИмяТабличнойЧасти1ПриИзменении(Элемент)
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("1");
КонецПроцедуры

&НаКлиенте
Процедура ИмяТабличнойЧасти2ПриИзменении(Элемент)
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("2");
КонецПроцедуры

&НаКлиенте
Процедура ИмяТабличнойЧасти3ПриИзменении(Элемент)
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("3");
КонецПроцедуры

&НаКлиенте
Процедура ИмяТабличнойЧасти4ПриИзменении(Элемент)
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("4");
КонецПроцедуры

&НаКлиенте
Процедура ИмяТабличнойЧасти5ПриИзменении(Элемент)
	ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("5");
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыШаблонаНаСервере()
	ТаблицыШаблона.Очистить();
	РеквизитыШаблона_Таблица0.Очистить();
	РеквизитыШаблона_Таблица1.Очистить();
	РеквизитыШаблона_Таблица2.Очистить();
	РеквизитыШаблона_Таблица3.Очистить();
	РеквизитыШаблона_Таблица4.Очистить();
	РеквизитыШаблона_Таблица5.Очистить();
	Если ИмяШаблона <> "" Тогда
		Попытка
			лпПараметры = Новый Структура;
			Если ИмяШаблона <> "" Тогда
				лпПараметры.Вставить("CharCode", ИмяШаблона);
			КонецЕсли;
			Если ЕДРПОУВладельцаШаблона <> "" Тогда
				лпПараметры.Вставить("TmplOwnerCode", ЕДРПОУВладельцаШаблона);
			КонецЕсли;
			Если ИмяШаблона <> "" Тогда
				лпПараметры.Вставить("TmplVersion", ВерсияШаблона);
			КонецЕсли;
			лпПараметры.Вставить("AllFields", Истина);
			СтруктураТаблицыДокументов = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/getdocrk", лпПараметры);
			Если СтруктураТаблицыДокументов.Code <> 0 Тогда
				Сообщить(СтруктураТаблицыДокументов.Message);
			КонецЕсли;
			
			ТаблицыДокументов = Неопределено;
			СтруктураТаблицыДокументов.Свойство("Tables", ТаблицыДокументов);
			
			Если ТипЗнч(ТаблицыДокументов) = Тип("Массив") Тогда
				Если ТаблицыДокументов.Количество() >= 1 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[0];
					
					ТаблицаШаблона = ТаблицыШаблона.Добавить();
					ТаблицаШаблона.Имя = ШапкаДокументаСтруктура.Name;
					ТаблицаШаблона.Описание = ШапкаДокументаСтруктура.Description;
					ТаблицаШаблона.Номер = ШапкаДокументаСтруктура.Num;
					
					ШапкаДокументаПоля = Новый Структура;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
						РеквизитШаблона = РеквизитыШаблона_Таблица0.Добавить();
						РеквизитШаблона.Имя = Элемент.Name;
						РеквизитШаблона.Описание = Элемент.Description;
						РеквизитШаблона.ТипДанных = Элемент.DataType;
						РеквизитШаблона.ТипДанныхТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(РеквизитШаблона.ТипДанных);
					КонецЦикла;
				КонецЕсли;
					
				Если ТаблицыДокументов.Количество() >= 2 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[1];
					
					ТаблицаШаблона = ТаблицыШаблона.Добавить();
					ТаблицаШаблона.Имя = ШапкаДокументаСтруктура.Name;
					ТаблицаШаблона.Описание = ШапкаДокументаСтруктура.Description;
					ТаблицаШаблона.Номер = ШапкаДокументаСтруктура.Num;
					
					ШапкаДокументаПоля = Новый Структура;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
						РеквизитШаблона = РеквизитыШаблона_Таблица1.Добавить();
						РеквизитШаблона.Имя = Элемент.Name;
						РеквизитШаблона.Описание = Элемент.Description;
						РеквизитШаблона.ТипДанных = Элемент.DataType;
						РеквизитШаблона.ТипДанныхТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(РеквизитШаблона.ТипДанных);
					КонецЦикла;
				КонецЕсли;
					
				Если ТаблицыДокументов.Количество() >= 3 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[2];
					
					ТаблицаШаблона = ТаблицыШаблона.Добавить();
					ТаблицаШаблона.Имя = ШапкаДокументаСтруктура.Name;
					ТаблицаШаблона.Описание = ШапкаДокументаСтруктура.Description;
					ТаблицаШаблона.Номер = ШапкаДокументаСтруктура.Num;
					
					ШапкаДокументаПоля = Новый Структура;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
						РеквизитШаблона = РеквизитыШаблона_Таблица2.Добавить();
						РеквизитШаблона.Имя = Элемент.Name;
						РеквизитШаблона.Описание = Элемент.Description;
						РеквизитШаблона.ТипДанных = Элемент.DataType;
						РеквизитШаблона.ТипДанныхТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(РеквизитШаблона.ТипДанных);
					КонецЦикла;
				КонецЕсли;
					
				Если ТаблицыДокументов.Количество() >= 4 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[3];
					
					ТаблицаШаблона = ТаблицыШаблона.Добавить();
					ТаблицаШаблона.Имя = ШапкаДокументаСтруктура.Name;
					ТаблицаШаблона.Описание = ШапкаДокументаСтруктура.Description;
					ТаблицаШаблона.Номер = ШапкаДокументаСтруктура.Num;
					
					ШапкаДокументаПоля = Новый Структура;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
						РеквизитШаблона = РеквизитыШаблона_Таблица3.Добавить();
						РеквизитШаблона.Имя = Элемент.Name;
						РеквизитШаблона.Описание = Элемент.Description;
						РеквизитШаблона.ТипДанных = Элемент.DataType;
						РеквизитШаблона.ТипДанныхТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(РеквизитШаблона.ТипДанных);
					КонецЦикла;
				КонецЕсли;
					
				Если ТаблицыДокументов.Количество() >= 5 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[4];
					
					ТаблицаШаблона = ТаблицыШаблона.Добавить();
					ТаблицаШаблона.Имя = ШапкаДокументаСтруктура.Name;
					ТаблицаШаблона.Описание = ШапкаДокументаСтруктура.Description;
					ТаблицаШаблона.Номер = ШапкаДокументаСтруктура.Num;
					
					ШапкаДокументаПоля = Новый Структура;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
						РеквизитШаблона = РеквизитыШаблона_Таблица4.Добавить();
						РеквизитШаблона.Имя = Элемент.Name;
						РеквизитШаблона.Описание = Элемент.Description;
						РеквизитШаблона.ТипДанных = Элемент.DataType;
						РеквизитШаблона.ТипДанныхТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(РеквизитШаблона.ТипДанных);
					КонецЦикла;
				КонецЕсли;
					
				Если ТаблицыДокументов.Количество() >= 6 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[5];
					
					ТаблицаШаблона = ТаблицыШаблона.Добавить();
					ТаблицаШаблона.Имя = ШапкаДокументаСтруктура.Name;
					ТаблицаШаблона.Описание = ШапкаДокументаСтруктура.Description;
					ТаблицаШаблона.Номер = ШапкаДокументаСтруктура.Num;
					
					ШапкаДокументаПоля = Новый Структура;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
						РеквизитШаблона = РеквизитыШаблона_Таблица5.Добавить();
						РеквизитШаблона.Имя = Элемент.Name;
						РеквизитШаблона.Описание = Элемент.Description;
						РеквизитШаблона.ТипДанных = Элемент.DataType;
						РеквизитШаблона.ТипДанныхТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(РеквизитШаблона.ТипДанных);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровШаблона()
	ОбновитьРеквизитыШаблонаНаСервере();
	ЗаполнитьСписокВыбораДляИмяРеквизитаШаблона();
КонецПроцедуры

&НаКлиенте
Процедура ИмяШаблонаПриИзменении(Элемент)
	ПриИзмененииПараметровШаблона();
КонецПроцедуры

&НаКлиенте
Процедура ЕДРПОУВладельцаШаблонаПриИзменении(Элемент)
	ПриИзмененииПараметровШаблона();
КонецПроцедуры

&НаКлиенте
Процедура ВерсияШаблонаПриИзменении(Элемент)
	ПриИзмененииПараметровШаблона();
КонецПроцедуры

&НаКлиенте
Процедура Ok(Команда)
	ОбновитьДанныеТабличногоДокумента();
	Результат = Новый Структура;
	Результат.Вставить("Организация"				, Организация);
	Результат.Вставить("ВидДокумента1С"				, ВидДокумента1С);
	Результат.Вставить("ВидЭлектронногоДокумента"	, ВидЭлектронногоДокумента);
	Результат.Вставить("ЕДРПОУВладельцаШаблона"		, ЕДРПОУВладельцаШаблона);
	Результат.Вставить("ИмяШаблона"					, ИмяШаблона);
	Результат.Вставить("ВерсияШаблона"				, ВерсияШаблона);
	Результат.Вставить("Приоритет"					, Приоритет);
	Результат.Вставить("Настройки"					, НастройкиТабличныйДокумент);
	Результат.Вставить("ТиповаяСхемма"				, ТиповаяСхемма);
	Результат.Вставить("Результат"					, Истина);
	Закрыть(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДопУсловийНачалоВыбораНаКлиенте(ТекДанные, НомерТаблицыТЧ)
	СтандартнаяОбработка = Ложь;
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ФормаРедактированияВыражения = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастроекСозданияДокументов_РедактированиеВыражения", ,ЭтаФорма);
		
		ФормаРедактированияВыражения.НомерТаблицы = НомерТаблицыТЧ;
		ФормаРедактированияВыражения.ЗаполнитьПодсказку();
		ПолеТекстовогоДокумента = ФормаРедактированияВыражения.ПолеТекстовогоДокумента;
		ПолеТекстовогоДокумента.УстановитьТекст(ТекДанные.Выражение);
		
		ФормаРедактированияВыражения.Открыть();
		//Если ФормаРедактированияВыражения.Открыть() = Истина Тогда
		//	ТекДанные.Выражение = ПолеТекстовогоДокумента.ПолучитьТекст();
		//КонецЕсли;
	Иначе
		ДоступныеТипы	= ТекДанные.ОписаниеТипов;
		СписокВыбораВладельца	= ПолучитьСписокВыбораСвязиПоВладельцуТЧ(ТекДанные.ИмяРеквизита, "СпискиВыбораСвязиПоВладельцу" + НомерТаблицыТЧ);
		ФормаРедактированияСвязи = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастроекСозданияДокументов_РедактированиеСвязи", ,ЭтаФорма);
		ФормаРедактированияСвязи.НомерТаблицы = НомерТаблицыТЧ;
		ФормаРедактированияСвязи.ИспользуемыеТипы = ДоступныеТипы;
		ФормаРедактированияСвязи.ИскатьПо = ТекДанные.ИскатьПо;
		ФормаРедактированияСвязи.ИспользоватьВладельца = (СписокВыбораВладельца.Количество() > 0);
		ФормаРедактированияСвязи.СвязьПоВладельцу = ТекДанные.СвязьПоВладельцу;
		
		СписокВыбораИскатьПо = ПолучитьСписокИменПредставлений(ТекДанные.ОписаниеТипов);
		Сп = ФормаРедактированияСвязи.Элементы.ИскатьПо.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораИскатьПо Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		
		Сп = ФормаРедактированияСвязи.Элементы.СвязьПоВладельцу.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораВладельца Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		ФормаРедактированияСвязи.Открыть();
		//Если ФормаРедактированияСвязи.Открыть() = Истина Тогда
		//	ТекДанные.ИскатьПо = ФормаРедактированияСвязи.ИскатьПо;
		//	ТекДанные.СвязьПоВладельцу = ФормаРедактированияСвязи.СвязьПоВладельцу;
		//КонецЕсли;
	КонецЕсли;
	//Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
	//	ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
	//Иначе
	//	ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
	//			+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов1ПредставлениеДопУсловийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов1.ТекущиеДанные;
	ПредставлениеДопУсловийНачалоВыбораНаКлиенте(ТекДанные, "1");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов2ПредставлениеДопУсловийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов2.ТекущиеДанные;
	ПредставлениеДопУсловийНачалоВыбораНаКлиенте(ТекДанные, "2");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов3ПредставлениеДопУсловийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов3.ТекущиеДанные;
	ПредставлениеДопУсловийНачалоВыбораНаКлиенте(ТекДанные, "3");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов4ПредставлениеДопУсловийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов4.ТекущиеДанные;
	ПредставлениеДопУсловийНачалоВыбораНаКлиенте(ТекДанные, "4");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов5ПредставлениеДопУсловийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов5.ТекущиеДанные;
	ПредставлениеДопУсловийНачалоВыбораНаКлиенте(ТекДанные, "5");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов1ПредставлениеДопУсловийОчистка(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов1.ТекущиеДанные;
	ТекДанные.ПредставлениеДопУсловий = "";
	ТекДанные.ИскатьПо = "";
	ТекДанные.СвязьПоВладельцу = "";
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов2ПредставлениеДопУсловийОчистка(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов2.ТекущиеДанные;
	ТекДанные.ПредставлениеДопУсловий = "";
	ТекДанные.ИскатьПо = "";
	ТекДанные.СвязьПоВладельцу = "";
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов3ПредставлениеДопУсловийОчистка(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов3.ТекущиеДанные;
	ТекДанные.ПредставлениеДопУсловий = "";
	ТекДанные.ИскатьПо = "";
	ТекДанные.СвязьПоВладельцу = "";
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов4ПредставлениеДопУсловийОчистка(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов4.ТекущиеДанные;
	ТекДанные.ПредставлениеДопУсловий = "";
	ТекДанные.ИскатьПо = "";
	ТекДанные.СвязьПоВладельцу = "";
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов5ПредставлениеДопУсловийОчистка(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов5.ТекущиеДанные;
	ТекДанные.ПредставлениеДопУсловий = "";
	ТекДанные.ИскатьПо = "";
	ТекДанные.СвязьПоВладельцу = "";
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов1ОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов1.ТекущиеДанные;
	Элемент.ДоступныеТипы = ТекДанные.ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов2ОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов2.ТекущиеДанные;
	Элемент.ДоступныеТипы = ТекДанные.ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов3ОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов3.ТекущиеДанные;
	Элемент.ДоступныеТипы = ТекДанные.ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов4ОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов4.ТекущиеДанные;
	Элемент.ДоступныеТипы = ТекДанные.ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов5ОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов5.ТекущиеДанные;
	Элемент.ДоступныеТипы = ТекДанные.ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура РежимЗагрузкиПриИзмененииНаКлиенте(ТекДанные)
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
	Иначе
		ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
				+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов1РежимЗагрузкиПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов1.ТекущиеДанные;
	РежимЗагрузкиПриИзмененииНаКлиенте(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов2РежимЗагрузкиПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов2.ТекущиеДанные;
	РежимЗагрузкиПриИзмененииНаКлиенте(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов3РежимЗагрузкиПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов3.ТекущиеДанные;
	РежимЗагрузкиПриИзмененииНаКлиенте(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов4РежимЗагрузкиПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов4.ТекущиеДанные;
	РежимЗагрузкиПриИзмененииНаКлиенте(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитов5РежимЗагрузкиПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов5.ТекущиеДанные;
	РежимЗагрузкиПриИзмененииНаКлиенте(ТекДанные);
КонецПроцедуры

&НаСервере
Процедура ПрименитьНаСервере()
	тИмяШаблона = Неопределено;
	тСтруктураНастроек= Неопределено;
	Если скEDI_СозданиеДокументов.ОбработатьНастройки(НастройкиТабличныйДокумент, тИмяШаблона, тСтруктураНастроек) Тогда
		Если ИмяШаблона = "" Тогда
			ИмяШаблона = тИмяШаблона;
		Иначе
			Если ИмяШаблона <> тИмяШаблона Тогда
				Сообщить("Данные настройки предназначены для шаблона """ + тИмяШаблона + """, проверьте ИменаРеквизитовШаблонов");
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьТаблицыЗагружаемыхРеквизитов(тСтруктураНастроек.Реквизиты0);
		ЗаполнятьТаблицуЗагружаемыхРеквизитов = Ложь;
		
		Если тСтруктураНастроек.ИмяТабличнойЧасти1 <> "" Тогда
			ИмяТабличнойЧасти1 = тСтруктураНастроек.ИмяТабличнойЧасти1;
			ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("1", тСтруктураНастроек.Реквизиты1);
		КонецЕсли;
		Если тСтруктураНастроек.ИмяТабличнойЧасти2 <> "" Тогда
			ИмяТабличнойЧасти2 = тСтруктураНастроек.ИмяТабличнойЧасти2;
			ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("2", тСтруктураНастроек.Реквизиты2);
		КонецЕсли;
		Если тСтруктураНастроек.ИмяТабличнойЧасти3 <> "" Тогда
			ИмяТабличнойЧасти3 = тСтруктураНастроек.ИмяТабличнойЧасти3;
			ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("3", тСтруктураНастроек.Реквизиты3);
		КонецЕсли;
		Если тСтруктураНастроек.ИмяТабличнойЧасти4 <> "" Тогда
			ИмяТабличнойЧасти4 = тСтруктураНастроек.ИмяТабличнойЧасти4;
			ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("4", тСтруктураНастроек.Реквизиты4);
		КонецЕсли;
		Если тСтруктураНастроек.ИмяТабличнойЧасти5 <> "" Тогда
			ИмяТабличнойЧасти5 = тСтруктураНастроек.ИмяТабличнойЧасти5;
			ЗаполнитьТаблицыЗагружаемыхРеквизитовТЧ("5", тСтруктураНастроек.Реквизиты5);
		КонецЕсли;
		
		РедактироватьНайденыйДокумент = тСтруктураНастроек.РедактироватьНайденыйДокумент;
		ПрикреплятьВложеныеФайлы = тСтруктураНастроек.ПрикреплятьВложеныеФайлы;
		ПрикреплятьИзображениеДокументаPDF = тСтруктураНастроек.ПрикреплятьИзображениеДокументаPDF;
		ПоискДокумента = тСтруктураНастроек.ПоискДокумента;
		ПриСозданииДокумента = тСтруктураНастроек.ПриСозданииДокумента;

		ПередЗаписьюДокумента = тСтруктураНастроек.ПередЗаписьюДокумента;
		ПриЗаписиДокумента = тСтруктураНастроек.ПриЗаписиДокумента;
		ПослеДобавленияСтрокиТабличнойЧасти1 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти1;
		ПослеДобавленияСтрокиТабличнойЧасти2 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти2;
		ПослеДобавленияСтрокиТабличнойЧасти3 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти3;
		ПослеДобавленияСтрокиТабличнойЧасти4 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти4;
		ПослеДобавленияСтрокиТабличнойЧасти5 = тСтруктураНастроек.ПослеДобавленияСтрокиТабличнойЧасти5;
		
		ТиповаяСхемма = тСтруктураНастроек.ЭтоТиповаяСхемма;
		ЭлементыДереваНастройки = НастройкиДляИспользованияТС.ПолучитьЭлементы();
		ЭлементыДереваНастройки.Очистить();
		Если ТиповаяСхемма Тогда
			Для Каждого ТиповаяСхемма_Таблица Из тСтруктураНастроек.ТиповаяСхемма_Таблицы Цикл
				СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
				СтрокаТабличнаяЧасть.Уровень = 1;
				СтрокаТабличнаяЧасть.НомерТабличнойЧасти = ТиповаяСхемма_Таблица.НомерТаблицы;
				СтрокаТабличнаяЧасть.Имя = ТиповаяСхемма_Таблица.ИмяТаблицы;
				СтрокаТабличнаяЧасть.Описание = ТиповаяСхемма_Таблица.ОписаниеТаблицы;
				СтрокаТабличнаяЧасть.Обязательно = ТиповаяСхемма_Таблица.Обязательно;
				
				СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
				Для Каждого ЭлементМассиваПолей Из ТиповаяСхемма_Таблица.МассивПолей Цикл 
					СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
					СтрокаРеквизитШаблона.Уровень = 2;
					СтрокаРеквизитШаблона.Имя = ЭлементМассиваПолей.ИмяРеквизита;
					СтрокаРеквизитШаблона.Описание = ЭлементМассиваПолей.Описание;
					СтрокаРеквизитШаблона.ТипДанныхРеквизита = ЭлементМассиваПолей.Тип;
					СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = ЭлементМассиваПолей.ТипТекст;
					СтрокаРеквизитШаблона.Обязательно = ЭлементМассиваПолей.Обязательно;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ПоТиповойСхемме = тСтруктураНастроек.ПоТиповойСхемме;
		ПоТиповойСхеммеЕДРПОУВладельцаШаблона = "";
		ПоТиповойСхеммеИмяШаблона = "";
		ПоТиповойСхеммеВерсияШаблона = "";
		ПоТиповойСхеммеВидДокумента1С = "";
		ЭлементыДереваНастройки = НастройкиТиповойСхеммы.ПолучитьЭлементы();
		ЭлементыДереваНастройки.Очистить();
		Если ПоТиповойСхемме Тогда
			ПоТиповойСхеммеЕДРПОУВладельцаШаблона = тСтруктураНастроек.ПоТиповойСхеммеЕДРПОУВладельцаШаблона;
			ПоТиповойСхеммеИмяШаблона = тСтруктураНастроек.ПоТиповойСхеммеИмяШаблона;
			ПоТиповойСхеммеВерсияШаблона = тСтруктураНастроек.ПоТиповойСхеммеВерсияШаблона;
			ПоТиповойСхеммеВидДокумента1С = тСтруктураНастроек.ПоТиповойСхеммеВидДокумента1С;
			Для Каждого НастройкиТиповойСхеммы_Таблица Из тСтруктураНастроек.НастройкиТиповойСхеммы_Таблицы Цикл
				СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
				СтрокаТабличнаяЧасть.Уровень = 1;
				СтрокаТабличнаяЧасть.НомерТабличнойЧасти = НастройкиТиповойСхеммы_Таблица.НомерТаблицы;
				СтрокаТабличнаяЧасть.Имя = НастройкиТиповойСхеммы_Таблица.ИмяТаблицы;
				СтрокаТабличнаяЧасть.Описание = НастройкиТиповойСхеммы_Таблица.ОписаниеТаблицы;
				СтрокаТабличнаяЧасть.Обязательно = НастройкиТиповойСхеммы_Таблица.Обязательно;
				СтрокаТабличнаяЧасть.НастройкаНомерТабличнойЧасти = НастройкиТиповойСхеммы_Таблица.НастройкаНомерТаблицы;
				СтрокаТабличнаяЧасть.НастройкаИмя = НастройкиТиповойСхеммы_Таблица.НастройкаИмяТаблицы;
				СтрокаТабличнаяЧасть.НастройкаОписание = НастройкиТиповойСхеммы_Таблица.НастройкаОписаниеТаблицы;
				
				СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
				Для Каждого ЭлементМассиваПолей Из НастройкиТиповойСхеммы_Таблица.МассивПолей Цикл 
					СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
					СтрокаРеквизитШаблона.Уровень = 2;
					СтрокаРеквизитШаблона.Имя = ЭлементМассиваПолей.ИмяРеквизита;
					СтрокаРеквизитШаблона.Описание = ЭлементМассиваПолей.Описание;
					СтрокаРеквизитШаблона.ТипДанныхРеквизита = ЭлементМассиваПолей.Тип;
					СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = ЭлементМассиваПолей.ТипТекст;
					СтрокаРеквизитШаблона.Обязательно = ЭлементМассиваПолей.Обязательно;
					СтрокаРеквизитШаблона.НастройкаНомерТабличнойЧасти = ЭлементМассиваПолей.НастройкаНомерТаблицы;
					СтрокаРеквизитШаблона.НастройкаИмя = ЭлементМассиваПолей.НастройкаИмяРеквизита;
					СтрокаРеквизитШаблона.НастройкаОписание = ЭлементМассиваПолей.НастройкаОписание;
					СтрокаРеквизитШаблона.НастройкаТипДанныхРеквизита = ЭлементМассиваПолей.НастройкаТип;
					СтрокаРеквизитШаблона.НастройкаТипДанныхРеквизитаТекст = ЭлементМассиваПолей.НастройкаТипТекст;
					СтрокаРеквизитШаблона.НастройкаВыражение = ЭлементМассиваПолей.НастройкаВыражение;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимостьЭлементовФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	ПрименитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыборШаблонаДокумента(ДанныеВыбора, ДопПараметр) Экспорт
	Если ТипЗнч(ДанныеВыбора) = Тип("Структура") Тогда
		ТекЕДРПОУВладельца = "";
		Если ДанныеВыбора.Свойство("ЕДРПОУВладельца", ТекЕДРПОУВладельца) Тогда
			ЕДРПОУВладельцаШаблона = ТекЕДРПОУВладельца;
		КонецЕсли;
		ТекКодШаблона = "";
		Если ДанныеВыбора.Свойство("КодШаблона", ТекКодШаблона) Тогда
			ИмяШаблона = ТекКодШаблона;
		КонецЕсли;
		ТекВерсия = "";
		Если ДанныеВыбора.Свойство("Версия", ТекВерсия) Тогда
			ВерсияШаблона = ТекВерсия;
		КонецЕсли;
		//ТекНаименование = "";
		//Если ДанныеВыбора.Свойство("Наименование", ТекНаименование) Тогда
		//	Наименование = ТекНаименование;
		//КонецЕсли;
		//
		//Модифицированность = Истина;
		ПриИзмененииПараметровШаблона();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонСПлатформыПТАХ(Команда)
	ПараметрыФормы = Новый Структура("ТекЕДРПОУВладельца, ТекИмяШаблона, ТекВерсияШаблона, Организация, ДляСозданияЭлектронныхДокументов", ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, Организация, Ложь);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораШаблонаДокумента", ПараметрыФормы).ОткрытьМодально();
		ВыборШаблонаДокумента(ВыбранныеПоляОтбора, Неопределено);
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуВыбораШаблонаДокумента(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройки(Команда)
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'tbd'; en = 'tbd'") + "(*.tbd)|*.tbd";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выгрузка настроек в файл'; uk = 'Вивантаження налаштувань в файл'");
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ОповещениеПослеВыбораФайлаДляВыгрузитьНастройки(ДиалогОткрытияФайла.ВыбранныеФайлы, Новый Структура);			
		КонецЕсли;		
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПоказатьДиалогВыбораФайлов(ДиалогОткрытияФайла, "ОповещениеПослеВыбораФайлаДляВыгрузитьНастройки", ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляВыгрузитьНастройки(ВыбранныеФайлы, ДопПараметры) Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")	Тогда
		Запись = Новый ЗаписьXML;
		Запись.ОткрытьФайл(ВыбранныеФайлы[0]); 
		СериализаторXDTO.ЗаписатьXML(Запись, НастройкиТабличныйДокумент);
		Запись.Закрыть();
		Сообщить("Файл " + ВыбранныеФайлы[0] + " записан");
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'tbd'; en = 'tbd'")
	+ "(*.tbd)|*.tbd";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Загрузка настроек из файла'; uk = 'Завантаження налаштувань із файлу'");
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Чтение = Новый ЧтениеXML;
			Чтение.ОткрытьФайл(ДиалогОткрытияФайла.ПолноеИмяФайла);
			НастройкиТабличныйДокумент = СериализаторXDTO.ПрочитатьXML(Чтение);
			Чтение.Закрыть();
		КонецЕсли;		
	Иначе				
		скEDI_ОткрытиеФормБезМодальности.ПоказатьДиалогВыбораФайлов(ДиалогОткрытияФайла, "ОповещениеПослеВыбораФайлаДляЗагрузитьНастройки", ЭтаФорма); 		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляЗагрузитьНастройки(ВыбранныеФайлы, ДопПараметры)Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")	Тогда
		ОписаниеФайла = новый ОписаниеПередаваемогоФайла();
		ОписаниеФайла.Имя = ВыбранныеФайлы[0];
		ПомещаемыеФайлы = новый Массив;
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		скEDI_ОткрытиеФормБезМодальности.ВызватьМетодНачатьПомещениеФайлов(ПомещаемыеФайлы, ЭтаФорма.УникальныйИдентификатор, "ОповещениеПомещениеФайла", ЭтаФорма);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ОповещениеПомещениеФайла(ПомещенныеФайлы, ДопПараметры)Экспорт
	Если ТипЗнч(ПомещенныеФайлы) = Тип("Массив")	Тогда
		Сообщить("Файл " + ПомещенныеФайлы[0].Имя + " загружен"); 
		ТабДок = ОбработкаПереданногоФайлаНаСервере(ПомещенныеФайлы[0].Хранение, ДопПараметры);
		НастройкиТабличныйДокумент = ТабДок;
	КонецЕсли; 	
КонецПроцедуры  

&НаСервереБезКонтекста 
Функция ОбработкаПереданногоФайлаНаСервере(Знач АдресХранилища, Знач Ссылка)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);	
	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();	
	Чтение = новый ЧтениеXML;
	Чтение.ОткрытьПоток(Поток);
	НастройкиТабличныйДокумент2 = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	Чтение.Закрыть();	
	Поток.Закрыть();	
	Возврат НастройкиТабличныйДокумент2;
КонецФункции 

&НаСервере
Процедура ОбновитьНастройкиДляИспользованияТСНаСервере()
	ЭлементыДереваНастройки = НастройкиДляИспользованияТС.ПолучитьЭлементы();
	ЭлементыДереваНастройки.Очистить();
	
	Если ИмяШаблона <> "" Тогда
		Попытка
			лпПараметры = Новый Структура;
			Если ИмяШаблона <> "" Тогда
				лпПараметры.Вставить("CharCode", ИмяШаблона);
			КонецЕсли;
			Если ЕДРПОУВладельцаШаблона <> "" Тогда
				лпПараметры.Вставить("TmplOwnerCode", ЕДРПОУВладельцаШаблона);
			КонецЕсли;
			Если ИмяШаблона <> "" Тогда
				лпПараметры.Вставить("TmplVersion", ВерсияШаблона);
			КонецЕсли;
			лпПараметры.Вставить("AllFields", Истина);
			СтруктураТаблицыДокументов = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/getdocrk", лпПараметры);
			Если СтруктураТаблицыДокументов.Code <> 0 Тогда
				Сообщить(СтруктураТаблицыДокументов.Message);
			КонецЕсли;
			
			ТаблицыДокументов = Неопределено;
			СтруктураТаблицыДокументов.Свойство("Tables", ТаблицыДокументов);
			
			Если ТипЗнч(ТаблицыДокументов) = Тип("Массив") Тогда
				Если ТаблицыДокументов.Количество() >= 1 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[0];
					ШапкаДокументаПоля = Неопределено;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					
					Если ТипЗнч(ШапкаДокументаПоля) = Тип("Массив") Тогда
						СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
						СтрокаТабличнаяЧасть.Уровень = 1;
						СтрокаТабличнаяЧасть.НомерТабличнойЧасти = ШапкаДокументаСтруктура.Num;
						СтрокаТабличнаяЧасть.Имя = ШапкаДокументаСтруктура.Name;
						СтрокаТабличнаяЧасть.Описание = ШапкаДокументаСтруктура.Description;
						
						СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
						Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
							СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
							СтрокаРеквизитШаблона.Уровень = 2;
							СтрокаРеквизитШаблона.Имя = Элемент.Name;
							СтрокаРеквизитШаблона.Описание = Элемент.Description;
							СтрокаРеквизитШаблона.ТипДанныхРеквизита = Элемент.DataType;
							СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(СтрокаРеквизитШаблона.ТипДанныхРеквизита);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
					
				Если ТаблицыДокументов.Количество() >= 2 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[1];
					ШапкаДокументаПоля = Неопределено;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					
					Если ТипЗнч(ШапкаДокументаПоля) = Тип("Массив") Тогда
						СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
						СтрокаТабличнаяЧасть.Уровень = 1;
						СтрокаТабличнаяЧасть.НомерТабличнойЧасти = ШапкаДокументаСтруктура.Num;
						СтрокаТабличнаяЧасть.Имя = ШапкаДокументаСтруктура.Name;
						СтрокаТабличнаяЧасть.Описание = ШапкаДокументаСтруктура.Description;
						
						СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
						Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
							СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
							СтрокаРеквизитШаблона.Уровень = 2;
							СтрокаРеквизитШаблона.Имя = Элемент.Name;
							СтрокаРеквизитШаблона.Описание = Элемент.Description;
							СтрокаРеквизитШаблона.ТипДанныхРеквизита = Элемент.DataType;
							СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(СтрокаРеквизитШаблона.ТипДанныхРеквизита);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
					
				Если ТаблицыДокументов.Количество() >= 3 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[2];
					ШапкаДокументаПоля = Неопределено;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					
					Если ТипЗнч(ШапкаДокументаПоля) = Тип("Массив") Тогда
						СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
						СтрокаТабличнаяЧасть.Уровень = 1;
						СтрокаТабличнаяЧасть.НомерТабличнойЧасти = ШапкаДокументаСтруктура.Num;
						СтрокаТабличнаяЧасть.Имя = ШапкаДокументаСтруктура.Name;
						СтрокаТабличнаяЧасть.Описание = ШапкаДокументаСтруктура.Description;
						
						СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
						Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
							СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
							СтрокаРеквизитШаблона.Уровень = 2;
							СтрокаРеквизитШаблона.Имя = Элемент.Name;
							СтрокаРеквизитШаблона.Описание = Элемент.Description;
							СтрокаРеквизитШаблона.ТипДанныхРеквизита = Элемент.DataType;
							СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(СтрокаРеквизитШаблона.ТипДанныхРеквизита);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
					
				Если ТаблицыДокументов.Количество() >= 4 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[3];
					ШапкаДокументаПоля = Неопределено;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					
					Если ТипЗнч(ШапкаДокументаПоля) = Тип("Массив") Тогда
						СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
						СтрокаТабличнаяЧасть.Уровень = 1;
						СтрокаТабличнаяЧасть.НомерТабличнойЧасти = ШапкаДокументаСтруктура.Num;
						СтрокаТабличнаяЧасть.Имя = ШапкаДокументаСтруктура.Name;
						СтрокаТабличнаяЧасть.Описание = ШапкаДокументаСтруктура.Description;
						
						СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
						Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
							СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
							СтрокаРеквизитШаблона.Уровень = 2;
							СтрокаРеквизитШаблона.Имя = Элемент.Name;
							СтрокаРеквизитШаблона.Описание = Элемент.Description;
							СтрокаРеквизитШаблона.ТипДанныхРеквизита = Элемент.DataType;
							СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(СтрокаРеквизитШаблона.ТипДанныхРеквизита);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
					
				Если ТаблицыДокументов.Количество() >= 5 Тогда
					ШапкаДокументаСтруктура = ТаблицыДокументов[4];
					ШапкаДокументаПоля = Неопределено;
					ШапкаДокументаСтруктура.Свойство("Fields", ШапкаДокументаПоля);
					
					Если ТипЗнч(ШапкаДокументаПоля) = Тип("Массив") Тогда
						СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
						СтрокаТабличнаяЧасть.Уровень = 1;
						СтрокаТабличнаяЧасть.НомерТабличнойЧасти = ШапкаДокументаСтруктура.Num;
						СтрокаТабличнаяЧасть.Имя = ШапкаДокументаСтруктура.Name;
						СтрокаТабличнаяЧасть.Описание = ШапкаДокументаСтруктура.Description;
						
						СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
						Для Каждого Элемент Из ШапкаДокументаПоля Цикл 
							СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
							СтрокаРеквизитШаблона.Уровень = 2;
							СтрокаРеквизитШаблона.Имя = Элемент.Name;
							СтрокаРеквизитШаблона.Описание = Элемент.Description;
							СтрокаРеквизитШаблона.ТипДанныхРеквизита = Элемент.DataType;
							СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = скEDI_ОбщегоНазначения.ПолучитьНаименованиеТипаДанных(СтрокаРеквизитШаблона.ТипДанныхРеквизита);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
					

			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиДляИспользованияТС(Команда)
	ОбновитьНастройкиДляИспользованияТСНаСервере();
КонецПроцедуры

&НаСервере
Процедура НастройкиДляИспользованияТС_ЗаполнитьПолеОбязательноНаСервере()
	ЭлементыДереваНастройки = НастройкиДляИспользованияТС.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДереваНастройки Цикл
		УстановитьОбязательно = Ложь;
		ЗагружаемыеРеквизиты = Неопределено;
		ИмяТабличнойЧасти = Неопределено;
		Событие1 = Неопределено;
		Событие2 = Неопределено;
		Событие3 = Неопределено;
		Событие4 = Неопределено;
		Если Элемент.НомерТабличнойЧасти = 0 Тогда
			ЗагружаемыеРеквизиты = ТаблицаЗагружаемыхРеквизитов;
			УстановитьОбязательно = Истина;
			Событие1 = ПоискДокумента;
			Событие2 = ПриСозданииДокумента;
			Событие3 = ПередЗаписьюДокумента;
			Событие4 = ПриЗаписиДокумента;
		ИначеЕсли Элемент.НомерТабличнойЧасти = 1 Тогда
			ЗагружаемыеРеквизиты = ТаблицаЗагружаемыхРеквизитов1;
			ИмяТабличнойЧасти = ИмяТабличнойЧасти1;
			Событие1 = ПослеДобавленияСтрокиТабличнойЧасти1;
		ИначеЕсли Элемент.НомерТабличнойЧасти = 2 Тогда
			ЗагружаемыеРеквизиты = ТаблицаЗагружаемыхРеквизитов2;
			ИмяТабличнойЧасти = ИмяТабличнойЧасти2;
			Событие1 = ПослеДобавленияСтрокиТабличнойЧасти2;
		ИначеЕсли Элемент.НомерТабличнойЧасти = 3 Тогда
			ЗагружаемыеРеквизиты = ТаблицаЗагружаемыхРеквизитов3;
			ИмяТабличнойЧасти = ИмяТабличнойЧасти3;
			Событие1 = ПослеДобавленияСтрокиТабличнойЧасти3;
		ИначеЕсли Элемент.НомерТабличнойЧасти = 4 Тогда
			ЗагружаемыеРеквизиты = ТаблицаЗагружаемыхРеквизитов4;
			ИмяТабличнойЧасти = ИмяТабличнойЧасти4;
			Событие1 = ПослеДобавленияСтрокиТабличнойЧасти4;
		ИначеЕсли Элемент.НомерТабличнойЧасти = 5 Тогда
			ЗагружаемыеРеквизиты = ТаблицаЗагружаемыхРеквизитов5;
			ИмяТабличнойЧасти = ИмяТабличнойЧасти5;
			Событие1 = ПослеДобавленияСтрокиТабличнойЧасти5;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
			УстановитьОбязательно = Истина;
		КонецЕсли;
		
		ЭлементыДереваНастройки1 = Элемент.ПолучитьЭлементы();
		Для Каждого Элемент1 Из ЭлементыДереваНастройки1 Цикл
			УстановитьОбязательно1 = Ложь;
			
			ИмяРеквизитаШаблона = Элемент1.Имя;
			Если ЗначениеЗаполнено(ЗагружаемыеРеквизиты) Тогда
				Для Каждого СтрокаРеквизиты Из ЗагружаемыеРеквизиты Цикл
					Если ВРег(ИмяРеквизитаШаблона) = ВРег(СтрокаРеквизиты.ИмяРеквизитаШаблона) Тогда
						УстановитьОбязательно1 = Истина;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаРеквизиты.Выражение) Тогда
						Если Найти(СтрокаРеквизиты.Выражение, """" + ИмяРеквизитаШаблона + """") > 0 Тогда
							УстановитьОбязательно1 = Истина;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(Событие1) Тогда
						Если Найти(Событие1, """" + ИмяРеквизитаШаблона + """") > 0 Тогда
							УстановитьОбязательно1 = Истина;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(Событие2) Тогда
						Если Найти(Событие2, """" + ИмяРеквизитаШаблона + """") > 0 Тогда
							УстановитьОбязательно1 = Истина;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(Событие3) Тогда
						Если Найти(Событие3, """" + ИмяРеквизитаШаблона + """") > 0 Тогда
							УстановитьОбязательно1 = Истина;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(Событие4) Тогда
						Если Найти(Событие4, """" + ИмяРеквизитаШаблона + """") > 0 Тогда
							УстановитьОбязательно1 = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если УстановитьОбязательно1 Тогда
				Элемент1.Обязательно = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если УстановитьОбязательно Тогда
			Элемент.Обязательно = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДляИспользованияТС_ЗаполнитьПолеОбязательно(Команда)
	НастройкиДляИспользованияТС_ЗаполнитьПолеОбязательноНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТиповаяСхеммаПриИзмененииНаСервере()
	Если ТиповаяСхемма Тогда
		ОбновитьНастройкиДляИспользованияТСНаСервере();
		НастройкиДляИспользованияТС_ЗаполнитьПолеОбязательноНаСервере();
	КонецЕсли;
	УстановитьВидимостьЭлементовФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТиповаяСхеммаПриИзменении(Элемент)
	ТиповаяСхеммаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокТиповыхСхеммНаСервере(Организация, ВидДокумента1С)
	СписокТиповыхСхем = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона,
	               |	скEDI_ПравилаЗагрузки.ИмяШаблона,
	               |	скEDI_ПравилаЗагрузки.ВерсияШаблона,
	               |	скEDI_ПравилаЗагрузки.Наименование,
	               |	скEDI_ПравилаЗагрузки.Комментарий,
	               |	скEDI_ПравилаЗагрузки.Приоритет,
	               |	скEDI_ПравилаЗагрузки.ВидДокумента1С,
	               |	скEDI_ПравилаЗагрузки.Схема
	               |ИЗ
	               |	РегистрСведений.скEDI_ПравилаЗагрузки КАК скEDI_ПравилаЗагрузки
	               |ГДЕ
	               |	скEDI_ПравилаЗагрузки.Организация = &Организация
	               |	И скEDI_ПравилаЗагрузки.ВидДокумента1С = &ВидДокумента1С
	               |	И скEDI_ПравилаЗагрузки.Использование
	               |	И скEDI_ПравилаЗагрузки.ТиповаяСхемма
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПравилаЗагрузки.Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДокумента1С", ВидДокумента1С);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеСтруктура = Новый Структура;
		ЗначениеСтруктура.Вставить("ЕДРПОУВладельцаШаблона", Выборка.ЕДРПОУВладельцаШаблона);
		ЗначениеСтруктура.Вставить("ИмяШаблона", Выборка.ИмяШаблона);
		ЗначениеСтруктура.Вставить("ВерсияШаблона", Выборка.ВерсияШаблона);
		ЗначениеСтруктура.Вставить("Приоритет", Выборка.Приоритет);
		ЗначениеСтруктура.Вставить("ВидДокумента1С", Выборка.ВидДокумента1С);
		ЗначениеСтруктура.Вставить("Схема", Выборка.Схема);
		
		ТекЗаголовок = "";
		Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
			Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
				ТекЗаголовок = ТекЗаголовок + "; ";
			КонецЕсли;
			ТекЗаголовок = ТекЗаголовок + Выборка.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ЕДРПОУВладельцаШаблона) Тогда
			Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
				ТекЗаголовок = ТекЗаголовок + "; ";
			КонецЕсли;
			ТекЗаголовок = ТекЗаголовок + Выборка.ЕДРПОУВладельцаШаблона;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ИмяШаблона) Тогда
			Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
				ТекЗаголовок = ТекЗаголовок + "; ";
			КонецЕсли;
			ТекЗаголовок = ТекЗаголовок + Выборка.ИмяШаблона;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВерсияШаблона) Тогда
			Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
				ТекЗаголовок = ТекЗаголовок + "; ";
			КонецЕсли;
			ТекЗаголовок = ТекЗаголовок + Выборка.ВерсияШаблона;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
			Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
				ТекЗаголовок = ТекЗаголовок + "; ";
			КонецЕсли;
			ТекЗаголовок = ТекЗаголовок + Выборка.Комментарий;
		КонецЕсли;
		
		СписокТиповыхСхем.Добавить(Новый ФиксированнаяСтруктура(ЗначениеСтруктура), ТекЗаголовок);
	КонецЦикла;
	
	Возврат СписокТиповыхСхем;
КонецФункции

&НаКлиенте
Процедура ВыбратьТиповуюСхемму(Команда)
	СписокТиповыхСхем = ПолучитьСписокТиповыхСхеммНаСервере(Организация, ВидДокумента1С);
	Если СписокТиповыхСхем.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Типовые схеммы не настроены.'; uk = 'Типові схеми не налаштовано.'"));
		Возврат;
	КонецЕсли;
	
	ЗаголовокВыбора = НСтр("ru = 'Выбор типовой схеммы'; uk = 'Вибір типової схеми'");
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбраноеЗначение = СписокТиповыхСхем.ВыбратьЭлемент(ЗаголовокВыбора);
		ПослеВибораТиповойСхеммы(ВыбраноеЗначение);
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПоказатьВыборЭлементаСпискаЗначений(ЗаголовокВыбора, "ПослеВибораТиповойСхеммы", СписокТиповыхСхем, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ХранилищеЗначенияПолучить(Знач Значение)
	Возврат Значение.Получить();
КонецФункции

&НаКлиенте
Процедура ПослеВибораТиповойСхеммы(РезультатВыбора, ДопПараметр = Неопределено) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("ЭлементСпискаЗначений") Тогда
		РезультатВыбораЗначение = РезультатВыбора.Значение;
		
		тНастройки = ХранилищеЗначенияПолучить(РезультатВыбораЗначение.Схема);
		Если тНастройки <> Неопределено Тогда
			тИмяШаблона = Неопределено;
			тСтруктураНастроек= Неопределено;
			Если скEDI_СозданиеДокументов.ОбработатьНастройки(тНастройки, тИмяШаблона, тСтруктураНастроек) Тогда
				Если тСтруктураНастроек.ЭтоТиповаяСхемма Тогда
					ЭлементыДереваНастройки = НастройкиТиповойСхеммы.ПолучитьЭлементы();
					ЭлементыДереваНастройки.Очистить();
					
					ТаблицаШаблонаШапка = Неопределено;
					Для Каждого ТаблицаШаблона из ТаблицыШаблона Цикл
						Если ТаблицаШаблона.Номер = 0 Тогда
							ТаблицаШаблонаШапка = ТаблицаШаблона;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ТиповаяСхемма_Таблица Из тСтруктураНастроек.ТиповаяСхемма_Таблицы Цикл
						СтрокаТабличнаяЧасть = ЭлементыДереваНастройки.Добавить();
						СтрокаТабличнаяЧасть.Уровень = 1;
						СтрокаТабличнаяЧасть.НомерТабличнойЧасти = ТиповаяСхемма_Таблица.НомерТаблицы;
						СтрокаТабличнаяЧасть.Имя = ТиповаяСхемма_Таблица.ИмяТаблицы;
						СтрокаТабличнаяЧасть.Описание = ТиповаяСхемма_Таблица.ОписаниеТаблицы;
						СтрокаТабличнаяЧасть.Обязательно = ТиповаяСхемма_Таблица.Обязательно;
						
						Если СтрокаТабличнаяЧасть.НомерТабличнойЧасти = 0 Тогда
							Если ТаблицаШаблонаШапка <> Неопределено Тогда
								СтрокаТабличнаяЧасть.НастройкаНомерТабличнойЧасти = ТаблицаШаблонаШапка.Номер;
								СтрокаТабличнаяЧасть.НастройкаИмя = ТаблицаШаблонаШапка.Имя;
								СтрокаТабличнаяЧасть.НастройкаОписание = ТаблицаШаблонаШапка.Описание;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаТабличнаяЧастьЭлементы = СтрокаТабличнаяЧасть.ПолучитьЭлементы();
						Для Каждого ЭлементМассиваПолей Из ТиповаяСхемма_Таблица.МассивПолей Цикл 
							СтрокаРеквизитШаблона = СтрокаТабличнаяЧастьЭлементы.Добавить();
							СтрокаРеквизитШаблона.Уровень = 2;
							СтрокаРеквизитШаблона.Имя = ЭлементМассиваПолей.ИмяРеквизита;
							СтрокаРеквизитШаблона.Описание = ЭлементМассиваПолей.Описание;
							СтрокаРеквизитШаблона.ТипДанныхРеквизита = ЭлементМассиваПолей.Тип;
							СтрокаРеквизитШаблона.ТипДанныхРеквизитаТекст = ЭлементМассиваПолей.ТипТекст;
							СтрокаРеквизитШаблона.Обязательно = ЭлементМассиваПолей.Обязательно;
						КонецЦикла;
					КонецЦикла;
					ПоТиповойСхеммеЕДРПОУВладельцаШаблона = РезультатВыбораЗначение.ЕДРПОУВладельцаШаблона;
					ПоТиповойСхеммеИмяШаблона = РезультатВыбораЗначение.ИмяШаблона;
					ПоТиповойСхеммеВерсияШаблона = РезультатВыбораЗначение.ВерсияШаблона;
					ПоТиповойСхеммеВидДокумента1С = РезультатВыбораЗначение.ВидДокумента1С;
					
					ПоТиповойСхемме = Истина;
					
					УстановитьВидимостьЭлементовФормыНаСервере();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТиповойСхеммыНастройкаИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.НастройкиТиповойСхеммы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокВыбораНастроек = Неопределено;
	ЗаголовокВыбора = "";
	Если ТекущиеДанные.Уровень = 1 Тогда
		ЗаголовокВыбора = НСтр("ru = 'Выбор табличной части'; uk = 'Вибір табличної частини'");
		СписокВыбораНастроек = Новый СписокЗначений;
		
		Для Каждого ТаблицаШаблона из ТаблицыШаблона Цикл
			Если ТекущиеДанные.НомерТабличнойЧасти = 0 Тогда
				Если ТаблицаШаблона.Номер <> 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеСтруктура = Новый Структура;
			ЗначениеСтруктура.Вставить("ТипЗначения", "Таблица");
			ЗначениеСтруктура.Вставить("Имя", ТаблицаШаблона.Имя);
			ЗначениеСтруктура.Вставить("Описание", ТаблицаШаблона.Описание);
			ЗначениеСтруктура.Вставить("Номер", ТаблицаШаблона.Номер);
			
			ТекЗаголовок = "";
			Если ЗначениеЗаполнено(ТаблицаШаблона.Имя) Тогда
				Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
					ТекЗаголовок = ТекЗаголовок + "; ";
				КонецЕсли;
				ТекЗаголовок = ТекЗаголовок + ТаблицаШаблона.Имя;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТаблицаШаблона.Описание) Тогда
				Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
					ТекЗаголовок = ТекЗаголовок + "; ";
				КонецЕсли;
				ТекЗаголовок = ТекЗаголовок + ТаблицаШаблона.Описание;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекЗаголовок) Тогда
				Если ТаблицаШаблона.Номер = 0 Тогда
					ТекЗаголовок = НСтр("ru = '<ШАПКА>'; uk = '<ШАПКА>'");
				Иначе
					ТекЗаголовок = НСтр("ru = '<ТАБЛИЧНАЯ ЧАСТЬ> №'; uk = '<ТАБЛИЧНА ЧАСТИНА> №'") + Строка(ТаблицаШаблона.Номер);
				КонецЕсли;
			КонецЕсли;
			
			СписокВыбораНастроек.Добавить(Новый ФиксированнаяСтруктура(ЗначениеСтруктура), ТекЗаголовок);
		КонецЦикла;
	ИначеЕсли ТекущиеДанные.Уровень = 2 Тогда
		ЗаголовокВыбора = НСтр("ru = 'Выбор поля'; uk = 'Вибір поля'");
		СписокВыбораНастроек = Новый СписокЗначений;
		
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыШаблона_Таблица = Неопределено;
		РеквизитыШаблона_Шапка = Неопределено;
		НомерТаблицыРеквизитов = 0;
		Если ТекущиеДанныеРодитель.НастройкаНомерТабличнойЧасти = 0 Тогда
			РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица0;
			НомерТаблицыРеквизитов = 0;
		ИначеЕсли ТекущиеДанныеРодитель.НастройкаНомерТабличнойЧасти = 1 Тогда
			РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица1;
			РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
			НомерТаблицыРеквизитов = 1;
		ИначеЕсли ТекущиеДанныеРодитель.НастройкаНомерТабличнойЧасти = 2 Тогда
			РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица2;
			РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
			НомерТаблицыРеквизитов = 2;
		ИначеЕсли ТекущиеДанныеРодитель.НастройкаНомерТабличнойЧасти = 3 Тогда
			РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица3;
			РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
			НомерТаблицыРеквизитов = 3;
		ИначеЕсли ТекущиеДанныеРодитель.НастройкаНомерТабличнойЧасти = 4 Тогда
			РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица4;
			РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
			НомерТаблицыРеквизитов = 4;
		ИначеЕсли ТекущиеДанныеРодитель.НастройкаНомерТабличнойЧасти = 5 Тогда
			РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица5;
			РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
			НомерТаблицыРеквизитов = 5;
		КонецЕсли;
		Если РеквизитыШаблона_Таблица <> Неопределено Тогда
			Для Каждого РеквизитШаблона Из РеквизитыШаблона_Таблица Цикл
				Если РеквизитШаблона.ТипДанных <> ТекущиеДанные.ТипДанныхРеквизита Тогда
					Если РеквизитШаблона.ТипДанных = 5 и ТекущиеДанные.ТипДанныхРеквизита = 7 Тогда
						
					ИначеЕсли РеквизитШаблона.ТипДанных = 7 и ТекущиеДанные.ТипДанныхРеквизита = 5 Тогда
						
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ЗначениеСтруктура = Новый Структура;
				ЗначениеСтруктура.Вставить("ТипЗначения", "Реквизит");
				ЗначениеСтруктура.Вставить("Имя", РеквизитШаблона.Имя);
				ЗначениеСтруктура.Вставить("Описание", РеквизитШаблона.Описание);
				ЗначениеСтруктура.Вставить("НомерТабличнойЧасти", НомерТаблицыРеквизитов);
				ЗначениеСтруктура.Вставить("ТипДанныхРеквизита", РеквизитШаблона.ТипДанных);
				ЗначениеСтруктура.Вставить("ТипДанныхРеквизитаТекст", РеквизитШаблона.ТипДанныхТекст);
				
				ТекЗаголовок = "";
				Если ЗначениеЗаполнено(РеквизитШаблона.Имя) Тогда
					Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
						ТекЗаголовок = ТекЗаголовок + "; ";
					КонецЕсли;
					ТекЗаголовок = ТекЗаголовок + РеквизитШаблона.Имя;
				КонецЕсли;
				Если ЗначениеЗаполнено(РеквизитШаблона.Описание) Тогда
					Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
						ТекЗаголовок = ТекЗаголовок + "; ";
					КонецЕсли;
					ТекЗаголовок = ТекЗаголовок + РеквизитШаблона.Описание;
				КонецЕсли;
				
				СписокВыбораНастроек.Добавить(Новый ФиксированнаяСтруктура(ЗначениеСтруктура), ТекЗаголовок);
			КонецЦикла;
		КонецЕсли;
		Если РеквизитыШаблона_Шапка <> Неопределено Тогда
			Для Каждого РеквизитШаблона Из РеквизитыШаблона_Шапка Цикл
				Если РеквизитШаблона.ТипДанных <> ТекущиеДанные.ТипДанныхРеквизита Тогда
					Если РеквизитШаблона.ТипДанных = 5 и ТекущиеДанные.ТипДанныхРеквизита = 7 Тогда
						
					ИначеЕсли РеквизитШаблона.ТипДанных = 7 и ТекущиеДанные.ТипДанныхРеквизита = 5 Тогда
						
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ЗначениеСтруктура = Новый Структура;
				ЗначениеСтруктура.Вставить("ТипЗначения", "Реквизит");
				ЗначениеСтруктура.Вставить("Имя", РеквизитШаблона.Имя);
				ЗначениеСтруктура.Вставить("Описание", РеквизитШаблона.Описание);
				ЗначениеСтруктура.Вставить("НомерТабличнойЧасти", 0);
				ЗначениеСтруктура.Вставить("ТипДанныхРеквизита", РеквизитШаблона.ТипДанных);
				ЗначениеСтруктура.Вставить("ТипДанныхРеквизитаТекст", РеквизитШаблона.ТипДанныхТекст);
				
				ТекЗаголовок = "";
				Если ЗначениеЗаполнено(РеквизитШаблона.Имя) Тогда
					Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
						ТекЗаголовок = ТекЗаголовок + "; ";
					КонецЕсли;
					ТекЗаголовок = ТекЗаголовок + НСтр("ru = '<ШАПКА>.'; uk = '<ШАПКА>.'") + РеквизитШаблона.Имя;
				КонецЕсли;
				Если ЗначениеЗаполнено(РеквизитШаблона.Описание) Тогда
					Если ЗначениеЗаполнено(ТекЗаголовок) Тогда
						ТекЗаголовок = ТекЗаголовок + "; ";
					КонецЕсли;
					ТекЗаголовок = ТекЗаголовок + РеквизитШаблона.Описание;
				КонецЕсли;
				
				СписокВыбораНастроек.Добавить(Новый ФиксированнаяСтруктура(ЗначениеСтруктура), ТекЗаголовок);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СписокВыбораНастроек) Тогда
		Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
			ВыбраноеЗначение = СписокВыбораНастроек.ВыбратьЭлемент(ЗаголовокВыбора);
			ПослеВибораНастройкиТиповойСхеммы(ВыбраноеЗначение);
		Иначе
			скEDI_ОткрытиеФормБезМодальности.ПоказатьВыборЭлементаСпискаЗначений(ЗаголовокВыбора, "ПослеВибораНастройкиТиповойСхеммы", СписокВыбораНастроек, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВибораНастройкиТиповойСхеммы(РезультатВыбора, ДопПараметр = Неопределено) Экспорт
	ТекущиеДанные = Элементы.НастройкиТиповойСхеммы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыбора) = Тип("ЭлементСпискаЗначений") Тогда
		РезультатВыбораЗначение = РезультатВыбора.Значение;
		
		Если РезультатВыбораЗначение <> Неопределено Тогда
			Если РезультатВыбораЗначение.ТипЗначения = "Таблица" Тогда
				Если ТекущиеДанные.Уровень = 1 Тогда
					ТекущиеДанные.НастройкаНомерТабличнойЧасти = РезультатВыбораЗначение.Номер;
					ТекущиеДанные.НастройкаИмя = РезультатВыбораЗначение.Имя;
					ТекущиеДанные.НастройкаОписание = РезультатВыбораЗначение.Описание;
					
					ЭлементыДереваНастройки1 = ТекущиеДанные.ПолучитьЭлементы();
					Для Каждого Элемент1 Из ЭлементыДереваНастройки1 Цикл
						Если ЗначениеЗаполнено(Элемент1.Имя) Тогда
							Если Элемент1.НастройкаНомерТабличнойЧасти <> 0 Тогда
								Если Элемент1.НастройкаНомерТабличнойЧасти <> ТекущиеДанные.НастройкаНомерТабличнойЧасти Тогда
									Элемент1.НастройкаНомерТабличнойЧасти = 0;
									Элемент1.НастройкаИмя = "";
									Элемент1.НастройкаТипДанныхРеквизита = 0;
									Элемент1.НастройкаОписание = "";
									Элемент1.НастройкаТипДанныхРеквизитаТекст = "";
									Элемент1.НастройкаВыражение = "";
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли РезультатВыбораЗначение.ТипЗначения = "Реквизит" Тогда
				Если ТекущиеДанные.Уровень = 2 Тогда
					ТекущиеДанные.НастройкаНомерТабличнойЧасти = РезультатВыбораЗначение.НомерТабличнойЧасти;
					ТекущиеДанные.НастройкаИмя = РезультатВыбораЗначение.Имя;
					ТекущиеДанные.НастройкаОписание = РезультатВыбораЗначение.Описание;
					ТекущиеДанные.НастройкаТипДанныхРеквизита = РезультатВыбораЗначение.ТипДанныхРеквизита;
					ТекущиеДанные.НастройкаТипДанныхРеквизитаТекст = РезультатВыбораЗначение.ТипДанныхРеквизитаТекст;
					ТекущиеДанные.НастройкаВыражение = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТиповойСхеммыНастройкаИмяОчистка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.НастройкиТиповойСхеммы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Уровень = 1 Тогда
		ТекущиеДанные.НастройкаНомерТабличнойЧасти = 0;
		ТекущиеДанные.НастройкаИмя = "";
		ТекущиеДанные.НастройкаОписание = "";
		
		ЭлементыДереваНастройки1 = ТекущиеДанные.ПолучитьЭлементы();
		Для Каждого Элемент1 Из ЭлементыДереваНастройки1 Цикл
			Если ЗначениеЗаполнено(Элемент1.Имя) Тогда
				Элемент1.НастройкаНомерТабличнойЧасти = 0;
				Элемент1.НастройкаИмя = "";
				Элемент1.НастройкаТипДанныхРеквизита = 0;
				Элемент1.НастройкаОписание = "";
				Элемент1.НастройкаТипДанныхРеквизитаТекст = "";
				Элемент1.НастройкаВыражение = "";
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТекущиеДанные.Уровень = 2 Тогда
		ТекущиеДанные.НастройкаНомерТабличнойЧасти = 0;
		ТекущиеДанные.НастройкаИмя = "";
		ТекущиеДанные.НастройкаОписание = "";
		ТекущиеДанные.НастройкаТипДанныхРеквизита = 0;
		ТекущиеДанные.НастройкаТипДанныхРеквизитаТекст = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоТиповойСхеммеПриИзменении(Элемент)
	Если ПоТиповойСхемме Тогда
		Если ТиповаяСхемма Тогда
			Сообщить(НСтр("ru = 'Нет возможности использовать типовую схемму.'; uk = 'Нема можливості використовувати типову схему.'"));
			ПоТиповойСхемме = Ложь;
		Иначе
			
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимостьЭлементовФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиТиповойСхеммы(Вариант)
	Если ПоТиповойСхемме Тогда
		ЭлементыДереваНастройки = НастройкиТиповойСхеммы.ПолучитьЭлементы();
		Для Каждого Элемент Из ЭлементыДереваНастройки Цикл
			Если Не Элемент.Обязательно Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Элемент.НастройкаИмя) Тогда
				ТекНомерТабличнойЧасти = Элемент.НастройкаНомерТабличнойЧасти;
			Иначе
				НайденаяТаблицаШаблона = Неопределено;
				
				Если Элемент.НомерТабличнойЧасти = 0 Тогда
					Для Каждого ТаблицаШаблона из ТаблицыШаблона Цикл
						Если ТаблицаШаблона.Номер = 0 Тогда
							НайденаяТаблицаШаблона = ТаблицаШаблона;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Каждого ТаблицаШаблона из ТаблицыШаблона Цикл
						Если Вариант = "Имя" Тогда
							Если ВРег(ТаблицаШаблона.Имя) = ВРег(Элемент.Имя) Тогда
								НайденаяТаблицаШаблона = ТаблицаШаблона;
								Прервать;
							КонецЕсли;
						ИначеЕсли Вариант = "Описание" Тогда
							Если ВРег(ТаблицаШаблона.Описание) = ВРег(Элемент.Описание) Тогда
								НайденаяТаблицаШаблона = ТаблицаШаблона;
								Прервать;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НайденаяТаблицаШаблона = Неопределено Тогда
					Продолжить;
				Иначе
					Элемент.НастройкаНомерТабличнойЧасти = НайденаяТаблицаШаблона.Номер;
					Элемент.НастройкаИмя = НайденаяТаблицаШаблона.Имя;
					Элемент.НастройкаОписание = НайденаяТаблицаШаблона.Описание;
					ТекНомерТабличнойЧасти = Элемент.НастройкаНомерТабличнойЧасти;
				КонецЕсли;
			КонецЕсли;
			
			РеквизитыШаблона_Таблица = Неопределено;
			РеквизитыШаблона_Шапка = Неопределено;
			НомерТаблицыРеквизитов = 0;
			
			Если ТекНомерТабличнойЧасти = 0 Тогда
				РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица0;
				НомерТаблицыРеквизитов = 0;
			ИначеЕсли ТекНомерТабличнойЧасти = 1 Тогда
				РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица1;
				РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
				НомерТаблицыРеквизитов = 1;
			ИначеЕсли ТекНомерТабличнойЧасти = 2 Тогда
				РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица2;
				РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
				НомерТаблицыРеквизитов = 2;
			ИначеЕсли ТекНомерТабличнойЧасти = 3 Тогда
				РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица3;
				РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
				НомерТаблицыРеквизитов = 3;
			ИначеЕсли ТекНомерТабличнойЧасти = 4 Тогда
				РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица4;
				РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
				НомерТаблицыРеквизитов = 4;
			ИначеЕсли ТекНомерТабличнойЧасти = 5 Тогда
				РеквизитыШаблона_Таблица = РеквизитыШаблона_Таблица5;
				РеквизитыШаблона_Шапка = РеквизитыШаблона_Таблица0;
				НомерТаблицыРеквизитов = 5;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЭлементыДереваНастройки1 = Элемент.ПолучитьЭлементы();
			Для Каждого Элемент1 Из ЭлементыДереваНастройки1 Цикл
				Если Не Элемент1.Обязательно Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент1.НастройкаИмя) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого РеквизитШаблона Из РеквизитыШаблона_Таблица Цикл
					Если РеквизитШаблона.ТипДанных = Элемент1.ТипДанныхРеквизита Тогда
						Если Вариант = "Имя" Тогда
							Если ВРег(РеквизитШаблона.Имя) = ВРег(Элемент1.Имя) Тогда
								Элемент1.НастройкаНомерТабличнойЧасти = НомерТаблицыРеквизитов;
								Элемент1.НастройкаИмя = РеквизитШаблона.Имя;
								Элемент1.НастройкаОписание = РеквизитШаблона.Описание;
								Элемент1.НастройкаТипДанныхРеквизита = РеквизитШаблона.ТипДанных;
								Элемент1.НастройкаТипДанныхРеквизитаТекст = РеквизитШаблона.ТипДанныхТекст;
								Прервать;
							КонецЕсли;
						ИначеЕсли Вариант = "Описание" Тогда
							Если ВРег(РеквизитШаблона.Описание) = ВРег(Элемент1.Описание) Тогда
								Элемент1.НастройкаНомерТабличнойЧасти = НомерТаблицыРеквизитов;
								Элемент1.НастройкаИмя = РеквизитШаблона.Имя;
								Элемент1.НастройкаОписание = РеквизитШаблона.Описание;
								Элемент1.НастройкаТипДанныхРеквизита = РеквизитШаблона.ТипДанных;
								Элемент1.НастройкаТипДанныхРеквизитаТекст = РеквизитШаблона.ТипДанныхТекст;
								Прервать;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиТиповойСхеммыЗаполнитьПоИмени(Команда)
	УстановитьНастройкиТиповойСхеммы("Имя");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиТиповойСхеммыЗаполнитьПоОписанию(Команда)
	УстановитьНастройкиТиповойСхеммы("Описание");
КонецПроцедуры

&НаКлиенте
Процедура НайтиНастройкиТиповойСхеммыНеЗаполнено(Команда)
	Если ПоТиповойСхемме Тогда
		НезаполненыйЭлемент = Неопределено;
		ЭлементыДереваНастройки = НастройкиТиповойСхеммы.ПолучитьЭлементы();
		Для Каждого Элемент Из ЭлементыДереваНастройки Цикл
			Если Не Элемент.Обязательно Тогда
				Продолжить;
			КонецЕсли;
			
			Если не ЗначениеЗаполнено(Элемент.НастройкаИмя) Тогда
				НезаполненыйЭлемент = Элемент;
				Прервать;
			КонецЕсли;
			
			ЭлементыДереваНастройки1 = Элемент.ПолучитьЭлементы();
			Для Каждого Элемент1 Из ЭлементыДереваНастройки1 Цикл
				Если Не Элемент1.Обязательно Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Элемент1.НастройкаИмя) Тогда
					НезаполненыйЭлемент = Элемент1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НезаполненыйЭлемент <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НезаполненыйЭлемент = Неопределено Тогда
			Сообщить(НСтр("ru = 'Все обязательные элементы настройки заполнены.'; uk = 'Всі обов''язкові елементи налаштувань заповнені.'"));
		Иначе
			Элементы.НастройкиТиповойСхеммы.ТекущаяСтрока = НезаполненыйЭлемент;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТиповойСхеммыНастройкаВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.НастройкиТиповойСхеммы.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Уровень = 2 Тогда
			ФормаРедактированияВыражения = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастроекСозданияДокументов_РедактированиеВыражения", ,ЭтаФорма);
			
			ФормаРедактированияВыражения.НомерТаблицы = -1;
			ФормаРедактированияВыражения.ЗаполнитьПодсказку();
			ПолеТекстовогоДокумента = ФормаРедактированияВыражения.ПолеТекстовогоДокумента;
			ПолеТекстовогоДокумента.УстановитьТекст(ТекДанные.НастройкаВыражение);
			
			ФормаРедактированияВыражения.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
