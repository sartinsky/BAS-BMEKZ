
&НаСервереБезКонтекста
Процедура ПроверитьСвязьСПровайдеромНаСервере(пСервер, пПорт, пВерсия, пЕстьСвязьСДО, пЕстьСвязьДФС, пЕстьСвязьДФСРК, пКонфигурация)
	Результат = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/version", Null, , , пСервер, пПорт);
	Если Результат.Code = 0 Тогда
		пВерсия = Результат.Version;
	Иначе
		пВерсия = "?.?.?.?";
		Сообщить(Результат.Message);
	КонецЕсли;
	
	Результат = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/checksdo", Null, , , пСервер, пПорт);
	Если Результат.Code = 0 Тогда
		пЕстьСвязьСДО = Истина;
	Иначе
		пЕстьСвязьСДО = Ложь;
		Сообщить(Результат.Message);
	КонецЕсли;
	
	Результат = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/checkdfs", Null, , , пСервер, пПорт);
	Если Результат.Code = 0 Тогда
		пЕстьСвязьДФС = Истина;
	Иначе
		пЕстьСвязьДФС = Ложь;
		Сообщить(Результат.Message);
	КонецЕсли;
	
	Результат = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/checkdfsrk", Null, , , пСервер, пПорт);
	Если Результат.Code = 0 Тогда
		пЕстьСвязьДФСРК = Истина;
	Иначе
		пЕстьСвязьДФСРК = Ложь;
		Сообщить(Результат.Message);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСвязьСПровайдером(Команда)
	Конфигурация = Неопределено;
	ПроверитьСвязьСПровайдеромНаСервере(СерверEDI, Число(ПортEDI), Версия, ЕстьСвязьСДО, ЕстьСвязьДФС, ЕстьСвязьДФСРК, Конфигурация);
	ОбновитьКонфигурациюEDI(ПолучитьКонфигурациюEDIНаСервере(СерверEDI, Число(ПортEDI)), Истина);
	
	Элементы.ГруппаРезультатПроверки.Видимость = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СерверEDI = Константы.скEDI_СерверEDIПровайдера.Получить();
	ПортEDI   = Формат(Константы.скEDI_ПортEDIПровайдера.Получить(), "ЧГ=0");
	//ОбновитьКонфигурациюEDI(ПолучитьКонфигурациюEDIНаСервере(СерверEDI, Число(ПортEDI)));
	Элементы.ГруппаРезультатПроверки.Видимость = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрименитьНаСервере(пСервер, пПорт)
	Константы.скEDI_СерверEDIПровайдера.Установить(пСервер);
	Константы.скEDI_ПортEDIПровайдера.Установить(Число(пПорт));
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	ПрименитьНаСервере(СерверEDI, ПортEDI);
	Закрыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонфигурациюEDIНаСервере(пСервер, пПорт)
	Результат = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/getconfig", Null, , , пСервер, пПорт);
	Если Результат.Code = 0 Тогда
		Возврат Результат.Config;
	Иначе
		Сообщить(Результат.Message);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура УстановитьНастройкиСтрокиКонфигурацииEDI(ИмяНастройки, Значение, СтрокаКонфигурации)
	СтрокаКонфигурации.Имя = ИмяНастройки;
	СтрокаКонфигурации.Значение = Значение;
	СтрокаКонфигурации.ТолькоПросмотр = Истина;
	СтрокаКонфигурации.ОтображатьВсегда = Ложь;
	Если ВРег(ИмяНастройки) = ВРег("LogDir") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Путь к папке с протоколом работы сервиса'; uk = 'Шлях до директорії з протоколом роботи сервісу'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("LogLevel") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Уровень логирования: ERROR, WARNING, DEBUG, TRACE, OFF'; uk = 'Рівень логування: ERROR, DEBUG, TRACE, OFF'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
		СтрокаКонфигурации.Список.Добавить("OFF", "OFF - " + НСтр("ru = 'Выключено'; uk = 'Вимкнено'"));
		СтрокаКонфигурации.Список.Добавить("DEBUG", "DEBUG - " + НСтр("ru = 'Детально'; uk = 'Детально'"));
		СтрокаКонфигурации.Список.Добавить("TRACE", "TRACE - " + НСтр("ru = 'Детально'; uk = 'Детально'"));
		СтрокаКонфигурации.Список.Добавить("ERROR", "ERROR - " + НСтр("ru = 'Ошибки'; uk = 'Помилки'"));
		СтрокаКонфигурации.Список.Добавить("WARNING", "WARNING - " + НСтр("ru = 'Предупреждения'; uk = 'Попередження'"));
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("LogPrefix") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Префикс логирования'; uk = 'Префікс логування'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("LicenseDir") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Путь к папке с лицензиями'; uk = 'Шлях до директорії з ліцензіями'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("ServerHost") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Адрес сервера, где находится API'; uk = 'Адреса сервера, де знаходиться API'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("ServerPort") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Порт для доступа к API'; uk = 'Порт для доступу до API'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("ServerCertificate") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Путь к сертификату шифрования соединения'; uk = 'Шлях до сертифікату шифрування з’єднання'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("WebProxyUseDefault") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'true/false, использовать настройки прокси сервера по умолчанию'; uk = 'true/false, використовувати налаштування проксі сервера за замовчуванням'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("WebProxyHost") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Адрес'; uk = 'Адреса'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("WebProxyPort") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Порт'; uk = 'Порт'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("WebProxyUser") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Логин'; uk = 'Логін'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("WebProxyPassword") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Пароль'; uk = 'Пароль'");
		СтрокаКонфигурации.ТолькоПросмотр = Ложь;
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("SdoEdrpou") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'ЕДПРОУ СДО, настройки по умолчанию'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("SdoAddr") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Адрес СДО, настройки по умолчанию'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("SdoCertificate") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Сертификат платформы ПТАХ, настройки по умолчанию'; uk = 'Сертифікат платформи ПТАХ, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("SdoKey") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Секретный ключ платформы ПТАХ, настройки по умолчанию'; uk = 'Секретний ключ платформи ПТАХ, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("SdoPassword") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Пароль платформы ПТАХ, настройки по умолчанию'; uk = 'Пароль платформи ПТАХ, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("CertsCacheDir") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Кеш для хранения сертификатов контрагентов, настройки по умолчанию'; uk = 'Кеш для зберігання сертифікатів контрагентів, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("CertsCacheRefreshInterval") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Время жизни кеша, настройки по умолчанию'; uk = 'Час життя кешу, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("DfsAddr") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Адрес ГФС, настройки по умолчанию'; uk = 'Адреса ДПС, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("DfsCertificate") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Сертификат для отправки в ГФС, настройки по умолчанию'; uk = 'Сертифікат для відправки в ДПС, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("DfsEmail") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'e-mail ГФС, настройки по умолчанию'; uk = 'e-mail ДПС, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("DfsrkAddr") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Адрес ГФС для обмена РК, настройки по умолчанию'; uk = 'Адрес ДПС для обміну РК, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("DfsrkCertificate") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Сертификат для отправки в ГФС для обмена РК, настройки по умолчанию'; uk = 'Сертифікат для відправки в ДПС для обміну Дод.2, налаштування за замовчуванням'");
	ИначеЕсли ВРег(ИмяНастройки) = ВРег("useDocsSync") Тогда
		СтрокаКонфигурации.Описание = Нстр("ru = 'Режим синхронизации'; uk = 'Режим синхронизації'");
		СтрокаКонфигурации.ОтображатьВсегда = Истина;
	Иначе
		СтрокаКонфигурации.Описание = ИмяНастройки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонфигурациюEDI(КонфигурацияСтруктура, ТолькоДоступныеДляИзменения)
	КонфигурацияEDIТекущиеЗначения.Очистить();
	КонфигурацияEDI.Очистить();
	Если КонфигурацияСтруктура <> Неопределено Тогда
		Для Каждого КлючИЗначение Из КонфигурацияСтруктура Цикл
			УстановитьНастройкиСтрокиКонфигурацииEDI(КлючИЗначение.Ключ, КлючИЗначение.Значение, КонфигурацияEDIТекущиеЗначения.Добавить());
		КонецЦикла;
	КонецЕсли;
	Для Каждого СтрокаКонфигурации из КонфигурацияEDIТекущиеЗначения Цикл
		Если не СтрокаКонфигурации.ТолькоПросмотр или СтрокаКонфигурации.ОтображатьВсегда или не ТолькоДоступныеДляИзменения Тогда
			НоваяСтрока = КонфигурацияEDI.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонфигурации, , "Список");
			Для Каждого ЗначениеСписка Из СтрокаКонфигурации.Список Цикл
				НоваяСтрока.Список.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьКонфигурациюEDI(Команда)
	ОбновитьКонфигурациюEDI(ПолучитьКонфигурациюEDIНаСервере(СерверEDI, Число(ПортEDI)), Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьКонфигурациюEDIНаСервере(ПараметрыКонфигурации, пСервер, пПорт)
	Результат = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/setconfig", ПараметрыКонфигурации, , , пСервер, пПорт);
	Если Результат.Code = 0 Тогда
		Возврат Результат.Config;
	Иначе
		Сообщить(Результат.Message);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СохранитьКонфигурациюEDI(Команда)
	лПараметрыКонфигурации = Новый Структура;
	Для Каждого Строка Из КонфигурацияEDI Цикл
		Если Не Строка.ТолькоПросмотр Тогда
			ЗначениеИзменено = Ложь;
			ТекущиеЗначения = КонфигурацияEDIТекущиеЗначения.НайтиСтроки(Новый Структура("Имя", Строка.Имя));
			Для Каждого ТекущееЗначение из ТекущиеЗначения Цикл
				Если ТекущееЗначение.Значение <> Строка.Значение Тогда
					ЗначениеИзменено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеИзменено Тогда
				лПараметрыКонфигурации.Вставить(Строка.Имя, Строка.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если лПараметрыКонфигурации.Количество() > 0 Тогда
		лПараметры = Новый Структура;
		лПараметры.Вставить("Config", лПараметрыКонфигурации);
		ОбновитьКонфигурациюEDI(СохранитьКонфигурациюEDIНаСервере(лПараметры, СерверEDI, Число(ПортEDI)), Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонфигурацияEDIПередНачаломИзменения(Элемент, Отказ)
	пТекущиеДанные = Элемент.ТекущиеДанные;
	пТекущийЭлемент = Элемент.ТекущийЭлемент;
	Если пТекущийЭлемент <> Неопределено Тогда
		пТекущийЭлемент.РежимВыбораИзСписка = Ложь;
		СписокВыбора = пТекущийЭлемент.СписокВыбора;
		СписокВыбора.Очистить();
	КонецЕсли;
	Если пТекущиеДанные.ТолькоПросмотр Тогда
		Отказ = Истина;
	ИначеЕсли пТекущиеДанные.Список.Количество() > 0 Тогда
		Если пТекущийЭлемент <> Неопределено Тогда
			пТекущийЭлемент.РежимВыбораИзСписка = Истина;
			СписокВыбора = пТекущийЭлемент.СписокВыбора;
			Для Каждого ЗначениеСписка Из пТекущиеДанные.Список Цикл
				СписокВыбора.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
