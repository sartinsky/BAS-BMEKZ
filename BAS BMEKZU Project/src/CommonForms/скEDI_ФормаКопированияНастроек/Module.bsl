
&НаСервере
Процедура ЗаполнитьИсточникиНастроекНаСервере()
	ИсточникСоответствиеВидовЭлектронныхИУчетныхДокументов.Очистить();
	ИсточникПравилаВыгрузки.Очистить();
	ИсточникПравилаЗагрузки.Очистить();
	
	Если ЗначениеЗаполнено(ИсточникОрганизация) и ЗначениеЗаполнено(ИсточникВидЭлектронногоДокумента)  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидЭлектронногоДокумента,
		               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидДокумента1С,
		               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.Приоритет КАК Приоритет,
		               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.Использование
		               |ИЗ
		               |	РегистрСведений.скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов КАК скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов
		               |ГДЕ
		               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
		               |	И (скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.Использование
		               |			ИЛИ &ЗагружатьНеиспользуемыеНастройки)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Приоритет УБЫВ";
		Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ИсточникВидЭлектронногоДокумента);
		Запрос.УстановитьПараметр("ЗагружатьНеиспользуемыеНастройки", ИсточникЗагружатьНеиспользуемыеНастройки);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			НоваяСтрока = ИсточникСоответствиеВидовЭлектронныхИУчетныхДокументов.Добавить();
			НоваяСтрока.Загружать = Истина;
			НоваяСтрока.ВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
			НоваяСтрока.ВидДокумента1С = ВыборкаРезультатаЗапроса.ВидДокумента1С;
			НоваяСтрока.Приоритет = ВыборкаРезультатаЗапроса.Приоритет;
			НоваяСтрока.Использование = ВыборкаРезультатаЗапроса.Использование;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента,
		               |	скEDI_ПравилаВыгрузки.ВидДокумента1С,
		               |	скEDI_ПравилаВыгрузки.Приоритет КАК Приоритет,
		               |	скEDI_ПравилаВыгрузки.Использование,
		               |	скEDI_ПравилаВыгрузки.Наименование,
		               |	скEDI_ПравилаВыгрузки.ЕДРПОУВладельцаШаблона,
		               |	скEDI_ПравилаВыгрузки.ИмяШаблона,
		               |	скEDI_ПравилаВыгрузки.ВерсияШаблона,
		               |	скEDI_ПравилаВыгрузки.ЭтоПредопределенный
		               |ИЗ
		               |	РегистрСведений.скEDI_ПравилаВыгрузки КАК скEDI_ПравилаВыгрузки
		               |ГДЕ
		               |	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
		               |	И (скEDI_ПравилаВыгрузки.Использование
		               |			ИЛИ &ЗагружатьНеиспользуемыеНастройки)
		               |	И (НЕ скEDI_ПравилаВыгрузки.ЭтоПредопределенный
		               |			ИЛИ &ЗагружатьПредопределенныеНастройки)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Приоритет УБЫВ";
		Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ИсточникВидЭлектронногоДокумента);
		Запрос.УстановитьПараметр("ЗагружатьПредопределенныеНастройки", ИсточникЗагружатьПредопределенныеНастройки);
		Запрос.УстановитьПараметр("ЗагружатьНеиспользуемыеНастройки", ИсточникЗагружатьНеиспользуемыеНастройки);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			НоваяСтрока = ИсточникПравилаВыгрузки.Добавить();
			НоваяСтрока.Загружать = Истина;
			НоваяСтрока.ВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
			НоваяСтрока.ВидДокумента1С = ВыборкаРезультатаЗапроса.ВидДокумента1С;
			НоваяСтрока.Приоритет = ВыборкаРезультатаЗапроса.Приоритет;
			НоваяСтрока.Наименование = ВыборкаРезультатаЗапроса.Наименование;
			НоваяСтрока.ЕДРПОУВладельцаШаблона = ВыборкаРезультатаЗапроса.ЕДРПОУВладельцаШаблона;
			НоваяСтрока.ИмяШаблона = ВыборкаРезультатаЗапроса.ИмяШаблона;
			НоваяСтрока.ЭтоПредопределенный = ВыборкаРезультатаЗапроса.ЭтоПредопределенный;
			НоваяСтрока.Использование = ВыборкаРезультатаЗапроса.Использование;
		КонецЦикла;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ПравилаЗагрузки.Организация КАК Организация,
		               |	скEDI_ПравилаЗагрузки.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		               |	скEDI_ПравилаЗагрузки.ВидДокумента1С КАК ВидДокумента1С,
		               |	скEDI_ПравилаЗагрузки.Приоритет КАК Приоритет,
		               |	скEDI_ПравилаЗагрузки.Использование КАК Использование,
		               |	скEDI_ПравилаЗагрузки.Наименование КАК Наименование,
		               |	скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона КАК ЕДРПОУВладельцаШаблона,
		               |	скEDI_ПравилаЗагрузки.ИмяШаблона КАК ИмяШаблона,
		               |	скEDI_ПравилаЗагрузки.ВерсияШаблона КАК ВерсияШаблона,
		               |	скEDI_ПравилаЗагрузки.ЭтоПредопределенный КАК ЭтоПредопределенный,
		               |	скEDI_ПравилаЗагрузки.ТиповаяСхемма КАК ТиповаяСхемма
		               |ИЗ
		               |	РегистрСведений.скEDI_ПравилаЗагрузки КАК скEDI_ПравилаЗагрузки
		               |ГДЕ
		               |	скEDI_ПравилаЗагрузки.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
		               |	И (скEDI_ПравилаЗагрузки.Использование
		               |			ИЛИ &ЗагружатьНеиспользуемыеНастройки)
		               |	И (НЕ скEDI_ПравилаЗагрузки.ЭтоПредопределенный
		               |			ИЛИ &ЗагружатьПредопределенныеНастройки)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Приоритет УБЫВ";
		Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ИсточникВидЭлектронногоДокумента);
		Запрос.УстановитьПараметр("ЗагружатьПредопределенныеНастройки", ИсточникЗагружатьПредопределенныеНастройки);
		Запрос.УстановитьПараметр("ЗагружатьНеиспользуемыеНастройки", ИсточникЗагружатьНеиспользуемыеНастройки);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			НоваяСтрока = ИсточникПравилаЗагрузки.Добавить();
			НоваяСтрока.Загружать = Истина;
			НоваяСтрока.Организация = ВыборкаРезультатаЗапроса.Организация;
			НоваяСтрока.Приоритет = ВыборкаРезультатаЗапроса.Приоритет;
			НоваяСтрока.Наименование = ВыборкаРезультатаЗапроса.Наименование;
			НоваяСтрока.ЕДРПОУВладельцаШаблона = ВыборкаРезультатаЗапроса.ЕДРПОУВладельцаШаблона;
			НоваяСтрока.ИмяШаблона = ВыборкаРезультатаЗапроса.ИмяШаблона;
			НоваяСтрока.ВерсияШаблона = ВыборкаРезультатаЗапроса.ВерсияШаблона;
			НоваяСтрока.ЭтоПредопределенный = ВыборкаРезультатаЗапроса.ЭтоПредопределенный;
			НоваяСтрока.ТиповаяСхемма = ВыборкаРезультатаЗапроса.ТиповаяСхемма;
			НоваяСтрока.Использование = ВыборкаРезультатаЗапроса.Использование;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриемникНастроекНаСервере()
	Приемник.Очистить();
	
	Если ЗначениеЗаполнено(ИсточникОрганизация) и ЗначениеЗаполнено(ИсточникВидЭлектронногоДокумента)  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_Организации.Код КАК ЕДРПОУ,
		               |	скEDI_Организации.Ссылка КАК Организация,
		               |	скEDI_ВидыЭлектронныхДокументов.Ссылка КАК ВидЭлектронногоДокумента
		               |ИЗ
		               |	Справочник.скEDI_Организации КАК скEDI_Организации
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
		               |		ПО скEDI_Организации.Ссылка = скEDI_ВидыЭлектронныхДокументов.Владелец
		               |			И (скEDI_ВидыЭлектронныхДокументов.Наименование = &НаименованиеВидаЭлектронногоДокумента)
		               |ГДЕ
		               |	скEDI_Организации.Ссылка <> &Организация";
		Запрос.УстановитьПараметр("Организация", ИсточникОрганизация);
		Запрос.УстановитьПараметр("НаименованиеВидаЭлектронногоДокумента", ИсточникВидЭлектронногоДокумента.Наименование);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			НоваяСтрокаПриемник = Приемник.Добавить();
			НоваяСтрокаПриемник.Загружать = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента<>Null;
			НоваяСтрокаПриемник.ЕДРПОУ = ВыборкаРезультатаЗапроса.ЕДРПОУ;
			НоваяСтрокаПриемник.Организация = ВыборкаРезультатаЗапроса.Организация;
			НоваяСтрокаПриемник.ВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиИПриемникНастроекНаСервере()
	ЗаполнитьИсточникиНастроекНаСервере();
	ЗаполнитьПриемникНастроекНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем лОрганизация, лВидЭлектронногоДокумента;
	
	ИсточникЗагружатьПредопределенныеНастройки = Истина;
	ПриемникУдалятьСуществующиеНастройки = Истина;
	
	Если Параметры.Свойство("ИсточникВидЭлектронногоДокумента", лВидЭлектронногоДокумента) Тогда
		ИсточникВидЭлектронногоДокумента = лВидЭлектронногоДокумента;
	КонецЕсли;
	Если Параметры.Свойство("ИсточникОрганизация", лОрганизация) Тогда
		ИсточникОрганизация = лОрганизация;
	ИначеЕсли ЗначениеЗаполнено(ИсточникВидЭлектронногоДокумента) Тогда
		ИсточникОрганизация = ИсточникВидЭлектронногоДокумента.Владелец;
	КонецЕсли;
	ЗаполнитьИсточникиИПриемникНастроекНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОрганизацияПриИзменении(Элемент)
	ЗаполнитьИсточникиИПриемникНастроекНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникВидЭлектронногоДокументаПриИзменении(Элемент)
	ЗаполнитьИсточникиИПриемникНастроекНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЗагружатьПредопределенныеНастройкиПриИзменении(Элемент)
	ЗаполнитьИсточникиНастроекНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЗагружатьНеиспользуемыеНастройкиПриИзменении(Элемент)
	ЗаполнитьИсточникиНастроекНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиНаСервере()
	Для Каждого СтрПриемник из Приемник Цикл
		Если не СтрПриемник.Загружать Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрПриемник.ВидЭлектронногоДокумента = ПредопределенноеЗначение("Справочник.скEDI_ВидыЭлектронныхДокументов.ПустаяСсылка") Тогда
			ВидЄлектронногоДокументаОбъект = Справочники.скEDI_ВидыЭлектронныхДокументов.СоздатьЭлемент();
			ВидЄлектронногоДокументаОбъект.Владелец = СтрПриемник.Организация;
			ВидЄлектронногоДокументаОбъект.Наименование = ИсточникВидЭлектронногоДокумента.Наименование;
			ВидЄлектронногоДокументаОбъект.ЭтоПредопределенный = ИсточникВидЭлектронногоДокумента.ЭтоПредопределенный;
			ВидЄлектронногоДокументаОбъект.ТипДокумента = ИсточникВидЭлектронногоДокумента.ТипДокумента;
			ВидЄлектронногоДокументаОбъект.ТипПериодаСчетчика = ИсточникВидЭлектронногоДокумента.ТипПериодаСчетчика;
			ВидЄлектронногоДокументаОбъект.ВариантОпределенияСуммыПоДокументу = ИсточникВидЭлектронногоДокумента.ВариантОпределенияСуммыПоДокументу;
			ВидЄлектронногоДокументаОбъект.Записать();
			СтрПриемник.ВидЭлектронногоДокумента = ВидЄлектронногоДокументаОбъект.Ссылка;
		КонецЕсли;
		
		
		//скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов
		СоответствиеВидовЭлектронныхИУчетныхДокументовНаборЗаписей = РегистрыСведений.скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.СоздатьНаборЗаписей();
		СоответствиеВидовЭлектронныхИУчетныхДокументовНаборЗаписей.Отбор.ВидЭлектронногоДокумента.Установить(СтрПриемник.ВидЭлектронногоДокумента);
		Если ПриемникУдалятьСуществующиеНастройки Тогда
			СоответствиеВидовЭлектронныхИУчетныхДокументовНаборЗаписей.Записать(Истина);
			ТекПриоритет = 1;
		Иначе
			ТекПриоритет = 0;
			СоответствиеВидовЭлектронныхИУчетныхДокументовНаборЗаписей.Прочитать();
			Для Каждого СтрокаНабораЗаписей Из СоответствиеВидовЭлектронныхИУчетныхДокументовНаборЗаписей Цикл
				СтрокаНабораЗаписей.Использование = Ложь;
				Если СтрокаНабораЗаписей.Приоритет > ТекПриоритет Тогда
					ТекПриоритет = СтрокаНабораЗаписей.Приоритет;
				КонецЕсли;
			КонецЦикла;
			СоответствиеВидовЭлектронныхИУчетныхДокументовНаборЗаписей.Записать(Истина);
			ТекПриоритет = ТекПриоритет + 1;
		КонецЕсли;
		
		ИндексСтроки = ИсточникСоответствиеВидовЭлектронныхИУчетныхДокументов.Количество()-1;
		Пока ИндексСтроки >= 0 Цикл
			ТекСтрока = ИсточникСоответствиеВидовЭлектронныхИУчетныхДокументов.Получить(ИндексСтроки);
			Если ТекСтрока.Загружать Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидЭлектронногоДокумента,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидДокумента1С,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.Приоритет,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.Использование,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолжныБытьТовары,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолжныБытьУслуги,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолженБытьОтраженВРегУчете,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолженБытьОтраженВУпрУчете,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВхИсх,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДатаС,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДатаПо,
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ТекстЗапроса
				               |ИЗ
				               |	РегистрСведений.скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов КАК скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов
				               |ГДЕ
				               |	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
				               |	И скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидДокумента1С = &ВидДокумента1С
				               |	И скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.Приоритет = &Приоритет";
				Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ТекСтрока.ВидЭлектронногоДокумента);
				Запрос.УстановитьПараметр("ВидДокумента1С", ТекСтрока.ВидДокумента1С);
				Запрос.УстановитьПараметр("Приоритет", ТекСтрока.Приоритет);
				ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
				Если ВыборкаРезультатаЗапроса.Следующий() Тогда
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.СоздатьМенеджерЗаписи();
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ВидЭлектронногоДокумента = СтрПриемник.ВидЭлектронногоДокумента;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ВидДокумента1С = ВыборкаРезультатаЗапроса.ВидДокумента1С;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.Приоритет = ТекПриоритет;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.Использование = ВыборкаРезультатаЗапроса.Использование;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ДолжныБытьТовары = ВыборкаРезультатаЗапроса.ДолжныБытьТовары;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ДолжныБытьУслуги = ВыборкаРезультатаЗапроса.ДолжныБытьУслуги;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ДолженБытьОтраженВРегУчете = ВыборкаРезультатаЗапроса.ДолженБытьОтраженВРегУчете;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ДолженБытьОтраженВУпрУчете = ВыборкаРезультатаЗапроса.ДолженБытьОтраженВУпрУчете;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ВхИсх = ВыборкаРезультатаЗапроса.ВхИсх;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ДатаС = ВыборкаРезультатаЗапроса.ДатаС;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ДатаПо = ВыборкаРезультатаЗапроса.ДатаПо;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.ТекстЗапроса = ВыборкаРезультатаЗапроса.ТекстЗапроса;
					СоответствиеВидовЭлектронныхИУчетныхДокументовМенеджерЗаписи.Записать(Истина);
					ТекПриоритет = ТекПриоритет + 1;
				КонецЕсли;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
		
		//скEDI_ПравилаВыгрузки
		ПравилаВыгрузкиНаборЗаписей = РегистрыСведений.скEDI_ПравилаВыгрузки.СоздатьНаборЗаписей();
		ПравилаВыгрузкиНаборЗаписей.Отбор.ВидЭлектронногоДокумента.Установить(СтрПриемник.ВидЭлектронногоДокумента);
		Если ПриемникУдалятьСуществующиеНастройки Тогда
			ПравилаВыгрузкиНаборЗаписей.Записать(Истина);
			ТекПриоритет = 1;
		Иначе
			ТекПриоритет = 0;
			ПравилаВыгрузкиНаборЗаписей.Прочитать();
			Для Каждого СтрокаНабораЗаписей Из ПравилаВыгрузкиНаборЗаписей Цикл
				СтрокаНабораЗаписей.Использование = Ложь;
				Если СтрокаНабораЗаписей.Приоритет > ТекПриоритет Тогда
					ТекПриоритет = СтрокаНабораЗаписей.Приоритет;
				КонецЕсли;
			КонецЦикла;
			ПравилаВыгрузкиНаборЗаписей.Записать(Истина);
			ТекПриоритет = ТекПриоритет + 1;
		КонецЕсли;
		
		ИндексСтроки = ИсточникПравилаВыгрузки.Количество()-1;
		Пока ИндексСтроки >= 0 Цикл
			ТекСтрока = ИсточникПравилаВыгрузки.Получить(ИндексСтроки);
			Если ТекСтрока.Загружать Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента,
				               |	скEDI_ПравилаВыгрузки.ВидДокумента1С,
				               |	скEDI_ПравилаВыгрузки.Приоритет,
				               |	скEDI_ПравилаВыгрузки.Наименование,
				               |	скEDI_ПравилаВыгрузки.ЕДРПОУВладельцаШаблона,
				               |	скEDI_ПравилаВыгрузки.ИмяШаблона,
				               |	скEDI_ПравилаВыгрузки.ВерсияШаблона,
				               |	скEDI_ПравилаВыгрузки.Схема0,
				               |	скEDI_ПравилаВыгрузки.Схема1,
				               |	скEDI_ПравилаВыгрузки.Схема2,
				               |	скEDI_ПравилаВыгрузки.Схема3,
				               |	скEDI_ПравилаВыгрузки.Схема4,
				               |	скEDI_ПравилаВыгрузки.Схема5,
				               |	скEDI_ПравилаВыгрузки.Использование,
				               |	скEDI_ПравилаВыгрузки.Комментарий,
				               |	скEDI_ПравилаВыгрузки.ЭтоПредопределенный
				               |ИЗ
				               |	РегистрСведений.скEDI_ПравилаВыгрузки КАК скEDI_ПравилаВыгрузки
				               |ГДЕ
				               |	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
				               |	И скEDI_ПравилаВыгрузки.ВидДокумента1С = &ВидДокумента1С
				               |	И скEDI_ПравилаВыгрузки.Приоритет = &Приоритет";
				Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ТекСтрока.ВидЭлектронногоДокумента);
				Запрос.УстановитьПараметр("ВидДокумента1С", ТекСтрока.ВидДокумента1С);
				Запрос.УстановитьПараметр("Приоритет", ТекСтрока.Приоритет);
				ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
				Если ВыборкаРезультатаЗапроса.Следующий() Тогда
					ПравилаВыгрузкиМенеджерЗаписи = РегистрыСведений.скEDI_ПравилаВыгрузки.СоздатьМенеджерЗаписи();
					ПравилаВыгрузкиМенеджерЗаписи.ВидЭлектронногоДокумента = СтрПриемник.ВидЭлектронногоДокумента;
					ПравилаВыгрузкиМенеджерЗаписи.ВидДокумента1С = ВыборкаРезультатаЗапроса.ВидДокумента1С;
					ПравилаВыгрузкиМенеджерЗаписи.Приоритет = ТекПриоритет;
					ПравилаВыгрузкиМенеджерЗаписи.Наименование = ВыборкаРезультатаЗапроса.Наименование;
					ПравилаВыгрузкиМенеджерЗаписи.ЕДРПОУВладельцаШаблона = ВыборкаРезультатаЗапроса.ЕДРПОУВладельцаШаблона;
					ПравилаВыгрузкиМенеджерЗаписи.ИмяШаблона = ВыборкаРезультатаЗапроса.ИмяШаблона;
					ПравилаВыгрузкиМенеджерЗаписи.ВерсияШаблона = ВыборкаРезультатаЗапроса.ВерсияШаблона;
					ПравилаВыгрузкиМенеджерЗаписи.Схема0 = ВыборкаРезультатаЗапроса.Схема0;
					ПравилаВыгрузкиМенеджерЗаписи.Схема1 = ВыборкаРезультатаЗапроса.Схема1;
					ПравилаВыгрузкиМенеджерЗаписи.Схема2 = ВыборкаРезультатаЗапроса.Схема2;
					ПравилаВыгрузкиМенеджерЗаписи.Схема3 = ВыборкаРезультатаЗапроса.Схема3;
					ПравилаВыгрузкиМенеджерЗаписи.Схема4 = ВыборкаРезультатаЗапроса.Схема4;
					ПравилаВыгрузкиМенеджерЗаписи.Схема5 = ВыборкаРезультатаЗапроса.Схема5;
					ПравилаВыгрузкиМенеджерЗаписи.Использование = ВыборкаРезультатаЗапроса.Использование;
					ПравилаВыгрузкиМенеджерЗаписи.Комментарий = ВыборкаРезультатаЗапроса.Комментарий;
					ПравилаВыгрузкиМенеджерЗаписи.ЭтоПредопределенный = ВыборкаРезультатаЗапроса.ЭтоПредопределенный;
					ПравилаВыгрузкиМенеджерЗаписи.Записать(Истина);
					ТекПриоритет = ТекПриоритет + 1;
				КонецЕсли;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
		
		//скEDI_ПравилаЗагрузки
		ИндексСтроки = ИсточникПравилаЗагрузки.Количество()-1;
		Пока ИндексСтроки >= 0 Цикл
			ТекСтрока = ИсточникПравилаЗагрузки.Получить(ИндексСтроки);
			Если ТекСтрока.Загружать Тогда
				ПравилаЗагрузкиНаборЗаписей = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьНаборЗаписей();
				ПравилаЗагрузкиНаборЗаписей.Отбор.Организация.Установить(СтрПриемник.Организация);
				ПравилаЗагрузкиНаборЗаписей.Отбор.ЕДРПОУВладельцаШаблона.Установить(ТекСтрока.ЕДРПОУВладельцаШаблона);
				ПравилаЗагрузкиНаборЗаписей.Отбор.ИмяШаблона.Установить(ТекСтрока.ИмяШаблона);
				ПравилаЗагрузкиНаборЗаписей.Отбор.ВерсияШаблона.Установить(ТекСтрока.ВерсияШаблона);
				Если ПриемникУдалятьСуществующиеНастройки Тогда
					ПравилаЗагрузкиНаборЗаписей.Записать(Истина);
					ТекПриоритет = 1;
				Иначе
					ТекПриоритет = 0;
					ПравилаЗагрузкиНаборЗаписей.Прочитать();
					Для Каждого СтрокаНабораЗаписей Из ПравилаВыгрузкиНаборЗаписей Цикл
						СтрокаНабораЗаписей.Использование = Ложь;
						Если СтрокаНабораЗаписей.Приоритет > ТекПриоритет Тогда
							ТекПриоритет = СтрокаНабораЗаписей.Приоритет;
						КонецЕсли;
					КонецЦикла;
					ПравилаЗагрузкиНаборЗаписей.Записать(Истина);
					ТекПриоритет = ТекПриоритет + 1;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	скEDI_ПравилаЗагрузки.Организация КАК Организация,
				               |	скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона КАК ЕДРПОУВладельцаШаблона,
				               |	скEDI_ПравилаЗагрузки.ИмяШаблона КАК ИмяШаблона,
				               |	скEDI_ПравилаЗагрузки.ВерсияШаблона КАК ВерсияШаблона,
				               |	скEDI_ПравилаЗагрузки.Приоритет КАК Приоритет,
				               |	скEDI_ПравилаЗагрузки.Наименование КАК Наименование,
				               |	скEDI_ПравилаЗагрузки.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
				               |	скEDI_ПравилаЗагрузки.Схема КАК Схема,
				               |	скEDI_ПравилаЗагрузки.Использование КАК Использование,
				               |	скEDI_ПравилаЗагрузки.ВидДокумента1С КАК ВидДокумента1С,
				               |	скEDI_ПравилаЗагрузки.Комментарий КАК Комментарий,
				               |	скEDI_ПравилаЗагрузки.НеИскатьАвтоматически КАК НеИскатьАвтоматически,
				               |	скEDI_ПравилаЗагрузки.ЭтоПредопределенный КАК ЭтоПредопределенный,
				               |	скEDI_ПравилаЗагрузки.ТиповаяСхемма КАК ТиповаяСхемма
				               |ИЗ
				               |	РегистрСведений.скEDI_ПравилаЗагрузки КАК скEDI_ПравилаЗагрузки
				               |ГДЕ
				               |	скEDI_ПравилаЗагрузки.Организация = &Организация
				               |	И скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона = &ЕДРПОУВладельцаШаблона
				               |	И скEDI_ПравилаЗагрузки.ИмяШаблона = &ИмяШаблона
				               |	И скEDI_ПравилаЗагрузки.ВерсияШаблона = &ВерсияШаблона
				               |	И скEDI_ПравилаЗагрузки.Приоритет = &Приоритет";
				Запрос.УстановитьПараметр("Организация", ТекСтрока.Организация);
				Запрос.УстановитьПараметр("ЕДРПОУВладельцаШаблона", ТекСтрока.ЕДРПОУВладельцаШаблона);
				Запрос.УстановитьПараметр("ИмяШаблона", ТекСтрока.ИмяШаблона);
				Запрос.УстановитьПараметр("ВерсияШаблона", ТекСтрока.ВерсияШаблона);
				Запрос.УстановитьПараметр("Приоритет", ТекСтрока.Приоритет);
				ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
				Если ВыборкаРезультатаЗапроса.Следующий() Тогда
					ПравилаЗагрузкиМенеджерЗаписи = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьМенеджерЗаписи();
					ПравилаЗагрузкиМенеджерЗаписи.Организация = СтрПриемник.Организация;
					ПравилаЗагрузкиМенеджерЗаписи.ЕДРПОУВладельцаШаблона = ВыборкаРезультатаЗапроса.ЕДРПОУВладельцаШаблона;
					ПравилаЗагрузкиМенеджерЗаписи.ИмяШаблона = ВыборкаРезультатаЗапроса.ИмяШаблона;
					ПравилаЗагрузкиМенеджерЗаписи.ВерсияШаблона = ВыборкаРезультатаЗапроса.ВерсияШаблона;
					ПравилаЗагрузкиМенеджерЗаписи.Приоритет = ТекПриоритет;
					ПравилаЗагрузкиМенеджерЗаписи.Наименование = ВыборкаРезультатаЗапроса.Наименование;
					ПравилаЗагрузкиМенеджерЗаписи.ВидЭлектронногоДокумента = СтрПриемник.ВидЭлектронногоДокумента;
					ПравилаЗагрузкиМенеджерЗаписи.Схема = ВыборкаРезультатаЗапроса.Схема;
					ПравилаЗагрузкиМенеджерЗаписи.ВерсияШаблона = ВыборкаРезультатаЗапроса.ВерсияШаблона;
					ПравилаЗагрузкиМенеджерЗаписи.Использование = ВыборкаРезультатаЗапроса.Использование;
					ПравилаЗагрузкиМенеджерЗаписи.ВидДокумента1С = ВыборкаРезультатаЗапроса.ВидДокумента1С;
					ПравилаЗагрузкиМенеджерЗаписи.Комментарий = ВыборкаРезультатаЗапроса.Комментарий;
					ПравилаЗагрузкиМенеджерЗаписи.НеИскатьАвтоматически = ВыборкаРезультатаЗапроса.НеИскатьАвтоматически;
					ПравилаЗагрузкиМенеджерЗаписи.ЭтоПредопределенный = ВыборкаРезультатаЗапроса.ЭтоПредопределенный;
					ПравилаЗагрузкиМенеджерЗаписи.ТиповаяСхемма = ВыборкаРезультатаЗапроса.ТиповаяСхемма;
					ПравилаЗагрузкиМенеджерЗаписи.Записать(Истина);
					ТекПриоритет = ТекПриоритет + 1;
				КонецЕсли;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		Если Вопрос(НСтр("ru = 'Копировать настройки?'; uk = 'Копіювати налаштування?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
			ЗагрузитьНастройкиНаСервере();
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(НСтр("ru = 'Копирование настроек выполнено'; uk = 'Копіювання налаштувань виконано'"));
		КонецЕсли;	
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ЗагрузитьНастройкиЗавершение", ЭтаФорма,, НСтр("ru = 'Копировать настройки?'; uk = 'Копіювати налаштування?'"), РежимДиалогаВопрос.ДаНет);		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗагрузитьНастройкиНаСервере();
		скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(НСтр("ru = 'Копирование настроек выполнено'; uk = 'Копіювання налаштувань виконано'"));
	КонецЕсли;	
КонецПроцедуры

