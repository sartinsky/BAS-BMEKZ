#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Остатки.Период                        КАК Период,
	|	Остатки.Регистратор                   КАК Регистратор,
	|	Остатки.АналитикаУчетаКультуры   	  КАК АналитикаУчетаКультуры,
	|	Остатки.Организация                   КАК Организация,
	|
	|	Остатки.Вес            				  КАК Вес,
	|	Остатки.Количество         		      КАК Количество,
	|	Остатки.ЗачетныйВес        			  КАК ЗачетныйВес,
	|	Остатки.УбыльВесаПриСушке       	  КАК УбыльВесаПриСушке,
	|	Остатки.УбыльВесаПоЗачистке 		  КАК УбыльВесаПоЗачистке,
	|	Остатки.ЗачетныйВесДляКонтроля        КАК ЗачетныйВесДляКонтроля
	|ПОМЕСТИТЬ ОстаткиКультурПередЗаписью
	|ИЗ
	|	РегистрНакопления.СМС_ОстаткиПартий КАК Остатки
	|ГДЕ
	|	Остатки.Регистратор = &Регистратор
	|");
	
	//СтруктураВременныеТаблицы = ДополнительныеСвойства.Вставить("ДляПроведения", СтруктураВременныеТаблицы);
	//
	//Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	//Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	//
	//Запрос.Выполнить();

КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК МЕСЯЦ,
	|	Таблица.Организация                  КАК Организация,
	|	Таблица.Регистратор                  КАК Документ
	|ИЗ
	|	(ВЫБРАТЬ
	|	Остатки.Период                        КАК Период,
	|	Остатки.Регистратор                   КАК Регистратор,
	|	Остатки.АналитикаУчетаКультуры   	  КАК АналитикаУчетаКультуры,
	|	Остатки.Организация                   КАК Организация,
	|
	|	Остатки.Вес            				  КАК Вес,
	|	Остатки.Количество         		      КАК Количество,
	|	Остатки.ЗачетныйВес        			  КАК ЗачетныйВес,
	|	Остатки.УбыльВесаПриСушке       	  КАК УбыльВесаПриСушке,
	|	Остатки.УбыльВесаПоЗачистке 		  КАК УбыльВесаПоЗачистке,
	|	Остатки.ЗачетныйВесДляКонтроля        КАК ЗачетныйВесДляКонтроля
	|	ИЗ
	|		РегистрНакопления.СМС_ОстаткиПартий КАК Остатки
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Себестоимость.Период                        КАК Период,
	|		Себестоимость.Регистратор                   КАК Регистратор,
	|		Себестоимость.АналитикаУчетаКультуры    	КАК АналитикаУчетаКультуры,
	|		Себестоимость.Организация                   КАК Организация,
	|
	|		-Остатки.Вес            				    КАК Вес,
	|		-Остатки.Количество         		        КАК Количество,
	|		-Остатки.ЗачетныйВес        			    КАК ЗачетныйВес,
	|		-Остатки.УбыльВесаПриСушке       	 	    КАК УбыльВесаПриСушке,
	|		-Остатки.УбыльВесаПоЗачистке 		   	    КАК УбыльВесаПоЗачистке,
	|		-Остатки.ЗачетныйВесДляКонтроля        	    КАК ЗачетныйВесДляКонтроля
	|	ИЗ
	|		РегистрНакопления.СМС_ОстаткиПартий КАК Остатки
	|	ГДЕ
	|		Себестоимость.Регистратор = &Регистратор
	|	) КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ),
	|	Таблица.Период,
	|	Таблица.Регистратор,
	|	Таблица.АналитикаУчетаКультуры,
	|	Таблица.Организация,
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.Вес) <> 0
	|	ИЛИ СУММА(Таблица.Количество) <> 0
	|	ИЛИ СУММА(Таблица.ЗачетныйВес) <> 0
	|	ИЛИ СУММА(Таблица.УбыльВесаПриСушке) <> 0
	|	ИЛИ СУММА(Таблица.УбыльВесаПоЗачистке) <> 0
	|	ИЛИ СУММА(Таблица.ЗачетныйВесДляКонтроля) <> 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиКультурПередЗаписью
	|");
	
	//СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	//
	//Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	//Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	
	//РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
