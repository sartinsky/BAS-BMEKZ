
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	КонецЕсли;
	
	Элементы.ВедущиеВидыРасчетаВидРасчета.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления");
	
	ВыполнитьЧтениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЧтениеНаСервере()
	
	УстановитьИнформациюПоСпособуРасчета(ЭтаФорма);
	УстановитьДоступностьСпособаОтражения(ЭтаФорма);
	УстановитьНадписьНалогиИВзносы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПриИзменении(Элемент)
	
	УстановитьИнформациюПоСпособуРасчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаБазовыхНачисленийПриИзменении(Элемент)
	
	УстановитьДоступностьКоличестваМесяцевБазовогоПериода(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтратегияОтраженияВУчетеПриИзменении(Элемент)
	
	УстановитьДоступностьСпособаОтражения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходНДФЛПриИзменении(Элемент)
		
	УстановитьНадписьНалогиИВзносы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЕСВПриИзменении(Элемент)
		
	УстановитьНадписьНалогиИВзносы(ЭтаФорма);
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВедущиеВидыРасчета

&НаКлиенте
Процедура ВедущиеВидыРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, Объект.ВедущиеВидыРасчета);
	
	Для Каждого Значение Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		ОбработкаВыбранногоНачисления(Значение, Объект.ВедущиеВидыРасчета, "ВедущиеВидыРасчета");
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БазовыеВидыРасчета

&НаКлиенте
Процедура БазовыеВидыРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, Объект.БазовыеВидыРасчета);
	
	Для Каждого Значение Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		ОбработкаВыбранногоНачисления(Значение, Объект.БазовыеВидыРасчета, "БазовыеВидыРасчета");
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборВедущих(Команда)
	
	МассивВидовРасчета = ЗарплатаКадрыКлиентСервер.ВидыРасчетаКоллекции(Объект.ВедущиеВидыРасчета);
	ПараметрыФормы = Новый Структура("МассивВидовРасчета", МассивВидовРасчета);
	ОткрытьФорму("ОбщаяФорма.ПодборВидовРасчета", ПараметрыФормы, Элементы.ВедущиеВидыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборБазовых(Команда)
	
	МассивВидовРасчета = ЗарплатаКадрыКлиентСервер.ВидыРасчетаКоллекции(Объект.БазовыеВидыРасчета);
	ПараметрыФормы = Новый Структура("МассивВидовРасчета", МассивВидовРасчета);
	ОткрытьФорму("ОбщаяФорма.ПодборВидовРасчета", ПараметрыФормы, Элементы.БазовыеВидыРасчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура НастройкаПараметровВидаРасчета(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРасчетаБазы(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.РасчетБазы.Доступность = 
	 (Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.Процентом")
	 ИЛИ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты")
	 ИЛИ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ИндексацияСоциальныхНачислений") 
	 ИЛИ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоМЗП")); 
		
	УстановитьДоступностьКоличестваМесяцевБазовогоПериода(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКоличестваМесяцевБазовогоПериода(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДоступностьГруппы = Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.Процентом");
	
	Элементы.ПериодРасчетаБазыГруппа.Доступность = ДоступностьГруппы;
	Если НЕ ДоступностьГруппы И Объект.ПериодРасчетаБазовыхНачислений <> ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц") Тогда
		Объект.ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц");
	КонецЕсли;
	
	ДоступностьВвода = Объект.ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев");
		
	Элементы.КоличествоМесяцевБазовогоПериода.Доступность = ДоступностьВвода;
	Элементы.КоличествоМесяцевБазовогоПериодаПодпись.Доступность = ДоступностьВвода;
	Элементы.КоличествоМесяцевБазовогоПериода.АвтоОтметкаНеЗаполненного = ДоступностьВвода;
	Элементы.КоличествоМесяцевБазовогоПериода.ОтметкаНеЗаполненного = ДоступностьВвода;
	
	Если ДоступностьВвода Тогда
		Возврат;
	КонецЕсли;
	
	// Если длительность недоступна, заполняем в соответствии с предопределенным значением
	КоличествоМесяцевБазовогоПериода = Новый Соответствие;
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц"), 1);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц"), 1);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал"), 3);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал"), 3);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод"), 12);
	КоличествоМесяцевБазовогоПериода.Вставить(ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод"), 12);
	
	КоличествоМесяцев = КоличествоМесяцевБазовогоПериода[Объект.ПериодРасчетаБазовыхНачислений];
	Если КоличествоМесяцев <> Неопределено 
		И Объект.КоличествоМесяцевБазовогоПериода <> КоличествоМесяцев Тогда
		Объект.КоличествоМесяцевБазовогоПериода = КоличествоМесяцев;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПропорцииВремени(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПропорцияВремени.Видимость = 
	 (Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты")
	 ИЛИ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоМЗП")); 
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИнформациюПоСпособуРасчета(Форма)
	
	УстановитьДоступностьРасчетаБазы(Форма);
	УстановитьВидимостьПропорцииВремени(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСпособаОтражения(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДоступностьВвода = Объект.СтратегияОтраженияВУчете <> ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачислений.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях");
		
	Элементы.СпособОтраженияВБухучете.Доступность = ДоступностьВвода;
	Элементы.СпособОтраженияВБухучете.АвтоОтметкаНеЗаполненного = ДоступностьВвода;
	Элементы.СпособОтраженияВБухучете.ОтметкаНеЗаполненного = ДоступностьВвода;
	
	Если ДоступностьВвода Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СпособОтраженияВБухучете) Тогда
		Объект.СпособОтраженияВБухучете = ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачислений.ПустаяСсылка");;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьНалогиИВзносы(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТекстНадписи = "";
	
	Если ЗначениеЗаполнено(Объект.ДоходНДФЛ) Тогда
		
		ТекстНадписи = ТекстНадписи +  НСтр("ru='Облагается НДФЛ ';uk='Оподатковується ПДФО '")+"("""+ДоходНаименованиеНаСервере(Объект.ДоходНДФЛ)+""")" + Символы.ПС;
	Иначе
		ТекстНадписи = ТекстНадписи +  НСтр("ru='Не учитывается для НДФЛ ';uk='Не враховується для ПДФО '") + Символы.ПС;
	КонецЕсли;
	
	Если Объект.ВидЕСВ = ПредопределенноеЗначение("Перечисление.ВидыЕСВ.НеУчитывается") Тогда
		ТекстНадписи = ТекстНадписи +  НСтр("ru='Не учитывается для ЕСВ ';uk='Не враховується для ЄСВ '");
	Иначе
		ТекстНадписи = ТекстНадписи +  НСтр("ru='Облагается ЕСВ ';uk='Обкладається ЄСВ '")+"("""+Строка(Объект.ВидЕСВ)+""")";
	КонецЕсли;
	
	Элементы.НадписьНалогиИВзносы.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбранногоНачисления(Значение, ТаблицаВидовРасчета, ИмяТаблицы)
	
	Если ТаблицаВидовРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Значение)).Количество() = 0 Тогда
		ТаблицаВидовРасчета.Добавить().ВидРасчета = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВыбранныхВидовРасчета(УдаленныеВидыРасчета, ТаблицаВидовРасчета)
	
	Для Каждого Значение Из УдаленныеВидыРасчета Цикл
		СтрокиДляУдаления = ТаблицаВидовРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Значение));
		Для Каждого ТекСтрока Из СтрокиДляУдаления Цикл 
			ТаблицаВидовРасчета.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияНачисленияИлиНеоплаченногоВремениПриИзменении(Элемент)
	
	
	ТекстВопроса = НСтр("ru='Данные будут изменены. Заполнить по шаблону?';uk='Дані будуть змінені. Заповнити за шаблоном?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("КатегорияНачисленияИлиНеоплаченногоВремениПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияНачисленияИлиНеоплаченногоВремениПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Отказ = Ложь;
    Если Ответ = КодВозвратаДиалога.Нет Или Ответ = КодВозвратаДиалога.Отмена Тогда
        Отказ = Истина;
    КонецЕсли;
    
    Если Не Отказ Тогда
        КатегорияНачисленияИлиНеоплаченногоВремениПриИзмененииНаСервере();
		УстановитьИнформациюПоСпособуРасчета(ЭтаФорма);
		
    КонецЕсли

КонецПроцедуры
	
&НаСервере
Процедура КатегорияНачисленияИлиНеоплаченногоВремениПриИзмененииНаСервере()
	
	ИмяМакета = "МакетШаблонаЗаполненияВидаРасчета";
	МакетXML =  ПланыВидовРасчета.Начисления.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	ТаблицаДанныхЗаполнения = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетXML).Данные;
	Индекс = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Индекс(Объект.КатегорияНачисленияИлиНеоплаченногоВремени);
	Категория =  Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления[Индекс].Имя;
	СтрокаТаблицыДанныхЗаполнения = ТаблицаДанныхЗаполнения.Найти(Категория,"КатегорияНачисленияИлиНеоплаченногоВремени");
	Если СтрокаТаблицыДанныхЗаполнения <> Неопределено Тогда
		Если СтрокаТаблицыДанныхЗаполнения.ВидЕСВ <> "" Тогда
			ВидЕСВ = Перечисления.ВидыЕСВ[СтрокаТаблицыДанныхЗаполнения.ВидЕСВ];
			Если ВидЕСВ <> Неопределено Тогда
				Объект.ВидЕСВ = ВидЕСВ
			КонецЕсли;	
		КонецЕсли;
		Если СтрокаТаблицыДанныхЗаполнения.ДоходНДФЛ <> "" Тогда
			ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ[СтрокаТаблицыДанныхЗаполнения.ДоходНДФЛ];    
			Объект.ДоходНДФЛ = ДоходНДФЛ;
		Иначе
			Объект.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.ПустаяСсылка()
		КонецЕсли;
		Объект.ЗачетНормыВремени = ?(СтрокаТаблицыДанныхЗаполнения.ЗачетНормыВремени = "Истина",Истина,Ложь);
		Объект.ЗачетОтработанногоВремени = ?(СтрокаТаблицыДанныхЗаполнения.ЗачетОтработанногоВремени = "Истина",Истина,Ложь);
		Если СтрокаТаблицыДанныхЗаполнения.СпособРасчета <> "" Тогда
			СпособРасчета = Перечисления.СпособыРасчетаНачислений[СтрокаТаблицыДанныхЗаполнения.СпособРасчета];
			Если СпособРасчета <> Неопределено Тогда
				Объект.СпособРасчета = СпособРасчета
			КонецЕсли	
		Иначе
			Объект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПустаяСсылка()
		КонецЕсли;
		Если СтрокаТаблицыДанныхЗаполнения.СпособОтраженияВБухучете <> "" Тогда
			СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете[СтрокаТаблицыДанныхЗаполнения.СпособОтраженияВБухучете];    
			Если СпособОтраженияВБухучете <> Неопределено Тогда
				Объект.СпособОтраженияВБухучете = СпособОтраженияВБухучете
			КонецЕсли	
		Иначе
			Объект.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка()
		КонецЕсли;
		Если СтрокаТаблицыДанныхЗаполнения.СтратегияОтраженияВУчете <> "" Тогда
			СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений[СтрокаТаблицыДанныхЗаполнения.СтратегияОтраженияВУчете];
			Если СтратегияОтраженияВУчете <> Неопределено Тогда
				Объект.СтратегияОтраженияВУчете = СтратегияОтраженияВУчете
			КонецЕсли	
		Иначе	
			Объект.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений.ПустаяСсылка()
		КонецЕсли;
		Если СтрокаТаблицыДанныхЗаполнения.СчетУчета <> "" Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицыДанныхЗаполнения.СчетУчета);
			Если СчетУчета <> Неопределено Тогда
				Объект.СчетУчета = СчетУчета
			КонецЕсли
		Иначе
			Объект.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		Если СтрокаТаблицыДанныхЗаполнения.Отчет1ПВПоказателиВидовОплатыТруда <> "" Тогда
			Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций[СтрокаТаблицыДанныхЗаполнения.Отчет1ПВПоказателиВидовОплатыТруда]; 
			Если Отчет1ПВПоказателиВидовОплатыТруда <> "" Тогда
				Объект.Отчет1ПВПоказателиВидовОплатыТруда = Отчет1ПВПоказателиВидовОплатыТруда;	
			КонецЕсли
		Иначе	
			Объект.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка() 
		КонецЕсли;
		Если СтрокаТаблицыДанныхЗаполнения.Отчет3ПВВидИспользованияРабочегоВремени <> "" Тогда
			Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций[СтрокаТаблицыДанныхЗаполнения.Отчет3ПВВидИспользованияРабочегоВремени];  
			Если Отчет3ПВВидИспользованияРабочегоВремени <> "" Тогда
				Объект.Отчет3ПВВидИспользованияРабочегоВремени = Отчет3ПВВидИспользованияРабочегоВремени;	
			КонецЕсли
		Иначе	
			Объект.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка() 
		КонецЕсли;
		Если СтрокаТаблицыДанныхЗаполнения.ВидНачисленияДляТиповыхОтчетов <> "" Тогда
			ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов[СтрокаТаблицыДанныхЗаполнения.ВидНачисленияДляТиповыхОтчетов];
			Если ВидНачисленияДляТиповыхОтчетов <> Неопределено Тогда
				Объект.ВидНачисленияДляТиповыхОтчетов = ВидНачисленияДляТиповыхОтчетов
			КонецЕсли
		Иначе
			Объект.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ПустаяСсылка()
		КонецЕсли;
		Если СтрокаТаблицыДанныхЗаполнения.ВидПропорцииВремени <> "" Тогда
			ВидПропорцииВремени = Перечисления.ВидыПропорцииВремени[СтрокаТаблицыДанныхЗаполнения.ВидПропорцииВремени];
			Если ВидПропорцииВремени <> Неопределено Тогда
				Объект.ВидПропорцииВремени = ВидПропорцииВремени
			КонецЕсли
		Иначе
			Объект.ВидПропорцииВремени = Перечисления.ВидыПропорцииВремени.ПоДням;
		КонецЕсли;

	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоходНаименованиеНаСервере(ДоходНДФЛ)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоходНДФЛ,"Наименование")
КонецФункции	
