#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		Объект.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
		Объект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Процентом;
	КонецЕсли;
	
	Элементы.ВедущиеВидыРасчетаВидРасчета.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ИНАГРО_Начисления");
	
	ВыполнитьЧтениеНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ВыполнитьЧтениеНаСервере(ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СсылкаТекущего = ТекущийОбъект.Ссылка;
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		СсылкаТекущего = ПланыВидовРасчета.ИНАГРО_Начисления.ПолучитьСсылку();
		ТекущийОбъект.УстановитьСсылкуНового(СсылкаТекущего);
	КонецЕсли;
	
	ИНАГРО_ПроведениеРасчетов.ПроверитьНастройкуВидаРасчета(ТекущийОбъект, СсылкаТекущего, Отказ);
	ПроверитьКатегориюВидаРасчета(ТекущийОбъект, Отказ);
	
	// Таблицы ведомых и вытесняемых видов расчета редактируются в форме, 
	// нужно внести в них изменения, а затем записать единым пакетом.
	ПакетВидовРасчета = Новый Соответствие;
	// Добавляем текущий объект
	ПакетВидовРасчета.Вставить(СсылкаТекущего, ТекущийОбъект);
	
	ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ПакетВидовРасчета, СсылкаТекущего, СписокЗависимыеНачисления, "БазовыеВидыРасчета");
	
	// Выполняем дозаполнение
	ИНАГРО_РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(ПакетВидовРасчета);
	
	// Исключаем текущий объект, т.к. он записывается контроллером формы.
	ПакетВидовРасчета.Удалить(СсылкаТекущего);
	
	// Добавляем зависимые удержания.
	ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ПакетВидовРасчета, СсылкаТекущего, СписокЗависимыеУдержания, "БазовыеВидыРасчета", "ПланВидовРасчета.ИНАГРО_Удержания");
	
	// Добавляем зависимые взносы.
	ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ПакетВидовРасчета, СсылкаТекущего, СписокЗависимыеВзносы, "БазовыеВидыРасчета", "ПланВидовРасчета.ИНАГРО_ВзносыВФонды");
	
	// Добавляем зависимые средние.
	ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ПакетВидовРасчета, СсылкаТекущего, СписокЗависимыеСреднийЗаработок, "БазовыеВидыРасчета", "ПланВидовРасчета.ИНАГРО_СреднийЗаработок");
	// Записываем пакет, не обновляя настройки, так как редактируемый в форме вид расчета пока не записан.
	ИНАГРО_РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВводФормулыРасчета" Тогда
		
		УстановитьПараметрыВидаРасчета(Параметр);
	
		ОбработатьИзменениеФормулыСпособаРасчета();
		УстановитьДоступность(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПремииПриИзменении(Элемент)
	
	ОпределитьДоступностьРеквизитов();
	
	Если Объект.ВидПремии = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПремии.ГодоваяПремия") Тогда
		Объект.ЧислоМесяцев = 12;
		Объект.КатегорияРасчета = ПредопределенноеЗначение("Перечисление.КатегорииРасчетов.Первичное");
	ИначеЕсли Объект.ВидПремии = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПремии.Премия") 
		ИЛИ Объект.ВидПремии = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПремии.ПремияПропорционально") Тогда
		Объект.ЧислоМесяцев = 1;
		Объект.КатегорияРасчета = ПредопределенноеЗначение("Перечисление.КатегорииРасчетов.Первичное");
	ИначеЕсли Объект.ВидПремии = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПремии.ПремияЗаТекущийМесяц")
		ИЛИ Объект.ВидПремии = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПремии.ПремияПропорциональноЗаТекущийМесяц") Тогда
		Объект.ЧислоМесяцев = 1;
		Объект.КатегорияРасчета = ПредопределенноеЗначение("Перечисление.КатегорииРасчетов.ЗависимоеПервогоУровня");
	Иначе
		Объект.ЧислоМесяцев = 0;
		Объект.КатегорияРасчета = ПредопределенноеЗначение("Перечисление.КатегорииРасчетов.Первичное");
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПриИзменении(Элемент)
	
	ДоступностьИзмененияФормулы = НЕ Объект.Предопределенный И Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПроизвольнаяФормула");
	Элементы.ИзменитьФормулу.Доступность = ДоступностьИзмененияФормулы;

	Если ПредыдущийСпособРасчета = Объект.СпособРасчета Тогда
		Возврат;
	КонецЕсли;
	
	
	СпособРасчетаПредставление = ВизуализироватьФормулуРасчета();
	
	ОбработатьИзменениеФормулыСпособаРасчета();
	
	ОбработатьИзменениеКатегорииНачисленияНаСервере();
	
	ОпределитьДоступностьРеквизитов();
	
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура БазовыеВидыРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, Объект.БазовыеВидыРасчета);
	
	Для Каждого Значение Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		ОбработкаВыбранногоНачисления(Значение, Объект.БазовыеВидыРасчета, "БазовыеВидыРасчета");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВедущиеВидыРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, Объект.ВедущиеВидыРасчета);
	
	Для Каждого Значение Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		ОбработкаВыбранногоНачисления(Значение, Объект.ВедущиеВидыРасчета, "ВедущиеВидыРасчета");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВытесняющиеВидыРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, Объект.ВытесняющиеВидыРасчета);
	
	Для Каждого Значение Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		ОбработкаВыбранногоНачисления(Значение, Объект.ВытесняющиеВидыРасчета, "ВытесняющиеВидыРасчета");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокЗависимыеВидыРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, СписокЗависимыеНачисления);
	
	Для Каждого Значение Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		ОбработкаВыбранногоНачисления(Значение, СписокЗависимыеНачисления, "СписокЗависимыеНачисления");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗависимыеУдержанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, СписокЗависимыеУдержания);
	
	Для Каждого Значение Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		Если СписокЗависимыеУдержания.НайтиСтроки(Новый Структура("ВидРасчета", Значение)).Количество() = 0 Тогда
			СписокЗависимыеУдержания.Добавить().ВидРасчета = Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокЗависимыеВзносыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, СписокЗависимыеВзносы);
	
	Для Каждого Значение Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		Если СписокЗависимыеВзносы.НайтиСтроки(Новый Структура("ВидРасчета", Значение)).Количество() = 0 Тогда
			СписокЗависимыеВзносы.Добавить().ВидРасчета = Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокЗависимыеСреднийЗаработокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УдалениеВыбранныхВидовРасчета(ВыбранноеЗначение.УдаленныеВидыРасчета, СписокЗависимыеСреднийЗаработок);
	
	Для Каждого Значение Из ВыбранноеЗначение.ДобавленныеВидыРасчета Цикл
		Если СписокЗависимыеСреднийЗаработок.НайтиСтроки(Новый Структура("ВидРасчета", Значение)).Количество() = 0 Тогда
			СписокЗависимыеСреднийЗаработок.Добавить().ВидРасчета = Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьФормулу(Команда)
	
	ПоказателиДляФормыВвода = Новый СписокЗначений;
	
	ФормулаРасчетаДляФормулы = Объект.ФормулаРасчета;
	
	ПолучитьПоказателиДляПередачиФормулы(ФормулаРасчетаДляФормулы, ПоказателиДляФормыВвода);
		
	ПараметрыРедактирования = Новый Структура;
	ПараметрыРедактирования.Вставить("Формула", ФормулаРасчетаДляФормулы);
	ПараметрыРедактирования.Вставить("НаименованиеВидаРасчета", Объект.Наименование);
	ПараметрыРедактирования.Вставить("ВидРасчета", Объект.Ссылка);
	ПараметрыРедактирования.Вставить("Показатели" , ПоказателиДляФормыВвода);	
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьФормулуЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ИНАГРО_РедактированиеФормулыРасчетаЗарплаты", ПараметрыРедактирования, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФормулуЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт 
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ФормулаРасчета = РезультатРедактирования.Формула Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ФормулаРасчета = РезультатРедактирования.Формула;
		
	ОбновитьФормуПоИзменениюФормулыРасчета(
		ЭтаФорма, 
		РезультатРедактирования.СведенияОПоказателях, );
	
	Модифицированность = Истина;
	
	СпособРасчетаПредставление = ВизуализироватьФормулуРасчета();
	
	ОбработатьИзменениеФормулыСпособаРасчета();	
	
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборБазовые(Команда)
	
	МассивВидовРасчета = ИНАГРО_РасчетЗарплатыРасширенныйКлиентСервер.ВидыРасчетаКоллекции(Объект.БазовыеВидыРасчета);
	ПараметрыФормы = Новый Структура("МассивВидовРасчета", МассивВидовРасчета);
	ОткрытьФорму("ОбщаяФорма.ИНАГРО_ПодборВидовРасчета", ПараметрыФормы, Элементы.БазовыеВидыРасчета);

КонецПроцедуры

&НаКлиенте
Процедура ПодборЗависимые(Команда)
	
	МассивВидовРасчета = Новый Массив;
	Для каждого СтрокаКоллекции Из СписокЗависимыеНачисления Цикл
		
		МассивВидовРасчета.Добавить(СтрокаКоллекции.ВидРасчета);
	КонецЦикла; 
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "ЕстьПоказательРасчетнаяБаза", ВидСравненияКомпоновкиДанных.Равно, Истина));
	ПараметрыФормы = Новый Структура("МассивВидовРасчета, УсловияОтбора", МассивВидовРасчета, Отбор);
	ОткрытьФорму("ОбщаяФорма.ИНАГРО_ПодборВидовРасчета", ПараметрыФормы, Элементы.СписокЗависимыеНачисления);

КонецПроцедуры

&НаКлиенте
Процедура ПодборЗависимыеВзносы(Команда)
	
	Отбор = Новый Массив;
	МассивВидовРасчета = ИНАГРО_РасчетЗарплатыРасширенныйКлиентСервер.ВидыРасчетаКоллекции(СписокЗависимыеВзносы);
	ПараметрыФормы = Новый Структура("МассивВидовРасчета, УсловияОтбора, ПодборНалогов", МассивВидовРасчета, Отбор, Истина);
	ОткрытьФорму("ОбщаяФорма.ИНАГРО_ПодборВидовРасчета", ПараметрыФормы, Элементы.СписокЗависимыеВзносы);

КонецПроцедуры

&НаКлиенте
Процедура ПодборЗависимыеСредние(Команда)
	
	Отбор = Новый Массив;
	МассивВидовРасчета = ИНАГРО_РасчетЗарплатыРасширенныйКлиентСервер.ВидыРасчетаКоллекции(СписокЗависимыеСреднийЗаработок);
	ПараметрыФормы = Новый Структура("МассивВидовРасчета, УсловияОтбора, ПодборСредних", МассивВидовРасчета, Отбор, Истина);
	ОткрытьФорму("ОбщаяФорма.ИНАГРО_ПодборВидовРасчета", ПараметрыФормы, Элементы.СписокЗависимыеСреднийЗаработок);

КонецПроцедуры

&НаКлиенте
Процедура ПодборЗависимыеУдержания(Команда)
	Отбор = Новый Массив;
	МассивВидовРасчета = ИНАГРО_РасчетЗарплатыРасширенныйКлиентСервер.ВидыРасчетаКоллекции(СписокЗависимыеУдержания);
	ПараметрыФормы = Новый Структура("МассивВидовРасчета, УсловияОтбора, ПодборУдержаний", МассивВидовРасчета, Отбор, Истина);
	ОткрытьФорму("ОбщаяФорма.ИНАГРО_ПодборВидовРасчета", ПараметрыФормы, Элементы.СписокЗависимыеУдержания);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВедущие(Команда)
	
	МассивВидовРасчета = ИНАГРО_РасчетЗарплатыРасширенныйКлиентСервер.ВидыРасчетаКоллекции(Объект.ВедущиеВидыРасчета);
	ПараметрыФормы = Новый Структура("МассивВидовРасчета", МассивВидовРасчета);
	ОткрытьФорму("ОбщаяФорма.ИНАГРО_ПодборВидовРасчета", ПараметрыФормы, Элементы.ВедущиеВидыРасчета);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВытесняющие(Команда)
	
	Отбор = Новый Массив;
	МассивВидовРасчета = ИНАГРО_РасчетЗарплатыРасширенныйКлиентСервер.ВидыРасчетаКоллекции(Объект.ВытесняющиеВидыРасчета);
	ПараметрыФормы = Новый Структура("МассивВидовРасчета, УсловияОтбора", МассивВидовРасчета, Отбор);
	ОткрытьФорму("ОбщаяФорма.ИНАГРО_ПодборВидовРасчета", ПараметрыФормы, Элементы.ВытесняющиеВидыРасчета);

КонецПроцедуры

&НаКлиенте
Процедура ВедущиеЗаполнитьПоБазовым(Команда)
	Объект.ВедущиеВидыРасчета.Очистить();
	Для Каждого Строка Из Объект.БазовыеВидыРасчета Цикл
		 НоваяСтрока = Объект.ВедущиеВидыРасчета.Добавить();
		 НоваяСтрока.ВидРасчета 		= Строка.ВидРасчета;
		 НоваяСтрока.Предопределенный 	= Строка.Предопределенный;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьЧтениеНаСервере(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	// Заполнить связанные коллекции.
	
	ОбработатьИзменениеФормулыСпособаРасчета();	
	
	УстановитьДоступность(ЭтаФорма);
		
	// Заполнение реквизита со списком начислений, для которых данное начисдение является базовым.
	ИНАГРО_РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(ТекущийОбъект.Ссылка, СписокЗависимыеНачисления, "БазовыеВидыРасчета");
	
	// Заполнение реквизита со списком удержаний, для которых данное начисдение является базовым.
	ИНАГРО_РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(ТекущийОбъект.Ссылка, СписокЗависимыеУдержания, "БазовыеВидыРасчета", "ПланВидовРасчета.ИНАГРО_Удержания");
	
	// Заполнение реквизита со списком взносов, для которых данное начисдение является базовым.
	ИНАГРО_РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(ТекущийОбъект.Ссылка, СписокЗависимыеВзносы, "БазовыеВидыРасчета", "ПланВидовРасчета.ИНАГРО_ВзносыВФонды");
	
	// Заполнение реквизита со списком средних, для которых данное начисдение является базовым.
	ИНАГРО_РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(ТекущийОбъект.Ссылка, СписокЗависимыеСреднийЗаработок, "БазовыеВидыРасчета", "ПланВидовРасчета.ИНАГРО_СреднийЗаработок");
	
	ЭтаФорма.СпособРасчетаПредставление = ВизуализироватьФормулуРасчета();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ВидыРасчетаДляЗаписи, ТекущийВидРасчета, ЗависимыеВидыРасчета, ИмяТаблицыЗависимых, ТаблицаЗапроса = "ПланВидовРасчета.ИНАГРО_Начисления")
	
	// Ссылку на текущий объект нужно вписать в (либо исключить из) 
	// специализированные табличные части зависимых видов расчета, 
	// редактируемые через форму текущего объекта.
	
	// Выявляем список тех видов расчета, в таблицах которого не было текущего вида расчета - добавить, 
	// а также по всем начислениям выявляем те, в списках которого был текущий объект - удалить.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка
	|ПОМЕСТИТЬ ВТЗависимыеДоРедактирования
	|ИЗ
	|	ПланВидовРасчета.ИНАГРО_Начисления.ВедущиеВидыРасчета КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.ВидРасчета = &ТекущийВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеДоРедактирования.Ссылка
	|ИЗ
	|	ВТЗависимыеДоРедактирования КАК ЗависимыеДоРедактирования
	|ГДЕ
	|	НЕ ЗависимыеДоРедактирования.Ссылка В (&ЗависимыеВидыРасчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ИНАГРО_Начисления КАК ВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗависимыеДоРедактирования КАК ЗависимыеДоРедактирования
	|		ПО (ЗависимыеДоРедактирования.Ссылка = ВидыРасчета.Ссылка)
	|ГДЕ
	|	ВидыРасчета.Ссылка В(&ЗависимыеВидыРасчета)
	|	И ЗависимыеДоРедактирования.Ссылка ЕСТЬ NULL ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", ИмяТаблицыЗависимых);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПланВидовРасчета.ИНАГРО_Начисления", ТаблицаЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийВидРасчета", ТекущийВидРасчета);
	Запрос.УстановитьПараметр("ЗависимыеВидыРасчета", ОбщегоНазначения.ВыгрузитьКолонку(ЗависимыеВидыРасчета, "ВидРасчета"));
	
	// Удаляем текущий вид расчета из табличных частей.
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаУдалить = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаУдалить.Следующий() Цикл
		НачислениеОбъект = ВидыРасчетаДляЗаписи[ВыборкаУдалить.Ссылка];
		Если НачислениеОбъект = Неопределено Тогда
			НачислениеОбъект = ВыборкаУдалить.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		СтрокаТекущегоВидаРасчета = НачислениеОбъект[ИмяТаблицыЗависимых].Найти(ТекущийВидРасчета, "ВидРасчета");
		Если СтрокаТекущегоВидаРасчета <> Неопределено Тогда
			НачислениеОбъект[ИмяТаблицыЗависимых].Удалить(СтрокаТекущегоВидаРасчета);
			ВидыРасчетаДляЗаписи.Вставить(ВыборкаУдалить.Ссылка, НачислениеОбъект);
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем текущий вид расчета в табличные части.
	ВыборкаДобавить = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаДобавить.Следующий() Цикл
		НачислениеОбъект = ВидыРасчетаДляЗаписи[ВыборкаДобавить.Ссылка];
		Если НачислениеОбъект = Неопределено Тогда
			НачислениеОбъект = ВыборкаДобавить.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		НачислениеОбъект[ИмяТаблицыЗависимых].Добавить().ВидРасчета = ТекущийВидРасчета;
		ВидыРасчетаДляЗаписи.Вставить(ВыборкаДобавить.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступность(Форма)
	
	Форма.Элементы.ГруппаБазовыеВидыРасчета.Доступность = (Форма.Объект.ЕстьПоказательРасчетнаяБаза);
	ДоступностьИзмененияФормулы = НЕ Форма.Объект.Предопределенный И Форма.Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПроизвольнаяФормула");
	Форма.Элементы.ИзменитьФормулу.Доступность = ДоступностьИзмененияФормулы;
	Форма.Элементы.СпособРасчета.ТолькоПросмотр = Форма.Объект.Предопределенный;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьРеквизитов()
	
	// Установим доступность ЭУ в зависимости от значений реквизиов
	
	Если Объект.ВидПремии = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПремии.ГодоваяПремия")
		ИЛИ Объект.ВидПремии = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПремии.Премия") 
		ИЛИ Объект.ВидПремии = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыПремии.ПремияПропорционально") Тогда
		Элементы.ЧислоМесяцев.Доступность = Истина;
	Иначе
		Элементы.ЧислоМесяцев.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоИзменениюФормулыРасчета(Форма, СведенияОПоказателях, ЗапрашиваемыеПоказатели)
	
	Объект = Форма.Объект;
	
	// Обновление: 
	// - табличной части
	Если ИНАГРО_РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(Объект.СпособРасчета) Тогда
		ИНАГРО_ЗарплатаКадрыРасширенныйКлиентСервер.ОбновитьПоказателиПоФормуле(СведенияОПоказателях, Объект.Показатели, Объект.ЗачетОтработанногоВремени);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеФормулыСпособаРасчета()

	Объект.ЕстьПоказательРасчетнаяБаза = Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.Процентом") 
	                        Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоСреднемуЗаработку") 
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоСреднемуЗаработкуДляОтпуска")
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоСреднемуЗаработкуДляКомпенсацииОтпуска")
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоСреднемуЗаработкуФСС") 
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка")
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ИндексацияСоциальныхНачислений")
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоМЗП")
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы")
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы");
							
	Если Не Объект.ЕстьПоказательРасчетнаяБаза Тогда
		Для Каждого СтрокаПоказателей Из Объект.Показатели Цикл
			Показатель = СтрокаПоказателей.Показатель;
			Если Показатель = ПредопределенноеЗначение("Справочник.ИНАГРО_ПоказателиСхемМотивации.РасчетнаяБаза") Тогда
				Объект.ЕстьПоказательРасчетнаяБаза = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Не Объект.ЕстьПоказательРасчетнаяБаза Тогда
		Объект.БазовыеВидыРасчета.Очистить();
		Объект.ВедущиеВидыРасчета.Очистить();
	КонецЕсли;
														
	
	ЭтоРасчетПоТарифнойСтавке = Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке")						
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням")
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам")
							Или Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке");
							
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКатегорииНачисленияНаСервере()
	
	БылаФормула = Объект.ФормулаРасчета;
	
	ИзменилсяСпособРасчета = Объект.СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	
	Если ИзменилсяСпособРасчета Тогда
		ЗаполнитьПоказателиПредопределенногоСпособаРасчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПредопределенногоСпособаРасчета()
	
	Объект.Показатели.Очистить();
	
	ИНАГРО_ЗарплатаКадрыРасширенный.ЗаполнитьПоказателиПредопределенногоСпособаРасчета(Объект.СпособРасчета, Объект.Показатели);	
		
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ВизуализироватьФормулуРасчета()
	
	ТекущаяФормула = Объект.ФормулаРасчета;
	
	Возврат ИНАГРО_ПроведениеРасчетов.ВизуализироватьФормулуРасчета(Объект, "HTML");
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбранногоНачисления(Значение, ТаблицаВидовРасчета, ИмяТаблицы)
	
	Если ТаблицаВидовРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Значение)).Количество() = 0 Тогда
		ТаблицаВидовРасчета.Добавить().ВидРасчета = Значение;
		ДозаполнитьВидРасчета(Значение, ИмяТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьВидРасчета(ДобавленныйВидРасчета, ИмяТаблицы, ВыводитьСообщения = Истина)
	
	ДополнительныеВидыРасчета = Новый Массив;
	
	Если ИмяТаблицы = "СписокЗависимыеНачисления" Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			СсылкаНаОбъект = ПланыВидовРасчета.ИНАГРО_Начисления.ПолучитьСсылку();
		Иначе 
			СсылкаНаОбъект = Объект.Ссылка;
		КонецЕсли;	
		
		ВидРасчетаОбъект = ДобавленныйВидРасчета.ПолучитьОбъект();
		
		ВидРасчетаОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = СсылкаНаОбъект;
		
		ПакетВидовРасчета = Новый Соответствие;
		ПакетВидовРасчета.Вставить(ДобавленныйВидРасчета, ВидРасчетаОбъект);
		
		ИНАГРО_РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(ПакетВидовРасчета);
		
		Для Каждого ЭлементКоллекции Из ПакетВидовРасчета Цикл
			Если ЭлементКоллекции.Значение.БазовыеВидыРасчета.Найти(СсылкаНаОбъект, "ВидРасчета") <> Неопределено Тогда 
				Если ЭтаФорма["СписокЗависимыеНачисления"].НайтиСтроки(Новый Структура("ВидРасчета", ЭлементКоллекции.Ключ)).Количество() = 0 Тогда
					ЭтаФорма["СписокЗависимыеНачисления"].Добавить().ВидРасчета = ЭлементКоллекции.Ключ;
					ДополнительныеВидыРасчета.Добавить(ЭлементКоллекции.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВидРасчетаОбъект = РеквизитФормыВЗначение("Объект");
		
		ПакетВидовРасчета = Новый Соответствие;
		
		Если ВидРасчетаОбъект.Ссылка.Пустая() Тогда
			СсылкаНаОбъект = ПланыВидовРасчета.ИНАГРО_Начисления.ПолучитьСсылку();
			ВидРасчетаОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
			ПакетВидовРасчета.Вставить(СсылкаНаОбъект, ВидРасчетаОбъект);
		Иначе 
			ПакетВидовРасчета.Вставить(ВидРасчетаОбъект.Ссылка, ВидРасчетаОбъект);
		КонецЕсли;	

		ИНАГРО_РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(ПакетВидовРасчета);
		
		НовыеВидыРасчета = ВидРасчетаОбъект[ИмяТаблицы].ВыгрузитьКолонку("ВидРасчета");
 
		Для Каждого ВидРасчета Из НовыеВидыРасчета Цикл 
			Если Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("ВидРасчета", ВидРасчета)).Количество() = 0 Тогда
				Объект[ИмяТаблицы].Добавить().ВидРасчета = ВидРасчета;
				ДополнительныеВидыРасчета.Добавить(ВидРасчета);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыводитьСообщения Тогда 
		ТекстСообщения = ТекстСообщенияОДобавленииДополнительныхВидовРасчета(ДобавленныйВидРасчета, ДополнительныеВидыРасчета);
		Если ТекстСообщения <> "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияОДобавленииДополнительныхВидовРасчета(ДобавленныйВидРасчета, ДополнительныеВидыРасчета)
	
	ТекстСообщения = "";
	КоличествоЭлементов = ДополнительныеВидыРасчета.Количество();
	
	Если КоличествоЭлементов = 0 Тогда 
		Возврат ТекстСообщения;
	КонецЕсли;	
	
	ВидыРасчетовСтрока = "";
	Для Сч = 1 По КоличествоЭлементов Цикл 
		ВидыРасчетовСтрока = ВидыРасчетовСтрока + ДополнительныеВидыРасчета[Сч-1] + ?(Сч = КоличествоЭлементов, "", ", ");
	КонецЦикла;
		
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Кроме начисления %1 в список включены следующие начисления: %2';uk='Крім нарахування %1 у список включені наступні нарахування: %2'"), 
	ДобавленныйВидРасчета, ВидыРасчетовСтрока);
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаКлиенте
Процедура УдалениеВыбранныхВидовРасчета(УдаленныеВидыРасчета, ТаблицаВидовРасчета)
	
	Для Каждого Значение Из УдаленныеВидыРасчета Цикл
		СтрокиДляУдаления = ТаблицаВидовРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Значение));
		Для Каждого ТекСтрока Из СтрокиДляУдаления Цикл 
			ТаблицаВидовРасчета.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьПараметрыВидаРасчета(Параметр) Экспорт
	
	Объект.ФормулаРасчета				= Параметр[0];
	Объект.СпособРасчета 				= Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Объект.ПроизвольнаяФормулаРасчета	= Истина;
	
	ПарамПоказатели = Параметр[1];
	
	ОбъектПоказатели = Объект.Показатели;
	ОбъектПоказатели.Очистить();
	Для Каждого ОбъектПоказатель Из ОбъектПоказатели Цикл
		Если ПарамПоказатели.Найти(ОбъектПоказатель.Показатель) = Неопределено Тогда
			ОбъектПоказатель.Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	Для Каждого Показатель Из ПарамПоказатели Цикл
		ПараметрыОтбора = Новый Структура ("Показатель", Показатель);
		СтрокиСоответствия = ОбъектПоказатели.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиСоответствия.Количество() = 0 Тогда
			НовыйПоказатель				= Объект.Показатели.Добавить();
			
			Если	Показатель.ТипПоказателя <> Перечисления.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная 
				И	Показатель.ТипПоказателя <> Перечисления.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая 
				И	Показатель.ВозможностьИзменения <> Перечисления.ИНАГРО_ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете 
				И	Показатель.ВозможностьИзменения <> Перечисления.ИНАГРО_ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете Тогда
				
				Если (Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф) Тогда
					Если Объект["ЗачетОтработанногоВремени"] = Null Тогда
						НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Ложь;
					ИначеЕсли Объект.ЗачетОтработанногоВремени Тогда
						НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Истина;
					Иначе
						НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Ложь;
					КонецЕсли;
				Иначе
					НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Истина;
				КонецЕсли;
			КонецЕсли;
			НовыйПоказатель.Показатель	= Показатель;
		КонецЕсли;
	КонецЦикла;
				
	СпособРасчетаПредставление = ВизуализироватьФормулуРасчета();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПоказателиДляПередачиФормулы(ФормулаРасчетаДляФормулы, ПоказателиДляФормыВвода)
	
	Для Каждого Показатель Из Объект.Показатели Цикл
		
		ПоказательДляФормулы = Строка(Показатель.Показатель.Идентификатор);
						
		ФормулаРасчетаДляФормулы	= СтрЗаменить(ФормулаРасчетаДляФормулы, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
		
		ПоказателиДляФормыВвода.Добавить(Показатель.Показатель);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКатегориюВидаРасчета(ВидРасчета, Отказ)
		
	// Определение максимальной категории среди видов расчета, входящих в базу
	МаксимальныйИндексКатегории = -1;
	Для Каждого БазовыйРасчет Из Объект.БазовыеВидыРасчета Цикл
		Если БазовыйРасчет.ВидРасчета.Наименование = Null Тогда
			Продолжить;
		КонецЕсли; 
		Если БазовыйРасчет.ВидРасчета.КатегорияРасчета = Перечисления.КатегорииРасчетов.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		ИндексКатегории = Перечисления.КатегорииРасчетов.Индекс(БазовыйРасчет.ВидРасчета.КатегорияРасчета);
		МаксимальныйИндексКатегории = Макс(МаксимальныйИндексКатегории, ИндексКатегории);
		
	КонецЦикла;  
	
	Если МаксимальныйИндексКатегории = Перечисления.КатегорииРасчетов.Количество()-1 Тогда
		
		// В базе расчетов есть расчеты с максимальной категорией
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Откорректируйте состав базовых видов расчетов. В базу расчетов не должны входить расчеты с категорией начислений ""Зависимое третьего уровня""!.';uk='Відкоригуйте склад базових видів розрахунків. У базу розрахунків не повинні входити розрахунки з категорією нарахувань ""Залежне третього рівня""!'"), Отказ);
		
	Иначе
		// Категория начислений вида расчета должна быть на уровень выше любого из видов расчетов, составляющих базу расчета.
		Если МаксимальныйИндексКатегории = -1 Тогда
			МаксимальнаяКатегорияБазы = Перечисления.КатегорииРасчетов.ПустаяСсылка();
		Иначе
			МаксимальнаяКатегорияБазы = Перечисления.КатегорииРасчетов.Получить(МаксимальныйИндексКатегории);
		КонецЕсли;
		ИндексВыбраннойКатегории = Перечисления.КатегорииРасчетов.Индекс(ВидРасчета.КатегорияРасчета);
		ОжидаемаяКатегория = Перечисления.КатегорииРасчетов.Получить(МаксимальныйИндексКатегории +1);
		
		Если ИндексВыбраннойКатегории <= МаксимальныйИндексКатегории Тогда
			// Пользователь установил категорию меньше чем самая максимальная категория базы расчетов.
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Неверно установлена категория начислений. В базу расчетов входят расчеты с категорией ""';uk='Невірно встановлена категорія нарахувань. У базу розрахунків входять розрахунки з категорією ""'") + МаксимальнаяКатегорияБазы + НСтр("ru='"". Рекомендуется установить категорию начислений ""';uk='"". Рекомендується встановити категорію нарахувань ""'") + ОжидаемаяКатегория + """!" , Отказ);
		ИначеЕсли ИндексВыбраннойКатегории > МаксимальныйИндексКатегории +1 Тогда
			// Категория слишком большая - предупредим
			Если МаксимальныйИндексКатегории = -1 Тогда  // нет в базе ничего
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Рекомендуется установить категорию начислений ""';uk='Рекомендується встановити категорію нарахувань ""'") + ОжидаемаяКатегория + НСтр("ru='"", т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!';uk='"", тому що для виду розрахунку не задані базові нарахування або для базових нарахувань не задані категорії нарахування!'"), Отказ);
			Иначе
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Рекомендуется установить категорию начислений ""';uk='Рекомендується встановити категорію нарахувань ""'") + ОжидаемаяКатегория + НСтр("ru='"", т.к. максимальной категорией среди базовых расчетов является категория ""';uk='"", тому що максимальною категорією серед базових розрахунків є категорія ""'") + МаксимальнаяКатегорияБазы + """!", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКатегориюВидаРасчета


#КонецОбласти