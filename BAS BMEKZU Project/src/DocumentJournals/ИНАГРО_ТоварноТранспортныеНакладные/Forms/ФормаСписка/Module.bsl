#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды		
		
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтотОбъект);
	
	ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВвоз");

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тип", ДокументСсылка, ВидСравненияКомпоновкиДанных.Равно);
	
	УправлениеФормой(ЭтаФорма);
	
	ПолучитьИтогиНаСервере();

	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВидОперации(Команда)
			
	Если ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВвоз") Тогда
		ИмяДокумента = "ИНАГРО_ТТНВвоз";
	ИначеЕсли ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВнутр") Тогда
		ИмяДокумента = "ИНАГРО_ТТНВнутр";
	ИначеЕсли ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВывоз") Тогда
		ИмяДокумента = "ИНАГРО_ТТНВывоз";
	ИначеЕсли ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_Взвешивание") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", СтрокаТаблицы.Ссылка);
	ПараметрыФормы.Вставить("ИзменитьВидОперации", Истина);
	
	ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	Если ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВвоз") Тогда
		ИмяДокумента = "ИНАГРО_ТТНВвоз";
	ИначеЕсли ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВнутр") Тогда
		ИмяДокумента = "ИНАГРО_ТТНВнутр";
	ИначеЕсли ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВывоз") Тогда
		ИмяДокумента = "ИНАГРО_ТТНВывоз";
	ИначеЕсли ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_Взвешивание") Тогда
		ИмяДокумента = "ИНАГРО_Взвешивание";
	КонецЕсли;

	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы();
	ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаДокумента", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТТНВвоз(Команда)
	
	ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВвоз");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тип", ДокументСсылка, ВидСравненияКомпоновкиДанных.Равно);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТТНВнутр(Команда)
	
	ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВнутр");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тип", ДокументСсылка, ВидСравненияКомпоновкиДанных.Равно);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТТНВывоз(Команда)
	
	ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВывоз");	
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тип", ДокументСсылка, ВидСравненияКомпоновкиДанных.Равно);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Взвешивание(Команда)
	
	ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_Взвешивание");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тип", ДокументСсылка, ВидСравненияКомпоновкиДанных.Равно);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьРеестрыТТН(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Если ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВвоз") Тогда
		ПараметрыФормы.Вставить("Реестр", "РеестрТТНВвоз");	
	ИначеЕсли ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВнутр") Тогда
		ПараметрыФормы.Вставить("Реестр", "РеестрТТНВнутр");
	ИначеЕсли ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВывоз") Тогда
		ПараметрыФормы.Вставить("Реестр", "РеестрТТНВывоз");
	ИначеЕсли ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_Взвешивание") Тогда
		ПараметрыФормы.Вставить("Реестр", "РеестрТТНВывоз");
		Возврат;	
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИНАГРО_ФормированиеРеестровТТН.Форма.Форма", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор(), , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИтоги(Команда)
	
	ПолучитьИтогиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПолучитьИтогиНаСервере()
	
	СхемаКомпоновкиДанных        = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки                    = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	ЭлементОтбора                = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Проведен");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	
	КомпоновщикМакета            = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновкиДанных        = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных    = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода              = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    Результат                    = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Вес                          = Результат.Итог("СсылкаВес");
	ВесВывоз                     = Результат.Итог("СсылкаВесВывоз");
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаДокументы.Заголовок = УстановитьЗаголовок(Форма);
	
	ТТНВвоз     = Форма.ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВвоз");
	ТТНВнутр    = Форма.ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВнутр");
	ТТНВывоз    = Форма.ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВывоз");
	Взвешивание = Форма.ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_Взвешивание");

	Элементы.ТТНВвоз.Доступность     = НЕ ТТНВвоз;
	Элементы.ТТНВнутр.Доступность    = НЕ ТТНВнутр;
	Элементы.ТТНВывоз.Доступность    = НЕ ТТНВывоз;
	Элементы.Взвешивание.Доступность = НЕ Взвешивание;
	
	Элементы.ГруппаНомерНаладнойПробы.Видимость                      = ТТНВвоз;
	Элементы.ГруппаСтепеньВлажностиЗагрязненияЗараженности.Видимость = ТТНВвоз;
	 
	Элементы.СсылкаПоставщик.Видимость          = ТТНВвоз;
	Элементы.СсылкаПолучатель.Видимость         = ТТНВывоз;
	Элементы.СсылкаСклад.Видимость              = НЕ Взвешивание;
	Элементы.СсылкаМестоХранения.Видимость      = НЕ Взвешивание;
	Элементы.СсылкаНовоеМестоХранения.Видимость = ТТНВнутр;
	Элементы.СсылкаНоваяНоменклатура.Видимость  = ТТНВнутр;
	Элементы.СсылкаВес.Видимость                = НЕ ТТНВнутр;
	Элементы.СсылкаВесВывоз.Видимость           = ТТНВнутр;
	
	Элементы.ФормаИзменитьВидОперации.Видимость                 = НЕ Взвешивание;
	Элементы.СписокКонтекстноеМенюИзменитьВидОперации.Видимость = НЕ Взвешивание;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьЗаголовок(Форма)	
	
	Если Форма.ДокументСсылка      = Тип("ДокументСсылка.ИНАГРО_ТТНВвоз") Тогда
		ТекстЗаголовка = НСтр("ru='Товарно-транспортные накладные (ввоз)';uk='Товарно-транспортні накладні (ввезення)'");
	ИначеЕсли Форма.ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВнутр") Тогда
		ТекстЗаголовка = НСтр("ru='Товарно-транспортные накладные (внутр.)';uk='Товарно-транспортні накладні (внутр.)'");
	ИначеЕсли Форма.ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_ТТНВывоз") Тогда
		ТекстЗаголовка = НСтр("ru='Товарно-транспортные накладные (вывоз)';uk='Товарно-транспортні накладні (вивезення)'");
	ИначеЕсли Форма.ДокументСсылка = Тип("ДокументСсылка.ИНАГРО_Взвешивание") Тогда
		ТекстЗаголовка = НСтр("ru='Квитанция на взвешивание';uk='Квітанція на зважування'");
	КонецЕсли;
	
	Возврат ТекстЗаголовка;

КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы()

	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
		
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура НастройкиДинамическогоСписка()
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Команда.Имя = "ПодменюПечатьОбычное_Реестр" Тогда
		НастройкиДинамическогоСписка();
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

