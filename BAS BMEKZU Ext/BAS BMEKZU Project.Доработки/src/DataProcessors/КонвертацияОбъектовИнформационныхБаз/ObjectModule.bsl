
&ИзменениеИКонтроль("ВыполнитьАнализСообщенияОбмена")
Процедура СМС_ВыполнитьАнализСообщенияОбмена(ПараметрыАнализа) Экспорт	ЧтениеСообщения = Неопределено;
	
	Если ЗначениеЗаполнено(УзелОбменаЗагрузкаДанных) Тогда
		УзелОбменаЗагрузкаДанныхОбъект = УзелОбменаЗагрузкаДанных.ПолучитьОбъект();
	КонецЕсли;
	
	Попытка
		
		УстановитьФлагОшибки(Ложь);
		
		ИспользоватьТранзакции = Ложь;
		
		ПолеСтрокаСообщенияОбОшибке = "";
		ПолеСостояниеОбменаДанными = Неопределено;
		ПолеРезультатВыполненияОбмена = Неопределено;
		ПолеВерсияФорматаВходящегоСообщенияОбмена = Неопределено;
		ЕстьКорректировкаИнформацииОРегистрацииОбъекта = Ложь;
		ЕстьИнформацияОРегистрацииОбъекта = Ложь;
		ГлобальныйСтекНеЗаписанныхОбъектов = Новый Соответствие;
		СоответствиеПравилКонвертации = Новый Соответствие;
		
		ИнициализироватьВедениеПротоколаОбмена();
		
		ИнициализироватьМенеджерыИСообщения();
		
		// дата начала анализа
		СостояниеОбменаДанными().ДатаНачала = ТекущаяДатаСеанса();
		
		// Обнуляем значение модальной переменной.
		ПолеТаблицаДанныхЗаголовкаПакета = Неопределено;
		
		#Вставка
		ИмяПрофиляБезопасности = ИнициализироватьОбработки();
		#КонецВставки
		
		НачатьЧтениеСообщения(ЧтениеСообщения, Истина);
		Попытка
			
			// Зачитываем данные из сообщения обмена.
			ПроизвестиЧтениеДанныхВРежимеАнализа(ЧтениеСообщения, ПараметрыАнализа);
			
			Если ФлагОшибки() Тогда
				ВызватьИсключение НСтр("ru='Возникли ошибки при анализе данных.';uk='Виникли помилки при аналізі даних.'");
			КонецЕсли;
			
			// Формируем временную таблицу данных.
			ТаблицаДанныхЗаголовкаПакетаВременная = ТаблицаДанныхЗаголовкаПакета().Скопировать(, "ТипИсточникаСтрокой, ТипПриемникаСтрокой, ПоляПоиска, ПоляТаблицы");
			ТаблицаДанныхЗаголовкаПакетаВременная.Свернуть("ТипИсточникаСтрокой, ТипПриемникаСтрокой, ПоляПоиска, ПоляТаблицы");
			
			// Сворачиваем таблицу данных заголовка пакета.
			ТаблицаДанныхЗаголовкаПакета().Свернуть(
				"ТипОбъектаСтрокой, ТипИсточникаСтрокой, ТипПриемникаСтрокой, СинхронизироватьПоИдентификатору, ЭтоКлассификатор, ЭтоУдалениеОбъекта, ИспользоватьПредварительныйПросмотр",
				"КоличествоОбъектовВИсточнике");
			//
			ТаблицаДанныхЗаголовкаПакета().Колонки.Добавить("ПоляПоиска",  одОписаниеТипа("Строка"));
			ТаблицаДанныхЗаголовкаПакета().Колонки.Добавить("ПоляТаблицы", одОписаниеТипа("Строка"));
			
			Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаголовкаПакета() Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("ТипИсточникаСтрокой", СтрокаТаблицы.ТипИсточникаСтрокой);
				Отбор.Вставить("ТипПриемникаСтрокой", СтрокаТаблицы.ТипПриемникаСтрокой);
				
				СтрокиВременнойТаблицы = ТаблицаДанныхЗаголовкаПакетаВременная.НайтиСтроки(Отбор);
				
				СтрокаТаблицы.ПоляПоиска  = СтрокиВременнойТаблицы[0].ПоляПоиска;
				СтрокаТаблицы.ПоляТаблицы = СтрокиВременнойТаблицы[0].ПоляТаблицы;
				
			КонецЦикла;
			
			ВыполнитьОбработчикПослеЗагрузкиДанных();
			
			ЗакончитьЧтениеСообщения(ЧтениеСообщения);
			
		Исключение
			ПрерватьЧтениеСообщения(ЧтениеСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	Исключение
		Если ЧтениеСообщения <> Неопределено
			И ЧтениеСообщения.СообщениеБылоПринятоРанее Тогда
			ЗаписатьВПротоколВыполнения(174,,,,,,
				Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято);
		Иначе
			ЗаписатьВПротоколВыполнения(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
	КонецПопытки;
	
	ЗавершитьВедениеПротоколаОбмена();
	
	// дата окончания анализа
	СостояниеОбменаДанными().ДатаОкончания = ТекущаяДатаСеанса();
	
	// Фиксируем завершение анализа данных в РС.
	ЗафиксироватьЗавершениеЗагрузкиДанных();
	
	// Сбрасываем модальные переменные перед помещением обработки в платформенный кэш.
	ПолеДокументыДляОтложенногоПроведения = Неопределено;
	ПолеОбъектыДляОтложеннойЗаписи = Неопределено;
	СоответствиеДокументовДляОтложенногоПроведения = Неопределено;
	ПолеСоответствиеТиповДанныхДляЗагрузки = Неопределено;
	ГлобальныйСтекНеЗаписанныхОбъектов = Неопределено;
	СоответствиеПравилКонвертации = Неопределено;
	ФайлОбмена = Неопределено;
	
КонецПроцедуры

&ИзменениеИКонтроль("ВыполнитьЗагрузкуДанных")
Процедура СМС_ВыполнитьЗагрузкуДанных() Экспорт	

	Если ЗначениеЗаполнено(УзелОбменаЗагрузкаДанных) Тогда
		УзелОбменаЗагрузкаДанныхОбъект = УзелОбменаЗагрузкаДанных.ПолучитьОбъект();
	КонецЕсли;
	
	ЧтениеСообщения = Неопределено;
	Попытка
		
		ОтложеннаяОбработкаОбъектов = Ложь;
		
		РежимЗагрузкиДанных = "ЗагрузкаВИнформационнуюБазу";
		
		ПолеСтрокаСообщенияОбОшибке = "";
		ПолеСостояниеОбменаДанными = Неопределено;
		ПолеРезультатВыполненияОбмена = Неопределено;
		ПолеСоответствиеТиповДанныхДляЗагрузки = Неопределено;
		ПолеСчетчикЗагруженныхОбъектов = Неопределено;
		ПолеДокументыДляОтложенногоПроведения = Неопределено;
		ПолеОбъектыДляОтложеннойЗаписи = Неопределено;
		СоответствиеДокументовДляОтложенногоПроведения = Неопределено;
		ПолеСвойстваУзлаПланаОбмена = Неопределено;
		ПолеВерсияФорматаВходящегоСообщенияОбмена = Неопределено;
		ЕстьКорректировкаИнформацииОРегистрацииОбъекта = Ложь;
		ЕстьИнформацияОРегистрацииОбъекта = Ложь;
		
		ГлобальныйСтекНеЗаписанныхОбъектов = Новый Соответствие;
		НомерПоследнегоПоискаПоСсылке = 0;
		
		ИнициализироватьМенеджерыИСообщения();
		
		УстановитьФлагОшибки(Ложь);
		
		ИнициализироватьКомментарииПриВыгрузкеИЗагрузкеДанных();
		
		ИнициализироватьВедениеПротоколаОбмена();
		
		ИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных = Новый Соответствие;
		
		СоответствиеДопПараметровПоиска = Новый Соответствие;
		СоответствиеПравилКонвертации = Новый Соответствие;
		
		КоличествоВыполненныхОтложенныхДвиженийДокументов = 0;
		
		Если ПродолжитьПриОшибке Тогда
			ИспользоватьТранзакции = Ложь;
		КонецЕсли;
		
		Если КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
			КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 100;
		КонецЕсли;
		
		РезультатАнализаДанныхКЗагрузке = ОбменДаннымиСервер.РезультатАнализаДанныхКЗагрузке(ИмяФайлаОбмена, Ложь);
		РазмерФайлаСообщенияОбмена = РезультатАнализаДанныхКЗагрузке.РазмерФайлаСообщенияОбмена;
		КоличествоОбъектовКЗагрузке = РезультатАнализаДанныхКЗагрузке.КоличествоОбъектовКЗагрузке;
		
		ИмяПрофиляБезопасности = ИнициализироватьОбработки();
		
		Если ИмяПрофиляБезопасности <> Неопределено Тогда
			УстановитьБезопасныйРежим(ИмяПрофиляБезопасности);
		КонецЕсли;
		
		НачатьЧтениеСообщения(ЧтениеСообщения);
		
		ОбменДаннымиСлужебный.ОтключитьОбновлениеКлючейДоступа(Истина);
		Если ИспользоватьТранзакции Тогда
			НачатьТранзакцию();
		КонецЕсли;
		Попытка
			
			ПроизвестиЧтениеДанных(ЧтениеСообщения);
			
			Если ФлагОшибки() Тогда
				ВызватьИсключение НСтр("ru='Возникли ошибки при загрузке данных.';uk='Виникли помилки при завантаженні даних.'");
			КонецЕсли;
			
			// Отложенная запись того, что не записали.
			ПровестиЗаписьНеЗаписанныхОбъектов();
			
			ВыполнитьОбработчикПослеЗагрузкиДанных();
			
			Если ФлагОшибки() Тогда
				ВызватьИсключение НСтр("ru='Возникли ошибки при загрузке данных.';uk='Виникли помилки при завантаженні даних.'");
			КонецЕсли;
			
			ОбменДаннымиСлужебный.ОтключитьОбновлениеКлючейДоступа(Ложь);
			Если ИспользоватьТранзакции Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		Исключение
			Если ИспользоватьТранзакции Тогда
				ОтменитьТранзакцию();
				ОбменДаннымиСлужебный.ОтключитьОбновлениеКлючейДоступа(Ложь, Ложь);
			Иначе
				ОбменДаннымиСлужебный.ОтключитьОбновлениеКлючейДоступа(Ложь);
			КонецЕсли;
			
			ПрерватьЧтениеСообщения(ЧтениеСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
		ОбменДаннымиСлужебный.ОтключитьОбновлениеКлючейДоступа(Истина);
		// Выполняем проведение документов в очереди.
		ОтложеннаяОбработкаОбъектов = Истина;
		ВыполнитьОтложенноеПроведениеДокументов();
		ВыполнитьОтложеннуюЗаписьОбъектов();
		
		ОбменДаннымиСлужебный.ОтключитьОбновлениеКлючейДоступа(Ложь);
		
		ЗакончитьЧтениеСообщения(ЧтениеСообщения);
	Исключение
		Если ОтложеннаяОбработкаОбъектов Тогда
			ОбменДаннымиСлужебный.ОтключитьОбновлениеКлючейДоступа(Ложь);
		КонецЕсли;
		
		Если ЧтениеСообщения <> Неопределено
			И ЧтениеСообщения.СообщениеБылоПринятоРанее Тогда
			ЗаписатьВПротоколВыполнения(174,,,,,,
				Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято);
		Иначе
			ЗаписатьВПротоколВыполнения(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
	КонецПопытки;
	
	#Вставка
	// дублирую после загрузки данных, регистрацию изменений
	ЗагруженныеДокументыНужноЗарегистрировать = новый Массив;
	Если Параметры.Свойство("ЗагруженныеДокументыНужноЗарегистрировать", ЗагруженныеДокументыНужноЗарегистрировать) тогда
		
		Для Каждого Элемент из ЗагруженныеДокументыНужноЗарегистрировать цикл
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаЗагрузкаДанных,Элемент);				
		Конеццикла;
		
	Конецесли;
	#КонецВставки
		
	ЗавершитьВедениеПротоколаОбмена();
	
	// Сбрасываем модальные переменные перед помещением обработки в платформенный кэш.
	ПолеДокументыДляОтложенногоПроведения = Неопределено;
	ПолеОбъектыДляОтложеннойЗаписи = Неопределено;
	СоответствиеДокументовДляОтложенногоПроведения = Неопределено;
	ПолеСоответствиеТиповДанныхДляЗагрузки = Неопределено;
	ГлобальныйСтекНеЗаписанныхОбъектов = Неопределено;
	СоответствиеПравилКонвертации = Неопределено;
	ОтключитьОбработкуДляОтладки();
	ФайлОбмена = Неопределено;
	
КонецПроцедуры
