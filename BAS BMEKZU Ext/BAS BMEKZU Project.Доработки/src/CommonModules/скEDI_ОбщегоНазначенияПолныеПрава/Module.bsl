
&Вместо("скEDI_РегистрацияЭлектронногоДокументаПриЗаписи")
Процедура СМС_скEDI_РегистрацияЭлектронногоДокументаПриЗаписи(ИсточникСсылка, Отказ) Экспорт
	
	Если не Константы.скEDI_ИспользованиеПодсистемы.Получить() Тогда
		Возврат;
	КонецЕсли;
	ВидДокумента1С = скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(ИсточникСсылка);
	Если ВидДокумента1С <> Неопределено Тогда
		//ВидДокумента1С,Организация,Контрагент,ЕстьТовары,ЕстьУслуги,Дата,ДоговорКонтрагента,СуммаДокумента,Проведен,МожетБытьПроведен",
		Информация = скEDI_НастройкиПодКонфигурацию.ПолучитьИнформациюДляРегистрацииДокумента(ИсточникСсылка);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		|	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидЭлектронногоДокумента.Владелец КАК Организация,
		|	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВхИсх КАК ВхИсх,
		|	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ТекстЗапроса,
		//mod by Al
		|	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.СписокИсключаемыхКонтрагентов
		//mod by Al
		|ИЗ
		|	РегистрСведений.скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов КАК скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов
		|ГДЕ
		|	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидЭлектронногоДокумента.Владелец.Организация1С = &Организация1С
		|	И скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидДокумента1С = &ВидДокумента1С
		|	И (&Дата = НЕОПРЕДЕЛЕНО
		|			ИЛИ скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДатаС = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ИЛИ РАЗНОСТЬДАТ(&Дата, скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДатаС, ДЕНЬ) <= 0)
		|	И (&Дата = НЕОПРЕДЕЛЕНО
		|			ИЛИ скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДатаПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ИЛИ РАЗНОСТЬДАТ(&Дата, скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДатаПо, ДЕНЬ) >= 0)
		|	И (&ЕстьТовары
		|			ИЛИ НЕ скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолжныБытьТовары)
		|	И (&ЕстьУслуги
		|			ИЛИ НЕ скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолжныБытьУслуги)
		|	И (&ОтраженВРег
		|			ИЛИ НЕ скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолженБытьОтраженВРегУчете)
		|	И (&ОтраженВУпр
		|			ИЛИ НЕ скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолженБытьОтраженВУпрУчете)
		|	И скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.Использование
		|	И (&Проведен
		|			ИЛИ скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.УчитыватьНепроведенныеДокументы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидЭлектронногоДокумента,
		|	скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.Приоритет УБЫВ";
		Запрос.УстановитьПараметр("ВидДокумента1С", Информация.ВидДокумента1С);
		Запрос.УстановитьПараметр("Дата", Информация.Дата);
		Запрос.УстановитьПараметр("ЕстьТовары", Информация.ЕстьТовары);
		Запрос.УстановитьПараметр("ЕстьУслуги", Информация.ЕстьУслуги);
		Запрос.УстановитьПараметр("ОтраженВРег", Информация.ОтраженВРег);
		Запрос.УстановитьПараметр("ОтраженВУпр", Информация.ОтраженВУпр);
		Запрос.УстановитьПараметр("Контрагент", Информация.Контрагент);
		Запрос.УстановитьПараметр("Организация1С", Информация.Организация);
		Запрос.УстановитьПараметр("Проведен", (Информация.Проведен или не Информация.МожетБытьПроведен));
		
		ТаблицаВидовЭлектронныхДокументов = Новый ТаблицаЗначений;
		ТаблицаВидовЭлектронныхДокументов.Колонки.Добавить("ВидЭлектронногоДокумента");
		ТаблицаВидовЭлектронныхДокументов.Колонки.Добавить("Организация");
		ТаблицаВидовЭлектронныхДокументов.Колонки.Добавить("ВхИсх");
		Если не Информация.ПометкаУдаления Тогда
			ТекВидЭлектронногоДокумента = Неопределено;
			ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
			Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
				Если ТекВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента Тогда
					Продолжить;
				Иначе
					Если ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.ТекстЗапроса) Тогда
						Попытка
							ДополнительныйЗапрос = Новый Запрос;
							ДополнительныйЗапрос.Текст = ВыборкаРезультатаЗапроса.ТекстЗапроса;
							ДополнительныйЗапрос.УстановитьПараметр("Ссылка", ИсточникСсылка);
							//mod by Al
							СписокИсключаемыхКонтрагентов = ВыборкаРезультатаЗапроса.СписокИсключаемыхКонтрагентов.Получить();
							Если СписокИсключаемыхКонтрагентов = Неопределено Тогда
								СписокИсключаемыхКонтрагентов = Новый Массив;
							КонецЕсли;
							
							ДополнительныйЗапрос.УстановитьПараметр("СписокИсключаемыхКонтрагентов", СписокИсключаемыхКонтрагентов);
							//mod by Al
							ВыборкаРезультатаДополнительногоЗапроса = ДополнительныйЗапрос.Выполнить().Выбрать();
							Если не ВыборкаРезультатаДополнительногоЗапроса.Следующий() Тогда
								Продолжить;
							КонецЕсли;
						Исключение
							Продолжить;
						КонецПопытки; 
					КонецЕсли;
					НоваяСтрокаТаблицыВидовЭлектронныхДокументов = ТаблицаВидовЭлектронныхДокументов.Добавить();
					НоваяСтрокаТаблицыВидовЭлектронныхДокументов.ВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
					НоваяСтрокаТаблицыВидовЭлектронныхДокументов.Организация = ВыборкаРезультатаЗапроса.Организация;
					НоваяСтрокаТаблицыВидовЭлектронныхДокументов.ВхИсх = ВыборкаРезультатаЗапроса.ВхИсх;
					ТекВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ВидыЭлектронныхДокументов = ТаблицаВидовЭлектронныхДокументов.ВыгрузитьКолонку("ВидЭлектронногоДокумента");
		
		НаборЗаписей = РегистрыСведений.скEDI_ЭлектронныеДокументы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ1С.Установить(ИсточникСсылка);
		НаборЗаписей.Прочитать();
		
		ОбработаныеВидыЭлектронныхДокументов = Новый Массив;
		Если НаборЗаписей.Количество() > 0 Тогда
			УдаляемыеЗаписи = Новый Массив;
			Для Каждого СтрокаНабора ИЗ НаборЗаписей Цикл
				Если СтрокаНабора.ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка() Тогда
					Если ВидыЭлектронныхДокументов.Найти(СтрокаНабора.ВидЭлектронногоДокумента) = Неопределено Тогда
						УдаляемыеЗаписи.Добавить(СтрокаНабора);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ВидЭлектронногоДокумента = СтрокаНабора.ВидЭлектронногоДокумента;
				ОбработаныеВидыЭлектронныхДокументов.Добавить(ВидЭлектронногоДокумента);
				СтрокаНабора.Документ1СДата = Информация.Дата;
				СтрокаНабора.Документ1СНомер = Информация.Номер;
				СтрокаНабора.Документ1СКомментарий = Информация.Комментарий;
				СтрокаНабора.Документ1СКонтрагент = Информация.Контрагент;
				СтрокаНабора.Документ1СОрганизация = Информация.Организация;
				СтрокаНабора.Документ1СДоговорКонтрагента = Информация.ДоговорКонтрагента;
				Если ВидЭлектронногоДокумента.ВариантОпределенияСуммыПоДокументу = ПредопределенноеЗначение("Перечисление.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаДокумента") Тогда
					СтрокаНабора.Документ1ССуммаДокумента = Информация.СуммаДокумента;
					СтрокаНабора.Документ1ССуммаНДСДокумента = Информация.СуммаНДСДокумента;
					СтрокаНабора.Документ1ССуммаБезНДСДокумента = Информация.СуммаБезНДСДокумента;
				ИначеЕсли ВидЭлектронногоДокумента.ВариантОпределенияСуммыПоДокументу = ПредопределенноеЗначение("Перечисление.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаТЧТовары") Тогда
					СтрокаНабора.Документ1ССуммаДокумента = Информация.СуммаТовары;
					СтрокаНабора.Документ1ССуммаНДСДокумента = Информация.СуммаНДСТовары;
					СтрокаНабора.Документ1ССуммаБезНДСДокумента = Информация.СуммаБезНДСТовары;
				ИначеЕсли ВидЭлектронногоДокумента.ВариантОпределенияСуммыПоДокументу = ПредопределенноеЗначение("Перечисление.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаТЧУслуги") Тогда
					СтрокаНабора.Документ1ССуммаДокумента = Информация.СуммаУслуги;
					СтрокаНабора.Документ1ССуммаНДСДокумента = Информация.СуммаНДСУслуги;
					СтрокаНабора.Документ1ССуммаБезНДСДокумента = Информация.СуммаБезНДСУслуги;
				КонецЕсли;
				СтрокаНабора.Документ1СПометкаУдаления = Информация.ПометкаУдаления;
				СтрокаНабора.Документ1СПроведен = Информация.Проведен;
				СтрокаНабора.Документ1СМожетБытьПроведен = Информация.МожетБытьПроведен;
				СтрокаНабора.РегистрируетсяВЕРННПокупателем = Информация.РегистрируетсяВЕРННПокупателем;
				
				СтрокаНабора.ВидДокумента1С = Информация.ВидДокумента1С;
			КонецЦикла;
			Для Каждого УдаляемаяЗапись Из УдаляемыеЗаписи Цикл
				НаборЗаписей.Удалить(УдаляемаяЗапись);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицыВидовЭлектронныхДокументов Из ТаблицаВидовЭлектронныхДокументов Цикл
			Если ОбработаныеВидыЭлектронныхДокументов.Найти(СтрокаТаблицыВидовЭлектронныхДокументов.ВидЭлектронногоДокумента) = Неопределено Тогда
				СтрокаНабора = НаборЗаписей.Добавить();
				СтрокаНабора.Организация = СтрокаТаблицыВидовЭлектронныхДокументов.Организация;
				СтрокаНабора.ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
				СтрокаНабора.Документ1С = ИсточникСсылка;
				ВидЭлектронногоДокумента = СтрокаТаблицыВидовЭлектронныхДокументов.ВидЭлектронногоДокумента;
				СтрокаНабора.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
				СтрокаНабора.ВхИсх = СтрокаТаблицыВидовЭлектронныхДокументов.ВхИсх;
				
				СтрокаНабора.Документ1СДата = Информация.Дата;
				СтрокаНабора.Документ1СНомер = Информация.Номер;
				СтрокаНабора.Документ1СКомментарий = Информация.Комментарий;
				СтрокаНабора.Документ1СКонтрагент = Информация.Контрагент;
				СтрокаНабора.Документ1СОрганизация = Информация.Организация;
				СтрокаНабора.Документ1СДоговорКонтрагента = Информация.ДоговорКонтрагента;
				Если ВидЭлектронногоДокумента.ВариантОпределенияСуммыПоДокументу = ПредопределенноеЗначение("Перечисление.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаДокумента") Тогда
					СтрокаНабора.Документ1ССуммаДокумента = Информация.СуммаДокумента;
					СтрокаНабора.Документ1ССуммаНДСДокумента = Информация.СуммаНДСДокумента;
					СтрокаНабора.Документ1ССуммаБезНДСДокумента = Информация.СуммаБезНДСДокумента;
				ИначеЕсли ВидЭлектронногоДокумента.ВариантОпределенияСуммыПоДокументу = ПредопределенноеЗначение("Перечисление.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаТЧТовары") Тогда
					СтрокаНабора.Документ1ССуммаДокумента = Информация.СуммаТовары;
					СтрокаНабора.Документ1ССуммаНДСДокумента = Информация.СуммаНДСТовары;
					СтрокаНабора.Документ1ССуммаБезНДСДокумента = Информация.СуммаБезНДСТовары;
				ИначеЕсли ВидЭлектронногоДокумента.ВариантОпределенияСуммыПоДокументу = ПредопределенноеЗначение("Перечисление.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаТЧУслуги") Тогда
					СтрокаНабора.Документ1ССуммаДокумента = Информация.СуммаУслуги;
					СтрокаНабора.Документ1ССуммаНДСДокумента = Информация.СуммаНДСУслуги;
					СтрокаНабора.Документ1ССуммаБезНДСДокумента = Информация.СуммаБезНДСУслуги;
				КонецЕсли;
				СтрокаНабора.Документ1СПометкаУдаления = Информация.ПометкаУдаления;
				СтрокаНабора.Документ1СПроведен = Информация.Проведен;
				СтрокаНабора.Документ1СМожетБытьПроведен = Информация.МожетБытьПроведен;
				СтрокаНабора.ВидДокумента1С = Информация.ВидДокумента1С;
				СтрокаНабора.РегистрируетсяВЕРННПокупателем = Информация.РегистрируетсяВЕРННПокупателем;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

//DIN 30.04.22 #936
Процедура ПометитьНаУдалениеАктыРасчета(РеестрСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ССЫЛКА ИЗ ДОКУМЕНТ.АКТРАСЧЕТА ГДЕ РеестрТТНВВоз=&РеестрСсылка И НЕ ПометкаУдаления");
	Запрос.УстановитьПараметр("РеестрСсылка",РеестрСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		АктОбъект = Выборка.ссылка.ПолучитьОбъект();
		АктОбъект.УстановитьПометкуУдаления(Истина);
		АктОбъект.записать();
	КонецЦикла;
	
КонецПроцедуры
//DIN 30.04.22 #936

//DIN 30.04.22 #936
Процедура СоздатьАктыРасчета(Источник) Экспорт
	
	Если ТипЗнч(Источник) = тип("ДокументСсылка.ИНАГРО_ТТНВВоз") ИЛИ ТипЗнч(Источник) = тип("ДокументСсылка.ИНАГРО_ТТНВвозЖД") Тогда 
		
		ТипРеестаТТН = ?(ТипЗнч(Источник) = тип("ДокументСсылка.ИНАГРО_ТТНВВоз"),"Документ.ИНАГРО_РеестрТТНВвоз","Документ.ИНАГРО_РеестрТТНЖДВвоз");
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ССЫЛКА ИЗ " + ТипРеестаТТН + ".СписокТТН ГДЕ ТТН = &ТТНСсылка И Ссылка.Проведен");
		Запрос.УстановитьПараметр("ТТНСсылка",Источник);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			РеестрСсылка = Выборка.Ссылка;
		Иначе 
			Возврат;			
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз") ИЛИ ТипЗнч(Источник) = тип("ДокументСсылка.ИНАГРО_РеестрТТНЖДВвоз") Тогда 
		РеестрСсылка = Источник;
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если НЕ РеестрСсылка.Проведен Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаНачалаСозданияАктов = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(ТекущаяДата(),"ДатаНачалаСозданияАктовРасчета",Дата(1,1,1));
	
	//Создаем акты только после установленной даты в параметрах учета
	Если НачалоДня(ТекущаяДата()) < НачалоДня(ДатаНачалаСозданияАктов) или ДатаНачалаСозданияАктов = Дата(1,1,1) Тогда 
		Возврат;
	КонецЕсли;
	
	//del by Al
	//заказчик попросил регистрации документа в любом случае - совпадают веса или нет
	////Если Физический вес совпадает с зачетным, не создаем акты расчета
	//Если РеестрСсылка.ОбщийФизическийВес = РеестрСсылка.ЗачетныйВес Тогда 
	//	Возврат;
	//КонецЕсли;
	//del by Al
	
	//Если Владелец является поставщиком, не создаем акты
	Если РеестрСсылка.Владелец = РеестрСсылка.Поставщик Тогда 
		Возврат;
	КонецЕсли;
	
	СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(РеестрСсылка.Владелец,"СобственноеПодразделение",Ложь);
	
	//Создаем Акты только когда Владелец собсвенный контрагент
	Если НЕ СобственноеПодразделение Тогда 
		Возврат;
	КонецЕсли;
	
	//Если хотя бы в одной ТТН нет договора поставки, не создаем вообще ничего	
	Для каждого Стр из РеестрСсылка.СписокТТН Цикл 
		Если НЕ ЗначениеЗаполнено(Стр.ТТН.ДоговорПоставщика) Тогда 
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СтавкаНДС20 = учетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20);
	ИдентификаторДокумента = РеестрСсылка.Метаданные().Имя;	
	
	//Запрос-проверка на наличие Актов по реестру и электронных документов по ним
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктРасчета.Ссылка,
	|	АктРасчета.ДоговорПоставщика КАК ДоговорПоставщика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьЭлектронныйДокумент
	|ИЗ
	|	Документ.АктРасчета КАК АктРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.скEDI_ЭлектронныеДокументы КАК скEDI_ЭлектронныеДокументы
	|		ПО АктРасчета.Ссылка = скEDI_ЭлектронныеДокументы.Документ1С
	|ГДЕ
	|	АктРасчета.РеестрТТНВВоз = &РеестрТТНВВоз
	//	|	И НЕ АктРасчета.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	АктРасчета.ДоговорПоставщика,
	|	АктРасчета.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорПоставщика";
	
	Запрос.УстановитьПараметр("РеестрТТНВВоз",РеестрСсылка);
	
	СтарыеАкты = Запрос.Выполнить().Выгрузить();
	
	АктРасчетаОбъект     = Неопределено;
	ДоговорПоставщикаТМП = Неопределено;
	Для каждого Стр из РеестрСсылка.СписокТТН Цикл 
		Если ДоговорПоставщикаТМП <> Стр.ТТН.ДоговорПоставщика Тогда 
			
			ДоговорПоставщикаТМП = Стр.ТТН.ДоговорПоставщика;
			
			Если АктРасчетаОбъект <> Неопределено Тогда 
				АктРасчетаОбъект.Записать();
			КонецЕсли;
			
			НайденыйАкт = СтарыеАкты.Найти(Стр.ТТН.ДоговорПоставщика,"ДоговорПоставщика");
			
			Если НайденыйАкт <> Неопределено Тогда 
				
				//Созданные ранее Акты, для которых уже есть электронный документ не трогаем
				Если НайденыйАкт.ЕстьЭлектронныйДокумент Тогда 
					Продолжить;
				КонецЕсли;
				
				//Если ранее был сформирован Акт по договору -  перезаполняем его
				АктРасчетаОбъект = НайденыйАкт.Ссылка.ПолучитьОбъект();
				
				Если АктРасчетаОбъект.ПометкаУдаления Тогда 
					АктРасчетаОбъект.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				АктРасчетаОбъект.Дата = РеестрСсылка.Дата;				
				АктРасчетаОбъект.СписокТТН.Очистить();            
			Иначе 
				АктРасчетаОбъект = Документы.АктРасчета.СоздатьДокумент();
				АктРасчетаОбъект.Дата = РеестрСсылка.Дата;
				АктРасчетаОбъект.УстановитьНовыйНомер();
			КонецЕсли;
			
			АктРасчетаОбъект.РеестрТТНВВоз     = РеестрСсылка;
			АктРасчетаОбъект.Организация       = Стр.ТТН.ДоговорПоставщика.Организация;
			АктРасчетаОбъект.ДоговорПоставщика = Стр.ТТН.ДоговорПоставщика;		
			
			СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(АктРасчетаОбъект.Организация, РеестрСсылка.Дата);
			АктРасчетаОбъект.FIRM_EDRPOU = СведенияОбОрганизации.КодПоЕДРПОУ;
			
			//Заполняем реквизиты для ЭД
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",РеестрСсылка);
			Если Метаданные.Имя = "Управленческая" Тогда	
				Запрос.Текст = "ВЫБРАТЬ
				|	ВложенныйЗапрос.ТТНДоговорПоставщика КАК ТТНДоговорКонтрагента,
				|	АРТ_КонтрактыНаПоставку.Номенклатура КАК Номенклатура,
				|	АРТ_КонтрактыНаПоставку.Вес КАК Вес,
				|	АРТ_КонтрактыНаПоставку.ЦенаКонтракт КАК Цена,
				|	АРТ_КонтрактыНаПоставку.Регистратор.СуммаВключаетНДС КАК СуммаВключаетНДС,
				|	АРТ_КонтрактыНаПоставку.Номенклатура.СтавкаНДС КАК СтавкаНДС,
				|	АРТ_КонтрактыНаПоставку.ДоговорКонтрагента КАК ДоговорПоставщика,
				|	АРТ_КонтрактыНаПоставку.Контракт.ПодписантОрганизации КАК ПодписантОрганизации,
				|	АРТ_КонтрактыНаПоставку.Контракт.ПодписантПоставщика КАК ПодписантПоставщика,
				|	АРТ_КонтрактыНаПоставку.Контракт.ДолжностьПодписантаОрганизации КАК ДолжностьПодписантаОрганизации,
				|	АРТ_КонтрактыНаПоставку.Контракт.ДолжностьПодписантаПоставщика КАК ДолжностьПодписантаПоставщика,
				|	ВЫБОР
				|		КОГДА АРТ_КонтрактыНаПоставку.Регистратор.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаявкаНаКонтракт.ПустаяСсылка)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЭтоДополнение,
				|	ВЫБОР
				|		КОГДА НЕ АРТ_КонтрактыНаПоставку.Регистратор.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаявкаНаКонтракт.ПустаяСсылка)
				|			ТОГДА АРТ_КонтрактыНаПоставку.Регистратор.ДокументОснование.ДоговорКонтрагента
				|	КОНЕЦ КАК БазДоговор
				|ИЗ
				|	РегистрНакопления.АРТ_КонтрактыНаПоставку КАК АРТ_КонтрактыНаПоставку
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.ДоговорПоставщика КАК ТТНДоговорПоставщика,
				|			ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.ДоговорПоставщика.Владелец КАК ТТНДоговорПоставщикаВладелец,
				|			ИНАГРО_РеестрТТНВвозСписокТТН.Ссылка.Номенклатура КАК Номенклатура
				|		ИЗ
				|			Документ." + ИдентификаторДокумента + ".СписокТТН КАК ИНАГРО_РеестрТТНВвозСписокТТН
				|		ГДЕ
				|			ИНАГРО_РеестрТТНВвозСписокТТН.Ссылка = &Ссылка
				|			//%%- И ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.ДоговорПоставщика = &ДоговорПоставщика
				|		
				|		СГРУППИРОВАТЬ ПО
				|			ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.ДоговорПоставщика,
				|			ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.ДоговорПоставщика.Владелец,
				|			ИНАГРО_РеестрТТНВвозСписокТТН.Ссылка.Номенклатура) КАК ВложенныйЗапрос
				|		ПО АРТ_КонтрактыНаПоставку.Контрагент = ВложенныйЗапрос.ТТНДоговорПоставщикаВладелец
				|			И АРТ_КонтрактыНаПоставку.ДоговорКонтрагента = ВложенныйЗапрос.ТТНДоговорПоставщика
				|			И АРТ_КонтрактыНаПоставку.Номенклатура = ВложенныйЗапрос.Номенклатура";
			Иначе 
				Запрос.Текст = "ВЫБРАТЬ
				|	ВложенныйЗапрос.ТТНДоговорПоставщика КАК ДоговорПоставщика,
				|	ЗаявкаНаКонтрактКультуры.Цена КАК Цена,
				|	ЗаявкаНаКонтрактКультуры.СтавкаНДС КАК СтавкаНДС,
				|	ЗаявкаНаКонтрактКультуры.НДС КАК НДС,
				|	ЗаявкаНаКонтрактКультуры.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
				|	ЗаявкаНаКонтрактКультуры.Ссылка.ПодписантОрганизации КАК ПодписантОрганизации,
				|	ЗаявкаНаКонтрактКультуры.Ссылка.ПодписантПоставщика КАК ПодписантПоставщика,
				|	ЗаявкаНаКонтрактКультуры.Ссылка.ДолжностьПодписантаОрганизации КАК ДолжностьПодписантаОрганизации,
				|	ЗаявкаНаКонтрактКультуры.Ссылка.ДолжностьПодписантаПоставщика КАК ДолжностьПодписантаПоставщика,
				|	ВЫБОР
				|		КОГДА ЗаявкаНаКонтрактКультуры.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаявкаНаКонтракт.ПустаяСсылка)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЭтоДополнение,
				|	ВЫБОР
				|		КОГДА НЕ ЗаявкаНаКонтрактКультуры.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаявкаНаКонтракт.ПустаяСсылка)
				|			ТОГДА ЗаявкаНаКонтрактКультуры.Ссылка.ДокументОснование.ДоговорКонтрагента
				|	КОНЕЦ КАК БазДоговор
				|ИЗ
				|	Документ.ЗаявкаНаКонтракт.Культуры КАК ЗаявкаНаКонтрактКультуры
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.ДоговорПоставщика КАК ТТНДоговорПоставщика,
				|			ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.Поставщик КАК ТТНПоставщик,
				|			ИНАГРО_РеестрТТНВвозСписокТТН.Ссылка.Номенклатура КАК Номенклатура
				|		ИЗ
				|			Документ." + ИдентификаторДокумента + ".СписокТТН КАК ИНАГРО_РеестрТТНВвозСписокТТН
				|		ГДЕ
				|			ИНАГРО_РеестрТТНВвозСписокТТН.Ссылка = &Ссылка
				|			//%%- И ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.ДоговорПоставщика = &ДоговорПоставщика
				|		
				|		СГРУППИРОВАТЬ ПО
				|			ИНАГРО_РеестрТТНВвозСписокТТН.Ссылка.Номенклатура,
				|			ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.ДоговорПоставщика,
				|			ИНАГРО_РеестрТТНВвозСписокТТН.ТТН.Поставщик) КАК ВложенныйЗапрос
				|		ПО ЗаявкаНаКонтрактКультуры.Культура = ВложенныйЗапрос.Номенклатура
				|			И ЗаявкаНаКонтрактКультуры.Ссылка.Контрагент = ВложенныйЗапрос.ТТНПоставщик
				|			И ЗаявкаНаКонтрактКультуры.Ссылка.ДоговорКонтрагента = ВложенныйЗапрос.ТТНДоговорПоставщика";
				
			КонецЕсли;			   
			
			ДоговорПоставки = Стр.ТТН.ДоговорПоставщика;
			
			Запрос.УстановитьПараметр("ДоговорПоставщика",ДоговорПоставки);
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"//%%- ","");
			
			ТабКонтрактов = Запрос.Выполнить().Выгрузить();
			ТабКопия = ТабКонтрактов.Скопировать();
			ТабКопия.Свернуть("ДоговорПоставщика");
			КвоДОговоров = ТабКопия.Количество();
			
			Запрос.Текст = ?(Метаданные.Имя = "Управленческая","ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЕСТЬNULL(АРТ_КоэффициентыЕдиницИзмерения.Коэффициент, 1) КАК КоэфПересчетВТонну
			|ПОМЕСТИТЬ КоэфПересчета
			|ИЗ
			|	Константа.ЕдиницаТонны КАК ЕдиницаТонны
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АРТ_КоэффициентыЕдиницИзмерения КАК АРТ_КоэффициентыЕдиницИзмерения
			|		ПО АРТ_КоэффициентыЕдиницИзмерения.ЕдиницаИзмерения = ЕдиницаТонны.Значение",
			"ВЫБРАТЬ 
			|	1000 КАК КоэфПересчетВТонну
			|ПОМЕСТИТЬ КоэфПересчета");
			
			
			Если ИдентификаторДокумента = "ИНАГРО_РеестрТТНВвоз" Тогда
				
				Запрос.Текст  = Запрос.Текст + "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Вес / ЕСТЬNULL(КоэфПересчета.КоэфПересчетВТонну, 1) КАК ВесФакт,
				|	ВложенныйЗапрос.ТТНДоговорПоставщика КАК ТТНДоговорКонтрагента,
				|	ВложенныйЗапрос.Ссылка КАК Ссылка,
				|	ВложенныйЗапрос.ТТНДоговорПоставщика.Номер КАК НомерДоговора,
				|	ВложенныйЗапрос.ТТНДоговорПоставщика.Дата КАК ДатаДоговора,
				|	ВложенныйЗапрос.Ссылка.Номер КАК НомерДок,
				|	ВложенныйЗапрос.Ссылка.Дата КАК ДатаДок,
				|	ВЫРАЗИТЬ(ВложенныйЗапрос.ТТНПоставщик.НаименованиеПолное КАК СТРОКА(500)) КАК Владелец,
				|	ВложенныйЗапрос.Номенклатура + "" урожай "" + ВложенныйЗапрос.Урожай + "" р."" КАК Номенклатура,
				|	ВложенныйЗапрос.Ссылка.Влажность КАК ВлажностьФакт,
				|	ВложенныйЗапрос.Ссылка.Влажность1 КАК ВлажностьБазис,
				|	ВложенныйЗапрос.Ссылка.СорнаяПримесь КАК СорФакт,
				|	ВложенныйЗапрос.Ссылка.СорнаяПримесь1 КАК СорБазис,
				|	ЕСТЬNULL(КоэфПересчета.КоэфПересчетВТонну, 1) КАК КоэфПересчетВТонну,
				|	ВложенныйЗапрос.Ссылка.ЗачетныйВес / ЕСТЬNULL(КоэфПересчета.КоэфПересчетВТонну, 1) КАК ВесЗачетный,
				|	ВложенныйЗапрос.Ссылка.СтоимостьСушки КАК СтоимостьСушки,
				|	ВложенныйЗапрос.Ссылка.СтоимостьОчистки КАК СтоимостьОчистки,
				|	ВложенныйЗапрос.Ссылка.Номенклатура.СтавкаНДС КАК СтавкаНДС,
				|	ВложенныйЗапрос.Ссылка.Ответственный КАК Ответственный
				|ИЗ
				|	КоэфПересчета КАК КоэфПересчета,
				|	(ВЫБРАТЬ
				|		ИНАГРО_РеестрТТНСписокТТН.Ссылка КАК Ссылка,
				|		СУММА(ИНАГРО_РеестрТТНСписокТТН.Вес) КАК Вес,
				|		СУММА(ИНАГРО_РеестрТТНСписокТТН.Влажность) КАК Влажность,
				|		ИНАГРО_РеестрТТНСписокТТН.ТТН.Поставщик КАК ТТНПоставщик,
				|		ИНАГРО_РеестрТТНСписокТТН.ТТН.ДоговорПоставщика КАК ТТНДоговорПоставщика,
				|		ИНАГРО_РеестрТТНСписокТТН.Ссылка.Номенклатура.Наименование КАК Номенклатура,
				|		ИНАГРО_РеестрТТНСписокТТН.Ссылка.Урожай.Год КАК Урожай
				|	ИЗ
				|		Документ.ИНАГРО_РеестрТТНВвоз.СписокТТН КАК ИНАГРО_РеестрТТНСписокТТН
				|	ГДЕ
				|		ИНАГРО_РеестрТТНСписокТТН.Ссылка = &Ссылка
				|	
				|	СГРУППИРОВАТЬ ПО
				|		ИНАГРО_РеестрТТНСписокТТН.Ссылка,
				|		ИНАГРО_РеестрТТНСписокТТН.ТТН.Поставщик,
				|		ИНАГРО_РеестрТТНСписокТТН.ТТН.ДоговорПоставщика) КАК ВложенныйЗапрос
				|ИТОГИ
				|	СУММА(ВесФакт)
				|ПО
				|	ТТНДоговорКонтрагента";
				
			ИначеЕсли ИдентификаторДокумента = "ИНАГРО_РеестрТТНЖДВвоз" Тогда
				
				Запрос.Текст  = Запрос.Текст + "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|	ВЫБРАТЬ
				|		ВложенныйЗапрос.Вес / ЕСТЬNULL(КоэфПересчета.КоэфПересчетВТонну, 1) КАК ВесФакт,
				|		ВложенныйЗапрос.ТТНДоговорПоставщика КАК ТТНДоговорКонтрагента,
				|		ВложенныйЗапрос.Ссылка КАК Ссылка,
				|		ВложенныйЗапрос.ТТНДоговорПоставщика.Номер КАК НомерДоговора,
				|		ВложенныйЗапрос.ТТНДоговорПоставщика.Дата КАК ДатаДоговора,
				|		ВложенныйЗапрос.Ссылка.Номер КАК НомерДок,
				|		ВложенныйЗапрос.Ссылка.Дата КАК ДатаДок,
				|		ВЫРАЗИТЬ(ВложенныйЗапрос.ТТНПоставщик.НаименованиеПолное КАК СТРОКА(500)) КАК Владелец,
				|		ВложенныйЗапрос.Номенклатура + "" урожай "" + ВложенныйЗапрос.Урожай + "" р."" КАК Номенклатура,
				|		ВЫРАЗИТЬ(ВложенныйЗапрос.ВесПоВЛажности / ВложенныйЗапрос.ОбщийФизическийВес * 100 КАК ЧИСЛО(10, 2)) КАК ВлажностьФакт,
				|		ВложенныйЗапрос.Влажность1 КАК ВлажностьБазис,
				|		ВЫРАЗИТЬ(ВложенныйЗапрос.ВесПоСорнойПримеси / ВложенныйЗапрос.ОбщийФизическийВес * 100 КАК ЧИСЛО(10, 2)) КАК СорФакт,
				|		ВложенныйЗапрос.СорнаяПримесь1 КАК СорБазис,
				|		ЕСТЬNULL(КоэфПересчета.КоэфПересчетВТонну, 1) КАК КоэфПересчетВТонну,
				|		ВложенныйЗапрос.ОбщийЗачетныйВес / ЕСТЬNULL(КоэфПересчета.КоэфПересчетВТонну, 1) КАК ВесЗачетный,
				|		ВложенныйЗапрос.Ссылка.Номенклатура.СтавкаНДС КАК СтавкаНДС,
				|		ВложенныйЗапрос.Ссылка.Ответственный КАК Ответственный
				|	ИЗ
				|		КоэфПересчета КАК КоэфПересчета,
				|		(ВЫБРАТЬ
				|			ИНАГРО_РеестрТТНСписокТТН.Ссылка КАК Ссылка,
				|			ИНАГРО_РеестрТТНСписокТТН.ТТН.Поставщик КАК ТТНПоставщик,
				|			ИНАГРО_РеестрТТНСписокТТН.ТТН.ДоговорПоставщика КАК ТТНДоговорПоставщика,
				|			ИНАГРО_РеестрТТНСписокТТН.Ссылка.Номенклатура.Наименование КАК Номенклатура,
				|			ИНАГРО_РеестрТТНСписокТТН.Ссылка.Урожай.Год КАК Урожай,
				|			СУММА(ИНАГРО_РеестрТТНСписокТТН.ФизическийВес) КАК Вес,
				|			ВложенныйЗапрос.ОбщийЗачетныйВес КАК ЗачетныйВес,
				|			СРЕДНЕЕ(ИНАГРО_РеестрТТНСписокТТН.Влажность1) КАК Влажность1,
				|			СРЕДНЕЕ(ИНАГРО_РеестрТТНСписокТТН.СорнаяПримесь1) КАК СорнаяПримесь1,
				|			ВложенныйЗапрос.ОбщийЗачетныйВес КАК ОбщийЗачетныйВес,
				|			ВложенныйЗапрос.ОбщийФизическийВес КАК ОбщийФизическийВес,
				|			ВложенныйЗапрос.ВесПоВЛажности КАК ВесПоВЛажности,
				|			ВложенныйЗапрос.ВесПоСорнойПримеси КАК ВесПоСорнойПримеси
				|		ИЗ
				|			Документ.ИНАГРО_РеестрТТНЖДВвоз.СписокТТН КАК ИНАГРО_РеестрТТНСписокТТН
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					ИНАГРО_РеестрТТНЖДВвозСписокТТН.Ссылка КАК Ссылка,
				|					СУММА(ИНАГРО_РеестрТТНЖДВвозСписокТТН.ЗачетныйВес) КАК ОбщийЗачетныйВес,
				|					СУММА(ИНАГРО_РеестрТТНЖДВвозСписокТТН.Влажность * ИНАГРО_РеестрТТНЖДВвозСписокТТН.ФизическийВес / 100) КАК ВесПоВЛажности,
				|					СУММА(ИНАГРО_РеестрТТНЖДВвозСписокТТН.СорнаяПримесь * ИНАГРО_РеестрТТНЖДВвозСписокТТН.ФизическийВес / 100) КАК ВесПоСорнойПримеси,
				|					СУММА(ИНАГРО_РеестрТТНЖДВвозСписокТТН.ФизическийВес) КАК ОбщийФизическийВес
				|				ИЗ
				|					Документ.ИНАГРО_РеестрТТНЖДВвоз.СписокТТН КАК ИНАГРО_РеестрТТНЖДВвозСписокТТН
				|				ГДЕ
				|					ИНАГРО_РеестрТТНЖДВвозСписокТТН.Ссылка = &Ссылка
				|				
				|				СГРУППИРОВАТЬ ПО
				|					ИНАГРО_РеестрТТНЖДВвозСписокТТН.Ссылка) КАК ВложенныйЗапрос
				|				ПО ИНАГРО_РеестрТТНСписокТТН.Ссылка = ВложенныйЗапрос.Ссылка
				|		ГДЕ
				|			ИНАГРО_РеестрТТНСписокТТН.Ссылка = &Ссылка
				|		
				|		СГРУППИРОВАТЬ ПО
				|			ИНАГРО_РеестрТТНСписокТТН.Ссылка,
				|			ИНАГРО_РеестрТТНСписокТТН.ТТН.Поставщик,
				|			ИНАГРО_РеестрТТНСписокТТН.ТТН.ДоговорПоставщика,
				|			ИНАГРО_РеестрТТНСписокТТН.Ссылка.Номенклатура.Наименование,
				|			ИНАГРО_РеестрТТНСписокТТН.Ссылка.Урожай.Год,
				|			ВложенныйЗапрос.ОбщийЗачетныйВес,
				|			ВложенныйЗапрос.ОбщийФизическийВес,
				|			ВложенныйЗапрос.ВесПоВЛажности,
				|			ВложенныйЗапрос.ВесПоСорнойПримеси,
				|			ВложенныйЗапрос.ОбщийЗачетныйВес) КАК ВложенныйЗапрос
				|	ИТОГИ
				|		СУММА(ВесФакт)
				|	ПО
				|		ТТНДоговорКонтрагента";
				
			КонецЕсли;				
			
			резДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураНалогообложения = РегистрыСведений.СхемыНалогообложенияКонтрагентов.ПолучитьПоследнее(РеестрСсылка.Дата, Новый Структура("Контрагент", РеестрСсылка.Поставщик));
			Если Метаданные.Имя = "Управленческая" Тогда	
				Запрос.Текст = "ВЫБРАТЬ
				|	ИНАГРО_РеестрТТНВвозУслуги.Номенклатура КАК Услуга,
				|	ИНАГРО_РеестрТТНВвозУслуги.Количество КАК Количество,
				|	ИНАГРО_РеестрТТНВвозУслуги.Цена/&КоэфДеления КАК ЦенаУслугиБез,
				|	ИНАГРО_РеестрТТНВвозУслуги.Сумма/&КоэфДеления КАК СтоимостьУслуги,
				|	АгрегаторДанных.Агрегирующее.Наименование КАК Агрегирующее
				|ИЗ
				|	Документ." + ИдентификаторДокумента + ".Услуги КАК ИНАГРО_РеестрТТНВвозУслуги
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АгрегаторДанных КАК АгрегаторДанных
				|		ПО ИНАГРО_РеестрТТНВвозУслуги.Номенклатура = АгрегаторДанных.Агрегируемое
				|ГДЕ
				|	ИНАГРО_РеестрТТНВвозУслуги.Ссылка = &Ссылка";
			Иначе
				Запрос.Текст = "ВЫБРАТЬ
				|	ИНАГРО_РеестрТТНВвозУслуги.Номенклатура КАК Услуга,
				|	ИНАГРО_РеестрТТНВвозУслуги.Количество КАК Количество,
				|	ИНАГРО_РеестрТТНВвозУслуги.Цена/&КоэфДеления КАК ЦенаУслуги,
				|	ИНАГРО_РеестрТТНВвозУслуги.Сумма/&КоэфДеления КАК СтоимостьУслуги
				|ИЗ
				|	Документ." + ИдентификаторДокумента + ".Услуги КАК ИНАГРО_РеестрТТНВвозУслуги
				|ГДЕ
				|	ИНАГРО_РеестрТТНВвозУслуги.Ссылка = &Ссылка";
				
			КонецЕсли;	
			
			//всегда считаем все от цен/сумм с НДС, так как возможно расхождение НДС контрактов/услуг
			КоэфДеления = 1;
			ВидНДС = "без";
			НеВидНДС = "з";
			
			АктРасчетаОбъект.VIDNDS   = ВидНДС;
			АктРасчетаОбъект.NEVIDNDS = НеВидНДС;
			
			Запрос.УстановитьПараметр("КоэфДеления", КоэфДеления);
			
			РезУслуги = Запрос.Выполнить().Выгрузить();
			
			Для каждого Договор из резДерево.Строки Цикл
				
				ТекКонтракт = ТабКонтрактов.Найти(Договор.ТТНДоговорКонтрагента,"ДоговорПоставщика");
				
				Если ТекКонтракт = Неопределено Тогда
					////"Для договора "+ Договор.ТТНДоговорКонтрагента+" не определена заявка на конкракт"
					Продолжить;
				КонецЕсли;	
				
				СтавкаНДСКонтракта = учетНДС.ПолучитьСтавкуНДС(ТекКонтракт.СтавкаНДС);
				
				АктРасчетаОбъект.SIDE_CD_K     = СокрЛП(РеестрСсылка.Поставщик.НаименованиеПолное);
				АктРасчетаОбъект.SIDE_EDRPOU_K = РеестрСсылка.Поставщик.КодПоЕДРПОУ;
				
				Если ТекКонтракт.ЭтоДополнение Тогда
					
					Поз = Найти(ТекКонтракт.ДоговорПоставщика.Номер,"_");
					ТекстДополнение = Число(Сред(ТекКонтракт.ДоговорПоставщика.Номер, Поз+1));
					
					ТекстСодержимого = "до Д/У №" +  ТекстДополнение + " від " + Формат(ТекКонтракт.ДоговорПоставщика.Дата, "ДФ=dd.MM.yyyy");
					
					АктРасчетаОбъект.DOG_DOP  = ТекстСодержимого;
					АктРасчетаОбъект.DOG_NUM  = СокрЛП(ТекКонтракт.БазДоговор.Номер);
					АктРасчетаОбъект.DOG_DATE = ТекКонтракт.БазДоговор.Дата;					
					
				Иначе
					
					АктРасчетаОбъект.DOG_DOP  = "до договору";
					АктРасчетаОбъект.DOG_NUM  = СокрЛП(ТекКонтракт.ДоговорПоставщика.Номер);
					АктРасчетаОбъект.DOG_DATE = ТекКонтракт.ДоговорПоставщика.Дата;					
					
					//ТекстСодержимого = "до договору №" + СокрЛП(ТекКонтракт.ДоговорПоставщика.Номер) + Символы.ПС + 
					//" від " + Формат(ТекКонтракт.ДоговорПоставщика.Дата, "ДФ=dd.MM.yyyy");
					
				КонецЕсли;	
				
				Для каждого Док из Договор.Строки Цикл
					
					АктРасчетаОбъект.NUM     = Формат(Сред(Док.НомерДок,СтрДлина(Док.Ссылка.Организация.Префикс)+1),"ЧЦ=10");
					АктРасчетаОбъект.DOCDATE = Док.ДатаДок;
					
					АктРасчетаОбъект.VESFAKT       = Док.ВесФакт;
					АктРасчетаОбъект.VLAJNOSTFAKT  = Док.ВлажностьФакт;	
					АктРасчетаОбъект.VLAJNOSTBAZIS = Док.ВлажностьБазис;
					АктРасчетаОбъект.SORFAKT       = Док.СорФакт;	
					АктРасчетаОбъект.SORBAZIS      = Док.СорБазис;
					
					ОбщийФизическийВес = ?(ИдентификаторДокумента = "ИНАГРО_РеестрТТНЖДВвоз", док.Ссылка.СписокТТН.Итог("ФизическийВес"), док.Ссылка.ОбщийФизическийВес)/док.КоэфПересчетВТонну;
					//ОбщийФизическийВес = док.Ссылка.ОбщийФизическийВес/док.КоэфПересчетВТонну;
					Пропорция = док.ВесФакт/ОбщийФизическийВес;
					ИтУслуг = 0;
					
					//заполнение таблицы услуг
					Если Метаданные.Имя = "Управленческая" Тогда
						НайдСтрока = РезУслуги.Найти("приймання, т","Агрегирующее"); 
						Если НайдСтрока = Неопределено Тогда
							//	Сообщить("Не найдена Цена для услуги ""приймання, т""");
							ЦенаПриемки = 0;
						Иначе
							ЦенаПриемки = НайдСтрока.ЦенаУслуги;
						КонецЕсли;	
						
						АктРасчетаОбъект.CENAPRIEMKI = ЦенаПриемки - УчетНДС.РассчитатьСуммуНДС(ЦенаПриемки,Истина,Истина,СтавкаНДС20);
						АктРасчетаОбъект.SUMPRIEMKI = 0;
						
						НайдСтрока = РезУслуги.Найти("сушіння, т/%","Агрегирующее"); 
						Если НайдСтрока = Неопределено Тогда
							//	Сообщить("Не найдена Цена для услуги ""сушіння, т/%""");
							ЦенаСушки = 0;
							СтоимостьСушки = 0;
						Иначе
							ЦенаСушки = НайдСтрока.ЦенаУслуги;
							СтоимостьСушки = Окр(НайдСтрока.СтоимостьУслуги*Пропорция,2);
						КонецЕсли;	
						
						АктРасчетаОбъект.CENASUSHKI = ЦенаСушки - УчетНДС.РассчитатьСуммуНДС(ЦенаСушки,Истина,Истина,СтавкаНДС20);
						АктРасчетаОбъект.SUMSUSHKI  = СтоимостьСушки - УчетНДС.РассчитатьСуммуНДС(СтоимостьСушки,Истина,Истина,СтавкаНДС20);
						
						НайдСтрока = РезУслуги.Найти("активне вентилювання, т/%","Агрегирующее"); 
						Если НайдСтрока = Неопределено Тогда
							//	Сообщить("Не найдена Цена для услуги ""активне вентилювання, т/%""");
							ЦенаАктивногоВентиллирования = 0;
							СтоимостьАктивногоВентиллирования = 0;
						Иначе
							ЦенаАктивногоВентиллирования = НайдСтрока.ЦенаУслуги;
							СтоимостьАктивногоВентиллирования = Окр(НайдСтрока.СтоимостьУслуги*Пропорция,2);
						КонецЕсли;	
						
						АктРасчетаОбъект.CENAAKTVENT = ЦенаАктивногоВентиллирования - УчетНДС.РассчитатьСуммуНДС(ЦенаАктивногоВентиллирования,Истина,Истина,СтавкаНДС20);
						АктРасчетаОбъект.SUMAKTVENT  = СтоимостьАктивногоВентиллирования - УчетНДС.РассчитатьСуммуНДС(СтоимостьАктивногоВентиллирования,Истина,Истина,СтавкаНДС20);
						
						НайдСтрока = РезУслуги.Найти("очищення, т/%","Агрегирующее"); 
						Если НайдСтрока = Неопределено Тогда
							//	Сообщить("Не найдена Цена для услуги ""очищення, т/%""");
							ЦенаОчистки = 0;
							СтоимостьОчистки = 0;
						Иначе
							ЦенаОчистки = НайдСтрока.ЦенаУслуги;
							СтоимостьОчистки = Окр(НайдСтрока.СтоимостьУслуги*Пропорция,2);
						КонецЕсли;	
						
						АктРасчетаОбъект.CENAOCHISTKI = ЦенаОчистки - УчетНДС.РассчитатьСуммуНДС(ЦенаОчистки,Истина,Истина,СтавкаНДС20);
						АктРасчетаОбъект.SUMOCHISTKI  = СтоимостьОчистки - УчетНДС.РассчитатьСуммуНДС(СтоимостьОчистки,Истина,Истина,СтавкаНДС20);
						
					Иначе	
						//получение предопределенных значений из регистра сведений
						СтруктураИмен = РегистрыСведений.ИНАГРО_ПредопределеннаяНоменклатура.Получить();
						
						НайдСтрока = РезУслуги.Найти(СтруктураИмен.Приемка,"Услуга"); 
						Если НайдСтрока = Неопределено Тогда
							//	Сообщить("Не найдена Цена для услуги ""приймання, т""");
							ЦенаПриемки = 0;
						Иначе
							ЦенаПриемки = НайдСтрока.ЦенаУслуги;
						КонецЕсли;	
						
						АктРасчетаОбъект.CENAPRIEMKI = ЦенаПриемки - УчетНДС.РассчитатьСуммуНДС(ЦенаПриемки,Истина,Истина,СтавкаНДС20);
						АктРасчетаОбъект.SUMPRIEMKI  = 0;
						
						НайдСтрока = РезУслуги.Найти(СтруктураИмен.Сушка,"Услуга"); 
						Если НайдСтрока = Неопределено Тогда
							//	Сообщить("Не найдена Цена для услуги ""сушіння, т/%""");
							ЦенаСушки = 0;
							СтоимостьСушки = 0;
						Иначе
							ЦенаСушки = НайдСтрока.ЦенаУслуги;
							СтоимостьСушки = Окр(НайдСтрока.СтоимостьУслуги*Пропорция,2);
						КонецЕсли;	
						
						АктРасчетаОбъект.CENASUSHKI = ЦенаСушки - УчетНДС.РассчитатьСуммуНДС(ЦенаСушки,Истина,Истина,СтавкаНДС20);
						АктРасчетаОбъект.SUMSUSHKI  = СтоимостьСушки - УчетНДС.РассчитатьСуммуНДС(СтоимостьСушки,Истина,Истина,СтавкаНДС20);
						
						НайдСтрока = РезУслуги.Найти(СтруктураИмен.Вентилирование,"Услуга"); 
						Если НайдСтрока = Неопределено Тогда
							//	Сообщить("Не найдена Цена для услуги ""активне вентилювання, т/%""");
							ЦенаАктивногоВентиллирования = 0;
							СтоимостьАктивногоВентиллирования = 0;
						Иначе
							ЦенаАктивногоВентиллирования = НайдСтрока.ЦенаУслуги;
							СтоимостьАктивногоВентиллирования = Окр(НайдСтрока.СтоимостьУслуги*Пропорция,2);
						КонецЕсли;	
						
						АктРасчетаОбъект.CENAAKTVENT = ЦенаАктивногоВентиллирования - УчетНДС.РассчитатьСуммуНДС(ЦенаАктивногоВентиллирования,Истина,Истина,СтавкаНДС20);
						АктРасчетаОбъект.SUMAKTVENT  = СтоимостьАктивногоВентиллирования - УчетНДС.РассчитатьСуммуНДС(СтоимостьАктивногоВентиллирования,Истина,Истина,СтавкаНДС20);
						
						НайдСтрока = РезУслуги.Найти(СтруктураИмен.Очистка,"Услуга"); 
						Если НайдСтрока = Неопределено Тогда
							//	Сообщить("Не найдена Цена для услуги ""очищення, т/%""");
							ЦенаОчистки = 0;
							СтоимостьОчистки = 0;
						Иначе
							ЦенаОчистки = НайдСтрока.ЦенаУслуги;
							СтоимостьОчистки = Окр(НайдСтрока.СтоимостьУслуги*Пропорция,2);
						КонецЕсли;	
						
						АктРасчетаОбъект.CENAOCHISTKI = ЦенаОчистки - УчетНДС.РассчитатьСуммуНДС(ЦенаОчистки,Истина,Истина,СтавкаНДС20);
						АктРасчетаОбъект.SUMOCHISTKI  = СтоимостьОчистки - УчетНДС.РассчитатьСуммуНДС(СтоимостьОчистки,Истина,Истина,СтавкаНДС20);
						
					КонецЕсли;	
					
					ИтУслуг = СтоимостьОчистки + СтоимостьСушки + СтоимостьАктивногоВентиллирования;
					ИтУслугБезНДС = ИтУслуг - УчетНДС.РассчитатьСуммуНДС(ИтУслуг,Истина,Истина,СтавкаНДС20);
					
					
					АктРасчетаОбъект.DISCOUNTZERNO = 0;
					АктРасчетаОбъект.GOODS         = Док.Номенклатура;
					АктРасчетаОбъект.VESFAKT       = Док.ВесФакт;
					АктРасчетаОбъект.STAVKANDS     = Док.СтавкаНДС;
					
					ВесЗачетный = Окр(док.ВесЗачетный * Пропорция,3);
					
					АктРасчетаОбъект.VESZACHET  = ВесЗачетный;
					АктРасчетаОбъект.TOTALUSLUG = ИтУслугБезНДС;
					
					АктРасчетаОбъект.CENAZACHET = Окр(?(ТекКонтракт.СуммаВключаетНДС,ТекКонтракт.Цена - УчетНДС.РассчитатьСуммуНДС(ТекКонтракт.Цена,Истина,Ложь,СтавкаНДСКонтракта),ТекКонтракт.Цена),2);
					СтоимостьЗачетнаяБезНДС = Окр(АктРасчетаОбъект.CENAZACHET * ВесЗачетный,2);
					СтоимостьЗачетнаяСНДС   = СтоимостьЗачетнаяБезНДС + Окр(УчетНДС.РассчитатьСуммуНДС(СтоимостьЗачетнаяБезНДС,Истина,Ложь,СтавкаНДСКонтракта),2);
					АктРасчетаОбъект.USLUGIELEVATORA = Окр(ИтУслугБезНДС,2);
					
					//здесь должно быть заполнение дисконта
					АктРасчетаОбъект.SUMDISCOUNT = 0;
					АктРасчетаОбъект.SUMZACHET = СтоимостьЗачетнаяБезНДС;
					
					//промежуточные суммы для расчета Цены Факт
					СтоимостьФактСНДС = СтоимостьЗачетнаяСНДС - ИтУслуг - АктРасчетаОбъект.SUMDISCOUNT;			
					СтоимостьФактБезНДС = СтоимостьФактСНДС - Окр(УчетНДС.РассчитатьСуммуНДС(СтоимостьФактСНДС,Истина,Истина,СтавкаНДСКонтракта),2);
					//промежуточные суммы для расчета Цены Факт
					
					АктРасчетаОбъект.CENAFAKT = Окр(СтоимостьФактБезНДС/док.ВесФакт,2);
					
					//конечные суммы на основании Цены Факт
					СтоимостьФактБезНДС = Окр(АктРасчетаОбъект.CENAFAKT*док.ВесФакт,2);
					СтоимостьФактСНДС = СтоимостьФактБезНДС + Окр(УчетНДС.РассчитатьСуммуНДС(СтоимостьФактБезНДС,Истина,Ложь,СтавкаНДСКонтракта),2);				
					//конечные суммы на основании Цены Факт			
					
					АктРасчетаОбъект.SUMFAKT = СтоимостьФактБезНДС;
					
					АктРасчетаОбъект.SUMNDS    = СтоимостьФактСНДС - СтоимостьФактБезНДС;
					АктРасчетаОбъект.STAVKANDS = Строка(СтавкаНДСКонтракта) + "%";
					
					//здесь должно быть заполнение выданых авансов
					АктРасчетаОбъект.AVANS = 0;
					АктРасчетаОбъект.TOTALPAY = АктРасчетаОбъект.SUMFAKT + АктРасчетаОбъект.SUMNDS - АктРасчетаОбъект.AVANS;
					
					АктРасчетаОбъект.SIDE_OTV_FIO = ТекКонтракт.ПодписантПоставщика;
					АктРасчетаОбъект.SIDE_OTV_POS = ТекКонтракт.ДолжностьПодписантаПоставщика;
					
					АктРасчетаОбъект.VO_NAME = ТекКонтракт.ПодписантОрганизации;
					АктРасчетаОбъект.POSTNAME2 = ТекКонтракт.ДолжностьПодписантаОрганизации;
					
				КонецЦикла;	
				//Заполняем реквизиты для ЭД
			КонецЦикла;	
			
		КонецЕсли;
		
		Если АктРасчетаОбъект <> Неопределено Тогда 
			НоваяСтрокаСписокТТН = АктРасчетаОбъект.СписокТТН.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСписокТТН,Стр);
		КонецЕсли;	
		
	КонецЦикла;
	
	Если АктРасчетаОбъект <> Неопределено Тогда 
		АктРасчетаОбъект.Записать();
	КонецЕсли;
КонецПроцедуры
//DIN 30.04.22 #936