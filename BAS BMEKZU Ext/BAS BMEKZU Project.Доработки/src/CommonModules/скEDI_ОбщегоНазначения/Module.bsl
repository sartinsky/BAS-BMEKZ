
&ИзменениеИКонтроль("ПолучитьТаблицуНеобходимыхПодписейДляДокумента")
Функция СМС_ПолучитьТаблицуНеобходимыхПодписейДляДокумента(ТаблицаНакладываемыхНаДокументПодписей, ДанныеПодписываемогоДокумента, ПодписиПолученыИзЭлектронногоДокумента, ОшибкаПолученияПодписей)	Если ЗначениеЗаполнено(ДанныеПодписываемогоДокумента.ЭлектронныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	скEDI_ЭлектронныйДокументПодписи.Подпись КАК Подпись,
		|	скEDI_ЭлектронныйДокументПодписи.Подписано КАК Подписано,
		|	скEDI_ЭлектронныйДокументПодписи.НомерСтроки КАК ПорядокПодписи,
		|	скEDI_Подписи.Наименование КАК Наименование,
		|	скEDI_Подписи.ДРФО КАК ДРФОПодписанта,
		|	скEDI_Подписи.Роль КАК Роль,
		|	скEDI_Подписи.ИспользованиеКлюча КАК ИспользованиеКлюча,
		|	скEDI_Подписи.Фамилия КАК ФамилияПодписанта,
		|	скEDI_Подписи.Имя КАК ИмяПодписанта
		|ИЗ
		|	Документ.скEDI_ЭлектронныйДокумент.Подписи КАК скEDI_ЭлектронныйДокументПодписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скEDI_Подписи КАК скEDI_Подписи
		|		ПО скEDI_ЭлектронныйДокументПодписи.Подпись = скEDI_Подписи.Ссылка
		|ГДЕ
		|	скEDI_ЭлектронныйДокументПодписи.Ссылка = &ЭлектронныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокПодписи";
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДанныеПодписываемогоДокумента.ЭлектронныйДокумент);
		ТаблицаНакладываемыхНаДокументПодписей = Запрос.Выполнить().Выгрузить();
		Если ТаблицаНакладываемыхНаДокументПодписей.Количество() > 0 Тогда
			ПодписиПолученыИзЭлектронногоДокумента = Истина;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПодписиПолученыИзЭлектронногоДокумента = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ВидыЭлектронныхДокументовПодписи.Подпись КАК Подпись,
	|	скEDI_ВидыЭлектронныхДокументовПодписи.ТолькоОтветственный КАК ТолькоОтветственный,
	|	ЛОЖЬ КАК Подписано,
	|	скEDI_ВидыЭлектронныхДокументовПодписи.НомерСтроки КАК ПорядокПодписи,
	|	скEDI_Подписи.Наименование КАК Наименование,
	|	скEDI_Подписи.ДРФО КАК ДРФОПодписанта,
	|	скEDI_Подписи.Роль КАК Роль,
	|	скEDI_Подписи.ИспользованиеКлюча КАК ИспользованиеКлюча,
	|	скEDI_Подписи.Фамилия КАК ФамилияПодписанта,
	|	скEDI_Подписи.Имя КАК ИмяПодписанта
	|ИЗ
	|	Справочник.скEDI_ВидыЭлектронныхДокументов.Подписи КАК скEDI_ВидыЭлектронныхДокументовПодписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скEDI_Подписи КАК скEDI_Подписи
	|		ПО скEDI_ВидыЭлектронныхДокументовПодписи.Подпись = скEDI_Подписи.Ссылка
	|ГДЕ
	|	скEDI_ВидыЭлектронныхДокументовПодписи.Ссылка = &ВидЭлектронногоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПодписи";
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ДанныеПодписываемогоДокумента.ВидЭлектронногоДокумента);
	ТаблицаНакладываемыхНаДокументПодписей = Запрос.Выполнить().Выгрузить();
	Если ДанныеПодписываемогоДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
		Для Каждого СтрокаТаблицыНакладываемыхНаДокументПодписей Из ТаблицаНакладываемыхНаДокументПодписей Цикл
			Если ТипЗнч(СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись) = Тип("СправочникСсылка.скEDI_ГруппыПодписей") Тогда
				#Удаление
				Если СтрокаТаблицыНакладываемыхНаДокументПодписей.ТолькоОтветственный Тогда
					КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ДанныеПодписываемогоДокумента.Документ1С);
					Если КодПоДРФО = "" Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
						КонецЕсли;
						ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ДанныеПодписываемогоДокумента.Документ1С);
					Иначе
						ТекПодпись = ПолучитьПодписьИзГруппыПоКодуДРФО(ДанныеПодписываемогоДокумента.Организация, СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись, КодПоДРФО);
						Если ТекПодпись = Неопределено Тогда
							Сообщение = НСтр("ru = 'В Группе подписей'; uk = 'В Групі підписів'") + " """ + Строка(СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись) + """ " + НСтр("ru = 'не найдена Подпись с Кодом по ДРФО'; uk = 'не знайдено Підпис з Кодом по ДРФО'") + ": " + КодПоДРФО;
							Если Найти(ОшибкаПолученияПодписей, Сообщение) = 0 Тогда
								Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
								КонецЕсли;
								ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Сообщение;
							КонецЕсли;
							Возврат Ложь;
						КонецЕсли;
						СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись = ТекПодпись;
					КонецЕсли;
				//Иначе
				//	ТекПодпись = Подпись.Подпись;
				КонецЕсли;
				#КонецУдаления
				#Вставка
				Если СтрокаТаблицыНакладываемыхНаДокументПодписей.ТолькоОтветственный
					//не проверяем для универсального документа без учетного документа базы
					И (Не ДанныеПодписываемогоДокумента.ПараметрыСозданияДокументов.ИмяШаблона = "MULTIDOC" И Не ДанныеПодписываемогоДокумента.Документ1С = Неопределено) Тогда
					КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ДанныеПодписываемогоДокумента.Документ1С);
					Если КодПоДРФО = "" Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
						КонецЕсли;
						ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ДанныеПодписываемогоДокумента.Документ1С);
					Иначе
						ТекПодпись = ПолучитьПодписьИзГруппыПоКодуДРФО(ДанныеПодписываемогоДокумента.Организация, СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись, КодПоДРФО);
						Если ТекПодпись = Неопределено Тогда
							Сообщение = НСтр("ru = 'В Группе подписей'; uk = 'В Групі підписів'") + " """ + Строка(СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись) + """ " + НСтр("ru = 'не найдена Подпись с Кодом по ДРФО'; uk = 'не знайдено Підпис з Кодом по ДРФО'") + ": " + КодПоДРФО;
							Если Найти(ОшибкаПолученияПодписей, Сообщение) = 0 Тогда
								Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
								КонецЕсли;
								ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Сообщение;
							КонецЕсли;
							Возврат Ложь;
						КонецЕсли;
						СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись = ТекПодпись;
					КонецЕсли;
				//Иначе
				//	ТекПодпись = Подпись.Подпись;
				КонецЕсли;
				#КонецВставки
			ИначеЕсли ТипЗнч(СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись) = Тип("СправочникСсылка.скEDI_Подписи") Тогда
				#Удаление
				Если СтрокаТаблицыНакладываемыхНаДокументПодписей.ТолькоОтветственный Тогда
					КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ДанныеПодписываемогоДокумента.Документ1С);
					Если КодПоДРФО = "" Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
						КонецЕсли;
						ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ДанныеПодписываемогоДокумента.Документ1С);
						Возврат Ложь;
					Иначе
						Если КодПоДРФО <> СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись.ДРФО Тогда
							Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
								ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
							КонецЕсли;
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Код по ДРФО Подписи не соответствует Ответственному по документу:'; uk = 'Код по ДРФО Підпису не відповідає Відповідальному по документу:'") + " " + Строка(ДанныеПодписываемогоДокумента.Документ1С);
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				#КонецУдаления
				#Вставка
				Если СтрокаТаблицыНакладываемыхНаДокументПодписей.ТолькоОтветственный 
					//не проверяем для универсального документа без учетного документа базы
					И (Не ДанныеПодписываемогоДокумента.ПараметрыСозданияДокументов.ИмяШаблона = "MULTIDOC" И Не ДанныеПодписываемогоДокумента.Документ1С = Неопределено) Тогда
					КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ДанныеПодписываемогоДокумента.Документ1С);
					Если КодПоДРФО = "" Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
						КонецЕсли;
						ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ДанныеПодписываемогоДокумента.Документ1С);
						Возврат Ложь;
					Иначе
						Если КодПоДРФО <> СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись.ДРФО Тогда
							Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
								ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
							КонецЕсли;
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Код по ДРФО Подписи не соответствует Ответственному по документу:'; uk = 'Код по ДРФО Підпису не відповідає Відповідальному по документу:'") + " " + Строка(ДанныеПодписываемогоДокумента.Документ1С);
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				#КонецВставки
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&ИзменениеИКонтроль("ОтправитьКвитанцииFreeПоЭлектроннымДокументам")
Процедура СМС_ОтправитьКвитанцииFreeПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных, КоличествоПодписано) Экспорт

	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);

	Если ДополнительныеПараметры.Свойство("ТекстКвитанции") Тогда 
		ТекстКвитанции = ДополнительныеПараметры.ТекстКвитанции;
	Иначе	
		ТекстКвитанции = "";
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		СодержаниеЭлектронногоДокумента = Неопределено;
		ТелоДокумента              = "";
		ИзображениеДокумента       = "";
		ВложениеДокумента1         = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2         = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3         = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		ТипКвитанции               = ДополнительныеПараметры.ТипКвитанции; 
		
		ПодписыватьКвитанциюВсемиПодписями = Ложь;
		Квитанция = ПредопределенноеЗначение("Документ.скEDI_Квитанция.ПустаяСсылка");
		КвитанцияТело = "";
		КвитанцияТекст = "";
		ВидКвитанции = Неопределено;
		СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка");
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		
		
		ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
		лОрганизацияEDI = ДанныеДокумента.Организация;
		Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Продолжить;
		КонецЕсли;
		// Отклонить и подтвердить мы можем полученные дкоументы. Отозвать - исходящие.
		
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			ОтражатьTSPСтатус = Истина;
			ОтражатьOCSPСтатус = Истина;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
						//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
						//	ДанныеДокумента.ЕстьОшибки = Истина;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						//	Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
							ОшибкаПолученияСодержимогоЭлДок = "";
							СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
							Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
								Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
									ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
								КонецЕсли;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
							//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
							//	ДанныеДокумента.ЕстьОшибки = Истина;
							//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							//	Продолжить;
							КонецЕсли;
							
							ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
							ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
							ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
							ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
							ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
							ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
							ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
							ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
							ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
							ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
							//ПараметрыСобытий.МассивВложений = Новый Массив;
							
							СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
						//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
						//	ДанныеДокумента.ЕстьОшибки = Истина;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						//	Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтзывом;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтзыве;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
					//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
					//	ДанныеДокумента.ЕстьОшибки = Истина;
					//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
					//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
					//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					//	Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
					ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
						//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
						//	ДанныеДокумента.ЕстьОшибки = Истина;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						//	Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		//ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
		//	ОтражатьTSPСтатус = Ложь;
		//	ОтражатьOCSPСтатус = Ложь;
		//	Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
		//		//Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
		//		//	ОшибкаПолученияСодержимогоЭлДок = "";
		//		//	СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
		//		//Иначе
		//			Продолжить;
		//		//КонецЕсли;
		//	ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
		//		Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
		//			ОшибкаПолученияСодержимогоЭлДок = "";
		//			СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//			Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//				Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//					ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//				КонецЕсли;
		//				ДанныеДокумента.ЕстьОшибки = Истина;
		//				
		//				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//				
		//				ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//				ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//				Продолжить;
		//			КонецЕсли;
		//			СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
		//			Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
		//				ОшибкаПолученияСодержимогоЭлДок = "";
		//				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//					КонецЕсли;
		//					ДанныеДокумента.ЕстьОшибки = Истина;
		//					
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//					
		//					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//					Продолжить;
		//				КонецЕсли;
		//				СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//				ПодписыватьКвитанциюВсемиПодписями = Истина;
		//			Иначе
		//				Продолжить;
		//			КонецЕсли;
		//		Иначе
		//			Продолжить;
		//		КонецЕсли;
		//	КонецЕсли;
		//	//СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО")
		//ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		//	ОтражатьTSPСтатус = Ложь;
		//	ОтражатьOCSPСтатус = Ложь;
		//	Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
		//		//Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
		//		//	ОшибкаПолученияСодержимогоЭлДок = "";
		//		//	СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
		//		//Иначе
		//			Продолжить;
		//		//КонецЕсли;
		//	ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
		//		Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
		//			Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
		//				ОшибкаПолученияСодержимогоЭлДок = "";
		//				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//					КонецЕсли;
		//					ДанныеДокумента.ЕстьОшибки = Истина;
		//					
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//					
		//					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//					Продолжить;
		//				КонецЕсли;
		//				СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//			Иначе
		//				Продолжить;
		//			КонецЕсли;
		//		Иначе
		//			Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
		//				ОшибкаПолученияСодержимогоЭлДок = "";
		//				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//					КонецЕсли;
		//					ДанныеДокумента.ЕстьОшибки = Истина;
		//					
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//					
		//					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//					Продолжить;
		//				КонецЕсли;
		//				СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//			ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
		//				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
		//					ОшибкаПолученияСодержимогоЭлДок = "";
		//					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//						КонецЕсли;
		//						ДанныеДокумента.ЕстьОшибки = Истина;
		//						
		//						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//						
		//						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//						Продолжить;
		//					КонецЕсли;
		//					СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//					ПодписыватьКвитанциюВсемиПодписями = Истина;
		//				Иначе
		//					Продолжить;
		//				КонецЕсли;
		//			Иначе
		//				Продолжить;
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не найдено Содержание Электронного документа.'; uk = 'Не знайдено Вміст Електронного документа.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		Иначе
			ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
			ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
			ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
			ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
			ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
			ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
			ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
			ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
			МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не определен Способ отправки.'; uk = 'Не визначено Спосіб відправки.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		КонецЕсли;
		
		Если не НайтиСоздатьКвитанцию(ДанныеДокумента, ДополнительныеПараметры, ЭлектронныйДокумент, ПодписыватьКвитанциюВсемиПодписями, ТипКвитанции, ТекстКвитанции, СпособОтправки, ВидКвитанции, Квитанция, КвитанцияТело, КвитанцияТекст, ЖурналОперации, Истина) Тогда
			Продолжить;
		КонецЕсли;
		Если ПодписыватьКвитанциюВсемиПодписями Тогда
			Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
				Замечание = НСтр("ru = 'Не найдена подготовленая квитанция.'; uk = 'Не знайдено підготовлену квитанцію.'");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			КонецЕсли;
		КонецЕсли;

		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТелоДокумента) Тогда			
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не заполнено Содержание Электронного документа.'; uk = 'Не заповнено Вміст Електронного документа.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		КонецЕсли;
		
		//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ПустаяСсылка");
		лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка");
		лСобытиеЭлектронногоДокументаТекст = "";
		Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ДокументОтозван");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отозван'; uk = 'Документ відкликано'");
		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ОтправкаОтклонения");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отклонен'; uk = 'Документ відхилено'");
		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ОтправкаПодтверждения");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ подтвержден'; uk = 'Документ підтверджено'");
		КонецЕсли;
		
		лРезультатОтправкиОтвета = Неопределено;
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
			Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				МассивВложений = Новый Массив;
				ИндексВложения1 = Неопределено;
				ИндексВложения2 = Неопределено;
				ИндексВложения3 = Неопределено;
				ИндексВложения4 = Неопределено;
				
				// Отправить запрос EDI провайдеру, обработать результат запроса.				
				лПараметрыОтправкиКвитанции = Новый Структура;
				лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиКвитанции.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
				лПараметрыОтправкиКвитанции.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
				лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
				лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
				//лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
				ТекСтрокаПодключенияEDI = Неопределено;
				ТекСерверEDI = Неопределено;
				ТекПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI, "Encrypt");
				
				Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
					Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
						Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
							ДанныеДокумента.ЕстьОшибки = Истина;			
							Продолжить;
						КонецЕсли;
					Иначе
						СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
						СерверEDI = ТекСерверEDI;
						ПортEDI = ТекПортEDI;
					КонецЕсли;
				КонецЕсли;
				
				лПараметрыОтправкиКвитанции.Вставить("MedocKvt",  КвитанцияТело);
				ЕстьПодписаниеПриОтправке = Ложь;
				ДокументПолученРезультатПодписи = Ложь;
				
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв")
				или ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					//Если ЭлектронныйДокумент.IsMultisided Тогда
					//	Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
					//		ДанныеДокумента.ЕстьОшибки = Истина;		
					//		
					//		Замечание = НСтр("ru = 'Отзыв многостороннего Электронного документа не предусмотрен.'; uk = 'Відкликання багатостороннього Електронного документа не передбачено.'");
					//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					//		
					//		ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					//		ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					//		
					//		Продолжить;
					//	КонецЕсли;
					//КонецЕсли;
					
					Отказ = Ложь;
					Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
						тСобытиеПеред = ПараметрыСобытий.СобытиеПеред;
						тОрганизация = ПараметрыСобытий.Организация;
						тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
						тВхИсх = ПараметрыСобытий.ВхИсх;
						тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
						тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
						тСостояние = ПараметрыСобытий.Состояние;
						тДокумент1С = ПараметрыСобытий.Документ1С;
						тМассивВложений = Неопределено;
						ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
						Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
							Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
								тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
							Иначе
								тМассивВложений = Новый Массив;
							КонецЕсли;
							ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
						КонецЕсли;
						тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
						ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
						ПричинаОтказа = "";
						Если не ОбработатьСобытие_ПередОтправкойКвитанции(тСобытиеПеред, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
							Отказ = Истина;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						КонецЕсли;
					КонецЕсли;
					
					Если Отказ Тогда
						ДокументБылПодписан = Ложь;
						ДанныеДокумента.ЕстьОшибки = Истина;			
						Продолжить;
					Иначе
						//МассивСертификатовКлючейПаролей = Новый Массив;
						//
						//ПодписьДляКвитанции = ПолучитьПодписьДляКвитанцииПоДокументу(ЭлектронныйДокумент, ДанныеДокумента.ВидЭлектронногоДокумента);
						//Если ПодписьДляКвитанции <> Неопределено Тогда
						//	Если ТаблицаНастроекПодписей <> Неопределено Тогда
						//		НастройкиПодписиКвитанции = ТаблицаНастроекПодписей.Найти(ПодписьДляКвитанции, "Подпись");
						//	КонецЕсли;
						//	Если НастройкиПодписиКвитанции <> Неопределено Тогда
						//		ЭлементМассиваСертификатовКлючейПаролей = Новый Структура;
						//		
						//		ТекСтрокаПодключенияEDI = Неопределено;
						//		ТекСерверEDI = Неопределено;
						//		ТекПортEDI = Неопределено;
						//		ДобавитьПараметрыСекретногоКлюча(ЭлементМассиваСертификатовКлючейПаролей, НастройкиПодписиКвитанции, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI);
						//		Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
						//			Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
						//				Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
						//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
						//					ДанныеДокумента.ЕстьОшибки = Истина;			
						//					Продолжить;
						//				КонецЕсли;
						//			Иначе
						//				СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
						//				СерверEDI = ТекСерверEDI;
						//				ПортEDI = ТекПортEDI;
						//			КонецЕсли;
						//		КонецЕсли;
						//		МассивСертификатовКлючейПаролей.Добавить(ЭлементМассиваСертификатовКлючейПаролей);
						//	КонецЕсли;
						//КонецЕсли;
						//лПараметрыОтправкиКвитанции.Вставить("Signers", МассивСертификатовКлючейПаролей);
					КонецЕсли;
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					лПараметрыОтправкиКвитанции.Вставить("MedocBody", ТелоДокумента);
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиКвитанции.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
						ИндексВложения1 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
						ИндексВложения2 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
						ИндексВложения3 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
							Если не ЗначениеЗаполнено(ИндексВложения4) Тогда
								ИндексВложения4 = МассивВложений.ВГраница();
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиКвитанции.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					ЕстьПодписаниеПриОтправке = Истина;
					МассивДанныеПоПодписям = ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент);
					МассивСертификатовКлючейПаролей = Новый Массив;
					ТипПодписания = "ptn";	
						
					СписокНаложенныхНаДокументПодписей = Новый СписокЗначений;
					МассивНаложенныхНаДокументПодписейСсылки = Новый Массив;
					ПодписиПолученыИзЭлектронногоДокумента = Ложь;
					ТаблицаНакладываемыхНаДокументПодписей = Неопределено;
					ДокументПодписанПолностью = Истина;
					ДокументБылПодписан = Ложь;
					ДокументПолученРезультатПодписи = Ложь;
					Если ПолучитьТаблицуНеобходимыхПодписейДляДокумента(ТаблицаНакладываемыхНаДокументПодписей, ДанныеДокумента, ПодписиПолученыИзЭлектронногоДокумента, ЖурналОперации) Тогда
						ТаблицаПодписейПоДокументу = Неопределено;
						Если не ПодписиПолученыИзЭлектронногоДокумента Тогда
							ТаблицаПодписейПоДокументу = ТаблицаНакладываемыхНаДокументПодписей.Скопировать();
						КонецЕсли;
						РольСледующейПодписи = Неопределено;
						МассивПодписейДляОбработкиСобытий = Неопределено;
						ДокументПодписанПолностью = ПодготовитьТаблицуНакладываемыхПодписей(ТаблицаНакладываемыхНаДокументПодписей, ТаблицаНастроекПодписей, ДанныеДокумента.Организация, РольСледующейПодписи);
						
						Если не ДокументПодписанПолностью Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Не все подписи заполнены'; uk = 'Не всі підписи заповнені'");
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							Продолжить;
						КонецЕсли;
						
						ДокументБылПодписан = Ложь;
						
						Отказ = Ложь;
						Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
							тСобытиеПеред = ПараметрыСобытий.СобытиеПеред;
							тОрганизация = ПараметрыСобытий.Организация;
							тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
							тВхИсх = ПараметрыСобытий.ВхИсх;
							тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
							тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
							тСостояние = ПараметрыСобытий.Состояние;
							тДокумент1С = ПараметрыСобытий.Документ1С;
							тМассивВложений = Неопределено;
							ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
							Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
								Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
									тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
								Иначе
									тМассивВложений = Новый Массив;
								КонецЕсли;
								ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
							КонецЕсли;
							ПараметрыСобытий.Вставить("МассивПодписей", МассивПодписейДляОбработкиСобытий);
							ПричинаОтказа = "";
							Если ОбработатьСобытие_ПередПодписанием(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
								ПричинаОтказа = "";
								Если не ОбработатьСобытие_ПередОтправкойКвитанции(тСобытиеПеред, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
									Отказ = Истина;
									ДанныеДокумента.ЕстьОшибки = Истина;
									
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
									
									ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
									ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								КонецЕсли;
							Иначе
								Отказ = Истина;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							КонецЕсли;
						КонецЕсли;
						
						Если Отказ Тогда
							ДокументБылПодписан = Ложь;
							ДанныеДокумента.ЕстьОшибки = Истина;			
							Продолжить;
						Иначе
							Для Каждого лДанныеПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
								ЭлементМассиваСертификатовКлючейПаролей = Новый Структура;
								
								ТекСтрокаПодключенияEDI = Неопределено;
								ТекСерверEDI = Неопределено;
								ТекПортEDI = Неопределено;
								ДобавитьПараметрыСекретногоКлюча(ЭлементМассиваСертификатовКлючейПаролей, лДанныеПодписи, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI);
								Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
									Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
										Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
											ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
											ДанныеДокумента.ЕстьОшибки = Истина;			
											Продолжить;
										КонецЕсли;
									Иначе
										СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
										СерверEDI = ТекСерверEDI;
										ПортEDI = ТекПортEDI;
									КонецЕсли;
								КонецЕсли;
								
								лИнформацияПоПодписи = Новый Структура("Дата, ПолучатьOCSP, ПолучатьTSP, Подпись, ВыбранаяПодпись, Наименование, ДРФОПодписанта, СерийныйНомер, ТипПодписания", Дата(1,1,1,0,0,0), Ложь, Ложь, лДанныеПодписи.Подпись, лДанныеПодписи.ВыбранаяПодпись, лДанныеПодписи.Наименование, лДанныеПодписи.ДРФОПодписанта, лДанныеПодписи.СерийныйНомер, ТипПодписания);
								
								лИнформацияПоПодписи.ПолучатьOCSP = Истина;
								лИнформацияПоПодписи.ПолучатьTSP = Истина;
								лИнформацияПоПодписи.Дата = ТекущаяДата();
								СписокНаложенныхНаДокументПодписей.Добавить(лИнформацияПоПодписи);
								МассивСертификатовКлючейПаролей.Добавить(ЭлементМассиваСертификатовКлючейПаролей);
								МассивНаложенныхНаДокументПодписейСсылки.Добавить(лДанныеПодписи.ВыбранаяПодпись);
								ДокументБылПодписан = Истина;
							КонецЦикла;
						КонецЕсли;
					Иначе
						ДокументБылПодписан = Ложь;
						ДанныеДокумента.ЕстьОшибки = Истина;			
						Продолжить;
					КонецЕсли;
					
					Если ДанныеДокумента.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов = Новый Массив;
					Если ДокументБылПодписан Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	скEDI_Факсимиле.Подпись КАК Подпись,
							|	скEDI_Факсимиле.Факсимиле КАК Факсимиле
							|ИЗ
							|	РегистрСведений.скEDI_Факсимиле КАК скEDI_Факсимиле
							|ГДЕ
							|	скEDI_Факсимиле.Подпись В(&СписокПодписей)";
						Запрос.УстановитьПараметр("СписокПодписей", МассивНаложенныхНаДокументПодписейСсылки);
						ТаблицаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
						
						Для Каждого ЭлементСпискаНаложенныхНаДокументПодписей из СписокНаложенныхНаДокументПодписей Цикл
							ФаксимилеЭлектронныхДокументов = Новый Структура;
							ТекПодпись = ЭлементСпискаНаложенныхНаДокументПодписей.Значение.ВыбранаяПодпись;
							ЭлементМассиваДанныеПоПодписям = Новый Структура;
							ФаксимилеЭлектронныхДокументов.Вставить("Роль", ТекПодпись.Роль);
							ТекКодУровняПодписи = ПолучитьКодПодписиПоРоли(ТекПодпись.Роль);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignState", ТекКодУровняПодписи);
							ФаксимилеЭлектронныхДокументов.Вставить("КодУровняПодписи", ТекКодУровняПодписи);
							Если ЗначениеЗаполнено(ТекПодпись.ДРФО) Тогда
								ТекДРФО = ТекПодпись.ДРФО;
								ТекИмяПодписанта = ТекПодпись.Фамилия + " " + ТекПодпись.Имя;
								ТекДолжностьПодписанта = ТекПодпись.Должность;
							Иначе
								ТекДРФО = ТекПодпись.Владелец.Код;
								ТекИмяПодписанта = "";
								ТекДолжностьПодписанта = "";
								Если ТекКодУровняПодписи = -1 Тогда
									ТекКодУровняПодписи = 2;
								КонецЕсли;
							КонецЕсли;
							ЭлементМассиваДанныеПоПодписям.Вставить("Drfo", ТекДРФО);
							ФаксимилеЭлектронныхДокументов.Вставить("ДРФО", ТекДРФО);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignerName", ТекИмяПодписанта);
							ФаксимилеЭлектронныхДокументов.Вставить("ИмяПодписанта", ТекИмяПодписанта);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignerPosName", ТекДолжностьПодписанта);
							ФаксимилеЭлектронныхДокументов.Вставить("ДолжностьПодписанта", ТекДолжностьПодписанта);
							
							ФаксимилеЭлектронныхДокументов.Вставить("ТелоФаксимиле", "");
							НайденыеСтрокиТаблицыДетальныеЗаписи = ТаблицаДетальныеЗаписи.НайтиСтроки(Новый Структура("Подпись", ТекПодпись));
							Для Каждого НайденаяСтрокаТаблицыДетальныеЗаписи Из НайденыеСтрокиТаблицыДетальныеЗаписи Цикл
								ТелоФаксимиле_ХранилищеЗначений = НайденаяСтрокаТаблицыДетальныеЗаписи.Факсимиле.Получить();
								ТелоФаксимиле = Base64Строка(ТелоФаксимиле_ХранилищеЗначений);
								ЭлементМассиваДанныеПоПодписям.Вставить("Body", ТелоФаксимиле);
								ФаксимилеЭлектронныхДокументов.Вставить("ТелоФаксимиле", ТелоФаксимиле);
								Прервать;
							КонецЦикла;
							МассивДанныеПоПодписям.Добавить(ЭлементМассиваДанныеПоПодписям);
							МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов.Добавить(ФаксимилеЭлектронныхДокументов);
						КонецЦикла;
					КонецЕсли;
					
					лПараметрыОтправкиКвитанции.Вставить("Signers", МассивСертификатовКлючейПаролей);
					лПараметрыОтправкиКвитанции.Вставить("SignImages", МассивДанныеПоПодписям);
					
				КонецЕсли;
				лПараметрыОтправкиКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
				
				////////////////////////////////////////////////////////////
				МассивNotifyContacts = Неопределено;
				МассивОтправкаСсылкиНаДокумент = Новый Массив;
				МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
				Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
					Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
						ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
						ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий);
						МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
					КонецЦикла;
				Иначе
					СписокНастроеныхАдресов = Новый СписокЗначений;
					Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
						ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
						ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаОтправкаСсылкиНаДокумент.Комментарий);
						МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						
						СписокНастроеныхАдресов.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
					КонецЦикла;
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ЕДРПОУКонтрагента) Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
						               |	скEDI_КонтактныеДанныеКонтрагентов.Комментарий КАК Комментарий
						               |ИЗ
						               |	РегистрСведений.скEDI_КонтактныеДанныеКонтрагентов КАК скEDI_КонтактныеДанныеКонтрагентов
						               |ГДЕ
						               |	скEDI_КонтактныеДанныеКонтрагентов.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
						               |	И НЕ скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта В (&ЭлектроннаяПочтаСписок)
						               |	И скEDI_КонтактныеДанныеКонтрагентов.ОтправлятьСсылкуНаДокументАвтоматически";
						Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
						Запрос.УстановитьПараметр("ЭлектроннаяПочтаСписок", СписокНастроеныхАдресов);
						ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
						Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", ВыборкаРезультатаЗапроса.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", ВыборкаРезультатаЗапроса.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
					МассивNotifyContacts = Новый Массив;
					Для Каждого ЭлементМассиваОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
						АдресЕстьВСписке = Ложь;
						Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
							Если ВРег(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
								АдресЕстьВСписке = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не АдресЕстьВСписке Тогда
							ЭлементМассиваNotifyContacts = Новый Структура("EMail", ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
						КонецЕсли;
					КонецЦикла;
					лПараметрыОтправкиКвитанции.Вставить("NotifyContacts", МассивNotifyContacts);
				КонецЕсли;
				
				РежимСинхронизации = Ложь;
				ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				Если РежимСинхронизации Тогда
					DocVer = ПолучитьАктуальныйDocVer(ЭлектронныйДокумент);
					лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
				КонецЕсли;
				
				ДатаОперации = ТекущаяДата();
				лИмяФайлаКвитанции = "";
				лСсылкаНаДокумент = "";
				лDocVer = 0;
				//ДокументПолученРезультатПодписи = Ложь;
				
				///////////////////////////////////////////////////////////////////////////////////////////////
				ОтправкаПоМаршруту = Ложь;
				МассивОтправокПоМаршруту = Неопределено;
				МассивИзмененийВМаршруте = Неопределено;
				Если ЭлектронныйДокумент.IsMultisided Тогда
					
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						ОтправкаПоМаршруту = Истина;
						МассивОтправокПоМаршруту = Новый Массив;
						МассивИзмененийВМаршруте = Новый Массив;
						ЕстьОтправленыеКвитанции = Ложь;
						
						ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
						Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
							МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
						КонецЕсли;
						
						ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
						Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							
							//лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
							//лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
							лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							
							ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
							МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
							
							Если РежимСинхронизации Тогда
								лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							КонецЕсли;
							лРезультатОтправкиОтвета = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendansfree", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							Если лРезультатОтправкиОтвета.Code <> 0 Тогда
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиОтвета.Message;
								СобытиеОтправкиОписание = лРезультатОтправкиОтвета.Message;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								тDocVer = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
									Если ЗначениеЗаполнено(тDocVer) Тогда
										лDocVer = тDocVer;
									КонецЕсли;
								КонецЕсли;
								
								тСылкаНаДокумент = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
									Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
										лСсылкаНаДокумент = тСылкаНаДокумент;
									КонецЕсли;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
									лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
									//НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
								лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
								
								тDocVer = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
									Если ЗначениеЗаполнено(тDocVer) Тогда
										лDocVer = тDocVer;
									КонецЕсли;
								КонецЕсли;
								
								тСылкаНаДокумент = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
									Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
										лСсылкаНаДокумент = тСылкаНаДокумент;
									КонецЕсли;
								КонецЕсли;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленой квитанции на сервере СДО.'; uk = 'В результаті відправки не отримано им''я файла відправленої квитанції на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
							
							ЕстьОтправленыеКвитанции = Истина;
						КонецЕсли;
					Иначе
						Если ЕстьПодписаниеПриОтправке Тогда
							Если ЭлектронныйДокумент.RoutePosition + 1 < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								Замечание = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
								ДанныеДокумента.ЕстьОшибки = Истина;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + Замечание);
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							ИначеЕсли ЭлектронныйДокумент.RoutePosition >= 2 Тогда
								Замечание = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
								ДанныеДокумента.ЕстьОшибки = Истина;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + Замечание);
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						ОтправкаПоМаршруту = Истина;
						МассивОтправокПоМаршруту = Новый Массив;
						МассивИзмененийВМаршруте = Новый Массив;
						ЕстьОтправленыеКвитанции = Ложь;
						
						ИнформацияООтправленойКвитанции = "";
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + НСтр("ru = 'Имя файла электронного документа: '; uk = 'Ім''я файлу електронного документу: '") + ЭлектронныйДокумент.ИмяФайла;
						
						лПараметрыОтправкиКвитанции.Вставить("RoutePosition", ЭлектронныйДокумент.RoutePosition);
						Для ПозицияВМаршруте = 0 по ЭлектронныйДокумент.RoutePosition - 1 Цикл
							ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Ложь);
							//////лПараметрыОтправкиКвитанции.Вставить("IsMultiChange", Истина);//?
							лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							Если РежимСинхронизации Тогда
								лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							КонецЕсли;
							
							//лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							лРезультатОтправкиОтвета = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendansfree", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							Если лРезультатОтправкиОтвета.Code <> 0 Тогда
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиОтвета.Message;
								СобытиеОтправкиОписание = лРезультатОтправкиОтвета.Message;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								тDocVer = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
									Если ЗначениеЗаполнено(тDocVer) Тогда
										лDocVer = тDocVer;
									КонецЕсли;
								КонецЕсли;
								
								тСылкаНаДокумент = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
									Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
										лСсылкаНаДокумент = тСылкаНаДокумент;
									КонецЕсли;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
									лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
									//НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
								лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
								
								тDocVer = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
									Если ЗначениеЗаполнено(тDocVer) Тогда
										лDocVer = тDocVer;
									КонецЕсли;
								КонецЕсли;
								
								тСылкаНаДокумент = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
									Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
										лСсылкаНаДокумент = тСылкаНаДокумент;
									КонецЕсли;
								КонецЕсли;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленой квитанции на сервере СДО.'; uk = 'В результаті відправки не отримано им''я файла відправленої квитанції на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
							
							//Если лРезультатОтправкиОтвета = Неопределено Тогда	
							//	ДанныеДокумента.ЕстьОшибки = Истина;				
							//	
							//	Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
							//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							//	
							//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							//	
							//	//Продолжить;
							//Иначе
								//Если Не ЕстьОтправленыеКвитанции Тогда
									ИмяФайлаКвитанции = лИмяФайлаКвитанции;//лРезультатОтправкиОтвета.ИмяФайла;
									DocVerКвитанции = лDocVer;//лРезультатОтправкиОтвета.DocVer;
									ЕстьОтправленыеКвитанции = Истина;
								//КонецЕсли;
								DocVer = лDocVer;//лРезультатОтправкиОтвета.DocVer;
								
								ЭлементМассиваОтправокПоМаршруту = Новый Структура;
								ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лИмяФайлаКвитанции);//лРезультатОтправкиОтвета.ИмяФайла);
								ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лDocVer);//лРезультатОтправкиОтвета.DocVer);
								ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Ложь);
								МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
								
								Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
									ЭлементМассиваИзмененийВМаршруте = Новый Структура;
									ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
									ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
									МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
								КонецЕсли;
								
								ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
								+ Символы.ПС
								+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
								+ Символы.ПС
								+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лИмяФайлаКвитанции;//лРезультатОтправкиОтвета.ИмяФайла;
							//КонецЕсли;
						КонецЦикла;
						
						Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ЭлементМассиваИзмененийВМаршруте = Новый Структура;
								ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
								ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
								МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							КонецЕсли;
						ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ЭлементМассиваИзмененийВМаршруте = Новый Структура;
								ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
								ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение"));
								МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							КонецЕсли;
							
							//ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
							//Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							//	ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							//	
							//	лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
							//	лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
							//	лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							//	лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							//	лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							//	Если РежимСинхронизации Тогда
							//		лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							//	КонецЕсли;
							//	лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							//	Если лРезультатОтправкиОтвета = Неопределено Тогда	
							//		ДанныеДокумента.ЕстьОшибки = Истина;				
							//		
							//		Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
							//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							//		
							//		ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							//		ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							//		
							//		//Продолжить;
							//	Иначе
							//		//Если Не ЕстьОтправленыеКвитанции Тогда
							//			ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
							//			DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
							//			ЕстьОтправленыеКвитанции = Истина;
							//		//КонецЕсли;
							//		
							//		ЭлементМассиваОтправокПоМаршруту = Новый Структура;
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лРезультатОтправкиОтвета.ИмяФайла);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лРезультатОтправкиОтвета.DocVer);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Истина);
							//		МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
							//		
							//		ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							//		ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							//		ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен"));
							//		МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							//		лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
							//		
							//		ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
							//		+ Символы.ПС
							//		+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
							//		+ Символы.ПС
							//		+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
							//	КонецЕсли;
							//КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если не ЕстьОтправленыеКвитанции Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					лПараметрыОтправкиКвитанции.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
				
				
				
				
					лРезультатОтправкиОтвета = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendansfree", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиОтвета.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиОтвета.Message;
						СобытиеОтправкиОписание = лРезультатОтправкиОтвета.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
							лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
							//НовоеСостояниеЭлектронногоДокумента = Неопределено;
						Иначе
							Продолжить;
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
						лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленой квитанции на сервере СДО.'; uk = 'В результаті відправки не отримано им''я файла відправленої квитанції на сервері СДО.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьПодписаниеПриОтправке Тогда
					тТелоДокумента = Неопределено;
					Если лРезультатОтправкиОтвета.Свойство("MedocBody", тТелоДокумента) Тогда
						Если ЗначениеЗаполнено(тТелоДокумента) Тогда
							ДокументПолученРезультатПодписи = Истина;
							ТелоДокумента = тТелоДокумента;
							ИзображениеДокумента = "";
							ВложениеДокумента1 = "";
							//ИмяФайлаВложениеДокумента1 = "";
							ВложениеДокумента2 = "";
							//ИмяФайлаВложениеДокумента2 = "";
							ВложениеДокумента3 = "";
							//ИмяФайлаВложениеДокумента3 = "";
							Если ТипПодписания = "ptn" Тогда
								Если ТипЗнч(лРезультатОтправкиОтвета) = Тип("Структура") Тогда
									лКонтейнерPDFПредставленияДокумента = Неопределено;
									Если лРезультатОтправкиОтвета.Свойство("ImageBody", лКонтейнерPDFПредставленияДокумента) Тогда
										Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
											лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
										ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
											ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
										КонецЕсли;
									КонецЕсли;
									лКонтейнерВложений = Неопределено;
									Если лРезультатОтправкиОтвета.Свойство("AttachmentBody", лКонтейнерВложений) Тогда
										Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
											Если ИндексВложения1 <> Неопределено Тогда
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ИндексВложения1];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												ВложениеДокумента1 = лТелоВложения;
											КонецЕсли;
											Если ИндексВложения2 <> Неопределено Тогда
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ИндексВложения2];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												ВложениеДокумента2 = лТелоВложения;
											КонецЕсли;
											Если ИндексВложения3 <> Неопределено Тогда
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ИндексВложения3];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												ВложениеДокумента3 = лТелоВложения;
											КонецЕсли;
											Если ИндексВложения4 <> Неопределено Тогда
												ТекИндексВложения = ИндексВложения4;
												МассивВложенийДокумента4Результат = Новый Массив;
												Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
													лТелоВложения = Неопределено;
													лКонтейнерВложения = лКонтейнерВложений[ТекИндексВложения];
													Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
														лКонтейнерВложения.Свойство("Body", лТелоВложения);
													ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
														лТелоВложения = лКонтейнерВложения.Получить("Body");
													КонецЕсли;
													
													ТекСтруктураВложения = Новый Структура;
													ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
													ТекСтруктураВложения.Вставить("ВложениеДокумента", лТелоВложения);
													МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
													ТекИндексВложения = ТекИндексВложения + 1;
												КонецЦикла;
												МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								ИначеЕсли ТипЗнч(лРезультатОтправкиОтвета) = Тип("Соответствие") Тогда
									лКонтейнерPDFПредставленияДокумента = лРезультатОтправкиОтвета.Получить("ImageBody");
									Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
										лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
									ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
										ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
									КонецЕсли;
									
									лКонтейнерВложений = лРезультатОтправкиОтвета.Получить("AttachmentBody");
									Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
										Если ИндексВложения1 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения1];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента1 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения2 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения2];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента2 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения3 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения3];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента3 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения4 <> Неопределено Тогда
											ТекИндексВложения = ИндексВложения4;
											МассивВложенийДокумента4Результат = Новый Массив;
											Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ТекИндексВложения];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												
												ТекСтруктураВложения = Новый Структура;
												ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
												ТекСтруктураВложения.Вставить("ВложениеДокумента", лТелоВложения);
												МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
												ТекИндексВложения = ТекИндексВложения + 1;
											КонецЦикла;
											МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
				ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					Если ТекстКвитанции <> "" Тогда
						лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = ТекстКвитанции;
					КонецЕсли;
				КонецЕсли;
				Если ОтправкаПоМаршруту Тогда
					Для Каждого ЭлементМассиваИзмененийВМаршруте Из МассивИзмененийВМаршруте Цикл
						ЭлементМаршрута = лЭлектронныйДокументОбъект.Маршрут.Получить(ЭлементМассиваИзмененийВМаршруте.ПозицияВМаршруте);
						ЭлементМаршрута.Состояние = ЭлементМассиваИзмененийВМаршруте.Состояние;
					КонецЦикла;
				КонецЕсли;
				Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
					Если лЭлектронныйДокументОбъект.DocHref = "" Тогда
						лЭлектронныйДокументОбъект.DocHref  = лСсылкаНаДокумент;
					КонецЕсли;
				КонецЕсли;
				СобытиеОтправкиСсылкиНаДокумент = Неопределено;
				ОписаниеПоОтправкеСсылкиНаДокумент = "";
				Если ТипЗнч(МассивОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'на электронную почту:'; uk = 'на електронну пошту:'");
						Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
							СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
						КонецЕсли;
						лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
							НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
							НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
							
							ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
							Если ЗначениеЗаполнено(СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий) Тогда
								ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				//ДокументБылСоздан = Ложь;
				//Если НЕ ДанныеДокумента.ЕстьОшибки Тогда//??? И ДокументБылПодписан Тогда
				Если ДокументПолученРезультатПодписи Тогда
					Если Не ПодписиПолученыИзЭлектронногоДокумента Тогда
						Для Каждого СтрокаПодписи из ТаблицаПодписейПоДокументу Цикл
							НоваяСтрокаПодписи = лЭлектронныйДокументОбъект.Подписи.Добавить();
							НоваяСтрокаПодписи.Подпись = СтрокаПодписи.Подпись;
						КонецЦикла;
					КонецЕсли;
					Для Каждого СтрокаПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
						ПодписиВДокументе = лЭлектронныйДокументОбъект.Подписи.НайтиСтроки(Новый Структура("Подпись", СтрокаПодписи.Подпись));
						Для Каждого ПодписьВДокументе Из ПодписиВДокументе Цикл
							ПодписьВДокументе.Подпись = СтрокаПодписи.ВыбранаяПодпись;
							ПодписьВДокументе.Подписано = Истина;
							ПодписьВДокументе.ДатаПодписания = ДатаОперации;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаОперации;
				ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец);
				
				Если ДокументПолученРезультатПодписи Тогда
					скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
						ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
						ТелоДокумента,
						ИзображениеДокумента,
						ВложениеДокумента1,
						ИмяФайлаВложениеДокумента1,
						ВложениеДокумента2,
						ИмяФайлаВложениеДокумента2,
						ВложениеДокумента3,
						ИмяФайлаВложениеДокумента3,
						МассивВложенийДокумента4,
						ТекущаяДата(),
						"",//лИмяФайла,
						0,//лDocVer,
						лСсылкаНаДокумент,
						Ложь,
						Ложь,
						Неопределено,
						Ложь
					);
					
					Для Каждого ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов из МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов Цикл
						МенеджерЗаписи = РегистрыСведений.скEDI_ФаксимилеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
						МенеджерЗаписи.КодУровняПодписи = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.КодУровняПодписи;
						МенеджерЗаписи.ДРФО = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДРФО;
						МенеджерЗаписи.Сторона = лЭлектронныйДокументОбъект.RoutePosition;
						МенеджерЗаписи.ТелоФаксимиле = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ТелоФаксимиле;
						МенеджерЗаписи.ИмяПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ИмяПодписанта;
						МенеджерЗаписи.ДолжностьПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДолжностьПодписанта;
						МенеджерЗаписи.Роль = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.Роль;
						МенеджерЗаписи.Записать(Истина);
					КонецЦикла;
					
					ОписаниеНаложеныхПодписей = ЗафиксироватьСобытияПоПодписаниюДокумента(ДанныеДокумента.ЭлектронныйДокумент, СписокНаложенныхНаДокументПодписей);
					
					СобытиеДляЖурнала = НСтр("ru = 'Документ подписан'; uk = 'Документ підписано'") + ": """
					+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy")
					+ Символы.ПС + ОписаниеНаложеныхПодписей;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СобытиеОтправкиСсылкиНаДокумент) Тогда
					лОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Отправлена ссылка на Электронный документ'; uk = 'Відправлено посилання на Електронний документ'")
					+ Символы.ПС
					+ лСсылкаНаДокумент
					+ Символы.ПС
					+ ОписаниеПоОтправкеСсылкиНаДокумент;
					
					ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправкиСсылкиНаДокумент, лОписаниеПоОтправкеСсылкиНаДокумент, ДатаОперации);
				КонецЕсли;
					
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				
				// Создать документ по квитанции-ответу
				ИнформацияООтправленойКвитанции = НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ФилиалКонтрагента), "(" + лЭлектронныйДокументОбъект.ФилиалКонтрагента + ")", "");
				ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
				|
				|"
				+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ЭлектронныйДокумент.ИмяФайла + "
				|"
				+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лИмяФайлаКвитанции + "
				|
				|" + КвитанцияТекст;// ПолныйТекстКвитанции;
				
				Если не ПодписыватьКвитанциюВсемиПодписями и ДокументПолученРезультатПодписи Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
						|
						|"
						+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
						ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), ИнформацияООтправленойКвитанции, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
					КонецЕсли;
				КонецЕсли;
				
				
				Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
					лДанныеЗаполненияКвитанции = Новый Структура;
					лДанныеЗаполненияКвитанции.Вставить("Дата",                ДатаОперации);
					лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("Организация",         лОрганизацияEDI);
					лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
					лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            лИмяФайлаКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("DocVer",              лDocVer);
					лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   лЭлектронныйДокументОбъект.ФилиалКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияООтправленойКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       КвитанцияТело);
					лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
					
					лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
					лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
					Если ОтправкаПоМаршруту Тогда
						Для Каждого ЭлементМассиваОтправокПоМаршруту Из МассивОтправокПоМаршруту Цикл
							НоваяСтрокаОтправкиПоМаршруту = лКвитанцияОбъект.ОтправкиПоМаршруту.Добавить();
							НоваяСтрокаОтправкиПоМаршруту.ЕДРПОУКонтрагента = ЭлементМассиваОтправокПоМаршруту.ЕДРПОУКонтрагента;
							НоваяСтрокаОтправкиПоМаршруту.ФилиалКонтрагента = ЭлементМассиваОтправокПоМаршруту.ФилиалКонтрагента;
							НоваяСтрокаОтправкиПоМаршруту.ИмяФайла = ЭлементМассиваОтправокПоМаршруту.ИмяФайла;
							НоваяСтрокаОтправкиПоМаршруту.DocVer = ЭлементМассиваОтправокПоМаршруту.DocVer;
							НоваяСтрокаОтправкиПоМаршруту.RoutePosition = ЭлементМассиваОтправокПоМаршруту.RoutePosition;
							НоваяСтрокаОтправкиПоМаршруту.ToNextHop = ЭлементМассиваОтправокПоМаршруту.ToNextHop;
						КонецЦикла;
					КонецЕсли;
				Иначе
					лКвитанцияОбъект = Квитанция.ПолучитьОбъект();
					лКвитанцияОбъект.Дата = ДатаОперации;
					лКвитанцияОбъект.ТекстКвитанции = ИнформацияООтправленойКвитанции;
					лКвитанцияОбъект.Готовится = Ложь;
					лКвитанцияОбъект.ИмяФайла = лИмяФайлаКвитанции;
					лКвитанцияОбъект.DocVer = лDocVer;
					//лКвитанцияОбъект.ТелоКвитанции = КвитанцияТело;
					Если ОтправкаПоМаршруту Тогда
						Для Каждого ЭлементМассиваОтправокПоМаршруту Из МассивОтправокПоМаршруту Цикл
							НоваяСтрокаОтправкиПоМаршруту = лКвитанцияОбъект.ОтправкиПоМаршруту.Добавить();
							НоваяСтрокаОтправкиПоМаршруту.ЕДРПОУКонтрагента = ЭлементМассиваОтправокПоМаршруту.ЕДРПОУКонтрагента;
							НоваяСтрокаОтправкиПоМаршруту.ФилиалКонтрагента = ЭлементМассиваОтправокПоМаршруту.ФилиалКонтрагента;
							НоваяСтрокаОтправкиПоМаршруту.ИмяФайла = ЭлементМассиваОтправокПоМаршруту.ИмяФайла;
							НоваяСтрокаОтправкиПоМаршруту.DocVer = ЭлементМассиваОтправокПоМаршруту.DocVer;
							НоваяСтрокаОтправкиПоМаршруту.RoutePosition = ЭлементМассиваОтправокПоМаршруту.RoutePosition;
							НоваяСтрокаОтправкиПоМаршруту.ToNextHop = ЭлементМассиваОтправокПоМаршруту.ToNextHop;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
				лКвитанцияОбъект.Записать();
				
				СобытиеДляЖурнала = лСобытиеЭлектронногоДокументаТекст + ": """
				+ ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + ЭлектронныйДокумент.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
				
				#Удаление
				УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
				#КонецУдаления
				#Вставка
				ДокументИсходящий = ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий");
				Если НЕ ДокументИсходящий ИЛИ (ДокументИсходящий И лОрганизацияEDI.УстанавливатьПризнакОбработаноПриОтправкеИсходящегоДокументаКонтрагенту) Тогда
					УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
				КонецЕсли;	
				#КонецВставки
				
				Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
					тСобытиеПри = ПараметрыСобытий.СобытиеПри;
					тОрганизация = ПараметрыСобытий.Организация;
					тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
					тВхИсх = ПараметрыСобытий.ВхИсх;
					тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
					тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					тСостояние = лЭлектронныйДокументОбъект.Состояние;
					тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
					тМассивВложений = Неопределено;
					ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
					Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
						Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
							тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
						Иначе
							тМассивВложений = Новый Массив;
						КонецЕсли;
						ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
					КонецЕсли;
					тМассивПодписей = Неопределено;
					ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
					Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
						тМассивПодписей = Новый Массив;
						ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
					КонецЕсли;
					ОбработатьСобытие_ПриОтправкеКвитанции(тСобытиеПри, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
				КонецЕсли;
			КонецЕсли;
		//ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ПодписатьОтправитьFreeЭлектронныеДокументыСервер")
Процедура СМС_ПодписатьОтправитьFreeЭлектронныеДокументыСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
	
	//ДанныеДокумента, НастройкиНеобходимыхПодписей, ЖурналОперации = ""
	
	лРезультатНаложенияПредыдущейПоПорядкуПодписи = Неопределено;
	
	//лНетОшибокВПроцессеПодписания = Истина;
	
	ЖурналОперации           = "";//ДополнительныеПараметры.ЖурналОперации;
	ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
	
	МожноОтправитьТолькоСсылку = Ложь;
	Если ДополнительныеПараметры.Свойство("МожноОтправитьТолькоСсылку") Тогда
		МожноОтправитьТолькоСсылку = ДополнительныеПараметры.МожноОтправитьТолькоСсылку;
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл 
		Если ДанныеДокумента.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		лОрганизацияEDI = ДанныеДокумента.Организация;//ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);	
		
		ДатаСозданияДокумента = Неопределено;
		ТелоДокумента = "";
		ИзображениеДокумента = "";
		ВложениеДокумента1 = "";
		ВложениеДокументаБезПодписи1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокументаФайл1 = Неопределено;
		ВложениеДокумента2 = "";
		ВложениеДокументаБезПодписи2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокументаФайл2 = Неопределено;
		ВложениеДокумента3 = "";
		ВложениеДокументаБезПодписи3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		ВложениеДокументаФайл3 = Неопределено;
		МассивВложенийДокумента4 = Неопределено;
		МассивВложенийДокументаБезПодписи4 = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		СтруктураДанныхКонтрагента = Неопределено;
		СпособОтправки = Неопределено;
		ВариантОтправки = 0;
		//ПодписыватьКвитанциюВсемиПодписями = Ложь;
		//Квитанция = ПредопределенноеЗначение("Документ.скEDI_Квитанция.ПустаяСсылка");
		//КвитанцияТело = "";
		//КвитанцияТекст = "";
		//ТипКвитанции = Неопределено;
		//ВидКвитанции = Неопределено;
		//ЭтоИсходящийДокумент = Ложь;
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		OnlyHref = Ложь;
		
		Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") 
		или ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
			Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
			или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
				СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				ВариантОтправки = 1;// 1 - ПервичныйДокумент Контрагенту
				//ЭтоИсходящийДокумент = Истина;
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
					ЭлектронныйДокумент = ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка");
					ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
					ТелоДокумента = ДанныеДокумента.ТелоДокумента;
					ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					ПараметрыСобытий.МассивВложений = Новый Массив;
					
					ВложениеДокумента1 = ДанныеДокумента.ВложениеДокумента1;
					ВложениеДокументаБезПодписи1 = ДанныеДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = ДанныеДокумента.ИмяФайлаВложениеДокумента1;
					Попытка
						ВложениеДокументаФайл1 = ДанныеДокумента.ВложениеДокументаФайл1;
					Исключение
						ВложениеДокументаФайл1 = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(ВложениеДокумента1) Тогда
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента1, ВложениеДокументаБезПодписи1, ВложениеДокументаФайл1);
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЕсли;
					ВложениеДокумента2 = ДанныеДокумента.ВложениеДокумента2;
					ВложениеДокументаБезПодписи2 = ДанныеДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = ДанныеДокумента.ИмяФайлаВложениеДокумента2;
					Попытка
						ВложениеДокументаФайл2 = ДанныеДокумента.ВложениеДокументаФайл2;
					Исключение
						ВложениеДокументаФайл2 = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(ВложениеДокумента2) Тогда
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента2, ВложениеДокументаБезПодписи2, ВложениеДокументаФайл2);
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЕсли;
					ВложениеДокумента3 = ДанныеДокумента.ВложениеДокумента3;
					ВложениеДокументаБезПодписи3 = ДанныеДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = ДанныеДокумента.ИмяФайлаВложениеДокумента3;
					Попытка
						ВложениеДокументаФайл3 = ДанныеДокумента.ВложениеДокументаФайл3;
					Исключение
						ВложениеДокументаФайл3 = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(ВложениеДокумента3) Тогда
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента3, ВложениеДокументаБезПодписи3, ВложениеДокументаФайл3);
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЕсли;
					МассивВложенийДокумента4 = ДанныеДокумента.МассивВложенийДокумента4;
					МассивВложенийДокументаБезПодписи4 = ДанныеДокумента.МассивВложенийДокумента4;
					Если ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("Массив") Тогда
						Для Каждого ЭлементМассиваВложенийДокументаБезПодписи4 из МассивВложенийДокументаБезПодписи4 Цикл
							Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл");
							Вложение.ИмяФайла = ЭлементМассиваВложенийДокументаБезПодписи4.ИмяФайлаВложениеДокумента;
							Вложение.СтрокаBase64 = ЭлементМассиваВложенийДокументаБезПодписи4.ВложениеДокумента;
							Вложение.Файл = ЭлементМассиваВложенийДокументаБезПодписи4.ВложениеДокументаФайл;
							ПараметрыСобытий.МассивВложений.Добавить(Вложение);
						КонецЦикла;
					КонецЕсли;
				
					ОшибкаПараметровСоздания = "";
					Если не ПроверитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ОшибкаПараметровСоздания) Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + ОшибкаПараметровСоздания);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПараметровСоздания);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					КонецЕсли;
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
					ТелоДокумента = ДанныеДокумента.ТелоДокумента;
					ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					Замечание = "";
					ПолучитьВложенияЭлектронногоДокумента(ЭлектронныйДокумент, ВложениеДокумента1, ИмяФайлаВложениеДокумента1, ВложениеДокумента2, ИмяФайлаВложениеДокумента2, ВложениеДокумента3, ИмяФайлаВложениеДокумента3, МассивВложенийДокумента4, Замечание);
					Если Замечание <> "" Тогда
						ДанныеДокумента.ЕстьЗамечания = Истина;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью") Тогда
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
			
		
		
		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда		
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не указан способ отправки'; uk = 'Не вказано спосіб відправки'") + ": " + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если не ДанныеДокумента.ЕстьОшибки Тогда
			лИмяФайла = "";
			лИмяФайлаКвитанции = "";
			лИмяФайлаДФС = "";
			лСсылкаНаДокумент = "";
			лDocVer = 0;
			ПараметрыСозданияДокументов = Неопределено;
			ОбновитьМаршрут = Ложь;
			ОбновитьМаршрутНомерВМаршруте = -1;
			
			Если ВариантОтправки = 1 Тогда // 1 - ПервичныйДокумент Контрагенту
				Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
					
					Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда					
						ЕДРПОУКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента;
						ФилиалКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента;
						лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
						лПараметрыОтправкиДокумента.Вставить("RcvDept", ФилиалКонтрагента);
						Если ДанныеДокумента.ПараметрыСозданияДокументов.IsMultisided Тогда
							лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
							ОбновитьМаршрут = Истина;
							ОбновитьМаршрутНомерВМаршруте = 0 + 1;
							
							Если ДанныеДокумента.ПараметрыСозданияДокументов.Маршрут.Количество() >= 2 Тогда
								СледующийЭлементМаршрута = ДанныеДокумента.ПараметрыСозданияДокументов.Маршрут.Получить(1);
								ЕДРПОУКонтрагента = СледующийЭлементМаршрута.ЕДРПОУКонтрагента;
								ФилиалКонтрагента = СледующийЭлементМаршрута.ФилиалКонтрагента;
								лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
								лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
							КонецЕсли;
						КонецЕсли;
						лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
					ИначеЕсли ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
						ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
						ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
						лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
						лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
						
						Если ЭлектронныйДокумент.IsMultisided Тогда
							лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
							ОбновитьМаршрут = Истина;
							ОбновитьМаршрутНомерВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
							
							Если ЭлектронныйДокумент.Маршрут.Количество() >= 2 Тогда
								СледующийЭлементМаршрута = ЭлектронныйДокумент.Маршрут.Получить(1);
								ЕДРПОУКонтрагента = СледующийЭлементМаршрута.ЕДРПОУКонтрагента;
								ФилиалКонтрагента = СледующийЭлементМаршрута.ФилиалКонтрагента;
								лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
								лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
								лПараметрыОтправкиДокумента.Вставить("RcvName",   СледующийЭлементМаршрута.НаименованиеКонтрагента);
							Иначе
								лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
							КонецЕсли;
						Иначе
							лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
						КонецЕсли;
					Иначе
						СтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(ДанныеДокумента.Документ1С);
						лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", СтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
						лПараметрыОтправкиДокумента.Вставить("RcvDept", СтруктураДанныхКонтрагента.ФилиалКонтрагента);
						лПараметрыОтправкиДокумента.Вставить("RcvName", СтруктураДанныхКонтрагента.НаименованиеКонтрагента);
					КонецЕсли;
					ТекСтрокаПодключенияEDI = Неопределено;
					ТекСерверEDI = Неопределено;
					ТекПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI, "Encrypt");
					
					Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
						Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
							Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
								ДанныеДокумента.ЕстьОшибки = Истина;			
								Продолжить;
							КонецЕсли;
						Иначе
							СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
							СерверEDI = ТекСерверEDI;
							ПортEDI = ТекПортEDI;
						КонецЕсли;
					КонецЕсли;
					
					лПараметрыОтправкиДокумента.Вставить("MedocBody", ТелоДокумента);
					
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиДокумента.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					МассивВложений = Новый Массив;
					ИндексВложения1 = Неопределено;
					ИндексВложения2 = Неопределено;
					ИндексВложения3 = Неопределено;
					ИндексВложения4 = Неопределено;
					
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
						ИндексВложения1 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
						ИндексВложения2 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
						ИндексВложения3 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
							Если не ЗначениеЗаполнено(ИндексВложения4) Тогда
								ИндексВложения4 = МассивВложений.ВГраница();
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиДокумента.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					
					МассивДанныеПоПодписям = ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент);
					МассивСертификатовКлючейПаролей = Новый Массив;
					ТипПодписания = "ptn";	
						
					СписокНаложенныхНаДокументПодписей = Новый СписокЗначений;
					МассивНаложенныхНаДокументПодписейСсылки = Новый Массив;
					ПодписиПолученыИзЭлектронногоДокумента = Ложь;
					ТаблицаНакладываемыхНаДокументПодписей = Неопределено;
					ДокументПодписанПолностью = Истина;
					ДокументБылПодписан = Ложь;
					ДокументПолученРезультатПодписи = Ложь;
					Если ПолучитьТаблицуНеобходимыхПодписейДляДокумента(ТаблицаНакладываемыхНаДокументПодписей, ДанныеДокумента, ПодписиПолученыИзЭлектронногоДокумента, ЖурналОперации) Тогда
						ТаблицаПодписейПоДокументу = Неопределено;
						Если не ПодписиПолученыИзЭлектронногоДокумента Тогда
							ТаблицаПодписейПоДокументу = ТаблицаНакладываемыхНаДокументПодписей.Скопировать();
						КонецЕсли;
						РольСледующейПодписи = Неопределено;
						МассивПодписейДляОбработкиСобытий = Неопределено;
						ДокументПодписанПолностью = ПодготовитьТаблицуНакладываемыхПодписей(ТаблицаНакладываемыхНаДокументПодписей, ТаблицаНастроекПодписей, ДанныеДокумента.Организация, РольСледующейПодписи, МассивПодписейДляОбработкиСобытий);
						
						Если не ДокументПодписанПолностью Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Не все подписи заполнены'; uk = 'Не всі підписи заповнені'");
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							Продолжить;
						КонецЕсли;
						
						ДокументБылПодписан = Ложь;
						
						Отказ = Ложь;
						Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
							тОрганизация = ПараметрыСобытий.Организация;
							тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
							тВхИсх = ПараметрыСобытий.ВхИсх;
							тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
							тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
							тСостояние = ПараметрыСобытий.Состояние;
							тДокумент1С = ПараметрыСобытий.Документ1С;
							тМассивВложений = Неопределено;
							ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
							Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
								Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
									тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
								Иначе
									тМассивВложений = Новый Массив;
								КонецЕсли;
								ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
							КонецЕсли;
							ПараметрыСобытий.Вставить("МассивПодписей", МассивПодписейДляОбработкиСобытий);
							ПричинаОтказа = "";
							Если ОбработатьСобытие_ПередПодписанием(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
								ПричинаОтказа = "";
								Если не ОбработатьСобытие_ПередОтправкой(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
									Отказ = Истина;
									ДанныеДокумента.ЕстьОшибки = Истина;
									
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
									
									ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
									ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								КонецЕсли;
							Иначе
								Отказ = Истина;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							КонецЕсли;
						КонецЕсли;
						
						Если Отказ Тогда
							ДокументБылПодписан = Ложь;
							ДанныеДокумента.ЕстьОшибки = Истина;			
							Продолжить;
						Иначе
							Для Каждого лДанныеПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
								ЭлементМассиваСертификатовКлючейПаролей = Новый Структура;
								
								ТекСтрокаПодключенияEDI = Неопределено;
								ТекСерверEDI = Неопределено;
								ТекПортEDI = Неопределено;
								ДобавитьПараметрыСекретногоКлюча(ЭлементМассиваСертификатовКлючейПаролей, лДанныеПодписи, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI);
								Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
									Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
										Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
											ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
											ДанныеДокумента.ЕстьОшибки = Истина;			
											Продолжить;
										КонецЕсли;
									Иначе
										СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
										СерверEDI = ТекСерверEDI;
										ПортEDI = ТекПортEDI;
									КонецЕсли;
								КонецЕсли;
								
								лИнформацияПоПодписи = Новый Структура("Дата, ПолучатьOCSP, ПолучатьTSP, Подпись, ВыбранаяПодпись, Наименование, ДРФОПодписанта, СерийныйНомер, ТипПодписания", Дата(1,1,1,0,0,0), Ложь, Ложь, лДанныеПодписи.Подпись, лДанныеПодписи.ВыбранаяПодпись, лДанныеПодписи.Наименование, лДанныеПодписи.ДРФОПодписанта, лДанныеПодписи.СерийныйНомер, ТипПодписания);
								
								лИнформацияПоПодписи.ПолучатьOCSP = Истина;
								лИнформацияПоПодписи.ПолучатьTSP = Истина;
								лИнформацияПоПодписи.Дата = ТекущаяДата();
								СписокНаложенныхНаДокументПодписей.Добавить(лИнформацияПоПодписи);
								МассивСертификатовКлючейПаролей.Добавить(ЭлементМассиваСертификатовКлючейПаролей);
								МассивНаложенныхНаДокументПодписейСсылки.Добавить(лДанныеПодписи.ВыбранаяПодпись);
								ДокументБылПодписан = Истина;
							КонецЦикла;
						КонецЕсли;
					Иначе
						ДокументБылПодписан = Ложь;
						ДанныеДокумента.ЕстьОшибки = Истина;			
						Продолжить;
					КонецЕсли;
					
					Если ДанныеДокумента.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов = Новый Массив;
					Если ДокументБылПодписан Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	скEDI_Факсимиле.Подпись КАК Подпись,
							|	скEDI_Факсимиле.Факсимиле КАК Факсимиле
							|ИЗ
							|	РегистрСведений.скEDI_Факсимиле КАК скEDI_Факсимиле
							|ГДЕ
							|	скEDI_Факсимиле.Подпись В(&СписокПодписей)";
						Запрос.УстановитьПараметр("СписокПодписей", МассивНаложенныхНаДокументПодписейСсылки);
						ТаблицаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
						
						Для Каждого ЭлементСпискаНаложенныхНаДокументПодписей из СписокНаложенныхНаДокументПодписей Цикл
							ФаксимилеЭлектронныхДокументов = Новый Структура;
							ТекПодпись = ЭлементСпискаНаложенныхНаДокументПодписей.Значение.ВыбранаяПодпись;
							ЭлементМассиваДанныеПоПодписям = Новый Структура;
							ФаксимилеЭлектронныхДокументов.Вставить("Роль", ТекПодпись.Роль);
							ТекКодУровняПодписи = ПолучитьКодПодписиПоРоли(ТекПодпись.Роль);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignState", ТекКодУровняПодписи);
							ФаксимилеЭлектронныхДокументов.Вставить("КодУровняПодписи", ТекКодУровняПодписи);
							Если ЗначениеЗаполнено(ТекПодпись.ДРФО) Тогда
								ТекДРФО = ТекПодпись.ДРФО;
								ТекИмяПодписанта = ТекПодпись.Фамилия + " " + ТекПодпись.Имя;
								ТекДолжностьПодписанта = ТекПодпись.Должность;
							Иначе
								ТекДРФО = ТекПодпись.Владелец.Код;
								ТекИмяПодписанта = "";
								ТекДолжностьПодписанта = "";
								Если ТекКодУровняПодписи = -1 Тогда
									ТекКодУровняПодписи = 2;
								КонецЕсли;
							КонецЕсли;
							ЭлементМассиваДанныеПоПодписям.Вставить("Drfo", ТекДРФО);
							ФаксимилеЭлектронныхДокументов.Вставить("ДРФО", ТекДРФО);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignerName", ТекИмяПодписанта);
							ФаксимилеЭлектронныхДокументов.Вставить("ИмяПодписанта", ТекИмяПодписанта);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignerPosName", ТекДолжностьПодписанта);
							ФаксимилеЭлектронныхДокументов.Вставить("ДолжностьПодписанта", ТекДолжностьПодписанта);
							
							ФаксимилеЭлектронныхДокументов.Вставить("ТелоФаксимиле", "");
							НайденыеСтрокиТаблицыДетальныеЗаписи = ТаблицаДетальныеЗаписи.НайтиСтроки(Новый Структура("Подпись", ТекПодпись));
							Для Каждого НайденаяСтрокаТаблицыДетальныеЗаписи Из НайденыеСтрокиТаблицыДетальныеЗаписи Цикл
								ТелоФаксимиле_ХранилищеЗначений = НайденаяСтрокаТаблицыДетальныеЗаписи.Факсимиле.Получить();
								ТелоФаксимиле = Base64Строка(ТелоФаксимиле_ХранилищеЗначений);
								ЭлементМассиваДанныеПоПодписям.Вставить("Body", ТелоФаксимиле);
								ФаксимилеЭлектронныхДокументов.Вставить("ТелоФаксимиле", ТелоФаксимиле);
								Прервать;
							КонецЦикла;
							МассивДанныеПоПодписям.Добавить(ЭлементМассиваДанныеПоПодписям);
							МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов.Добавить(ФаксимилеЭлектронныхДокументов);
						КонецЦикла;
					КонецЕсли;
					
					лПараметрыОтправкиДокумента.Вставить("Signers", МассивСертификатовКлючейПаролей);
					лПараметрыОтправкиДокумента.Вставить("SignImages", МассивДанныеПоПодписям);
					
					МассивNotifyContacts = Неопределено;
					МассивОтправкаСсылкиНаДокумент = Новый Массив;
					МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
					Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						КонецЦикла;
					Иначе
						СписокНастроеныхАдресов = Новый СписокЗначений;
						Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							
							СписокНастроеныхАдресов.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						КонецЦикла;
						Если ЗначениеЗаполнено(ЭлектронныйДокумент.ЕДРПОУКонтрагента) Тогда
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
							               |	скEDI_КонтактныеДанныеКонтрагентов.Комментарий КАК Комментарий
							               |ИЗ
							               |	РегистрСведений.скEDI_КонтактныеДанныеКонтрагентов КАК скEDI_КонтактныеДанныеКонтрагентов
							               |ГДЕ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
							               |	И НЕ скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта В (&ЭлектроннаяПочтаСписок)
							               |	И скEDI_КонтактныеДанныеКонтрагентов.ОтправлятьСсылкуНаДокументАвтоматически";
							Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
							Запрос.УстановитьПараметр("ЭлектроннаяПочтаСписок", СписокНастроеныхАдресов);
							ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
							Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
								ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", ВыборкаРезультатаЗапроса.ЭлектроннаяПочта);
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", ВыборкаРезультатаЗапроса.Комментарий);
								МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						МассивNotifyContacts = Новый Массив;
						Для Каждого ЭлементМассиваОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							АдресЕстьВСписке = Ложь;
							Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
								Если ВРег(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
									АдресЕстьВСписке = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не АдресЕстьВСписке Тогда
								ЭлементМассиваNotifyContacts = Новый Структура("EMail", ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
								МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
							КонецЕсли;
						КонецЦикла;
						лПараметрыОтправкиДокумента.Вставить("NotifyContacts", МассивNotifyContacts);
					КонецЕсли;
					
					Если МожноОтправитьТолькоСсылку Тогда
						Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
							Если ЭлектронныйДокумент.ОшибкаШифрованияПриОтправке Тогда
								OnlyHref = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если OnlyHref Тогда
						Если МассивNotifyContacts = Неопределено Тогда
							ОшибкаОтсутствиеNotifyContacts = НСтр("ru = 'Нет адреса для отправки ссылки на Электронный документ.'; uk = 'Нема адреси для відправки посилання на Електронний документ.'");
							
							ДанныеДокумента.ЕстьОшибки = Истина;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаОтсутствиеNotifyContacts);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаОтсутствиеNotifyContacts);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						лПараметрыОтправкиДокумента.Вставить("OnlyHref", Истина);
					КонецЕсли;
					
					ДатаОперации = ТекущаяДата();
					
					СтатусЛицензииБезОплаты = Неопределено;
					Ошибка28 = Ложь;
					лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendfree", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						НеПоказыватьОшибку = Ложь;
						Если лРезультатОтправкиДокумента.Code = 50 Тогда
							СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.Активировано;
							НеПоказыватьОшибку = Истина;
						ИначеЕсли лРезультатОтправкиДокумента.Code = 51 Тогда
							СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.АктивированоЛимит;
							НеПоказыватьОшибку = Истина;
						ИначеЕсли лРезультатОтправкиДокумента.Code = 52 Тогда
							СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.ЛимитИсчерпан;
							НеПоказыватьОшибку = Истина;
						ИначеЕсли лРезультатОтправкиДокумента.Code = 53 Тогда
							СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.ЛимитИсчерпан;
						ИначеЕсли лРезультатОтправкиДокумента.Code = 28 Тогда // помилка шифрування, відсутні сертифікати шифрування одержувача
							Ошибка28 = Истина;
						КонецЕсли;
						Если НеПоказыватьОшибку Тогда
							Замечание = лРезультатОтправкиДокумента.Message;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						Иначе
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
							СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						КонецЕсли;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
							лИмяФайла = лРезультатОтправкиДокумента.FileName;
							НовоеСостояниеЭлектронногоДокумента = Неопределено;
						ИначеЕсли Не Ошибка28 Тогда
							Продолжить;
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
						лИмяФайла = лРезультатОтправкиДокумента.FileName;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано им''я файла відправленого документа на сервері СДО.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				тТелоДокумента = Неопределено;
				Если лРезультатОтправкиДокумента.Свойство("MedocBody", тТелоДокумента) Тогда
					Если ЗначениеЗаполнено(тТелоДокумента) Тогда
						ДокументПолученРезультатПодписи = Истина;
						ТелоДокумента = тТелоДокумента;
						ИзображениеДокумента = "";
						ВложениеДокумента1 = "";
						//ИмяФайлаВложениеДокумента1 = "";
						ВложениеДокумента2 = "";
						//ИмяФайлаВложениеДокумента2 = "";
						ВложениеДокумента3 = "";
						//ИмяФайлаВложениеДокумента3 = "";
						Если ТипПодписания = "ptn" Тогда
							Если ТипЗнч(лРезультатОтправкиДокумента) = Тип("Структура") Тогда
								лКонтейнерPDFПредставленияДокумента = Неопределено;
								Если лРезультатОтправкиДокумента.Свойство("ImageBody", лКонтейнерPDFПредставленияДокумента) Тогда
									Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
										лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
									ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
										ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
									КонецЕсли;
								КонецЕсли;
								лКонтейнерВложений = Неопределено;
								Если лРезультатОтправкиДокумента.Свойство("AttachmentBody", лКонтейнерВложений) Тогда
									Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
										Если ИндексВложения1 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения1];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента1 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения2 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения2];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента2 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения3 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения3];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента3 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения4 <> Неопределено Тогда
											ТекИндексВложения = ИндексВложения4;
											МассивВложенийДокумента4Результат = Новый Массив;
											Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ТекИндексВложения];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												
												ТекСтруктураВложения = Новый Структура;
												ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
												ТекСтруктураВложения.Вставить("ВложениеДокумента", лТелоВложения);
												МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
												ТекИндексВложения = ТекИндексВложения + 1;
											КонецЦикла;
											МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли ТипЗнч(лРезультатОтправкиДокумента) = Тип("Соответствие") Тогда
								лКонтейнерPDFПредставленияДокумента = лРезультатОтправкиДокумента.Получить("ImageBody");
								Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
									лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
								ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
									ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
								КонецЕсли;
								
								лКонтейнерВложений = лРезультатОтправкиДокумента.Получить("AttachmentBody");
								Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
									Если ИндексВложения1 <> Неопределено Тогда
										лТелоВложения = Неопределено;
										лКонтейнерВложения = лКонтейнерВложений[ИндексВложения1];
										Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
											лКонтейнерВложения.Свойство("Body", лТелоВложения);
										ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
											лТелоВложения = лКонтейнерВложения.Получить("Body");
										КонецЕсли;
										ВложениеДокумента1 = лТелоВложения;
									КонецЕсли;
									Если ИндексВложения2 <> Неопределено Тогда
										лТелоВложения = Неопределено;
										лКонтейнерВложения = лКонтейнерВложений[ИндексВложения2];
										Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
											лКонтейнерВложения.Свойство("Body", лТелоВложения);
										ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
											лТелоВложения = лКонтейнерВложения.Получить("Body");
										КонецЕсли;
										ВложениеДокумента2 = лТелоВложения;
									КонецЕсли;
									Если ИндексВложения3 <> Неопределено Тогда
										лТелоВложения = Неопределено;
										лКонтейнерВложения = лКонтейнерВложений[ИндексВложения3];
										Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
											лКонтейнерВложения.Свойство("Body", лТелоВложения);
										ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
											лТелоВложения = лКонтейнерВложения.Получить("Body");
										КонецЕсли;
										ВложениеДокумента3 = лТелоВложения;
									КонецЕсли;
									Если ИндексВложения4 <> Неопределено Тогда
										ТекИндексВложения = ИндексВложения4;
										МассивВложенийДокумента4Результат = Новый Массив;
										Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ТекИндексВложения];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											
											ТекСтруктураВложения = Новый Структура;
											ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
											ТекСтруктураВложения.Вставить("ВложениеДокумента", лТелоВложения);
											МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
											ТекИндексВложения = ТекИндексВложения + 1;
										КонецЦикла;
										МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						
						
						Если Не ЗначениеЗаполнено(СтатусЛицензииБезОплаты) Тогда
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							               |	скEDI_СтатусыЛицензииСрезПоследних.СтатусЛицензииБезОплаты КАК СтатусЛицензииБезОплаты
							               |ИЗ
							               |	РегистрСведений.скEDI_СтатусыЛицензии.СрезПоследних(
							               |			&Месяц,
							               |			ЕДРПОУ = &ЕДРПОУ
							               |				И Филиал = &Филиал) КАК скEDI_СтатусыЛицензииСрезПоследних";
							Запрос.УстановитьПараметр("Месяц", ТекущаяДата());
							Запрос.УстановитьПараметр("ЕДРПОУ", лОрганизацияEDI.Код);
							Запрос.УстановитьПараметр("Филиал", лОрганизацияEDI.Филиал);
							
							РезультатЗапроса = Запрос.Выполнить();
							Если РезультатЗапроса.Пустой() Тогда
								СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.Активировано;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтатусЛицензииБезОплаты) Тогда
					СтатусыЛицензииМенеджерЗаписи = РегистрыСведений.скEDI_СтатусыЛицензии.СоздатьМенеджерЗаписи();
					СтатусыЛицензииМенеджерЗаписи.ЕДРПОУ = лОрганизацияEDI.Код;
					СтатусыЛицензииМенеджерЗаписи.Филиал = лОрганизацияEDI.Филиал;
					СтатусыЛицензииМенеджерЗаписи.Период = НачалоМесяца(ТекущаяДата());
					СтатусыЛицензииМенеджерЗаписи.СтатусЛицензииБезОплаты = СтатусЛицензииБезОплаты;
					СтатусыЛицензииМенеджерЗаписи.Записать(Истина);
				КонецЕсли;
				
				ДокументБылСоздан = Ложь;
				//Если НЕ ДанныеДокумента.ЕстьОшибки Тогда//??? И ДокументБылПодписан Тогда
				Если ДокументПолученРезультатПодписи или Ошибка28 Тогда
					
					// Если нет электронного документа, то создать его. Если документ есть, то надо проверить, есть ли в нём таблица реквизитов, если её нет -
					// поместить из поля "РеквизитыЭлектронногоДокумента" структуры "ДанныеДокумента".
					// Зафиксировать событие создания документа.
					ДокументСозданНаОсновании = Неопределено;
					Если Не ЗначениеЗаполнено(ДанныеДокумента.ЭлектронныйДокумент) Тогда
						
						лДанныеЗаполненияЭлектронногоДокумента = Новый Структура;
						
						лСтруктураОсновныхДанныхДокумента = Новый Структура;
						лСтруктураОсновныхДанныхДокумента.Вставить("Документ1С",               ДанныеДокумента.Документ1С);
						лСтруктураОсновныхДанныхДокумента.Вставить("ВидЭлектронногоДокумента", ДанныеДокумента.ВидЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ЭлектронныйДокумент",      ДанныеДокумента.ЭлектронныйДокумент);
						
						//Если ДанныеДокумента.Свойство("ПараметрыДляСозданияЭлектронногоДокумента") Тогда
						Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
							ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
							ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
							
							лСтруктураОсновныхДанныхДокумента.Вставить("Дата",           ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("Номер",          ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("ДатаДокумента",  ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("НомерДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("СуммаДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("СуммаНДС",       ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("СуммаБезНДС",    ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУВладельцаШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона);
							лСтруктураОсновныхДанныхДокумента.Вставить("ИмяШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона);
							лСтруктураОсновныхДанныхДокумента.Вставить("ВерсияШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона);
							лСтруктураОсновныхДанныхДокумента.Вставить("ВхИсх",          ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх);
							
							лСтруктураОсновныхДанныхДокумента.Вставить("ГдеСоздан", ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе"));
							лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
							лСтруктураОсновныхДанныхДокумента.Вставить("DocId", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
							лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокументаВБазеДанныхКонтрагента", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
							лСтруктураОсновныхДанныхДокумента.Вставить("OutId", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
							лСтруктураОсновныхДанныхДокумента.Вставить("NOTATION", ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION);
							
							лСтруктураОсновныхДанныхДокумента.Вставить("ИмяФайлаДФС", ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС);
							лСтруктураОсновныхДанныхДокумента.Вставить("ИННПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца);
							лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца);
							лСтруктураОсновныхДанныхДокумента.Вставить("ИННПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя);
							лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя);
							лСтруктураОсновныхДанныхДокумента.Вставить("РегистрируетсяВЕРННПокупателем", ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем);
							
							лДокументСозданНаОсновании = Неопределено;
							Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
								ДокументСозданНаОсновании = лДокументСозданНаОсновании;
							КонецЕсли;
							лПоДаннымХранилищаРеквизитов = Неопределено;
							Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
								лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов);
							КонецЕсли;
							лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента);
							лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента);
						Иначе
							лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", Ложь);
							
							лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(ДанныеДокумента.Документ1С);
							лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
							лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        лСтруктураДанныхКонтрагента.ФилиалКонтрагента);
						КонецЕсли;
						
						//Если ДанныеДокумента.Свойство("РеквизитыЭлектронногоДокумента") Тогда
						Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда		
							лСтруктураОсновныхДанныхДокумента.Вставить("РеквизитыЭлектронногоДокумента", ДанныеДокумента.СоответствиеЗначенийРеквизитов);					
						КонецЕсли;
						
						лДанныеЗаполненияЭлектронногоДокумента.Вставить("ОсновныеДанные", лСтруктураОсновныхДанныхДокумента);
						
						лЭлектронныйДокументОбъект = Документы.скEDI_ЭлектронныйДокумент.СоздатьДокумент();
						лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
						
						ДокументБылСоздан = Истина;
						НомерВерсииСодержания = 1;
					Иначе	
						лЭлектронныйДокументОбъект = ДанныеДокумента.ЭлектронныйДокумент.ПолучитьОбъект();
						
						Если ТаблицаДанныхДокументов.Колонки.Найти("ПараметрыСозданияДокументов") <> Неопределено Тогда
							Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
								ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
								ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
								
								лЭлектронныйДокументОбъект.Дата = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.Номер = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.ДатаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.НомерДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.СуммаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.СуммаНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.СуммаБезНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.ЕДРПОУВладельцаШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона;
								лЭлектронныйДокументОбъект.ИмяШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона;
								лЭлектронныйДокументОбъект.ВерсияШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона;
								лЭлектронныйДокументОбъект.ВхИсх = ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх;
								
								Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПустаяСсылка") Тогда
									Если лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
										лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе");
									ИначеЕсли лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
										лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента");
									КонецЕсли;
								КонецЕсли;
								Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
									лЭлектронныйДокументОбъект.ИдентификаторДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
									лЭлектронныйДокументОбъект.DocId = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
									лЭлектронныйДокументОбъект.ИдентификаторДокументаВБазеДанныхКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
									лЭлектронныйДокументОбъект.OutId = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
									лЭлектронныйДокументОбъект.NOTATION = ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION;
								ИначеЕсли лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
									
								КонецЕсли;
								
								лЭлектронныйДокументОбъект.ИмяФайлаДФС = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС;
								лЭлектронныйДокументОбъект.ИННПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца;
								лЭлектронныйДокументОбъект.КодФилиалаПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца;
								лЭлектронныйДокументОбъект.ИННПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя;
								лЭлектронныйДокументОбъект.КодФилиалаПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя;
								лЭлектронныйДокументОбъект.РегистрируетсяВЕРННПокупателем = ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем;
								
								лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента;
								лЭлектронныйДокументОбъект.ФилиалКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента;
								
								лПоДаннымХранилищаРеквизитов = Неопределено;
								Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
									лЭлектронныйДокументОбъект.ПоДаннымХранилищаРеквизитов = лПоДаннымХранилищаРеквизитов;
								КонецЕсли;
								Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда
									лЭлектронныйДокументОбъект.ХранилищеРеквизитовЭлектронногоДокумента = Новый ХранилищеЗначения(ДанныеДокумента.СоответствиеЗначенийРеквизитов);
								КонецЕсли;
								
								лДокументСозданНаОсновании = Неопределено;
								Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
									ДокументСозданНаОсновании = лДокументСозданНаОсновании;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						НомерВерсииСодержания = ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент);
					КонецЕсли;
					
					Если ДокументПолученРезультатПодписи Тогда
						Если Не ПодписиПолученыИзЭлектронногоДокумента Тогда
							Для Каждого СтрокаПодписи из ТаблицаПодписейПоДокументу Цикл
								НоваяСтрокаПодписи = лЭлектронныйДокументОбъект.Подписи.Добавить();
								НоваяСтрокаПодписи.Подпись = СтрокаПодписи.Подпись;
							КонецЦикла;
						КонецЕсли;
						Для Каждого СтрокаПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
							ПодписиВДокументе = лЭлектронныйДокументОбъект.Подписи.НайтиСтроки(Новый Структура("Подпись", СтрокаПодписи.Подпись));
							Для Каждого ПодписьВДокументе Из ПодписиВДокументе Цикл
								ПодписьВДокументе.Подпись = СтрокаПодписи.ВыбранаяПодпись;
								ПодписьВДокументе.Подписано = Истина;
								ПодписьВДокументе.ДатаПодписания = ДатаОперации;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
					Если Ошибка28 Тогда
						лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
						лЭлектронныйДокументОбъект.ОшибкаШифрованияПриОтправке = Истина;
					Иначе
						лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					лСостояниеМногостороннегоДокумента = лЭлектронныйДокументОбъект.Состояние;
					УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, ПараметрыСозданияДокументов, лЭлектронныйДокументОбъект.RoutePosition, ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение"));
					Если ОбновитьМаршрут Тогда
						УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, Неопределено, ОбновитьМаршрутНомерВМаршруте, лСостояниеМногостороннегоДокумента);
					КонецЕсли;
					
					Если лЭлектронныйДокументОбъект.ИмяФайла = "" Тогда
						лЭлектронныйДокументОбъект.ИмяФайла  = лИмяФайла;
					КонецЕсли;
					Если лЭлектронныйДокументОбъект.ИмяФайлаДФС = "" Тогда
						Если лИмяФайлаДФС <> "" Тогда
							лЭлектронныйДокументОбъект.ИмяФайлаДФС = лИмяФайлаДФС;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(лDocVer) Тогда
						Если лЭлектронныйДокументОбъект.DocVer = 0 Тогда
							лЭлектронныйДокументОбъект.DocVer  = лDocVer;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
						Если лЭлектронныйДокументОбъект.DocHref = "" Тогда
							лЭлектронныйДокументОбъект.DocHref  = лСсылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
					СобытиеОтправкиСсылкиНаДокумент = Неопределено;
					ОписаниеПоОтправкеСсылкиНаДокумент = "";
					Если ТипЗнч(МассивОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
						Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
							ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'на электронную почту:'; uk = 'на електронну пошту:'");
							Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
								СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
							КонецЕсли;
							лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
							Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
								НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
								НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
								НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
								
								ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
								Если ЗначениеЗаполнено(СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий) Тогда
									ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
					ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец, ДокументСозданНаОсновании);
					
					Если ДокументБылСоздан Тогда
						НомерФайла = 1;
						Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
							СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи1, ИмяФайлаВложениеДокумента1, ВложениеДокументаФайл1);
							НомерФайла = НомерФайла + 1;
						КонецЕсли;
						Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
							СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи2, ИмяФайлаВложениеДокумента2, ВложениеДокументаФайл2);
							НомерФайла = НомерФайла + 1;
						КонецЕсли;
						Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
							СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи3, ИмяФайлаВложениеДокумента3, ВложениеДокументаФайл3);
							НомерФайла = НомерФайла + 1;
						КонецЕсли;
						Если ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("Массив") или ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("ФиксированныйМассив") Тогда
							Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокументаБезПодписи4 Цикл
								Попытка
									ВложениеДокументаФайл = ЭлементМассиваВложенийДокумента4.ВложениеДокументаФайл;
								Исключение
									ВложениеДокументаФайл = Неопределено;
								КонецПопытки;
								СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ЭлементМассиваВложенийДокумента4.ВложениеДокумента, ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ВложениеДокументаФайл);
								НомерФайла = НомерФайла + 1;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если ДокументПолученРезультатПодписи Тогда
						скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
							ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
							ТелоДокумента,
							ИзображениеДокумента,
							ВложениеДокумента1,
							ИмяФайлаВложениеДокумента1,
							ВложениеДокумента2,
							ИмяФайлаВложениеДокумента2,
							ВложениеДокумента3,
							ИмяФайлаВложениеДокумента3,
							МассивВложенийДокумента4,
							ТекущаяДата(),
							лИмяФайла,
							лDocVer,
							лСсылкаНаДокумент,
							Ложь,
							Ложь,
							Неопределено,
							Ложь
						);
						
						Для Каждого ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов из МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов Цикл
							МенеджерЗаписи = РегистрыСведений.скEDI_ФаксимилеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
							МенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
							МенеджерЗаписи.КодУровняПодписи = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.КодУровняПодписи;
							МенеджерЗаписи.ДРФО = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДРФО;
							МенеджерЗаписи.Сторона = лЭлектронныйДокументОбъект.RoutePosition;
							МенеджерЗаписи.ТелоФаксимиле = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ТелоФаксимиле;
							МенеджерЗаписи.ИмяПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ИмяПодписанта;
							МенеджерЗаписи.ДолжностьПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДолжностьПодписанта;
							МенеджерЗаписи.Роль = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.Роль;
							МенеджерЗаписи.Записать(Истина);
						КонецЦикла;
						
						КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
					КонецЕсли;
					
					ДанныеДокумента.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
					Если ДокументБылСоздан Тогда
						ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.Создание"), , ДатаСозданияДокумента);
					КонецЕсли;
					
					Если ДокументПолученРезультатПодписи Тогда
						ОписаниеНаложеныхПодписей = ЗафиксироватьСобытияПоПодписаниюДокумента(ДанныеДокумента.ЭлектронныйДокумент, СписокНаложенныхНаДокументПодписей);
						
						СобытиеДляЖурнала = НСтр("ru = 'Документ подписан'; uk = 'Документ підписано'") + ": """
						+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy")
						+ Символы.ПС + ОписаниеНаложеныхПодписей;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
						
						
						// Зафиксировать событие отправки электронного документа.
						лОписаниеПоОтправке = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'")
						+ ?(OnlyHref, " " + НСтр("ru = 'в виде ссылки'; uk = 'у вигляді посилання'"), "")
						+ "
						|"
						+  НСтр("ru = 'Дата и время отправки: '; uk = 'Дата та час відправки: '") + Формат(ДатаОперации, "ДФ='dd.MM.yyyy HH:mm:ss'") + "
						|"
						+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), " (" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "") + "
						|"
						+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + лИмяФайла;
						
						Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
							лОписаниеПоОтправке = лОписаниеПоОтправке + "
							|"
							+ НСтр("ru = 'Ссылка на документ: '; uk = 'Посилання на документ: '") + лСсылкаНаДокумент;
						КонецЕсли;
						
						лОписаниеПоОтправке = лОписаниеПоОтправке + "
						|
						|"
						+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
						ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), лОписаниеПоОтправке, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
						
						СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
						Если ЗначениеЗаполнено(СобытиеОтправкиОписание) Тогда
							лОписаниеПоОтправке = лОписаниеПоОтправке + "
							|
							|" + СобытиеОтправкиОписание;
						КонецЕсли;
						ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправки, лОписаниеПоОтправке, ДатаОперации, лDocVer, лИмяФайла, лИмяФайлаКвитанции);
						
						Если ЗначениеЗаполнено(СобытиеОтправкиСсылкиНаДокумент) Тогда
							лОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Отправлена ссылка на Электронный документ'; uk = 'Відправлено посилання на Електронний документ'")
							+ Символы.ПС
							+ лСсылкаНаДокумент
							+ Символы.ПС
							+ ОписаниеПоОтправкеСсылкиНаДокумент;
							
							ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправкиСсылкиНаДокумент, лОписаниеПоОтправкеСсылкиНаДокумент, ДатаОперации, лDocVer, лИмяФайла, лИмяФайлаКвитанции);
						КонецЕсли;
							
						#Удаление
						УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
						#КонецУдаления
						#Вставка
						ДокументИсходящий = ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий");
						Если НЕ ДокументИсходящий ИЛИ (ДокументИсходящий И лОрганизацияEDI.УстанавливатьПризнакОбработаноПриОтправкеИсходящегоДокументаКонтрагенту) Тогда
							УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
						КонецЕсли;
						#КонецВставки						
						
						СобытиеДляЖурнала = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'") + ": """
						+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
						
						Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
							тОрганизация = ПараметрыСобытий.Организация;
							тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
							тВхИсх = ПараметрыСобытий.ВхИсх;
							тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
							тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
							тСостояние = лЭлектронныйДокументОбъект.Состояние;
							тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
							тМассивВложений = Неопределено;
							ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
							Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
								Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
									тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
								Иначе
									тМассивВложений = Новый Массив;
								КонецЕсли;
								ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
							КонецЕсли;
							Если ТипЗнч(ПараметрыСобытий.МассивПодписей) = Тип("Массив") Тогда
								тМассивПодписей = ПараметрыСобытий.МассивПодписей;
							Иначе
								тМассивПодписей = Новый Массив;
							КонецЕсли;
							ОбработатьСобытие_ПриПодписании(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
							ОбработатьСобытие_ПриОтправке(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ОтправитьКвитанцииПоЭлектроннымДокументам")
Процедура СМС_ОтправитьКвитанцииПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных, КоличествоПодписано) Экспорт
	
	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);

	Если ДополнительныеПараметры.Свойство("ТекстКвитанции") Тогда 
		ТекстКвитанции = ДополнительныеПараметры.ТекстКвитанции;
	Иначе	
		ТекстКвитанции = "";
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		СодержаниеЭлектронногоДокумента = Неопределено;
		ТелоДокумента              = "";
		ИзображениеДокумента       = "";
		ВложениеДокумента1         = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2         = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3         = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		ТипКвитанции               = ДополнительныеПараметры.ТипКвитанции; 
		
		ПодписыватьКвитанциюВсемиПодписями = Ложь;
		Квитанция = ПредопределенноеЗначение("Документ.скEDI_Квитанция.ПустаяСсылка");
		КвитанцияТело = "";
		КвитанцияТекст = "";
		ВидКвитанции = Неопределено;
		СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка");
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		
		
		ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
		лОрганизацияEDI = ДанныеДокумента.Организация;
		Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Продолжить;
		КонецЕсли;
		// Отклонить и подтвердить мы можем полученные дкоументы. Отозвать - исходящие.
		
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			ОтражатьTSPСтатус = Истина;
			ОтражатьOCSPСтатус = Истина;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
							ОшибкаПолученияСодержимогоЭлДок = "";
							СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
							Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
								Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
									ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
								КонецЕсли;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							КонецЕсли;
							
							ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
							ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
							ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
							ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
							ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
							ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
							ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
							ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
							ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
							ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
							//ПараметрыСобытий.МассивВложений = Новый Массив;
							
							СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтзывом;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтзыве;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
					ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				//Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
				//	ОшибкаПолученияСодержимогоЭлДок = "";
				//	СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
				//Иначе
					Продолжить;
				//КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
					ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
						ПодписыватьКвитанциюВсемиПодписями = Истина;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО")
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				//Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
				//	ОшибкаПолученияСодержимогоЭлДок = "";
				//	СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
				//Иначе
					Продолжить;
				//КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
					ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
							ОшибкаПолученияСодержимогоЭлДок = "";
							СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
							Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
								Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
									ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
								КонецЕсли;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							КонецЕсли;
							
							ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
							ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
							ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
							ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
							ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
							ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
							ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
							ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
							ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
							ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
							//ПараметрыСобытий.МассивВложений = Новый Массив;
							
							СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
							ПодписыватьКвитанциюВсемиПодписями = Истина;
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не найдено Содержание Электронного документа.'; uk = 'Не знайдено Вміст Електронного документа.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		Иначе
			ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
			ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
			ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
			ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
			ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
			ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
			ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
			ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
			МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не определен Способ отправки.'; uk = 'Не визначено Спосіб відправки.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		КонецЕсли;
		
		Если не НайтиСоздатьКвитанцию(ДанныеДокумента, ДополнительныеПараметры, ЭлектронныйДокумент, ПодписыватьКвитанциюВсемиПодписями, ТипКвитанции, ТекстКвитанции, СпособОтправки, ВидКвитанции, Квитанция, КвитанцияТело, КвитанцияТекст, ЖурналОперации) Тогда
			Продолжить;
		КонецЕсли;
		Если ПодписыватьКвитанциюВсемиПодписями Тогда
			Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
				Замечание = НСтр("ru = 'Не найдена подготовленая квитанция.'; uk = 'Не знайдено підготовлену квитанцію.'");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			КонецЕсли;
		КонецЕсли;

		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТелоДокумента) Тогда			
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не заполнено Содержание Электронного документа.'; uk = 'Не заповнено Вміст Електронного документа.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		КонецЕсли;
		
		//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ПустаяСсылка");
		лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка");
		лСобытиеЭлектронногоДокументаТекст = "";
		Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ДокументОтозван");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отозван'; uk = 'Документ відкликано'");
		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ОтправкаОтклонения");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отклонен'; uk = 'Документ відхилено'");
		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ОтправкаПодтверждения");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ подтвержден'; uk = 'Документ підтверджено'");
		КонецЕсли;
		
		лРезультатОтправкиОтвета = Неопределено;
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тСобытиеПеред = ПараметрыСобытий.СобытиеПеред;
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
				тСостояние = ПараметрыСобытий.Состояние;
				тДокумент1С = ПараметрыСобытий.Документ1С;
				Если ТипЗнч(ПараметрыСобытий.МассивВложений) = Тип("Массив") Тогда
					тМассивВложений = ПараметрыСобытий.МассивВложений;
				Иначе
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
				ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
				ПричинаОтказа = "";
				Если не ОбработатьСобытие_ПередОтправкойКвитанции(тСобытиеПеред, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
					Отказ = Истина;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
				// Отправить запрос EDI провайдеру, обработать результат запроса.
				лПараметрыОтправкиКвитанции = Новый Структура;
				лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиКвитанции.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
				лПараметрыОтправкиКвитанции.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
				лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
				лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
				//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
				//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
				лПараметрыОтправкиКвитанции.Вставить("MedocKvt",  КвитанцияТело);
				
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					//лПараметрыОтправкиКвитанции.Вставить("MedocBody", ТелоДокумента);
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					лПараметрыОтправкиКвитанции.Вставить("MedocBody", ТелоДокумента);
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиКвитанции.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					МассивВложений = Новый Массив;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиКвитанции.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					лПараметрыОтправкиКвитанции.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ЭлектронныйДокумент));
				КонецЕсли;
				лПараметрыОтправкиКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
				
				DocVer = -1;
				РежимСинхронизации = Ложь;
				ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				Если РежимСинхронизации Тогда
					DocVer = ПолучитьАктуальныйDocVer(ЭлектронныйДокумент);
				КонецЕсли;
				ИмяФайлаКвитанции = "";
				DocVerКвитанции = 0;
				
				ОтправкаПоМаршруту = Ложь;
				МассивОтправокПоМаршруту = Неопределено;
				МассивИзмененийВМаршруте = Неопределено;
				Если ЭлектронныйДокумент.IsMultisided Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						ОтправкаПоМаршруту = Истина;
						МассивОтправокПоМаршруту = Новый Массив;
						МассивИзмененийВМаршруте = Новый Массив;
						
						ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
						Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
							МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
						КонецЕсли;
						
						ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
						Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							
							//лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
							//лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
							лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							
							ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
							МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
							
							Если РежимСинхронизации Тогда
								лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							КонецЕсли;
							лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							Если лРезультатОтправкиОтвета = Неопределено Тогда	
								ДанныеДокумента.ЕстьОшибки = Истина;				
								
								Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							Иначе
								ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
								DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
								ЕстьОтправленыеКвитанции = Истина;
								
								ИнформацияООтправленойКвитанции = НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), "(" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "");
								ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
								|
								|"
								+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ЭлектронныйДокумент.ИмяФайла + "
								|"
								+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ОтправкаПоМаршруту = Истина;
						МассивОтправокПоМаршруту = Новый Массив;
						МассивИзмененийВМаршруте = Новый Массив;
						ЕстьОтправленыеКвитанции = Ложь;
						
						ИнформацияООтправленойКвитанции = "";
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + НСтр("ru = 'Имя файла электронного документа: '; uk = 'Ім''я файлу електронного документу: '") + ЭлектронныйДокумент.ИмяФайла;
						
						лПараметрыОтправкиКвитанции.Вставить("RoutePosition", ЭлектронныйДокумент.RoutePosition);
						Для ПозицияВМаршруте = 0 по ЭлектронныйДокумент.RoutePosition - 1 Цикл
							ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Ложь);
							//////лПараметрыОтправкиКвитанции.Вставить("IsMultiChange", Истина);//?
							лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							Если РежимСинхронизации Тогда
								лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							КонецЕсли;
							
							лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							Если лРезультатОтправкиОтвета = Неопределено Тогда	
								ДанныеДокумента.ЕстьОшибки = Истина;				
								
								Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								//Продолжить;
							Иначе
								//Если Не ЕстьОтправленыеКвитанции Тогда
									ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
									DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
									ЕстьОтправленыеКвитанции = Истина;
								//КонецЕсли;
								DocVer = лРезультатОтправкиОтвета.DocVer;
								
								ЭлементМассиваОтправокПоМаршруту = Новый Структура;
								ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лРезультатОтправкиОтвета.ИмяФайла);
								ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лРезультатОтправкиОтвета.DocVer);
								ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Ложь);
								МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
								
								Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
									ЭлементМассиваИзмененийВМаршруте = Новый Структура;
									ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
									ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
									МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
								КонецЕсли;
								
								ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
								+ Символы.ПС
								+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
								+ Символы.ПС
								+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
							КонецЕсли;
						КонецЦикла;
						
						Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ЭлементМассиваИзмененийВМаршруте = Новый Структура;
								ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
								ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
								МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							КонецЕсли;
						ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ЭлементМассиваИзмененийВМаршруте = Новый Структура;
								ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
								ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение"));
								МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							КонецЕсли;
							
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
								
								лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
								лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
								лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
								лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
								лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
								Если РежимСинхронизации Тогда
									лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
								КонецЕсли;
								лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
								Если лРезультатОтправкиОтвета = Неопределено Тогда	
									ДанныеДокумента.ЕстьОшибки = Истина;				
									
									Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
									
									ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
									ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
									
									//Продолжить;
								Иначе
									//Если Не ЕстьОтправленыеКвитанции Тогда
										ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
										DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
										ЕстьОтправленыеКвитанции = Истина;
									//КонецЕсли;
									
									ЭлементМассиваОтправокПоМаршруту = Новый Структура;
									ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
									ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
									ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лРезультатОтправкиОтвета.ИмяФайла);
									ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лРезультатОтправкиОтвета.DocVer);
									ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
									ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Истина);
									МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
									
									ЭлементМассиваИзмененийВМаршруте = Новый Структура;
									ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
									ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен"));
									МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
									лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
									
									ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
									+ Символы.ПС
									+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
									+ Символы.ПС
									+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если не ЕстьОтправленыеКвитанции Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					лПараметрыОтправкиКвитанции.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
					Если РежимСинхронизации Тогда
						лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
					КонецЕсли;
					лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиОтвета = Неопределено Тогда	
						ДанныеДокумента.ЕстьОшибки = Истина;				
						
						Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					Иначе
						ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
						DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
						
						ИнформацияООтправленойКвитанции = НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), "(" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "");
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
						|
						|"
						+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ЭлектронныйДокумент.ИмяФайла + "
						|"
						+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
			лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
			Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
				Если ТекстКвитанции <> "" Тогда
					лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = ТекстКвитанции;
				КонецЕсли;
			КонецЕсли;
			Если ОтправкаПоМаршруту Тогда
				Для Каждого ЭлементМассиваИзмененийВМаршруте Из МассивИзмененийВМаршруте Цикл
					ЭлементМаршрута = лЭлектронныйДокументОбъект.Маршрут.Получить(ЭлементМассиваИзмененийВМаршруте.ПозицияВМаршруте);
					ЭлементМаршрута.Состояние = ЭлементМассиваИзмененийВМаршруте.Состояние;
				КонецЦикла;
			КонецЕсли;
			лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
			лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
			лЭлектронныйДокументОбъект.Записать();
			
			ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
			//ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, лСобытиеЭлектронногоДокумента);
			
			// Создать документ по квитанции-ответу
			ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
			|" + КвитанцияТекст;
			
			Если не ПодписыватьКвитанциюВсемиПодписями Тогда
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
					|
					|"
					+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
					ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), ИнформацияООтправленойКвитанции, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
				КонецЕсли;
			КонецЕсли;
			
			
			Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
				лДанныеЗаполненияКвитанции = Новый Структура;
				лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("Организация",         лОрганизацияEDI);
				лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
				лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            ИмяФайлаКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("DocVer",              DocVerКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента);
				лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   лЭлектронныйДокументОбъект.ФилиалКонтрагента);
				лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияООтправленойКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       КвитанцияТело);
				лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
				
				лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
				лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
				Если ОтправкаПоМаршруту Тогда
					Для Каждого ЭлементМассиваОтправокПоМаршруту Из МассивОтправокПоМаршруту Цикл
						НоваяСтрокаОтправкиПоМаршруту = лКвитанцияОбъект.ОтправкиПоМаршруту.Добавить();
						НоваяСтрокаОтправкиПоМаршруту.ЕДРПОУКонтрагента = ЭлементМассиваОтправокПоМаршруту.ЕДРПОУКонтрагента;
						НоваяСтрокаОтправкиПоМаршруту.ФилиалКонтрагента = ЭлементМассиваОтправокПоМаршруту.ФилиалКонтрагента;
						НоваяСтрокаОтправкиПоМаршруту.ИмяФайла = ЭлементМассиваОтправокПоМаршруту.ИмяФайла;
						НоваяСтрокаОтправкиПоМаршруту.DocVer = ЭлементМассиваОтправокПоМаршруту.DocVer;
						НоваяСтрокаОтправкиПоМаршруту.RoutePosition = ЭлементМассиваОтправокПоМаршруту.RoutePosition;
						НоваяСтрокаОтправкиПоМаршруту.ToNextHop = ЭлементМассиваОтправокПоМаршруту.ToNextHop;
					КонецЦикла;
				КонецЕсли;
			Иначе
				лКвитанцияОбъект = Квитанция.ПолучитьОбъект();
				лКвитанцияОбъект.Дата = ТекущаяДата();
				лКвитанцияОбъект.ТекстКвитанции = ИнформацияООтправленойКвитанции;
				лКвитанцияОбъект.Готовится = Ложь;
				лКвитанцияОбъект.ИмяФайла = ИмяФайлаКвитанции;
				лКвитанцияОбъект.DocVer = DocVerКвитанции;
				//лКвитанцияОбъект.ТелоКвитанции = КвитанцияТело;
				Если ОтправкаПоМаршруту Тогда
					Для Каждого ЭлементМассиваОтправокПоМаршруту Из МассивОтправокПоМаршруту Цикл
						НоваяСтрокаОтправкиПоМаршруту = лКвитанцияОбъект.ОтправкиПоМаршруту.Добавить();
						НоваяСтрокаОтправкиПоМаршруту.ЕДРПОУКонтрагента = ЭлементМассиваОтправокПоМаршруту.ЕДРПОУКонтрагента;
						НоваяСтрокаОтправкиПоМаршруту.ФилиалКонтрагента = ЭлементМассиваОтправокПоМаршруту.ФилиалКонтрагента;
						НоваяСтрокаОтправкиПоМаршруту.ИмяФайла = ЭлементМассиваОтправокПоМаршруту.ИмяФайла;
						НоваяСтрокаОтправкиПоМаршруту.DocVer = ЭлементМассиваОтправокПоМаршруту.DocVer;
						НоваяСтрокаОтправкиПоМаршруту.RoutePosition = ЭлементМассиваОтправокПоМаршруту.RoutePosition;
						НоваяСтрокаОтправкиПоМаршруту.ToNextHop = ЭлементМассиваОтправокПоМаршруту.ToNextHop;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
			лКвитанцияОбъект.Записать();
			
			СобытиеДляЖурнала = лСобытиеЭлектронногоДокументаТекст + ": """
			+ ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + ЭлектронныйДокумент.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
			
			
			#Удаление			
			УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
			#КонецУдаления
			#Вставка
			ДокументИсходящий = ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий");
			Если НЕ ДокументИсходящий ИЛИ (ДокументИсходящий И лОрганизацияEDI.УстанавливатьПризнакОбработаноПриОтправкеИсходящегоДокументаКонтрагенту) Тогда
				УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
			КонецЕсли;	
			#КонецВставки			
			
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тСобытиеПри = ПараметрыСобытий.СобытиеПри;
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
				тСостояние = лЭлектронныйДокументОбъект.Состояние;
				тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
				тМассивВложений = Неопределено;
				ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
				Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписей = Неопределено;
				ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
				Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
					тМассивПодписей = Новый Массив;
					ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
				КонецЕсли;
				ОбработатьСобытие_ПриОтправкеКвитанции(тСобытиеПри, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
			КонецЕсли;
			
		ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тСобытиеПеред = ПараметрыСобытий.СобытиеПеред;
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
				тСостояние = ПараметрыСобытий.Состояние;
				тДокумент1С = ПараметрыСобытий.Документ1С;
				Если ТипЗнч(ПараметрыСобытий.МассивВложений) = Тип("Массив") Тогда
					тМассивВложений = ПараметрыСобытий.МассивВложений;
				Иначе
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
				ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
				ПричинаОтказа = "";
				Если не ОбработатьСобытие_ПередОтправкойКвитанции(тСобытиеПеред, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
					Отказ = Истина;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
				// Отправить запрос EDI провайдеру, обработать результат запроса.
				лПараметрыОтправкиКвитанции = Новый Структура;
				лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
				лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
				//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
				//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
				лПараметрыОтправкиКвитанции.Вставить("Body",  КвитанцияТело);
				
				лПараметрыОтправкиКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
				
				лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдераГовРК(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			КонецЕсли;
			
			Если лРезультатОтправкиОтвета = Неопределено Тогда	
				ДанныеДокумента.ЕстьОшибки = Истина;				
				
				Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
				
				ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
				ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			Иначе
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
				лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					Если ТекстКвитанции <> "" Тогда
						лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = ТекстКвитанции;
					КонецЕсли;
				КонецЕсли;
				лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
				лЭлектронныйДокументОбъект.Записать();
				
				ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
				//ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, лСобытиеЭлектронногоДокумента);
				
				// Создать документ по квитанции-ответу
				ИнформацияООтправленойКвитанции = НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ФилиалКонтрагента), "(" + лЭлектронныйДокументОбъект.ФилиалКонтрагента + ")", "");
				ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
				|
				|" + КвитанцияТекст;// ПолныйТекстКвитанции;
				
				Если не ПодписыватьКвитанциюВсемиПодписями Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
						|
						|"
						+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
						ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), ИнформацияООтправленойКвитанции, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
					КонецЕсли;
				КонецЕсли;
				
				
				Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
					лДанныеЗаполненияКвитанции = Новый Структура;
					лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("Организация",         лОрганизацияEDI);
					лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
					//лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            лРезультатОтправкиОтвета.ИмяФайла);
					лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   лЭлектронныйДокументОбъект.ФилиалКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияООтправленойКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       КвитанцияТело);
					лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
					
					лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
					лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
				Иначе
					лКвитанцияОбъект = Квитанция.ПолучитьОбъект();
					лКвитанцияОбъект.Дата = ТекущаяДата();
					лКвитанцияОбъект.ТекстКвитанции = ИнформацияООтправленойКвитанции;
					лКвитанцияОбъект.Готовится = Ложь;
					//лКвитанцияОбъект.ИмяФайла = лРезультатОтправкиОтвета.ИмяФайла;
					//лКвитанцияОбъект.ТелоКвитанции = КвитанцияТело;
				КонецЕсли;
				лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
				лКвитанцияОбъект.Записать();
				
				//// 2017-09-27
				//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "Квитанция сохранена """ + Строка(ТипКвитанции) + """ по документу """ + ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + ЭлектронныйДокумент.НомерДокумента + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy"));
				//// ...2017-09-27
				
				СобытиеДляЖурнала = лСобытиеЭлектронногоДокументаТекст + ": """
				+ ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + ЭлектронныйДокумент.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
				
				#Удаление
				УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
				#КонецУдаления
				#Вставка
				ДокументИсходящий = ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий");
				Если НЕ ДокументИсходящий ИЛИ (ДокументИсходящий И лОрганизацияEDI.УстанавливатьПризнакОбработаноПриОтправкеИсходящегоДокументаКонтрагенту) Тогда
					УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
				КонецЕсли;	
				#КонецВставки
				
				Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
					тСобытиеПри = ПараметрыСобытий.СобытиеПри;
					тОрганизация = ПараметрыСобытий.Организация;
					тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
					тВхИсх = ПараметрыСобытий.ВхИсх;
					тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
					тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					тСостояние = лЭлектронныйДокументОбъект.Состояние;
					тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
					тМассивВложений = Неопределено;
					ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
					Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
						Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
							тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
						Иначе
							тМассивВложений = Новый Массив;
						КонецЕсли;
						ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
					КонецЕсли;
					тМассивПодписей = Неопределено;
					ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
					Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
						тМассивПодписей = Новый Массив;
						ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
					КонецЕсли;
					ОбработатьСобытие_ПриОтправкеКвитанции(тСобытиеПри, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ОтправитьЭлектронныеДокументыКвитанцииПовторно")
Процедура СМС_ОтправитьЭлектронныеДокументыКвитанцииПовторно(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
	
	//Возврат;		
	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		лОрганизацияEDI = ДанныеДокумента.Организация;//ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);	
		
		//НовоеСостояниеЭлектронногоДокумента = Неопределено;
		
		ТелоКвитанции = "";
		ТекстКвитанции = "";
		ВидКвитанции = Неопределено;
		ТипКвитанции = Неопределено;
		ПереотправляемаяКвитанция = Неопределено;
		
		ТелоДокумента = "";
		ИзображениеДокумента = "";
		ВложениеДокумента1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
		МассивОтправкаСсылкиНаДокумент = Неопределено;
		
		НомерСтрокиСодержания = -1;
		ВариантОтправки = 0;
		СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка");
		СобытиеОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ПустаяСсылка");
		СобытиеОтправкиОписание = "";
		// 1 - ПервичныйДокумент Контрагенту
		// 2 - НалоговыйДокумент Контрагенту на согласование
		// 3 - НалоговыйДокумент Контрагенту для регистрации
		// 4 - НалоговыйДокумент Контрагенту после регистрации в ГНС
		// 5 - НалоговыйДокумент Контрагенту после отклонения в ГНС
		// 6 - НалоговыйДокумент Контрагенту остановки регистрации в ГНС
		// 7 - ПервичныйДокумент Квитанции Контрагенту
		
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен") Тогда
					ВариантОтправки = 2;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					ВариантОтправки = 4;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					Иначе
						НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						
						//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						СпособОтправки = лОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту;
						ВариантОтправки = 3;
						
						//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН");
					Иначе
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
						ВариантОтправки = 2;
						
						//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						Продолжить;
					Иначе
						ВариантОтправки = 4;
					КонецЕсли;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					//СпособОтправки = лОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					Иначе
						НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						
						//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 4;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 5;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокументаКонтрагента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокументаКонтрагента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокументаКонтрагента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						СодержаниеЭлектронногоДокумента = СодержаниеЭлектронногоДокументаКонтрагента;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 6;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокументаКонтрагента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокументаКонтрагента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокументаКонтрагента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						СодержаниеЭлектронногоДокумента = СодержаниеЭлектронногоДокументаКонтрагента;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			ОтражатьTSPСтатус = Истина;
			ОтражатьOCSPСтатус = Истина;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен") Тогда
					ВариантОтправки = 1;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение") Тогда
					ВариантОтправки = 7;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					               |	скEDI_Квитанция.Ссылка КАК Ссылка,
					               |	скEDI_Квитанция.Дата КАК Дата,
					               |	скEDI_Квитанция.ВидКвитанции КАК ВидКвитанции,
					               |	скEDI_Квитанция.ТипКвитанции КАК ТипКвитанции,
					               |	скEDI_Квитанция.ТекстКвитанции КАК ТекстКвитанции,
					               |	скEDI_Квитанция.ТелоКвитанции КАК ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.Организация = &Организация
					               |	И скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВхИсх = &ВхИсх
					               |	И скEDI_Квитанция.ВидКвитанции = &ВидКвитанции
					               |	И скEDI_Квитанция.ТипКвитанции = &ТипКвитанции
					               |	И НЕ скEDI_Квитанция.ПометкаУдаления
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	Дата УБЫВ";
					Запрос.УстановитьПараметр("Организация", лОрганизацияEDI);
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					Запрос.УстановитьПараметр("ВхИсх", ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"));
					Запрос.УстановитьПараметр("ВидКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.СДО"));
					Запрос.УстановитьПараметр("ТипКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение"));
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Если ВыборкаРезультатаЗапроса.Следующий() Тогда
						ТелоКвитанции = ВыборкаРезультатаЗапроса.ТелоКвитанции;
						ТекстКвитанции = ВыборкаРезультатаЗапроса.ТекстКвитанции;
						ВидКвитанции = ВыборкаРезультатаЗапроса.ВидКвитанции;
						ТипКвитанции = ВыборкаРезультатаЗапроса.ТипКвитанции;
						ПереотправляемаяКвитанция = ВыборкаРезультатаЗапроса.Ссылка;
					Иначе
						ОшибкаПоискаКвитанции = НСтр("ru = 'Нет найдена квитанция для переотправки.'; uk = 'Не знайдено квитанцію для перевідправлення.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПоискаКвитанции);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПоискаКвитанции);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение") Тогда
					ВариантОтправки = 7;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					               |	скEDI_Квитанция.Ссылка КАК Ссылка,
					               |	скEDI_Квитанция.Дата КАК Дата,
					               |	скEDI_Квитанция.ВидКвитанции КАК ВидКвитанции,
					               |	скEDI_Квитанция.ТипКвитанции КАК ТипКвитанции,
					               |	скEDI_Квитанция.ТекстКвитанции КАК ТекстКвитанции,
					               |	скEDI_Квитанция.ТелоКвитанции КАК ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.Организация = &Организация
					               |	И скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВхИсх = &ВхИсх
					               |	И скEDI_Квитанция.ВидКвитанции = &ВидКвитанции
					               |	И скEDI_Квитанция.ТипКвитанции = &ТипКвитанции
					               |	И НЕ скEDI_Квитанция.ПометкаУдаления
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	Дата УБЫВ";
					Запрос.УстановитьПараметр("Организация", лОрганизацияEDI);
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					Запрос.УстановитьПараметр("ВхИсх", ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"));
					Запрос.УстановитьПараметр("ВидКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.СДО"));
					Запрос.УстановитьПараметр("ТипКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение"));
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Если ВыборкаРезультатаЗапроса.Следующий() Тогда
						ТелоКвитанции = ВыборкаРезультатаЗапроса.ТелоКвитанции;
						ТекстКвитанции = ВыборкаРезультатаЗапроса.ТекстКвитанции;
						ВидКвитанции = ВыборкаРезультатаЗапроса.ВидКвитанции;
						ТипКвитанции = ВыборкаРезультатаЗапроса.ТипКвитанции;
						ПереотправляемаяКвитанция = ВыборкаРезультатаЗапроса.Ссылка;
					Иначе
						ОшибкаПоискаКвитанции = НСтр("ru = 'Нет найдена квитанция для переотправки.'; uk = 'Не знайдено квитанцію для перевідправлення.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПоискаКвитанции);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПоискаКвитанции);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда		
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не указан способ отправки'; uk = 'Не вказано спосіб відправки'") + ": " + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		// 2 - НалоговыйДокумент Контрагенту на согласование
		// 3 - НалоговыйДокумент Контрагенту для регистрации
		
		
		Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
			лИмяФайла = "";
			лИмяФайлаКвитанции = "";
			лИмяФайлаДФС = "";
			лСсылкаНаДокумент = "";
			лDocVer = 0;
			Если ВариантОтправки = 1 Тогда // 1 - ПервичныйДокумент Контрагенту
				Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					лПараметрыОтправкиДокумента.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
					лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
					лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
					//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
					//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
					лПараметрыОтправкиДокумента.Вставить("MedocBody", ТелоДокумента);
					
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиДокумента.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					МассивВложений = Новый Массив;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиДокумента.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					лПараметрыОтправкиДокумента.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент));
					
					МассивNotifyContacts = Неопределено;
					МассивОтправкаСсылкиНаДокумент = Новый Массив;
					МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
					Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						КонецЦикла;
					Иначе
						СписокНастроеныхАдресов = Новый СписокЗначений;
						Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							
							СписокНастроеныхАдресов.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						КонецЦикла;
						Если ЗначениеЗаполнено(ЭлектронныйДокумент.ЕДРПОУКонтрагента) Тогда
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
							               |	скEDI_КонтактныеДанныеКонтрагентов.Комментарий КАК Комментарий
							               |ИЗ
							               |	РегистрСведений.скEDI_КонтактныеДанныеКонтрагентов КАК скEDI_КонтактныеДанныеКонтрагентов
							               |ГДЕ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
							               |	И НЕ скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта В (&ЭлектроннаяПочтаСписок)
							               |	И скEDI_КонтактныеДанныеКонтрагентов.ОтправлятьСсылкуНаДокументАвтоматически";
							Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
							Запрос.УстановитьПараметр("ЭлектроннаяПочтаСписок", СписокНастроеныхАдресов);
							ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
							Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
								ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", ВыборкаРезультатаЗапроса.ЭлектроннаяПочта);
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", ВыборкаРезультатаЗапроса.Комментарий);
								МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						МассивNotifyContacts = Новый Массив;
						Для Каждого ЭлементМассиваОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							АдресЕстьВСписке = Ложь;
							Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
								Если ВРег(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
									АдресЕстьВСписке = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не АдресЕстьВСписке Тогда
								ЭлементМассиваNotifyContacts = Новый Структура("EMail", ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
								МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
							КонецЕсли;
						КонецЦикла;
						лПараметрыОтправкиДокумента.Вставить("NotifyContacts", МассивNotifyContacts);
					КонецЕсли;
					
					лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
						СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
							лИмяФайла = лРезультатОтправкиДокумента.FileName;
							//НовоеСостояниеЭлектронногоДокумента = Неопределено;
						Иначе
							Продолжить;
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
						лИмяФайла = лРезультатОтправкиДокумента.FileName;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано им''я файла відправленого документа на сервері СДО.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
					СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ВариантОтправки = 7 Тогда // 7 - ПервичныйДокумент Квитанции Контрагенту
				Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
					лПараметрыОтправкиКвитанции = Новый Структура;
					лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
					лПараметрыОтправкиКвитанции.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
					лПараметрыОтправкиКвитанции.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
					лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
					лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
					лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
					//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
					//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
					лПараметрыОтправкиКвитанции.Вставить("MedocKvt",  ТелоКвитанции);
					
					лСобытиеЭлектронногоДокументаТекст = "";
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отозван'; uk = 'Документ відкликано'");
					ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
						лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отклонен'; uk = 'Документ відхилено'");
					ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ подтвержден'; uk = 'Документ підтверджено'");
						лПараметрыОтправкиКвитанции.Вставить("MedocBody", ТелоДокумента);
						Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
							лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
							лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
							лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
							лПараметрыОтправкиКвитанции.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
						КонецЕсли;
						
						МассивВложений = Новый Массив;
						Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
							МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
						КонецЕсли;
						Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
							МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
						КонецЕсли;
						Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
							МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
						КонецЕсли;
						Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
							Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
								МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
							КонецЦикла;
						КонецЕсли;
						
						Если МассивВложений.Количество() > 0 Тогда
							лПараметрыОтправкиКвитанции.Вставить("AttachmentBody", МассивВложений);
						КонецЕсли;
						
						лПараметрыОтправкиКвитанции.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ЭлектронныйДокумент));
					КонецЕсли;
					лПараметрыОтправкиКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
					
					РежимСинхронизации = Ложь;
					ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если РежимСинхронизации Тогда
						лПараметрыОтправкиКвитанции.Вставить("DocVer", ПолучитьАктуальныйDocVer(ЭлектронныйДокумент));	
					КонецЕсли;
					лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					
					Если лРезультатОтправкиОтвета = Неопределено Тогда	
						ДанныеДокумента.ЕстьОшибки = Истина;				
						
						Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Иначе
						КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
						
						лДанныеЗаполненияКвитанции = Новый Структура;
						лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
						лДанныеЗаполненияКвитанции.Вставить("Организация",         лОрганизацияEDI);
						лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
						лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            лРезультатОтправкиОтвета.ИмяФайла);
						лДанныеЗаполненияКвитанции.Вставить("DocVer",              лРезультатОтправкиОтвета.DocVer);
						лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   ЭлектронныйДокумент.ЕДРПОУКонтрагента);
						лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   ЭлектронныйДокумент.ФилиалКонтрагента);
						лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
						лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ТекстКвитанции);
						лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       ТелоКвитанции);
						лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
						
						лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
						лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
						лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
						лКвитанцияОбъект.Записать();
						
						СобытиеДляЖурнала = лСобытиеЭлектронногоДокументаТекст + ": """
						+ ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + ЭлектронныйДокумент.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
						
						#Удаление
						УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
						#КонецУдаления
						#Вставка
						ДокументИсходящий = ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий");
						Если НЕ ДокументИсходящий ИЛИ (ДокументИсходящий И лОрганизацияEDI.УстанавливатьПризнакОбработаноПриОтправкеИсходящегоДокументаКонтрагенту) Тогда
							УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
						КонецЕсли;
						#КонецВставки
					КонецЕсли;
					
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
				
				Если ЭлектронныйДокумент.ИмяФайлаДФС = "" Тогда
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокумента(ДанныеДокумента.ВидЭлектронногоДокумента, ТелоДокумента, ЖурналОперации);
				Иначе
					лИмяФайлаДФС = ЭлектронныйДокумент.ИмяФайлаДФС;
				КонецЕсли;
				лИмяФайла = лИмяФайлаДФС;
				
				
				//Если ВариантОтправки = 2 или ВариантОтправки = 3 или ВариантОтправки = 4 Тогда  //????
				//	Помилка відправки SWINED_DOC_ALREADY_REGISTERED
				//9	Помилка відправки SWINED_ORIG_DOC_ABSENT
				Если ВариантОтправки = 2 или ВариантОтправки = 3 Тогда  //????
					
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
					//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
					//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
					лПараметрыОтправкиДокумента.Вставить("Body",      ТелоДокумента);
					
					лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ВариантОтправки = 4 или ВариантОтправки = 5 или ВариантОтправки = 6 Тогда
					Запрос = Новый Запрос;
					Если ВариантОтправки = 4 или ВариантОтправки = 5 Тогда
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_Квитанция.Ссылка,
						               |	скEDI_Квитанция.ТелоКвитанции,
						               |	скEDI_Квитанция.НомерКвитанции
						               |ИЗ
						               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
						               |ГДЕ
						               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
						               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
						               |	И скEDI_Квитанция.ФинальнаяКвитанция";
					ИначеЕсли ВариантОтправки = 6 Тогда
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_Квитанция.Ссылка,
						               |	скEDI_Квитанция.ТелоКвитанции,
						               |	скEDI_Квитанция.НомерКвитанции
						               |ИЗ
						               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
						               |ГДЕ
						               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
						               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
						               |	И скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена)";
					КонецЕсли;
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						//МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
						лПараметрыОтправкиКвитанции = Новый Структура;
						лПараметрыОтправкиКвитанции.Вставить("FileName",  лИмяФайлаДФС);
						лПараметрыОтправкиКвитанции.Вставить("KvtNum",    ВыборкаРезультатаЗапроса.НомерКвитанции);
						лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
						лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
						лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
						лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
						лПараметрыОтправкиКвитанции.Вставить("Body",      ВыборкаРезультатаЗапроса.ТелоКвитанции);
						СтрокаПодключенияEDI = Неопределено;
						СерверEDI = Неопределено;
						ПортEDI = Неопределено;
						ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
						//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
						//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
						
						лРезультатОтправкиКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/sendkvt", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						Если лРезультатОтправкиКвитанции.Code <> 0 Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Ошибка отправки квитанции:'; uk = 'Помилка відправки квитанції:'") + " " + лРезультатОтправкиКвитанции.Message;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							//Продолжить;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если не ДанныеДокумента.ЕстьОшибки Тогда
					КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				КонецЕсли;
				СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаКонтрагентуЧерезДФС;
			ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
				Если ЭлектронныйДокумент.ИмяФайлаДФС = "" Тогда
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокумента(ДанныеДокумента.ВидЭлектронногоДокумента, ТелоДокумента, ЖурналОперации);
				Иначе
					лИмяФайлаДФС = ЭлектронныйДокумент.ИмяФайлаДФС;
				КонецЕсли;
				
				лПараметрыОтправкиДокумента = Новый Структура;
				лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиДокумента.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
				лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
				лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
				лПараметрыОтправкиДокумента.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
				лПараметрыОтправкиДокумента.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
				//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
				//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
				лПараметрыОтправкиДокумента.Вставить("GovBody",   ТелоДокумента);
				лПараметрыОтправкиДокумента.Вставить("GovFileName", лИмяФайлаДФС);
				
				Если ВариантОтправки = 4 или ВариантОтправки = 5 Тогда
					МассивКвитанций = Новый Массив;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_Квитанция.Ссылка,
					               |	скEDI_Квитанция.ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
					               |	И скEDI_Квитанция.ФинальнаяКвитанция";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
					КонецЦикла;
					
					лПараметрыОтправкиДокумента.Вставить("GovKvt", МассивКвитанций);
				ИначеЕсли ВариантОтправки = 6 Тогда
					МассивКвитанций = Новый Массив;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_Квитанция.Ссылка,
					               |	скEDI_Квитанция.ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
					               |	И скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена)";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
					КонецЦикла;
					
					лПараметрыОтправкиДокумента.Вставить("GovKvt", МассивКвитанций);
				КонецЕсли;
				
				лПараметрыОтправкиДокумента.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент));
				
				лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				Если лРезультатОтправкиДокумента.Code <> 0 Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
					СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
						лИмяФайла = лРезультатОтправкиДокумента.FileName;
						//НовоеСостояниеЭлектронногоДокумента = Неопределено;
					Иначе
						Продолжить;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
					лИмяФайла = лРезультатОтправкиДокумента.FileName;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано им''я файла відправленого документа на сервері СДО.'");
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					Продолжить;
				КонецЕсли;
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СобытиеОтправки) Тогда
				лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				Если лИмяФайла <> "" Тогда
					Если лЭлектронныйДокументОбъект.ИмяФайла = "" Тогда
						лЭлектронныйДокументОбъект.ИмяФайла  = лИмяФайла;
					КонецЕсли;
				КонецЕсли;
				Если лЭлектронныйДокументОбъект.ИмяФайлаДФС = "" Тогда
					Если лИмяФайлаДФС <> "" Тогда
						лЭлектронныйДокументОбъект.ИмяФайлаДФС = лИмяФайлаДФС;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(лDocVer) Тогда
					Если лЭлектронныйДокументОбъект.DocVer = 0 Тогда
						лЭлектронныйДокументОбъект.DocVer  = лDocVer;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
					Если лЭлектронныйДокументОбъект.DocHref = "" Тогда
						лЭлектронныйДокументОбъект.DocHref  = лСсылкаНаДокумент;
					КонецЕсли;
				КонецЕсли;
				СобытиеОтправкиСсылкиНаДокумент = Неопределено;
				ОписаниеПоОтправкеСсылкиНаДокумент = "";
				Если ТипЗнч(МассивОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'на электронную почту:'; uk = 'на електронну пошту:'");
						Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
							СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
						КонецЕсли;
						лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
							НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
							НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
							
							ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
							Если ЗначениеЗаполнено(СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий) Тогда
								ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				//Если НовоеСостояниеЭлектронногоДокумента <> Неопределено Тогда
				//	лЭлектронныйДокументОбъект.Состояние = НовоеСостояниеЭлектронногоДокумента;
				//КонецЕсли;
				ДатаОтправки = ТекущаяДата();
				
				лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаОтправки;
				ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец);
				
				Если НомерСтрокиСодержания >= 0 Тогда
					Если ЗначениеЗаполнено(лИмяФайла) Тогда
						СодержимоеЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = НомерСтрокиСодержания;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерДополнения = 0;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.Прочитать();
						
						Если СодержимоеЭлектронныхДокументовМенеджерЗаписи.Выбран() и СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = "" Тогда
							СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = лИмяФайла;
							СодержимоеЭлектронныхДокументовМенеджерЗаписи.DocVer = лDocVer;
							СодержимоеЭлектронныхДокументовМенеджерЗаписи.DocHref = лСсылкаНаДокумент;
							СодержимоеЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
						Иначе
							ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_ПовторныеОтправкиЭлектронныхДокументов.СоздатьМенеджерЗаписи();
							ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Организация = лОрганизацияEDI;
							ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
							ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = лИмяФайла;
							ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = НомерСтрокиСодержания;
							ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Дата = ДатаОтправки;
							ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.DocVer = лDocVer;
							ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.DocHref = лСсылкаНаДокумент;
							ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(лИмяФайла) Тогда
						скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
							ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
							ТелоДокумента,
							ИзображениеДокумента,
							ВложениеДокумента1,
							ИмяФайлаВложениеДокумента1,
							ВложениеДокумента2,
							ИмяФайлаВложениеДокумента2,
							ВложениеДокумента3,
							ИмяФайлаВложениеДокумента3,
							МассивВложенийДокумента4,
							ТекущаяДата(),
							лИмяФайла,
							лDocVer,
							лСсылкаНаДокумент,
							Ложь,
							Ложь,
							Неопределено,
							Ложь
						);
					КонецЕсли;
				КонецЕсли;
				
				// Зафиксировать событие отправки электронного документа.
				лОписаниеПоОтправке = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'") + "
				|"
				+  НСтр("ru = 'Дата и время отправки: '; uk = 'Дата та час відправки: '") + Формат(ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm:ss'") + "
				|"
				+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), " (" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "") + "
				|"
				+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + лИмяФайла;
				
				Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
					лОписаниеПоОтправке = лОписаниеПоОтправке + "
					|"
					+ НСтр("ru = 'Ссылка на документ: '; uk = 'Посилання на документ: '") + лСсылкаНаДокумент;
				КонецЕсли;
				
				лОписаниеПоОтправке = лОписаниеПоОтправке + "
				|
				|"
				+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
				ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), лОписаниеПоОтправке, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
				
				Если ЗначениеЗаполнено(СобытиеОтправкиОписание) Тогда
					лОписаниеПоОтправке = лОписаниеПоОтправке + "
					|
					|" + СобытиеОтправкиОписание;
				КонецЕсли;

				ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправки, лОписаниеПоОтправке, ДатаОтправки, лDocVer, лИмяФайла, лИмяФайлаКвитанции);
				Если ЗначениеЗаполнено(СобытиеОтправкиСсылкиНаДокумент) Тогда
					лОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Отправлена ссылка на Электронный документ'; uk = 'Відправлено посилання на Електронний документ'")
					+ Символы.ПС
					+ лСсылкаНаДокумент
					+ Символы.ПС
					+ ОписаниеПоОтправкеСсылкиНаДокумент;
					
					ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправкиСсылкиНаДокумент, лОписаниеПоОтправкеСсылкиНаДокумент, ДатаОтправки);
				КонецЕсли;
					
				#Удаление
				УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
				#КонецУдаления
				#Вставка
				ДокументИсходящий = ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий");
				Если НЕ ДокументИсходящий ИЛИ (ДокументИсходящий И лОрганизацияEDI.УстанавливатьПризнакОбработаноПриОтправкеИсходящегоДокументаКонтрагенту) Тогда
					УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
				КонецЕсли;
				#КонецВставки
				
				СобытиеДляЖурнала = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'") + ": """
				+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ОтправитьЭлектронныеДокументы")
Процедура СМС_ОтправитьЭлектронныеДокументы(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт

	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
	
	МожноОтправитьТолькоСсылку = Ложь;
	Если ДополнительныеПараметры.Свойство("МожноОтправитьТолькоСсылку") Тогда
		МожноОтправитьТолькоСсылку = ДополнительныеПараметры.МожноОтправитьТолькоСсылку;
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		лОрганизацияEDI = ДанныеДокумента.Организация;//ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);	
		
		НовоеСостояниеЭлектронногоДокумента = Неопределено;
		
		ТелоДокумента = "";
		ИзображениеДокумента = "";
		ВложениеДокумента1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
		МассивОтправкаСсылкиНаДокумент = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		НомерСтрокиСодержания = -1;
		ВариантОтправки = 0;
		СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка");
		СобытиеОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ПустаяСсылка");
		СобытиеОтправкиОписание = "";
		// 1 - ПервичныйДокумент Контрагенту
		// 2 - НалоговыйДокумент Контрагенту на согласование
		// 3 - НалоговыйДокумент Контрагенту для регистрации
		// 4 - НалоговыйДокумент Контрагенту после регистрации в ГНС
		// 5 - НалоговыйДокумент Контрагенту после отклонения в ГНС
		// 6 - НалоговыйДокумент Контрагенту остановки регистрации в ГНС
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		OnlyHref = Ложь;
		
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
					ВариантОтправки = 2;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					ВариантОтправки = 4;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					Иначе
						НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						СпособОтправки = лОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту;
						ВариантОтправки = 3;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН");
					Иначе
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
						ВариантОтправки = 2;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						Продолжить;
					Иначе
						ВариантОтправки = 4;
					КонецЕсли;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					//СпособОтправки = лОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					Иначе
						НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 4;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 5;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокументаКонтрагента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокументаКонтрагента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокументаКонтрагента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						СодержаниеЭлектронногоДокумента = СодержаниеЭлектронногоДокументаКонтрагента;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 6;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокументаКонтрагента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокументаКонтрагента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокументаКонтрагента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						СодержаниеЭлектронногоДокумента = СодержаниеЭлектронногоДокументаКонтрагента;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			ОтражатьTSPСтатус = Истина;
			ОтражатьOCSPСтатус = Истина;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
			или ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
					ВариантОтправки = 1;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда		
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не указан способ отправки'; uk = 'Не вказано спосіб відправки'") + ": " + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		// 2 - НалоговыйДокумент Контрагенту на согласование
		// 3 - НалоговыйДокумент Контрагенту для регистрации
		
		
		Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
			лИмяФайла = "";
			лИмяФайлаКвитанции = "";
			лИмяФайлаДФС = "";
			лСсылкаНаДокумент = "";
			лDocVer = 0;
			Ошибка28 = Ложь;
			ОбновитьМаршрут = Ложь;
			ОбновитьМаршрутНомерВМаршруте = -1;
			
			Отказ = Ложь;
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
				тСостояние = ПараметрыСобытий.Состояние;
				тДокумент1С = ПараметрыСобытий.Документ1С;
				Если ТипЗнч(ПараметрыСобытий.МассивВложений) = Тип("Массив") Тогда
					тМассивВложений = ПараметрыСобытий.МассивВложений;
				Иначе
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
				ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
				ПричинаОтказа = "";
				Если не ОбработатьСобытие_ПередОтправкой(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
					Отказ = Истина;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
				КонецЕсли;
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;
			ИначеЕсли ВариантОтправки = 1 Тогда // 1 - ПервичныйДокумент Контрагенту
				Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
					ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
					ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
					лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
					
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
					//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
					//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
					лПараметрыОтправкиДокумента.Вставить("MedocBody", ТелоДокумента);
					
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиДокумента.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					МассивВложений = Новый Массив;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиДокумента.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					лПараметрыОтправкиДокумента.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент));
					
					Если ЭлектронныйДокумент.IsMultisided Тогда
						лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
						ОбновитьМаршрут = Истина;
						ОбновитьМаршрутНомерВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
						
						Если ЭлектронныйДокумент.Маршрут.Количество() >= 2 Тогда
							СледующийЭлементМаршрута = ЭлектронныйДокумент.Маршрут.Получить(1);
							ЕДРПОУКонтрагента = СледующийЭлементМаршрута.ЕДРПОУКонтрагента;
							ФилиалКонтрагента = СледующийЭлементМаршрута.ФилиалКонтрагента;
							лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
							лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
						КонецЕсли;
					КонецЕсли;
					лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
					
					МассивNotifyContacts = Неопределено;
					МассивОтправкаСсылкиНаДокумент = Новый Массив;
					МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
					Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						КонецЦикла;
					Иначе
						СписокНастроеныхАдресов = Новый СписокЗначений;
						Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							
							СписокНастроеныхАдресов.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						КонецЦикла;
						Если ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
							               |	скEDI_КонтактныеДанныеКонтрагентов.Комментарий КАК Комментарий
							               |ИЗ
							               |	РегистрСведений.скEDI_КонтактныеДанныеКонтрагентов КАК скEDI_КонтактныеДанныеКонтрагентов
							               |ГДЕ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
							               |	И НЕ скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта В (&ЭлектроннаяПочтаСписок)
							               |	И скEDI_КонтактныеДанныеКонтрагентов.ОтправлятьСсылкуНаДокументАвтоматически";
							Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", ЕДРПОУКонтрагента);
							Запрос.УстановитьПараметр("ЭлектроннаяПочтаСписок", СписокНастроеныхАдресов);
							ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
							Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
								ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", ВыборкаРезультатаЗапроса.ЭлектроннаяПочта);
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", ВыборкаРезультатаЗапроса.Комментарий);
								МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						МассивNotifyContacts = Новый Массив;
						Для Каждого ЭлементМассиваОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							АдресЕстьВСписке = Ложь;
							Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
								Если ВРег(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
									АдресЕстьВСписке = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не АдресЕстьВСписке Тогда
								ЭлементМассиваNotifyContacts = Новый Структура("EMail", ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
								МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
							КонецЕсли;
						КонецЦикла;
						лПараметрыОтправкиДокумента.Вставить("NotifyContacts", МассивNotifyContacts);
					КонецЕсли;
					
					Если МожноОтправитьТолькоСсылку Тогда
						Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
							Если ЭлектронныйДокумент.ОшибкаШифрованияПриОтправке Тогда
								OnlyHref = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если OnlyHref Тогда
						Если МассивNotifyContacts = Неопределено Тогда
							ОшибкаОтсутствиеNotifyContacts = НСтр("ru = 'Нет адреса для отправки ссылки на Электронный документ.'; uk = 'Нема адреси для відправки посилання на Електронний документ.'");
							
							ДанныеДокумента.ЕстьОшибки = Истина;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаОтсутствиеNotifyContacts);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаОтсутствиеNotifyContacts);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						лПараметрыОтправкиДокумента.Вставить("OnlyHref", Истина);
					КонецЕсли;
					
					ОтправкаМетодомSend = Ложь;
					ОтправкаМетодомSendAns = Ложь;
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИмяФайла) Тогда
						лИмяФайла = ЭлектронныйДокумент.ИмяФайла;
						лПараметрыОтправкиДокумента.Вставить("FileName", лИмяФайла);
						ОтправкаМетодомSendAns = Истина;
						
						Если ЭлектронныйДокумент.IsMultisided Тогда
							лПараметрыОтправкиДокумента.Вставить("RoutePosition", ЭлектронныйДокумент.RoutePosition);
							лПараметрыОтправкиДокумента.Вставить("ToNextHop", Истина);
						КонецЕсли;
						лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendans", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Иначе
						ОтправкаМетодомSend = Истина;
						лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					КонецЕсли;
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
						СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Если лРезультатОтправкиДокумента.Code = 28 Тогда // помилка шифрування, відсутні сертифікати шифрування одержувача
							Ошибка28 = Истина;
							лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
							лЭлектронныйДокументОбъект.ОшибкаШифрованияПриОтправке = Истина;
							лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
							лЭлектронныйДокументОбъект.Записать();
							Продолжить;
						Иначе
							тDocVer = Неопределено;
							Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
								Если ЗначениеЗаполнено(тDocVer) Тогда
									лDocVer = тDocVer;
								КонецЕсли;
							КонецЕсли;
							
							тСылкаНаДокумент = Неопределено;
							Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
								Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
									лСсылкаНаДокумент = тСылкаНаДокумент;
								КонецЕсли;
							КонецЕсли;
							
							Если ОтправкаМетодомSend Тогда
								Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
									лИмяФайла = лРезультатОтправкиДокумента.FileName;
									НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							Если ОтправкаМетодомSendAns Тогда
								Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.AnsFileName) Тогда
									лИмяФайлаКвитанции = лРезультатОтправкиДокумента.AnsFileName;
									НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						тDocVer = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
						
						Если ОтправкаМетодомSend Тогда
							Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
								лИмяФайла = лРезультатОтправкиДокумента.FileName;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано им''я файла відправленого документа на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если ОтправкаМетодомSendAns Тогда
							Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.AnsFileName) Тогда
								лИмяФайлаКвитанции = лРезультатОтправкиДокумента.AnsFileName;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано им''я файла відправленого документа на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
					СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
				КонецЕсли;
			ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
				
				Если ЭлектронныйДокумент.ИмяФайлаДФС = "" Тогда
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокумента(ДанныеДокумента.ВидЭлектронногоДокумента, ТелоДокумента, ЖурналОперации);
				Иначе
					лИмяФайлаДФС = ЭлектронныйДокумент.ИмяФайлаДФС;
				КонецЕсли;
				лИмяФайла = лИмяФайлаДФС;
				
				
				//Если ВариантОтправки = 2 или ВариантОтправки = 3 или ВариантОтправки = 4 Тогда  //????
				//	Помилка відправки SWINED_DOC_ALREADY_REGISTERED
				//9	Помилка відправки SWINED_ORIG_DOC_ABSENT
				Если ВариантОтправки = 2 или ВариантОтправки = 3 Тогда  //????
					
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
					ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
					лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
					//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
					//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
					лПараметрыОтправкиДокумента.Вставить("Body",      ТелоДокумента);
					
					лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ВариантОтправки = 4 или ВариантОтправки = 5 или ВариантОтправки = 6 Тогда
					Запрос = Новый Запрос;
					Если ВариантОтправки = 4 или ВариантОтправки = 5 Тогда
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_Квитанция.Ссылка,
						               |	скEDI_Квитанция.ТелоКвитанции,
						               |	скEDI_Квитанция.НомерКвитанции
						               |ИЗ
						               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
						               |ГДЕ
						               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
						               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
						               |	И скEDI_Квитанция.ФинальнаяКвитанция";
					ИначеЕсли ВариантОтправки = 6 Тогда
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_Квитанция.Ссылка,
						               |	скEDI_Квитанция.ТелоКвитанции,
						               |	скEDI_Квитанция.НомерКвитанции
						               |ИЗ
						               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
						               |ГДЕ
						               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
						               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
						               |	И скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена)";
					КонецЕсли;
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						//МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
						лПараметрыОтправкиКвитанции = Новый Структура;
						лПараметрыОтправкиКвитанции.Вставить("FileName",  лИмяФайлаДФС);
						лПараметрыОтправкиКвитанции.Вставить("KvtNum",    ВыборкаРезультатаЗапроса.НомерКвитанции);
						лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
						лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
						ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
						ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
						лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
						лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ФилиалКонтрагента);
						лПараметрыОтправкиКвитанции.Вставить("Body",      ВыборкаРезультатаЗапроса.ТелоКвитанции);
						СтрокаПодключенияEDI = Неопределено;
						СерверEDI = Неопределено;
						ПортEDI = Неопределено;
						ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
						//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
						//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
						
						лРезультатОтправкиКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/sendkvt", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						Если лРезультатОтправкиКвитанции.Code <> 0 Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Ошибка отправки квитанции:'; uk = 'Помилка відправки квитанції:'") + " " + лРезультатОтправкиКвитанции.Message;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							//Продолжить;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если не ДанныеДокумента.ЕстьОшибки Тогда
					КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				КонецЕсли;
				СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаКонтрагентуЧерезДФС;
			ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
				Если ЭлектронныйДокумент.ИмяФайлаДФС = "" Тогда
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокумента(ДанныеДокумента.ВидЭлектронногоДокумента, ТелоДокумента, ЖурналОперации);
				Иначе
					лИмяФайлаДФС = ЭлектронныйДокумент.ИмяФайлаДФС;
				КонецЕсли;
				
				лПараметрыОтправкиДокумента = Новый Структура;
				лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиДокумента.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
				лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
				ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
				ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
				лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
				лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
				лПараметрыОтправкиДокумента.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
				//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
				//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
				лПараметрыОтправкиДокумента.Вставить("GovBody",   ТелоДокумента);
				лПараметрыОтправкиДокумента.Вставить("GovFileName", лИмяФайлаДФС);
				
				Если ВариантОтправки = 4 или ВариантОтправки = 5 Тогда
					МассивКвитанций = Новый Массив;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_Квитанция.Ссылка,
					               |	скEDI_Квитанция.ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
					               |	И скEDI_Квитанция.ФинальнаяКвитанция";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
					КонецЦикла;
					
					лПараметрыОтправкиДокумента.Вставить("GovKvt", МассивКвитанций);
				ИначеЕсли ВариантОтправки = 6 Тогда
					МассивКвитанций = Новый Массив;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_Квитанция.Ссылка,
					               |	скEDI_Квитанция.ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
					               |	И скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена)";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
					КонецЦикла;
					
					лПараметрыОтправкиДокумента.Вставить("GovKvt", МассивКвитанций);
				КонецЕсли;
				
				лПараметрыОтправкиДокумента.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент));
				
				лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				Если лРезультатОтправкиДокумента.Code <> 0 Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
					СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
						лИмяФайла = лРезультатОтправкиДокумента.FileName;
						НовоеСостояниеЭлектронногоДокумента = Неопределено;
					Иначе
						Продолжить;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
					лИмяФайла = лРезультатОтправкиДокумента.FileName;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано им''я файла відправленого документа на сервері СДО.'");
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					Продолжить;
				КонецЕсли;
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
			Иначе
				Продолжить;
			КонецЕсли;
			
			лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			Если лЭлектронныйДокументОбъект.ИмяФайла = "" Тогда
				лЭлектронныйДокументОбъект.ИмяФайла  = лИмяФайла;
			КонецЕсли;
			Если лЭлектронныйДокументОбъект.ИмяФайлаДФС = "" Тогда
				Если лИмяФайлаДФС <> "" Тогда
					лЭлектронныйДокументОбъект.ИмяФайлаДФС = лИмяФайлаДФС;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(лDocVer) Тогда
				Если лЭлектронныйДокументОбъект.DocVer = 0 Тогда
					лЭлектронныйДокументОбъект.DocVer  = лDocVer;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
				Если лЭлектронныйДокументОбъект.DocHref = "" Тогда
					лЭлектронныйДокументОбъект.DocHref  = лСсылкаНаДокумент;
				КонецЕсли;
			КонецЕсли;
			СобытиеОтправкиСсылкиНаДокумент = Неопределено;
			ОписаниеПоОтправкеСсылкиНаДокумент = "";
			Если ТипЗнч(МассивОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
				Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
					ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'на электронную почту:'; uk = 'на електронну пошту:'");
					Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
						СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
					КонецЕсли;
					лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
					Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
						НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
						НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
						НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
						
						ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
						Если ЗначениеЗаполнено(СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий) Тогда
							ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			//Если лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС") Тогда
			//	// не меняем
			//ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС") Тогда
			//	// не меняем
			//ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
			//	// не меняем
			//ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
			//	// не меняем
			//Иначе
			//	Если ВариантОтправки = 3 Тогда
			//		лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН");
			//	Иначе
			//		лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
			//	КонецЕсли;
			//КонецЕсли;
			Если НовоеСостояниеЭлектронногоДокумента <> Неопределено Тогда
				лЭлектронныйДокументОбъект.Состояние = НовоеСостояниеЭлектронногоДокумента;
				
				Если ОбновитьМаршрут Тогда
					ОбновитьМаршрутПредыдущиеСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение;
					УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, Неопределено, ОбновитьМаршрутНомерВМаршруте, НовоеСостояниеЭлектронногоДокумента, ОбновитьМаршрутПредыдущиеСостояния);
				КонецЕсли;
			КонецЕсли;
			ДатаОтправки = ТекущаяДата();
			
			лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаОтправки;
			ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец);
			
			Если НомерСтрокиСодержания >= 0 Тогда
				Если ЗначениеЗаполнено(лИмяФайла) Тогда
					СодержимоеЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = НомерСтрокиСодержания;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерДополнения = 0;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.Прочитать();
					
					Если СодержимоеЭлектронныхДокументовМенеджерЗаписи.Выбран() и СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = "" Тогда
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = лИмяФайла;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.DocVer = лDocVer;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.DocHref = лСсылкаНаДокумент;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
					Иначе
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_ПовторныеОтправкиЭлектронныхДокументов.СоздатьМенеджерЗаписи();
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Организация = лОрганизацияEDI;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = лИмяФайла;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = НомерСтрокиСодержания;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Дата = ДатаОтправки;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.DocVer = лDocVer;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.DocHref = лСсылкаНаДокумент;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
					КонецЕсли;
				КонецЕсли;
			Иначе
				скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
					ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
					ТелоДокумента,
					ИзображениеДокумента,
					ВложениеДокумента1,
					ИмяФайлаВложениеДокумента1,
					ВложениеДокумента2,
					ИмяФайлаВложениеДокумента2,
					ВложениеДокумента3,
					ИмяФайлаВложениеДокумента3,
					МассивВложенийДокумента4,
					ТекущаяДата(),
					лИмяФайла,
					лDocVer,
					лСсылкаНаДокумент,
					Ложь,
					Ложь,
					Неопределено,
					Ложь
				);
			КонецЕсли;
			
			// Зафиксировать событие отправки электронного документа.
			лОписаниеПоОтправке = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'")
			+ ?(OnlyHref, " " + НСтр("ru = 'в виде ссылки'; uk = 'у вигляді посилання'"), "")
			+ "
			|"
			+  НСтр("ru = 'Дата и время отправки: '; uk = 'Дата та час відправки: '") + Формат(ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm:ss'") + "
			|"
			+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), " (" + ФилиалКонтрагента + ")", "") + "
			|"
			+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + лИмяФайла;
			
			Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
				лОписаниеПоОтправке = лОписаниеПоОтправке + "
				|"
				+ НСтр("ru = 'Ссылка на документ: '; uk = 'Посилання на документ: '") + лСсылкаНаДокумент;
			КонецЕсли;
			
			лОписаниеПоОтправке = лОписаниеПоОтправке + "
			|
			|"
			+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
			ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), лОписаниеПоОтправке, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
			
			Если ЗначениеЗаполнено(СобытиеОтправкиОписание) Тогда
				лОписаниеПоОтправке = лОписаниеПоОтправке + "
				|
				|" + СобытиеОтправкиОписание;
			КонецЕсли;

			ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправки, лОписаниеПоОтправке, ДатаОтправки, лDocVer, лИмяФайла, лИмяФайлаКвитанции);
			
			Если ЗначениеЗаполнено(СобытиеОтправкиСсылкиНаДокумент) Тогда
				лОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Отправлена ссылка на Электронный документ'; uk = 'Відправлено посилання на Електронний документ'")
				+ Символы.ПС
				+ лСсылкаНаДокумент
				+ Символы.ПС
				+ ОписаниеПоОтправкеСсылкиНаДокумент;
				
				ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправкиСсылкиНаДокумент, лОписаниеПоОтправкеСсылкиНаДокумент, ДатаОтправки);
			КонецЕсли;
				
			#Удаление
			УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
			#КонецУдаления
			#Вставка
			ДокументИсходящий = ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий");
			Если НЕ ДокументИсходящий ИЛИ (ДокументИсходящий И лОрганизацияEDI.УстанавливатьПризнакОбработаноПриОтправкеИсходящегоДокументаКонтрагенту) Тогда
				УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
			КонецЕсли;
			#КонецВставки
			
			СобытиеДляЖурнала = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'") + ": """
			+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
			
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
				тСостояние = лЭлектронныйДокументОбъект.Состояние;
				тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
				тМассивВложений = Неопределено;
				ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
				Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписей = Неопределено;
				ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
				Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
					тМассивПодписей = Новый Массив;
					ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
				КонецЕсли;
				ОбработатьСобытие_ПриОтправке(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ПолучитьПодписантов")
Функция СМС_ПолучитьПодписантов(ВыполняемыеОперации, Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей) Экспорт
	Результат = Новый Структура("МассивПодписей,МассивПодписейШифрования");
	ОшибкаПолученияПодписей = "";
	
	СписокВидовЭлектронныхДокументовБезНастроекПоПодписям = Новый СписокЗначений;
	
	ПолучатьВсеПодписи = Ложь;
	ПолучатьНедостающиеПодписи = Ложь;
	ПолучатьПоследнююПодпись = Ложь;
	ПолучатьПодписиШифрования = Ложь;
	ЕстьОтправкаКонтрагенту = Ложь;
	
	Для Каждого ВыполняемаяОперация Из ВыполняемыеОперации Цикл
		Если ВыполняемаяОперация = "Подпись" Тогда
			ПолучатьНедостающиеПодписи = Истина;
		ИначеЕсли ВыполняемаяОперация = "СформироватьНовыйВариантЭлектронногоДокумента" Тогда
			ПолучатьВсеПодписи = Истина;
		ИначеЕсли ВыполняемаяОперация = "Отправка" Тогда
			ПолучатьНедостающиеПодписи = Истина;
			ПолучатьПодписиШифрования = Истина;
			ЕстьОтправкаКонтрагенту = Истина;
		ИначеЕсли ВыполняемаяОперация = "ОтправитьНаДоподписание" Тогда
			ПолучатьНедостающиеПодписи = Истина;
			ПолучатьПодписиШифрования = Истина;
			//ЕстьОтправкаКонтрагенту = Истина;
		ИначеЕсли ВыполняемаяОперация = "ОтправкаВДФС" Тогда
			ПолучатьНедостающиеПодписи = Истина;
			ПолучатьПодписиШифрования = Истина;
		ИначеЕсли ВыполняемаяОперация = "ПолучениеВходящихСообщений" Тогда
			ПолучатьПодписиШифрования = Истина;
		ИначеЕсли ВыполняемаяОперация = "ОтправкаКвитанций" Тогда
			//ПолучатьПоследнююПодпись = Истина;
			ПолучатьНедостающиеПодписи = Истина;
			ПолучатьПодписиШифрования = Истина;	
		ИначеЕсли ВыполняемаяОперация = "ПовторнаяОтправка" Тогда
			ПолучатьПоследнююПодпись = Ложь;
			ПолучатьНедостающиеПодписи = Ложь;
			ПолучатьПодписиШифрования = Истина;	
		ИначеЕсли ВыполняемаяОперация = "Отклонение" Тогда
			//ПолучатьПоследнююПодпись = Истина;
			ПолучатьПодписиШифрования = Истина;
		ИначеЕсли ВыполняемаяОперация = "Отзыв" Тогда
			//ПолучатьПоследнююПодпись = Истина;
			ПолучатьПодписиШифрования = Истина;	
		КонецЕсли; 
	КонецЦикла;
	
	Результат.МассивПодписей = Новый Массив;
	Если ПолучатьВсеПодписи или ПолучатьНедостающиеПодписи или ПолучатьПоследнююПодпись или ЕстьОтправкаКонтрагенту Тогда
		Для Каждого ЭлементМассиваДанныхПоДокументам Из МассивДанныхПоДокументам Цикл
			ВариантОтправки = 0;
			Если ЕстьОтправкаКонтрагенту Тогда
				Если ЭлементМассиваДанныхПоДокументам.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
					Если ЭлементМассиваДанныхПоДокументам.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
					//Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
						Если ЭлементМассиваДанныхПоДокументам.РегистрируетсяВЕРННПокупателем Тогда
							ВариантОтправки = 3;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПолучатьПоследнююПодписьДляОтправкиЧерезСерверДФС = Ложь;
			Если ВариантОтправки = 3 Тогда
				Если Организация.СпособОтправкиНалоговыхДокументовКонтрагенту = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
					ПолучатьПоследнююПодписьДляОтправкиЧерезСерверДФС = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ПодписиПолученыИзЭлектронногоДокумента = Ложь;
			Если ЗначениеЗаполнено(ЭлементМассиваДанныхПоДокументам.ЭлектронныйДокумент) Тогда
				ЭлектронныйДокумент = ЭлементМассиваДанныхПоДокументам.ЭлектронныйДокумент;
				Если ЭлектронныйДокумент.Подписи.Количество() > 0 Тогда
					ПодписиПолученыИзЭлектронногоДокумента = Истина;
					Если ПолучатьНедостающиеПодписи Тогда
						НедостающиеПодписи = ЭлектронныйДокумент.Подписи.НайтиСтроки(Новый Структура("Подписано", Ложь));
						Для Каждого НедостающаяПодпись Из НедостающиеПодписи Цикл
							Если Результат.МассивПодписей.Найти(НедостающаяПодпись.Подпись) = Неопределено Тогда
								Результат.МассивПодписей.Добавить(НедостающаяПодпись.Подпись);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ПолучатьПоследнююПодпись или ПолучатьПоследнююПодписьДляОтправкиЧерезСерверДФС Тогда
						ПоследняяПодпись = ЭлектронныйДокумент.Подписи.Получить(ЭлектронныйДокумент.Подписи.Количество()-1);
						Если Результат.МассивПодписей.Найти(ПоследняяПодпись.Подпись) = Неопределено Тогда
							Результат.МассивПодписей.Добавить(ПоследняяПодпись.Подпись);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ПолучатьВсеПодписи или Не ПодписиПолученыИзЭлектронногоДокумента Тогда
				ВидЭлектронногоДокумента = ЭлементМассиваДанныхПоДокументам.ВидЭлектронногоДокумента;				
				Если ПолучатьНедостающиеПодписи Тогда
					ПодписиПолучены = Ложь;
					Для Каждого Подпись Из ВидЭлектронногоДокумента.Подписи Цикл
						ТекПодпись = Неопределено;
						Если ТипЗнч(Подпись.Подпись) = Тип("СправочникСсылка.скEDI_ГруппыПодписей") Тогда
							#Удаление
							Если Подпись.ТолькоОтветственный и (ЭлементМассиваДанныхПоДокументам.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")) Тогда
								КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ЭлементМассиваДанныхПоДокументам.Документ1С);
								Если КодПоДРФО = "" Тогда
									Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
									КонецЕсли;
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С);
								Иначе
									ТекПодпись = ПолучитьПодписьИзГруппыПоКодуДРФО(Организация, Подпись.Подпись, КодПоДРФО);
									Если ТекПодпись = Неопределено Тогда
										Сообщение = НСтр("ru = 'В Группе подписей'; uk = 'В Групі підписів'") + " """ + Строка(Подпись.Подпись) + """ " + НСтр("ru = 'не найдена Подпись с Кодом по ДРФО'; uk = 'не знайдено Підпис з Кодом по ДРФО'") + ": " + КодПоДРФО;
										Сообщение = Сообщение + " " + НСтр("ru = ' по документу'; uk = ' по документу'") + ": """ + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С) + """";
										Если Найти(ОшибкаПолученияПодписей, Сообщение) = 0 Тогда
											Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
												ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
											КонецЕсли;
											ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Сообщение;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							Иначе
								ТекПодпись = Подпись.Подпись;
							КонецЕсли;
							#КонецУдаления
							#Вставка
							Если Подпись.ТолькоОтветственный и (ЭлементМассиваДанныхПоДокументам.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")) 
								//не проверяем для универсального документа без учетного документа базы
								И (Не ЭлементМассиваДанныхПоДокументам.ПараметрыСозданияДокументов.ИмяШаблона = "MULTIDOC" И Не ЭлементМассиваДанныхПоДокументам.Документ1С = Неопределено) Тогда
								
								КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ЭлементМассиваДанныхПоДокументам.Документ1С);
								Если КодПоДРФО = "" Тогда
									Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
									КонецЕсли;
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С);
								Иначе
									ТекПодпись = ПолучитьПодписьИзГруппыПоКодуДРФО(Организация, Подпись.Подпись, КодПоДРФО);
									Если ТекПодпись = Неопределено Тогда
										Сообщение = НСтр("ru = 'В Группе подписей'; uk = 'В Групі підписів'") + " """ + Строка(Подпись.Подпись) + """ " + НСтр("ru = 'не найдена Подпись с Кодом по ДРФО'; uk = 'не знайдено Підпис з Кодом по ДРФО'") + ": " + КодПоДРФО;
										Сообщение = Сообщение + " " + НСтр("ru = ' по документу'; uk = ' по документу'") + ": """ + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С) + """";
										Если Найти(ОшибкаПолученияПодписей, Сообщение) = 0 Тогда
											Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
												ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
											КонецЕсли;
											ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Сообщение;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							Иначе
								ТекПодпись = Подпись.Подпись;
							КонецЕсли;
							#КонецВставки
						ИначеЕсли ТипЗнч(Подпись.Подпись) = Тип("СправочникСсылка.скEDI_Подписи") Тогда
							#Удаление
							Если Подпись.ТолькоОтветственный и (ЭлементМассиваДанныхПоДокументам.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")) Тогда
								КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ЭлементМассиваДанныхПоДокументам.Документ1С);
								Если КодПоДРФО = "" Тогда
									Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
									КонецЕсли;
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С);
								Иначе
									Если КодПоДРФО = Подпись.Подпись.ДРФО Тогда
										ТекПодпись = Подпись.Подпись;
									Иначе
										Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
											ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
										КонецЕсли;
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Код по ДРФО Подписи не соответствует Ответственному по документу:'; uk = 'Код по ДРФО Підпису не відповідає Відповідальному по документу:'") + " " + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С);
									КонецЕсли;
								КонецЕсли;
								
							Иначе
								ТекПодпись = Подпись.Подпись;
							КонецЕсли;
							#КонецУдаления
							#Вставка
							Если Подпись.ТолькоОтветственный и (ЭлементМассиваДанныхПоДокументам.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"))
								//не проверяем для универсального документа без учетного документа базы
								И (Не ЭлементМассиваДанныхПоДокументам.ПараметрыСозданияДокументов.ИмяШаблона = "MULTIDOC" И Не ЭлементМассиваДанныхПоДокументам.Документ1С = Неопределено) Тогда
								
								КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ЭлементМассиваДанныхПоДокументам.Документ1С);
								Если КодПоДРФО = "" Тогда
									Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
									КонецЕсли;
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С);
								Иначе
									Если КодПоДРФО = Подпись.Подпись.ДРФО Тогда
										ТекПодпись = Подпись.Подпись;
									Иначе
										Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
											ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
										КонецЕсли;
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Код по ДРФО Подписи не соответствует Ответственному по документу:'; uk = 'Код по ДРФО Підпису не відповідає Відповідальному по документу:'") + " " + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С);
									КонецЕсли;
								КонецЕсли;
								
							Иначе
								ТекПодпись = Подпись.Подпись;
							КонецЕсли;
							#КонецВставки							
						КонецЕсли;
						
						Если ТекПодпись <> Неопределено Тогда
							Если Результат.МассивПодписей.Найти(ТекПодпись) = Неопределено Тогда
								Результат.МассивПодписей.Добавить(ТекПодпись);
							КонецЕсли;
						КонецЕсли;
						ПодписиПолучены = Истина;
					КонецЦикла;
					Если Не ПодписиПолучены Тогда
						Если СписокВидовЭлектронныхДокументовБезНастроекПоПодписям.НайтиПоЗначению(ВидЭлектронногоДокумента) = Неопределено Тогда
							СписокВидовЭлектронныхДокументовБезНастроекПоПодписям.Добавить(ВидЭлектронногоДокумента);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ПолучатьПоследнююПодпись или ПолучатьПоследнююПодписьДляОтправкиЧерезСерверДФС Тогда //Так как последняя Подпись Печать, должно сработать и так
					Если ВидЭлектронногоДокумента.Подписи.Количество() > 0 Тогда
						ПоследняяПодпись = ВидЭлектронногоДокумента.Подписи.Получить(ВидЭлектронногоДокумента.Подписи.Количество()-1);
						Если Результат.МассивПодписей.Найти(ПоследняяПодпись.Подпись) = Неопределено Тогда
							Результат.МассивПодписей.Добавить(ПоследняяПодпись.Подпись);
						КонецЕсли;
					Иначе
						Если СписокВидовЭлектронныхДокументовБезНастроекПоПодписям.НайтиПоЗначению(ВидЭлектронногоДокумента) = Неопределено Тогда
							СписокВидовЭлектронныхДокументовБезНастроекПоПодписям.Добавить(ВидЭлектронногоДокумента);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаСписка Из СписокВидовЭлектронныхДокументовБезНастроекПоПодписям Цикл
		Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
			ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
		КонецЕсли;
		ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не настроены подписи для Вида электронного документа:'; uk = 'Не налаштовано підписи для Виду електронного документу:'") + " " + Строка(СтрокаСписка.Значение);
	КонецЦикла;
	
	Результат.МассивПодписейШифрования = Новый Массив;
	Если ПолучатьПодписиШифрования Тогда
		лЭлементМассива = Новый Структура;
		лЭлементМассива.Вставить("ПодписьШифрования", Неопределено);
		лЭлементМассива.Вставить("Организация", Организация);
		Результат.МассивПодписейШифрования.Добавить(лЭлементМассива);
		//Запрос = Новый Запрос;
		//Запрос.Текст =
		//	"ВЫБРАТЬ ПЕРВЫЕ 1
		//	|	скEDI_Подписи.Владелец КАК Организация,
		//	|	скEDI_Подписи.Ссылка КАК ПодписьШифрования
		//	|ИЗ
		//	|	Справочник.скEDI_Подписи КАК скEDI_Подписи
		//	|ГДЕ
		//	|	НЕ скEDI_Подписи.ПометкаУдаления
		//	|	И скEDI_Подписи.Владелец = &Организация
		//	|	И скEDI_Подписи.ИспользованиеКлюча = ЗНАЧЕНИЕ(Перечисление.скEDI_ИспользованиеКлючей.Шифрование)
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	скEDI_Подписи.ОсновнаяПодписьШифрования УБЫВ";
		//Запрос.УстановитьПараметр("Организация", Организация);
		//
		//лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
		//Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		//	лЭлементМассива = Новый Структура;
		//	лЭлементМассива.Вставить("ПодписьШифрования",   лВыборкаРезультатовЗапроса.ПодписьШифрования);
		//	лЭлементМассива.Вставить("Организация",   лВыборкаРезультатовЗапроса.Организация);
		//	Результат.МассивПодписейШифрования.Добавить(лЭлементМассива);
		//Иначе
		//	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		//		ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
		//	КонецЕсли;
		//	ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не настроены подписи шифрования по Организации:'; uk = 'Не налаштовано підписи шифрування по Організації:'") + " " + Строка(Организация);
		//КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции
