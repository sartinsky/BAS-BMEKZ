
#Область Служебные

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;  
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",");
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип второго параметра Реквизиты: %1';uk='Невірний тип другого параметра Реквізити: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		СокрЛП(КлючИЗначение.Значение),
		СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПометкиНаУдаление_СнятияПометкиНаУдалениеСпавочниковСОставаКлючейАналитикиУчетаКультуры

Процедура СМС_ПередЗаписьюСправочникаВходящегоВСМС_КлючиАналитикиУчетаНоменклатурыПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка смены реквизитов
	Если Не Источник.ЭтоНовый() Тогда
		
		ТипИсточника = ТипЗНЧ(Источник);
		
		СтарыеЗначения =  ЗначенияРеквизитовОбъекта(Источник.Ссылка, "ПометкаУдаления"); 
		Если ТипИсточника = Тип("СправочникОбъект.Номенклатура") Тогда
			ИмяПараметраСтруктуры = "Номенклатура";			
		ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
			ИмяПараметраСтруктуры = "Договор";			
		ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Контрагенты") Тогда
			ИмяПараметраСтруктуры = "Контрагент";			
		ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Склады") Тогда
			ИмяПараметраСтруктуры = "Склад";		
		ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ИНАГРО_ВидыУрожая") Тогда
			ИмяПараметраСтруктуры = "Урожай";		
		ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ИНАГРО_ВидыХранения") Тогда	
			ИмяПараметраСтруктуры = "ВидХранения";
		ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ИНАГРО_ВидыФасовки") Тогда	
			ИмяПараметраСтруктуры = "ВидФасовки";			
		ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ИНАГРО_МестаХранения") Тогда	
			ИмяПараметраСтруктуры = "МестоХранения";				
		Иначе	
			Возврат;			
		КонецЕсли;	
		
	    Если Источник.ПометкаУдаления <> СтарыеЗначения.ПометкаУдаления Тогда
			УстановитьПривилегированныйРежим(Истина);
			Справочники.СМС_КлючиАналитикиУчетаКультуры.УстановитьПометкуУдаления(Новый Структура(ИмяПараметраСтруктуры, Источник.Ссылка),	Источник.ПометкаУдаления);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ЗаменаСсылокПоИнформационнойБазе

// Заменяет ссылки по информационной базе
//Параметры:
//	ПарыЗамены - Соответствие - ключи содержат замещаемых, значения содержат заменители
//	Исключения - Массив - необязателен, значения типа ОбъектМетаданных, в экземплярах которых замены проводить нельзя
Процедура ЗаменитьСсылки(ПарыЗамен, Исключения = Неопределено) Экспорт
	Английский = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Английский;
	ДвиженияССубконтоИмя = ?(Метаданные.ВариантВстроенногоЯзыка = Английский, ".RecordsWithExtDimensions", ".ДвиженияССубконто");
	
	Если Исключения = Неопределено Тогда
		Исключения = Новый Массив;
	КонецЕсли;
	
	// [ссылающийся объект](.Метаданные, .Замены[(.Замещаемое, .Заменитель)], .ТипыЗамещаемых[])
	ИндексЗамены = ИндексЗамены(ПарыЗамен);
	КешПолей = Новый Соответствие;
	// обходим индекс и в каждом ключе-объекта полностью замещаем все ссылки, подлежащие замене
	Для Каждого УзелЗамены Из ИндексЗамены Цикл
		Ссылка = УзелЗамены.Ключ;
		МетаданныеУзла = УзелЗамены.Значение.Метаданные;
		Замены = УзелЗамены.Значение.Замены;
		ТипыЗамещаемых = УзелЗамены.Значение.ТипыЗамещаемых;
		
		Если Исключения.Найти(МетаданныеУзла) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоСсылочныйОбъектМетаданных(МетаданныеУзла) Тогда
			// любой ссылочный объект
			ПолноеИмя = МетаданныеУзла.ПолноеИмя();
			ОбъектДанных = Ссылка.ПолучитьОбъект();
			ИменаПолей = ИменаПолейСТипами(КешПолей, ПолноеИмя, ТипыЗамещаемых, "Ссылка, Ref");
			ЗаменитьЗначения(ОбъектДанных, ИменаПолей, Замены);
			// табчасти объекта
			ЗаменитьВТабчастях(КешПолей, МетаданныеУзла.ТабличныеЧасти, ОбъектДанных, ПолноеИмя, Замены, ТипыЗамещаемых, Исключения);
			// стандартные табчасти планов
			Если Метаданные.ПланыСчетов.Содержит(МетаданныеУзла) Или Метаданные.ПланыВидовРасчета.Содержит(МетаданныеУзла) Тогда
				ЗаменитьВТабчастях(КешПолей, МетаданныеУзла.СтандартныеТабличныеЧасти, ОбъектДанных, ПолноеИмя, Замены, ТипыЗамещаемых, Исключения);
			КонецЕсли;
			// пишем сам объект
			ЗаписатьДанные(ОбъектДанных);
			ОбъектДанных = Неопределено;
		ИначеЕсли Метаданные.Константы.Содержит(МетаданныеУзла) Тогда
			// значения в константах
			Константа = Константы[МетаданныеУзла.Имя];
			Константа.Установить(НовоеЗначение(Константа.Получить(), Замены));
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеУзла) Тогда
			// необъектные таблицы
			ИменаПолей = ИменаПолейСТипами(КешПолей, МетаданныеУзла.ПолноеИмя(), ТипыЗамещаемых);
			Отборы = ОтборыРегистраСведений(МетаданныеУзла, Ссылка);
			Набор = НаборЗаписей(РегистрыСведений[МетаданныеУзла.Имя], Отборы);
			
			Таблица = Набор.Выгрузить();
			Набор.Очистить();
			ЗаписатьДанные(Набор);
			
			ЗаменитьЗначения(Таблица[0], ИменаПолей, Замены);
			Для Каждого ИмяПоля Из ИменаПолей Цикл
				Если Не Отборы.Свойство(ИмяПоля) Тогда
					Продолжить;
				КонецЕсли;
				Набор.Отбор[ИмяПоля].Установить(НовоеЗначение(Отборы[ИмяПоля], Замены));
			КонецЦикла;
			Набор.Загрузить(Таблица);
			ЗаписатьДанные(Набор);
		КонецЕсли;
		// обработка движений документа
		Если Метаданные.Документы.Содержит(МетаданныеУзла) Тогда
			Для Каждого Движение Из МетаданныеУзла.Движения Цикл
				ДопТаблица = "";
				Если Исключения.Найти(Движение) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
					Регистр = РегистрыНакопления[Движение.Имя];
				ИначеЕсли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Регистр = РегистрыСведений[Движение.Имя];
				ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					ДопТаблица = ДвиженияССубконтоИмя;
					Регистр = РегистрыБухгалтерии[Движение.Имя];
				ИначеЕсли Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
					Регистр = РегистрыРасчета[Движение.Имя];
				КонецЕсли;
				ЗаменитьВПодчиненномРегистре(КешПолей, Регистр, Ссылка, Движение.ПолноеИмя() + ДопТаблица, Замены, ТипыЗамещаемых);
			КонецЦикла;
			// обработка последовательностей, включающих документ
			Для Каждого Движение Из Метаданные.Последовательности Цикл
				Если Исключения.Найти(Движение) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Движение.Документы.Содержит(МетаданныеУзла) Тогда
					ЗаменитьВПодчиненномРегистре(КешПолей, Последовательности[Движение.Имя], Ссылка, Движение.ПолноеИмя(), Замены, ТипыЗамещаемых);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Строим соответствие вида [ссылающийся объект](.Метаданные, .Замены[(.Замещаемое, .Заменитель)], .ТипыЗамещаемых[])
// в итоге представляем результаты поиска по ссылкам в индексе с ключом-объектом, содержащим замещаемые ссылки
Функция ИндексЗамены(ПарыЗамен)
	
	СписокСсылок = Новый Массив;
	Для Каждого Пара Из ПарыЗамен Цикл
		СписокСсылок.Добавить(Пара.Ключ);
	КонецЦикла;
	РезультатыПоиска = НайтиПоСсылкам(СписокСсылок);
	// (.Ссылка: исходная ссылка; .Данные: ссылающийся объект; .Метаданные: метаданные ссылающегося объекта)
	
	ИндексЗамены = Новый Соответствие;
	Для Каждого Результат Из РезультатыПоиска Цикл
		УзелЗамены = ИндексЗамены[Результат.Данные];
		Если Неопределено = УзелЗамены Тогда
			УзелЗамены =
			Новый Структура("Метаданные, Замены, ТипыЗамещаемых", Результат.Метаданные, Новый Массив, Новый Массив);
			ИндексЗамены.Вставить(Результат.Данные, УзелЗамены);
		КонецЕсли;
		
		УзелЗамены.Замены.Добавить(
		Новый Структура("Замещаемое, Заменитель", Результат.Ссылка, ПарыЗамен[Результат.Ссылка]));
		
		ТипЗамещаемого = ТипЗнч(Результат.Ссылка);
		Если Неопределено = УзелЗамены.ТипыЗамещаемых.Найти(ТипЗамещаемого) Тогда
			УзелЗамены.ТипыЗамещаемых.Добавить(ТипЗамещаемого);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИндексЗамены;
КонецФункции

Процедура ЗаменитьВТабчастях(КешПолей, ОписанияТабчастей, Объект, ИмяОсновнойТаблицы, Замены, ТипыЗамещаемых, Исключения)
	Для Каждого Описание Из ОписанияТабчастей Цикл
		Если Исключения.Найти(Описание) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИменаПолей = ИменаПолейСТипами(КешПолей, ИмяОсновнойТаблицы + "." + Описание.Имя, ТипыЗамещаемых, "Ссылка, Ref");
		Для Каждого Табстрока Из Объект[Описание.Имя] Цикл
			ЗаменитьЗначения(Табстрока, ИменаПолей, Замены);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаменитьВПодчиненномРегистре(КешПолей, МенеджерРегистра, Ссылка, ИмяТаблицыРегистра, Замены, ТипыЗамещаемых)
	ИменаПолей = ИменаПолейСТипами(КешПолей, ИмяТаблицыРегистра, ТипыЗамещаемых, "Регистратор, Recorder");
	Набор = НаборЗаписей(МенеджерРегистра, Новый Структура("Регистратор", Ссылка));
	ЗначениеЗаменено = Ложь;
	Для Каждого Запись Из Набор Цикл
		ЗаменитьЗначения(Запись, ИменаПолей, Замены, ЗначениеЗаменено);
	КонецЦикла;
	ЗаписатьДанные(Набор, ЗначениеЗаменено);
КонецПроцедуры

Функция ИменаПолейСТипами(КешПолейТаблиц, ИмяТаблицы, ТипыДанных, ИменаИсключений = "")
	ИменаПолей = Новый Массив;
	
	ТекстЗапроса = СтрЗаменить("ВЫБРАТЬ * ИЗ ТаблицаВыборки КАК Т ГДЕ Ложь", "ТаблицаВыборки", ИмяТаблицы);
	ПоляТаблицы = КешПолейТаблиц.Получить(ИмяТаблицы);
	Если Неопределено = ПоляТаблицы Тогда
		Запрос = Новый Запрос(ТекстЗапроса);
		ПоляТаблицы = Запрос.Выполнить().Колонки;
		КешПолейТаблиц.Вставить(ИмяТаблицы, ПоляТаблицы);
	КонецЕсли;
	
	Исключения = Новый Структура(ИменаИсключений);
	Для Каждого Поле Из ПоляТаблицы Цикл
		Если Исключения.Свойство(Поле.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТипДанных Из ТипыДанных Цикл
			Если Поле.ТипЗначения.СодержитТип(ТипДанных) И Неопределено = ИменаПолей.Найти(Поле.Имя) Тогда
				ИменаПолей.Добавить(Поле.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИменаПолей;
КонецФункции

Процедура ЗаменитьЗначения(Данные, ИменаПолей, Замены, Заменено = Ложь)
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		НовоеЗначение = НовоеЗначение(Данные[ИмяПоля], Замены);
		Если НовоеЗначение <> Данные[ИмяПоля] Тогда;
			Заменено = Истина;
			Данные[ИмяПоля] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция НовоеЗначение(СтароеЗначение, Замены)
	Для Каждого Замена Из Замены Цикл
		Если СтароеЗначение = Замена.Замещаемое Тогда
			Возврат Замена.Заменитель;
		КонецЕсли;
	КонецЦикла;
	Возврат СтароеЗначение;
КонецФункции

Процедура ЗаписатьДанные(Данные, Принудительно = Ложь)
	Если Данные.Модифицированность() Или Принудительно Тогда
		Данные.ОбменДанными.Загрузка = Истина;
		Данные.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ОтборыРегистраСведений(МетаданныеРегистра, Запись)
	Отборы = Новый Структура;
	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Отборы.Вставить("Период", Запись.Период);
	КонецЕсли;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Отборы.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
	КонецЦикла;
	Возврат Отборы;
КонецФункции

Функция НаборЗаписей(МенеджерРегистра, Отборы)
	Набор = МенеджерРегистра.СоздатьНаборЗаписей();
	Для Каждого Отбор Из Отборы Цикл
		Набор.Отбор[Отбор.Ключ].Установить(Отбор.Значение);
	КонецЦикла;
	Набор.Прочитать();
	Возврат Набор;
КонецФункции

Функция ЭтоСсылочныйОбъектМетаданных(ОбъектМетаданных)
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных)
	ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных)
	ИЛИ Метаданные.Перечисления.Содержит(ОбъектМетаданных)
	ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
	ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
	ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
	ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
	ИЛИ Метаданные.Задачи.Содержит(ОбъектМетаданных)
	ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных);
КонецФункции

#КонецОбласти

#Область ЗаписьРегистраНакопленияСМС_ОстаткиПартий

Процедура СМС_ПриЗаписиРегистраНакопления_Инагро_Остатки_ДляПартийПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	
	Если Не ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Регистратор.Дата, "СМС_ИспользоватьМеханизмУчетаОстатковКультурПоПартиям", Ложь) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПроводок = ПодготовитьТаблицуПроводок(Источник, Регистратор);
	ВыполнитьЗаписьНабораЗаписей_СМС_ОстаткиПартий(ТаблицаПроводок, Регистратор, Замещение);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПодготовитьТаблицуПроводок(ИсходныйНаборЗаписей, Регистратор);

	ТаблицаПроводок = ИсходныйНаборЗаписей.Выгрузить();	
	ТипПартеобразующегоДокумента = ОпределитьГенераторПартии(Регистратор);
	
	ИнициализироватьДанныеПоНаборуЗаписей(Регистратор, ТаблицаПроводок, ТипПартеобразующегоДокумента);
	
	Возврат ТаблицаПроводок;
	
КонецФункции	

Процедура ИнициализироватьДанныеПоНаборуЗаписей(ДокументСсылка, ТаблицаПроводок, ТипПартеобразующегоДокумента);

	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	Если ТаблицаПроводок.Количество() Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТипПартеобразующегоДокумента", ТипПартеобразующегоДокумента);
		Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ИнициализироватьКлючиАналитикиКультуры(Запрос, ТаблицаПроводок);
		ТаблицаПроводок = ДополнитьДанныеТаблицыПартиями(Запрос, ЗначениеЗаполнено(ТипПартеобразующегоДокумента));
		
		
	Иначе       
		ТаблицаПроводок = РегистрыНакопления.СМС_ОстаткиПартий.СоздатьНаборЗаписей().Выгрузить();	
	КонецЕсли;	
	
КонецПроцедуры	
	
Процедура ИнициализироватьКлючиАналитикиКультуры(Запрос, ТаблицаПроводок)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаКультурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;      
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	Таблица.Договор КАК Договор,
	               |	Таблица.Владелец КАК Контрагент,
	               |	Таблица.Склад КАК Склад,
	               |	Таблица.Урожай КАК Урожай,
	               |	Таблица.ВидХранения КАК ВидХранения,
	               |	Таблица.ВидФасовки КАК ВидФасовки,
	               |	ЗНАЧЕНИЕ(Справочник.ИНАГРО_МестаХранения.ПустаяСсылка) КАК МестоХранения,
	               |	Таблица.Количество КАК Количество,
	               |	Таблица.ЗачетныйВес КАК ЗачетныйВес,
				   |	Таблица.Вес КАК Вес,
				   |	Таблица.УбыльВесаПриСушке КАК УбыльВесаПриСушке,
	               |	Таблица.УбыльВесаПоЗачистке КАК УбыльВесаПоЗачистке,
	               |	Таблица.ЗачетныйВесДляКонтроля КАК ЗачетныйВесДляКонтроля,
	               |	Таблица.ВидДВижения КАК ВидДВижения,
	               |	Таблица.КодОперации КАК КодОперации,
	               |	Таблица.Период КАК Период,
				   |	Таблица.Организация КАК Организация
	               |ПОМЕСТИТЬ втТаб
	               |ИЗ
	               |	&ТаблицаДвиженийИсточник КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втТаб.Номенклатура,
	               |	втТаб.Договор,
	               |	втТаб.Контрагент,
	               |	втТаб.Контрагент КАК Контрагент,
	               |	втТаб.Склад,
	               |	втТаб.Урожай,
	               |	втТаб.ВидХранения,
	               |	втТаб.ВидФасовки,
	               |	втТаб.МестоХранения
	               |ИЗ
	               |	втТаб КАК втТаб
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СМС_АналитикаУчетаКультуры КАК Аналитика
	               |		ПО (Аналитика.Номенклатура = втТаб.Номенклатура)
	               |			И (Аналитика.Договор = втТаб.Договор)
	               |			И (Аналитика.Контрагент = втТаб.Контрагент)
	               |			И (Аналитика.Склад = втТаб.Склад)
	               |			И (Аналитика.Урожай = втТаб.Урожай)
	               |			И (Аналитика.ВидХранения = втТаб.ВидХранения)
	               |			И (Аналитика.ВидФасовки = втТаб.ВидФасовки)
	               |			И (Аналитика.МестоХранения = втТаб.МестоХранения)
	               |ГДЕ
	               |	Аналитика.Номенклатура ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ТаблицаДвиженийИсточник", ТаблицаПроводок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.СМС_АналитикаУчетаКультуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;
			
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция ДополнитьДанныеТаблицыПартиями(Запрос, ЭтоПартеобразующийДокумент)
	
	Если ЭтоПартеобразующийДокумент Тогда
		
		ТекстРасчетРесурсов = "
		|	Выразить(ИсходныйНабор.ЗачетныйВес * 1 Как Число(12,0)) КАК ЗачетныйВес,
		|	Выразить(ИсходныйНабор.Вес * 1 Как Число(12,0)) КАК Вес,
		|	Выразить(ИсходныйНабор.Количество * 1 Как Число(12,0)) КАК Количество,
		|	Выразить(ИсходныйНабор.УбыльВесаПриСушке * 1 Как Число(12,0)) КАК УбыльВесаПриСушке,
		|	Выразить(ИсходныйНабор.УбыльВесаПоЗачистке * 1 Как Число(12,0)) КАК УбыльВесаПоЗачистке,
		|	Выразить(ИсходныйНабор.ЗачетныйВесДляКонтроля * 1 Как Число(12,0)) КАК ЗачетныйВесДляКонтроля,";
		
	Иначе	
		
		ТекстРасчетРесурсов = "
		|	ИсходныйНабор.ЗачетныйВес * 1 КАК ЗачетныйВес,
		|	ИсходныйНабор.Вес * 1 КАК Вес,
		|	ИсходныйНабор.Количество * 1 КАК Количество,
		|	ИсходныйНабор.УбыльВесаПриСушке * 1 КАК УбыльВесаПриСушке,
		|	ИсходныйНабор.УбыльВесаПоЗачистке * 1 КАК УбыльВесаПоЗачистке,
		|	ИсходныйНабор.ЗачетныйВесДляКонтроля * 1 КАК ЗачетныйВесДляКонтроля,";
		
		
	КонецЕсли;	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходныйНабор.АналитикаУчетаКультуры,
	               |	ИсходныйНабор.Номенклатура,
	               |	ИсходныйНабор.Организация,
	               |	ИсходныйНабор.Договор,
	               |	ИсходныйНабор.Контрагент,
	               |	ИсходныйНабор.Склад,
	               |	ИсходныйНабор.Урожай,
	               |	ИсходныйНабор.ВидХранения,
	               |	ИсходныйНабор.ВидФасовки,
	               |	ИсходныйНабор.МестоХранения," + ТекстРасчетРесурсов + "   
				   |	ИсходныйНабор.ВидДВижения,
	               |	ИсходныйНабор.КодОперации,
	               |	ИсходныйНабор.Период
	               |	,"""" КАК Партия
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Аналитика.КлючАналитики КАК АналитикаУчетаКультуры,
	               |		втТаб.Номенклатура КАК Номенклатура,
	               |		втТаб.Организация КАК Организация,
	               |		втТаб.Договор КАК Договор,
	               |		втТаб.Контрагент КАК Контрагент,
	               |		втТаб.Склад КАК Склад,
	               |		втТаб.Урожай КАК Урожай,
	               |		втТаб.ВидХранения КАК ВидХранения,
	               |		втТаб.ВидФасовки КАК ВидФасовки,
	               |		втТаб.МестоХранения КАК МестоХранения,
				   |		СУММА(втТаб.ЗачетныйВес) КАК ЗачетныйВес,
				   |		СУММА(втТаб.Вес) КАК Вес,
	               |		СУММА(втТаб.Количество) КАК Количество,
	               |		СУММА(втТаб.УбыльВесаПриСушке) КАК УбыльВесаПриСушке,
	               |		СУММА(втТаб.УбыльВесаПоЗачистке) КАК УбыльВесаПоЗачистке,
	               |		СУММА(втТаб.ЗачетныйВесДляКонтроля) КАК ЗачетныйВесДляКонтроля,
	               |		МИНИМУМ(&Регистратор) КАК Ссылка,
	               |		втТаб.ВидДВижения КАК ВидДВижения,
	               |		втТаб.КодОперации КАК КодОперации,
	               |		втТаб.Период КАК Период
	               |	ИЗ
	               |		втТаб КАК втТаб
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СМС_АналитикаУчетаКультуры КАК Аналитика
	               |			ПО (Аналитика.Номенклатура = втТаб.Номенклатура)
	               |				И (Аналитика.Договор = втТаб.Договор)
	               |				И (Аналитика.Контрагент = втТаб.Контрагент)
	               |				И (Аналитика.Склад = втТаб.Склад)
	               |				И (Аналитика.Урожай = втТаб.Урожай)
	               |				И (Аналитика.ВидХранения = втТаб.ВидХранения)
	               |				И (Аналитика.ВидФасовки = втТаб.ВидФасовки)
	               |				И (Аналитика.МестоХранения = втТаб.МестоХранения)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		втТаб.Номенклатура,
	               |		втТаб.Организация,
	               |		втТаб.Договор,
	               |		втТаб.Контрагент,
	               |		втТаб.Склад,
	               |		втТаб.Урожай,
	               |		втТаб.ВидХранения,
	               |		втТаб.ВидФасовки,
	               |		втТаб.МестоХранения,
	               |		втТаб.ВидДВижения,
	               |		втТаб.КодОперации,
	               |		втТаб.Период,
	               |		Аналитика.КлючАналитики,
	               |		втТаб.Контрагент) КАК ИсходныйНабор";

	
	ТипПартеобразующегоДокумента = Запрос.Параметры.ТипПартеобразующегоДокумента;  	
	Если ЗначениеЗаполнено(ТипПартеобразующегоДокумента) Тогда
	
		Если ТипПартеобразующегоДокумента = "ИНАГРО_РеестрТТНВвоз" ИЛИ ТипПартеобразующегоДокумента = "ИНАГРО_РеестрТТНЖДВвоз" Тогда
			
			ТекстОбщийФизическийВес = ?(ТипПартеобразующегоДокумента = "ИНАГРО_РеестрТТНВвоз", "ОбщийФизическийВес", "ФизическийВес");
			ТекстФизическийВес = ?(ТипПартеобразующегоДокумента = "ИНАГРО_РеестрТТНВвоз", "Вес", "ФизическийВес");
						  
						  
			ТекстДополнения = "
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	(ВЫБРАТЬ
			|		ИНАГРО_РеестрТТН.ТТН КАК ТТН,
			|		ИНАГРО_РеестрТТН." + ТекстФизическийВес + " / ИНАГРО_РеестрТТН.Ссылка." + ТекстОбщийФизическийВес + " КАК КоэффициентРаспределения,
			|		ИНАГРО_РеестрТТН.Ссылка КАК Ссылка,
			|		ИНАГРО_РеестрТТН.Ссылка." + ТекстОбщийФизическийВес + " Как ИтоговыйВес
			|	ИЗ
			|		Документ." + ТипПартеобразующегоДокумента + ".СписокТТН КАК ИНАГРО_РеестрТТН
			|	ГДЕ
			|		ИНАГРО_РеестрТТН.Ссылка = &Регистратор) КАК ТабРаспределения
			|   ПО
			|       ИсходныйНабор.Ссылка = ТабРаспределения.Ссылка
			|
			|";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """"" КАК Партия", "ТабРаспределения.ТТН КАК Партия, ТабРаспределения.КоэффициентРаспределения");	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "* 1", "* ТабРаспределения.КоэффициентРаспределения");		
			Запрос.Текст = Запрос.Текст + ТекстДополнения;
			
			
		//движения сделали ТТН
		Иначе	                                                                                    			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ как Партия", "&Регистратор КАК Партия");			
		КонецЕсли;
		
	//это не чистый прииход, а расходно-приходные движения так что ищем остатки партий и протягиваем	
	Иначе	
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ","""" КАК Партия", "Поместить втТабСАналитикойУчетаКультуры");	
		
		ТекстДополнения = ";
		                  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
		                  |	СМС_ОстаткиПартийОстатки.АналитикаУчетаКультуры,
		                  |	СМС_ОстаткиПартийОстатки.Организация,
		                  |	СМС_ОстаткиПартийОстатки.Партия,
						  |	СМС_ОстаткиПартийОстатки.ЗачетныйВесОстаток,
						  |	СМС_ОстаткиПартийОстатки.ВесОстаток,
		                  |	СМС_ОстаткиПартийОстатки.КоличествоОстаток,
		                  |	СМС_ОстаткиПартийОстатки.УбыльВесаПриСушкеОстаток,
		                  |	СМС_ОстаткиПартийОстатки.УбыльВесаПоЗачисткеОстаток,
		                  |	СМС_ОстаткиПартийОстатки.ЗачетныйВесДляКонтроляОстаток
		                  |ПОМЕСТИТЬ втОстаткиПартий
		                  |ИЗ
		                  |	РегистрНакопления.СМС_ОстаткиПартий.Остатки(
		                  |			&Граница,
		                  |			АналитикаУчетаКультуры В
		                  |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		                  |					тФильтрАналитики.АналитикаУчетаКультуры
		                  |				ИЗ
		                  |					втТабСАналитикойУчетаКультуры КАК тФильтрАналитики)) КАК СМС_ОстаткиПартийОстатки
						  |ДЛЯ ИЗМЕНЕНИЯ
						  |	РегистрНакопления.СМС_ОстаткиПартий.Остатки
						  |
						  |;
						  |
		                  |////////////////////////////////////////////////////////////////////////////////
		                  |ВЫБРАТЬ
		                  |	ТабСАналитикойУчетаКультуры.АналитикаУчетаКультуры,
						  |	ТабСАналитикойУчетаКультуры.Организация,
						  |	ТабСАналитикойУчетаКультуры.ЗачетныйВес Как ЗачетныйВесОприходования,
						  |	ТабСАналитикойУчетаКультуры.Вес Как ВесОприходования,
		                  |	ТабСАналитикойУчетаКультуры.Количество Как КоличествоОприходования,
		                  |	ТабСАналитикойУчетаКультуры.УбыльВесаПриСушке Как УбыльВесаПриСушкеОприходования,
		                  |	ТабСАналитикойУчетаКультуры.УбыльВесаПоЗачистке Как УбыльВесаПоЗачисткеОприходования,
		                  |	ТабСАналитикойУчетаКультуры.ЗачетныйВесДляКонтроля Как ЗачетныйВесДляКонтроляОприходования,
		                  |	ТабСАналитикойУчетаКультуры.ВидДВижения,
		                  |	ТабСАналитикойУчетаКультуры.КодОперации,
		                  |	ТабСАналитикойУчетаКультуры.Период
		                  |ПОМЕСТИТЬ втОборотыПоступления
						  |ИЗ
		                  |	втТабСАналитикойУчетаКультуры КАК ТабСАналитикойУчетаКультуры
		                  |ГДЕ
		                  |	ТабСАналитикойУчетаКультуры.ВидДВижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		                  |
						  |;
		                  |////////////////////////////////////////////////////////////////////////////////
		                  |ВЫБРАТЬ
		                  |	ТабСАналитикойУчетаКультуры.АналитикаУчетаКультуры,
						  |	ТабСАналитикойУчетаКультуры.Организация,
						  |	ТабСАналитикойУчетаКультуры.ЗачетныйВес Как ЗачетныйВесСписания,
						  |	ТабСАналитикойУчетаКультуры.Вес Как ВесСписания,
		                  |	ТабСАналитикойУчетаКультуры.Количество Как КоличествоСписания,
						  |	ТабСАналитикойУчетаКультуры.УбыльВесаПриСушке Как УбыльВесаПриСушкеСписания,
		                  |	ТабСАналитикойУчетаКультуры.УбыльВесаПоЗачистке Как УбыльВесаПоЗачисткеСписания,
		                  |	ТабСАналитикойУчетаКультуры.ЗачетныйВесДляКонтроля Как ЗачетныйВесДляКонтроляСписания,
		                  |	ТабСАналитикойУчетаКультуры.ВидДВижения,
		                  |	ТабСАналитикойУчетаКультуры.КодОперации,
		                  |	ТабСАналитикойУчетаКультуры.Период,
		                  |	тОстаткиПартий.Партия,
						  |	ЕстьNULL(тОстаткиПартий.ЗачетныйВесОстаток,0) Как ЗачетныйВесОстаток,
						  |	ЕстьNULL(тОстаткиПартий.ВесОстаток,0) Как ВесОстаток,
		                  |	ЕстьNULL(тОстаткиПартий.КоличествоОстаток,0) Как КоличествоОстаток,
		                  |	ЕстьNULL(тОстаткиПартий.УбыльВесаПриСушкеОстаток,0) Как УбыльВесаПриСушкеОстаток,
		                  |	ЕстьNULL(тОстаткиПартий.УбыльВесаПоЗачисткеОстаток,0) Как УбыльВесаПоЗачисткеОстаток,
		                  |	ЕстьNULL(тОстаткиПартий.ЗачетныйВесДляКонтроляОстаток,0) Как ЗачетныйВесДляКонтроляОстаток,
						  |	ВЫБОР
						  |		КОГДА ЕСТЬNULL(тОстаткиПартий.ВесОстаток, 0) = 0
						  |			ТОГДА 0
						  |		ИНАЧЕ ЕСТЬNULL(тОстаткиПартий.ЗачетныйВесОстаток, 0) / ЕСТЬNULL(тОстаткиПартий.ВесОстаток, 0)
						  |	КОНЕЦ КАК СходимостьВесов
						  |ИЗ
		                  |	втТабСАналитикойУчетаКультуры КАК ТабСАналитикойУчетаКультуры
		                  |		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПартий КАК тОстаткиПартий
		                  |		ПО ТабСАналитикойУчетаКультуры.АналитикаУчетаКультуры = тОстаткиПартий.АналитикаУчетаКультуры
		                  |			И ТабСАналитикойУчетаКультуры.Организация = тОстаткиПартий.Организация
		                  |ГДЕ
		                  |	ТабСАналитикойУчетаКультуры.ВидДВижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
						  | УПОРЯДОЧИТЬ ПО
						  |	СходимостьВесов " +   
						  ?(ТипЗНЧ(Запрос.Параметры.Регистратор) = Тип("ДокументСсылка.ИНАГРО_Форма34Сводная"), "", "УБЫВ");
		
		
		Запрос.УстановитьПараметр("Граница", Новый Граница(Запрос.Параметры.Регистратор.МоментВремени(), ВидГраницы.Исключая));
		Запрос.Текст = Запрос.Текст + ТекстДополнения;

		ТаблицаОстатковОборотовСписания = Запрос.Выполнить().Выгрузить();
		ТаблицаОборотовПоступления = Запрос.МенеджерВременныхТаблиц.Таблицы[3].ПОлучитьДанные().Выгрузить();
		ТаблицаОборотовПоступления.Колонки.Добавить("Партия", ТаблицаОстатковОборотовСписания.Колонки.Партия.ТипЗначения);
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		
		
		Возврат РаспределитьДвиженияПоПартиямВТаблицеFIFO(ТаблицаОстатковОборотовСписания,ТаблицаОборотовПоступления);
			
	КонецЕсли;
		
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Процедура ВыполнитьЗаписьНабораЗаписей_СМС_ОстаткиПартий(ТаблицаПроводок, Регистратор, Замещение)
	
	НаборЗАписей = РегистрыНакопления.СМС_ОстаткиПартий.СоздатьНаборЗаписей();
	НаборЗАписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗАписей.Прочитать();
	НаборЗАписей.Загрузить(ТаблицаПроводок);
	НаборЗАписей.Записать(Замещение);
	
КонецПроцедуры	

Функция РаспределитьДвиженияПоПартиямВТаблицеFIFO(ТаблицаОстатковОборотовСписания, ТаблицаОборотовПоступления)
	
	ТаблицаИтоговСписания = ПодготовитьТаблицуИтогов(ТаблицаОстатковОборотовСписания, "Списания");
	ТаблицаИтоговПоступления = ПодготовитьТаблицуИтогов(ТаблицаОборотовПоступления, "Оприходования");
	ТаблицаОстатковОборотовКопия = ТаблицаОстатковОборотовСписания.Скопировать();
	ТаблицаОстатковОборотовКопия.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковОборотовСписания Цикл
		
		ЕстьХотябыОдноРаспределение = Ложь;
		ТекСтрокаИтогов = ТаблицаИтоговСписания.Найти(СтрокаТаблицы.АналитикаУчетаКультуры, "АналитикаУчетаКультуры");
		Для Каждого КолонкаТабИтогов Из ТаблицаИтоговСписания.Колонки Цикл
				
			ИмяТекКолонки = КолонкаТабИтогов.Имя;
			Если Не ИмяТекКолонки = "АналитикаУчетаКультуры" И 
				// Не ТекСтрокаИтогов[ИмяТекКолонки] = 0 И
				 Не Найти(ИмяТекКолонки, "Списания") > 0 Тогда 
				 				 
				СтрокаТаблицы[ИмяТекКолонки] = Мин(СтрокаТаблицы[ИмяТекКолонки+"Остаток"], ТекСтрокаИтогов[ИмяТекКолонки]);
				
				Если ИмяТекКолонки = "ЗачетныйВес" Тогда
					ЗачетныйВесСписания = СтрокаТаблицы[ИмяТекКолонки];
				КонецЕсли;	
				
				Если ИмяТекКолонки = "Вес" Тогда
					СтрокаТаблицы[ИмяТекКолонки] = Мин(СтрокаТаблицы[ИмяТекКолонки], ?(ЗначениеЗаполнено(ЗачетныйВесСписания),ЗачетныйВесСписания, СтрокаТаблицы[ИмяТекКолонки]));
				КонецЕсли;  
				
				ТекСтрокаИтогов[ИмяТекКолонки] = ТекСтрокаИтогов[ИмяТекКолонки] - СтрокаТаблицы[ИмяТекКолонки];
				Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяТекКолонки]) Тогда
					ЕстьХотябыОдноРаспределение = Истина;
				КонецЕсли; 
									 
			КонецЕсли;	
				
		КонецЦикла;	
		
		Если ЕстьХотябыОдноРаспределение Тогда
			
			НовСтрока = ТаблицаОстатковОборотовКопия.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаблицы);
			
		КонецЕсли;	
			
	КонецЦикла;
	
	
	ТаблицаДвижений = ТаблицаОстатковОборотовКопия.Скопировать();
	ТаблицаКоэффициентов = ЗаполнитьГлобальныйКоэффициентПеретока(ТаблицаИтоговСписания, ТаблицаИтоговПоступления);
	
	ТаблицаОстатковОборотовКопия = ТаблицаОборотовПоступления.Скопировать();
	ТаблицаОстатковОборотовКопия.Очистить();
	  	
	ТаблицаСписанийПоПартиям = ТаблицаДвижений.Скопировать(); 
	
	Для Каждого Строка из ТаблицаОборотовПоступления Цикл
		
		ТаблицаСоответствий = ТаблицаКоэффициентов.Скопировать(Новый Структура("Кор_АналитикаУчетаКультуры", Строка.АналитикаУчетаКультуры));
		ТаблицаСоответствий.Сортировать("ВесСоответствия Убыв");	
		Для Каждого СтрокаТаблицыСоответствий Из ТаблицаСоответствий Цикл
			
			ТаблицаДвиженийСписанийПоПартиям =  ТаблицаСписанийПоПартиям.НайтиСтроки(Новый Структура("АналитикаУчетаКультуры", СтрокаТаблицыСоответствий.АналитикаУчетаКультуры)); 
			Для Каждого СтрокаТаблицыДвиженийСписанийПоПартиям Из ТаблицаДвиженийСписанийПоПартиям Цикл
				
				Если СтрокаПолностьюВыработана(СтрокаТаблицыДвиженийСписанийПоПартиям) Тогда
					Продолжить;
				КонецЕсли; 
				
				Если Не СтрокаПолностьюВыработана(Строка) Тогда                         
				
					НовСтрока = ТаблицаОстатковОборотовКопия.Добавить(); 
					ЗаполнитьЗначенияСвойств(НовСтрока, Строка, ,РегистрыНакопления.СМС_ОстаткиПартий.ВернутьСтрокуРесурсов());
					НовСтрока.Партия = СтрокаТаблицыДвиженийСписанийПоПартиям.Партия;
					Для Каждого ТекРесурс Из Метаданные.РегистрыНакопления.СМС_ОстаткиПартий.Ресурсы Цикл
						
						Коэф = СтрокаТаблицыСоответствий[ТекРесурс.Имя];
						
						Если СтрокаТаблицыСоответствий[ТекРесурс.Имя] = -1 Тогда
							НовСтрока[ТекРесурс.Имя] = Строка[ТекРесурс.Имя];	      						
						Иначе
							
							//Если коэф больше 1, значит в результате получаем больше списанного. 
							//Значит расчетное значение нет необходимости еще увеличивать, умножая на этот коэффициент
							НовСтрока[ТекРесурс.Имя] = Мин(СтрокаТаблицыДвиженийСписанийПоПартиям[ТекРесурс.Имя], Строка[ТекРесурс.Имя]) * ?(Коэф > 1, 1, Коэф);
							Если ТекРесурс.Имя = "Количество" Тогда
								
								//количество не должно быть дробным
								Если Не НовСтрока[ТекРесурс.Имя] = Цел(НовСтрока[ТекРесурс.Имя]) Тогда								
									НовСтрока[ТекРесурс.Имя] = Окр(НовСтрока[ТекРесурс.Имя],0);
								КонецЕсли;		
								
								//проверим ситуацию - когда количество зафасованного
								//товара не зависит от количества списанного
								//например, списали 1 мешок на тонну, а оприходовали 2 мешка на 600 и 400 кг
								//в результате предыдущего кода распределения система насчитала количнство = 0,
								Если НовСтрока[ТекРесурс.Имя] = 0 Тогда
								
									СтрокаИтоговОприходования = ТаблицаИтоговПоступления.Найти(НовСтрока.АналитикаУчетаКультуры,"АналитикаУчетаКультуры");	
									СтрокаИтоговОприходованияСРаспределением = ТаблицаОстатковОборотовКопия.Найти(НовСтрока.АналитикаУчетаКультуры,"АналитикаУчетаКультуры");	
									
									Если СтрокаИтоговОприходования[ТекРесурс.Имя] > СтрокаИтоговОприходованияСРаспределением[ТекРесурс.Имя] Тогда
										НовСтрока[ТекРесурс.Имя] = 1;
									КонецЕсли;	
									
								КонецЕсли;		
									
							КонецЕсли;	
								
							СтрокаТаблицыДвиженийСписанийПоПартиям[ТекРесурс.Имя] = СтрокаТаблицыДвиженийСписанийПоПартиям[ТекРесурс.Имя] - Мин(НовСтрока[ТекРесурс.Имя], СтрокаТаблицыДвиженийСписанийПоПартиям[ТекРесурс.Имя]);	
							
						КонецЕсли;	
						Строка[ТекРесурс.Имя] = Строка[ТекРесурс.Имя] - НовСтрока[ТекРесурс.Имя];	
						        					
					КонецЦИкла;
					
				Иначе	
					
					
					Прервать;
				КонецЕсли;	
					
			КонецЦИкла;
			
		КонецЦикла;	
			
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаОстатковОборотовКопия Цикл 
		ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(), Строка);
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция ПодготовитьТаблицуИтогов(Таблица, Суфикс)
	
	ТаблицаИтогов = Таблица.Скопировать();
	ТаблицаИтогов.Свернуть("АналитикаУчетаКультуры, ЗачетныйВес" + Суфикс +", Количество"+Суфикс + ", Вес" + Суфикс + ", УбыльВесаПриСушке" + Суфикс +", УбыльВесаПоЗачистке" + Суфикс + ", ЗачетныйВесДляКонтроля" + Суфикс);
	
	Для Каждого КолонкаТалицы Из ТаблицаИтогов.Колонки Цикл
		
		Если Найти(КолонкаТалицы.Имя, Суфикс) > 0 Тогда
			
			ИмяНовойКолонки = СтрЗаменить(КолонкаТалицы.Имя, Суфикс,"");
			ТаблицаИтогов.Колонки.Добавить(ИмяНовойКолонки, КолонкаТалицы.ТипЗначения);	  		
			ТаблицаИтогов.ЗагрузитьКолонку(ТаблицаИтогов.ВыгрузитьКолонку(КолонкаТалицы.Имя), ИмяНовойКолонки);
			Таблица.Колонки[КолонкаТалицы.Имя].Имя = ИмяНовойКолонки;
			
		КонецЕсли
		
	КонецЦикла;
	
	Возврат ТаблицаИтогов;
	
КонецФункции	

Функция ЗаполнитьГлобальныйКоэффициентПеретока(ТаблицаИтоговСписания, ТаблицаИтоговПоступления)
	
	ТаблицаКоэффициентов = ТаблицаИтоговСписания.Скопировать();
	ТаблицаКоэффициентов.Очистить();
	ПереченьКолонок = "";
	ВсегоКолонок = ТаблицаКоэффициентов.Колонки.Количество();
	Для Каждого Колонка Из ТаблицаКоэффициентов.Колонки Цикл     		
		
		Если Не Найти(Колонка.Имя, "Списания") > 0 Тогда		
			ПереченьКолонок = ПереченьКолонок + Колонка.Имя + ?(ТаблицаКоэффициентов.Колонки.Индекс(Колонка) + 1 = ВсегоКолонок, "", ",");			
		КонецЕсли;	
			
	КонецЦикла;     	
	
	ТаблицаКоэффициентов = ТаблицаИтоговСписания.СкопироватьКолонки(ПереченьКолонок);
	
	ТаблицаКоэффициентов.Колонки.Добавить("Кор_АналитикаУчетаКультуры");
	ТаблицаКоэффициентов.Колонки.Добавить("ВесСоответствия");
	
	Для Каждого Строка Из ТаблицаИтоговСписания Цикл
		
		Для Каждого Строка2 Из ТаблицаИтоговПоступления Цикл
			
			//СуффкисСтруктуры = Строка(ТаблицаИтоговСписания.Индекс(Строка)) + Строка(ТаблицаИтоговПоступления.Индекс(Строка2));
			
			Для Каждого КолонкаТаб Из ТаблицаИтоговПоступления.Колонки Цикл
				
				ИмяКолонки = КолонкаТаб.Имя;
				Если ИмяКолонки = "АналитикаУчетаКультуры" Тогда 	
					
					НоваяСтрока = ТаблицаКоэффициентов.Добавить();
					НоваяСтрока[ИмяКолонки] =  Строка[ИмяКолонки];
					НоваяСтрока["Кор_" + ИмяКолонки] =  Строка2[ИмяКолонки];   					
					НоваяСтрока.ВесСоответствия = РассчитатьВесСоответствияПоВесуСостовляющихАналитик(НоваяСтрока[ИмяКолонки], НоваяСтрока["Кор_"+ИмяКолонки]);
					
				ИначеЕсли Найти(ИмяКолонки,"Оприходования") > 0 Тогда
					
					ИтСписания = ТаблицаИтоговСписания.Итог(СтрЗаменить(ИмяКолонки, "Оприходования", "Списания"));
					Если ИтСписания = 0 И Не ТаблицаИтоговПоступления.Итог(ИмяКолонки) = 0 Тогда
						Коэф = -1;	
					Иначе
						Коэф = ?(ИтСписания = 0, 0, ТаблицаИтоговПоступления.Итог(ИмяКолонки)/ИтСписания);						
					КонецЕсли;	
					
					НоваяСтрока[СтрЗаменить(ИмяКолонки,"Оприходования","")] = Коэф;		
					
				КонецЕсли;
				
			КонецЦикла;	
		
		КонецЦикла;
		    		
	КонецЦикла;	
		
	Возврат ТаблицаКоэффициентов;	
	
КонецФункции	

Функция ОпределитьГенераторПартии(Регистратор)
	
	ТипРегистратора = ТипЗНЧ(Регистратор);
	СписокТиповРегистраторовПартии = Новый СписокЗначений;
	СписокТиповРегистраторовПартии.Добавить(Тип("ДокументСсылка.ИНАГРО_ТТНВВоз"), "ИНАГРО_ТТНВВоз");
	СписокТиповРегистраторовПартии.Добавить(Тип("ДокументСсылка.ИНАГРО_ТТНВвозЖД"), "ИНАГРО_ТТНВвозЖД");
	СписокТиповРегистраторовПартии.Добавить(Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз"), "ИНАГРО_РеестрТТНВвоз");
	СписокТиповРегистраторовПартии.Добавить(Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвозЖД"), "ИНАГРО_РеестрТТНВвозЖД");	
	
	ЭлементСписка = СписокТиповРегистраторовПартии.НайтиПоЗначению(ТипРегистратора);                                	
	Возврат ?(ЭлементСписка = Неопределено, "", ЭлементСписка.Представление); 
	
КонецФункции

Функция РассчитатьВесСоответствияПоВесуСостовляющихАналитик(АналитикаСписания, АналитикаПоступления)
	
	МассивВесов = Новый Массив;
	МассивВесов.Добавить(15);
	МассивВесов.Добавить(3);
	МассивВесов.Добавить(3);
	МассивВесов.Добавить(2);
	МассивВесов.Добавить(2);
	МассивВесов.Добавить(1);
	МассивВесов.Добавить(1);
	МассивВесов.Добавить(2);
	
	Вес = 0;
	РеквизитыСМС_КлючиАналитикиУчетаКультуры = Метаданные.Справочники.СМС_КлючиАналитикиУчетаКультуры.Реквизиты; 
	Для Каждого Реквизит Из Метаданные.Справочники.СМС_КлючиАналитикиУчетаКультуры.Реквизиты Цикл
		
		Если АналитикаСписания[Реквизит.Имя] = АналитикаПоступления[Реквизит.Имя] Тогда 
			Вес = Вес + МассивВесов[РеквизитыСМС_КлючиАналитикиУчетаКультуры.Индекс(Реквизит)];
		КонецЕсли	
	
	КонецЦИкла;
	
	Возврат Вес;
	
КонецФункции	

Функция СтрокаПолностьюВыработана(Строка, ПоРесурсамРегистраОстатки = Ложь) 
	
	СуммаРесурсов = 0;                     	
	Для Каждого ТекРесурс Из Метаданные.РегистрыНакопления[?(ПоРесурсамРегистраОстатки, "ИНАГРО_Остатки", "СМС_ОстаткиПартий")].Ресурсы Цикл
		СуммаРесурсов = СуммаРесурсов + Строка[ТекРесурс.Имя];		
	КонецЦикла;	
	
	Возврат СуммаРесурсов = 0;
						
КонецФункции						

#КонецОбласти

#Область ЗаписьРегистраСведений_СМС_СМС_ПодробнаяИнформацияПоВидамФасовки

Процедура СМС_ПриПроведенииДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(Источник.Дата, "СМС_ИспользоватьМеханизмУчетаОстатковКультурПоПартиям", Ложь) Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблицаПроводок = ПодготовитьТаблицуПроводокПоВидамВасовки(Источник.Ссылка);
	ВыполнитьЗаписьНабораЗаписей_СМС_ПодробнаяИнформацияПоВидамФасовки(ТаблицаПроводок, Источник.Ссылка);
	
КонецПроцедуры  

Функция ПодготовитьТаблицуПроводокПоВидамВасовки(Регистратор);

	ИдентификаторДокумента = Регистратор.Метаданные().Имя;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Продукция.Ссылка.Дата Как Период,
	|	Продукция.Ссылка.Дата Как ДатаСоздания,
	|	Продукция.Номенклатура,
	|	Продукция.Фасовка Как ВидФасовки,
	|	Продукция.ЛабораторныйАнализ,
	|	Продукция.Количество,
	|	Выбор Когда Продукция.ЗачетныйВес = 0 Тогда
	|		Продукция.ФизическийВес
	|	Иначе
	|		Продукция.ЗачетныйВес 
	|	Конец Как ЗачетныйВес,
	|	Продукция.ФизическийВес Как Вес
	|ИЗ
	|	Документ." + ИдентификаторДокумента + ".Продукция КАК Продукция
	|ГДЕ
	|	Продукция.Ссылка = &Ссылка И 
	|	НЕ Продукция.Фасовка = ЗНАЧЕНИЕ(Справочник.Инагро_ВидыФасовки.ПустаяСсылка) И
	|	НЕ Продукция.ЛабораторныйАнализ = ЗНАЧЕНИЕ(Документ.Инагро_ЛабораторныйАнализ.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции   

Процедура ВыполнитьЗаписьНабораЗаписей_СМС_ПодробнаяИнформацияПоВидамФасовки(ТаблицаПроводок, Регистратор)
	
	НаборЗАписей = РегистрыСведений.СМС_ПодробнаяИнформацияПоВидамФасовки.СоздатьНаборЗаписей();
	НаборЗАписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗАписей.Прочитать();
	НаборЗАписей.Загрузить(ТаблицаПроводок);
	НаборЗАписей.Заполнить();
	Для каждого Запись Из НаборЗАписей Цикл
		Запись.УрожайСырья = Регистратор.Урожай;
	КонецЦикла;
	НаборЗАписей.Записать();
	
КонецПроцедуры

#КонецОбласти
